
asia_hosanna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011988  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016ec  08011b70  08011b70  00021b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801325c  0801325c  00030224  2**0
                  CONTENTS
  4 .ARM          00000000  0801325c  0801325c  00030224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801325c  0801325c  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801325c  0801325c  0002325c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013260  08013260  00023260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08013264  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be0  20000224  08013488  00030224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e04  08013488  00030e04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c8c2  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000487b  00000000  00000000  0004cb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00051390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00052ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020954  00000000  00000000  000543a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022502  00000000  00000000  00074cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9baf  00000000  00000000  000971fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140dad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b10  00000000  00000000  00140e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000224 	.word	0x20000224
 8000204:	00000000 	.word	0x00000000
 8000208:	08011b58 	.word	0x08011b58

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000228 	.word	0x20000228
 8000224:	08011b58 	.word	0x08011b58

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_d2f>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b6c:	bf24      	itt	cs
 8000b6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b76:	d90d      	bls.n	8000b94 <__aeabi_d2f+0x30>
 8000b78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b8c:	bf08      	it	eq
 8000b8e:	f020 0001 	biceq.w	r0, r0, #1
 8000b92:	4770      	bx	lr
 8000b94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b98:	d121      	bne.n	8000bde <__aeabi_d2f+0x7a>
 8000b9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9e:	bfbc      	itt	lt
 8000ba0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	4770      	bxlt	lr
 8000ba6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000baa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bae:	f1c2 0218 	rsb	r2, r2, #24
 8000bb2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bba:	fa20 f002 	lsr.w	r0, r0, r2
 8000bbe:	bf18      	it	ne
 8000bc0:	f040 0001 	orrne.w	r0, r0, #1
 8000bc4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bcc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd0:	ea40 000c 	orr.w	r0, r0, ip
 8000bd4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bdc:	e7cc      	b.n	8000b78 <__aeabi_d2f+0x14>
 8000bde:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be2:	d107      	bne.n	8000bf4 <__aeabi_d2f+0x90>
 8000be4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be8:	bf1e      	ittt	ne
 8000bea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf2:	4770      	bxne	lr
 8000bf4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_frsub>:
 8000c04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	e002      	b.n	8000c10 <__addsf3>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fsub>:
 8000c0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c10 <__addsf3>:
 8000c10:	0042      	lsls	r2, r0, #1
 8000c12:	bf1f      	itttt	ne
 8000c14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c18:	ea92 0f03 	teqne	r2, r3
 8000c1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c24:	d06a      	beq.n	8000cfc <__addsf3+0xec>
 8000c26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2e:	bfc1      	itttt	gt
 8000c30:	18d2      	addgt	r2, r2, r3
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	4048      	eorgt	r0, r1
 8000c36:	4041      	eorgt	r1, r0
 8000c38:	bfb8      	it	lt
 8000c3a:	425b      	neglt	r3, r3
 8000c3c:	2b19      	cmp	r3, #25
 8000c3e:	bf88      	it	hi
 8000c40:	4770      	bxhi	lr
 8000c42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4240      	negne	r0, r0
 8000c52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5e:	bf18      	it	ne
 8000c60:	4249      	negne	r1, r1
 8000c62:	ea92 0f03 	teq	r2, r3
 8000c66:	d03f      	beq.n	8000ce8 <__addsf3+0xd8>
 8000c68:	f1a2 0201 	sub.w	r2, r2, #1
 8000c6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c70:	eb10 000c 	adds.w	r0, r0, ip
 8000c74:	f1c3 0320 	rsb	r3, r3, #32
 8000c78:	fa01 f103 	lsl.w	r1, r1, r3
 8000c7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	d502      	bpl.n	8000c88 <__addsf3+0x78>
 8000c82:	4249      	negs	r1, r1
 8000c84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c8c:	d313      	bcc.n	8000cb6 <__addsf3+0xa6>
 8000c8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c92:	d306      	bcc.n	8000ca2 <__addsf3+0x92>
 8000c94:	0840      	lsrs	r0, r0, #1
 8000c96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c9a:	f102 0201 	add.w	r2, r2, #1
 8000c9e:	2afe      	cmp	r2, #254	; 0xfe
 8000ca0:	d251      	bcs.n	8000d46 <__addsf3+0x136>
 8000ca2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000caa:	bf08      	it	eq
 8000cac:	f020 0001 	biceq.w	r0, r0, #1
 8000cb0:	ea40 0003 	orr.w	r0, r0, r3
 8000cb4:	4770      	bx	lr
 8000cb6:	0049      	lsls	r1, r1, #1
 8000cb8:	eb40 0000 	adc.w	r0, r0, r0
 8000cbc:	3a01      	subs	r2, #1
 8000cbe:	bf28      	it	cs
 8000cc0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc4:	d2ed      	bcs.n	8000ca2 <__addsf3+0x92>
 8000cc6:	fab0 fc80 	clz	ip, r0
 8000cca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cce:	ebb2 020c 	subs.w	r2, r2, ip
 8000cd2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd6:	bfaa      	itet	ge
 8000cd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cdc:	4252      	neglt	r2, r2
 8000cde:	4318      	orrge	r0, r3
 8000ce0:	bfbc      	itt	lt
 8000ce2:	40d0      	lsrlt	r0, r2
 8000ce4:	4318      	orrlt	r0, r3
 8000ce6:	4770      	bx	lr
 8000ce8:	f092 0f00 	teq	r2, #0
 8000cec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cf0:	bf06      	itte	eq
 8000cf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf6:	3201      	addeq	r2, #1
 8000cf8:	3b01      	subne	r3, #1
 8000cfa:	e7b5      	b.n	8000c68 <__addsf3+0x58>
 8000cfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d04:	bf18      	it	ne
 8000d06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0a:	d021      	beq.n	8000d50 <__addsf3+0x140>
 8000d0c:	ea92 0f03 	teq	r2, r3
 8000d10:	d004      	beq.n	8000d1c <__addsf3+0x10c>
 8000d12:	f092 0f00 	teq	r2, #0
 8000d16:	bf08      	it	eq
 8000d18:	4608      	moveq	r0, r1
 8000d1a:	4770      	bx	lr
 8000d1c:	ea90 0f01 	teq	r0, r1
 8000d20:	bf1c      	itt	ne
 8000d22:	2000      	movne	r0, #0
 8000d24:	4770      	bxne	lr
 8000d26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d2a:	d104      	bne.n	8000d36 <__addsf3+0x126>
 8000d2c:	0040      	lsls	r0, r0, #1
 8000d2e:	bf28      	it	cs
 8000d30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d3a:	bf3c      	itt	cc
 8000d3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d40:	4770      	bxcc	lr
 8000d42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4e:	4770      	bx	lr
 8000d50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d54:	bf16      	itet	ne
 8000d56:	4608      	movne	r0, r1
 8000d58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d5c:	4601      	movne	r1, r0
 8000d5e:	0242      	lsls	r2, r0, #9
 8000d60:	bf06      	itte	eq
 8000d62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d66:	ea90 0f01 	teqeq	r0, r1
 8000d6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_ui2f>:
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e004      	b.n	8000d80 <__aeabi_i2f+0x8>
 8000d76:	bf00      	nop

08000d78 <__aeabi_i2f>:
 8000d78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d7c:	bf48      	it	mi
 8000d7e:	4240      	negmi	r0, r0
 8000d80:	ea5f 0c00 	movs.w	ip, r0
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d8c:	4601      	mov	r1, r0
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	e01c      	b.n	8000dce <__aeabi_l2f+0x2a>

08000d94 <__aeabi_ul2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e00a      	b.n	8000db8 <__aeabi_l2f+0x14>
 8000da2:	bf00      	nop

08000da4 <__aeabi_l2f>:
 8000da4:	ea50 0201 	orrs.w	r2, r0, r1
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000db0:	d502      	bpl.n	8000db8 <__aeabi_l2f+0x14>
 8000db2:	4240      	negs	r0, r0
 8000db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db8:	ea5f 0c01 	movs.w	ip, r1
 8000dbc:	bf02      	ittt	eq
 8000dbe:	4684      	moveq	ip, r0
 8000dc0:	4601      	moveq	r1, r0
 8000dc2:	2000      	moveq	r0, #0
 8000dc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc8:	bf08      	it	eq
 8000dca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dd2:	fabc f28c 	clz	r2, ip
 8000dd6:	3a08      	subs	r2, #8
 8000dd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ddc:	db10      	blt.n	8000e00 <__aeabi_l2f+0x5c>
 8000dde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de2:	4463      	add	r3, ip
 8000de4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de8:	f1c2 0220 	rsb	r2, r2, #32
 8000dec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000df0:	fa20 f202 	lsr.w	r2, r0, r2
 8000df4:	eb43 0002 	adc.w	r0, r3, r2
 8000df8:	bf08      	it	eq
 8000dfa:	f020 0001 	biceq.w	r0, r0, #1
 8000dfe:	4770      	bx	lr
 8000e00:	f102 0220 	add.w	r2, r2, #32
 8000e04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e08:	f1c2 0220 	rsb	r2, r2, #32
 8000e0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e10:	fa21 f202 	lsr.w	r2, r1, r2
 8000e14:	eb43 0002 	adc.w	r0, r3, r2
 8000e18:	bf08      	it	eq
 8000e1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fmul>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d06f      	beq.n	8000f18 <__aeabi_fmul+0xf8>
 8000e38:	441a      	add	r2, r3
 8000e3a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3e:	0240      	lsls	r0, r0, #9
 8000e40:	bf18      	it	ne
 8000e42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e46:	d01e      	beq.n	8000e86 <__aeabi_fmul+0x66>
 8000e48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e54:	fba0 3101 	umull	r3, r1, r0, r1
 8000e58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e60:	bf3e      	ittt	cc
 8000e62:	0049      	lslcc	r1, r1, #1
 8000e64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e68:	005b      	lslcc	r3, r3, #1
 8000e6a:	ea40 0001 	orr.w	r0, r0, r1
 8000e6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e72:	2afd      	cmp	r2, #253	; 0xfd
 8000e74:	d81d      	bhi.n	8000eb2 <__aeabi_fmul+0x92>
 8000e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7e:	bf08      	it	eq
 8000e80:	f020 0001 	biceq.w	r0, r0, #1
 8000e84:	4770      	bx	lr
 8000e86:	f090 0f00 	teq	r0, #0
 8000e8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8e:	bf08      	it	eq
 8000e90:	0249      	lsleq	r1, r1, #9
 8000e92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e9a:	3a7f      	subs	r2, #127	; 0x7f
 8000e9c:	bfc2      	ittt	gt
 8000e9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea6:	4770      	bxgt	lr
 8000ea8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	3a01      	subs	r2, #1
 8000eb2:	dc5d      	bgt.n	8000f70 <__aeabi_fmul+0x150>
 8000eb4:	f112 0f19 	cmn.w	r2, #25
 8000eb8:	bfdc      	itt	le
 8000eba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ebe:	4770      	bxle	lr
 8000ec0:	f1c2 0200 	rsb	r2, r2, #0
 8000ec4:	0041      	lsls	r1, r0, #1
 8000ec6:	fa21 f102 	lsr.w	r1, r1, r2
 8000eca:	f1c2 0220 	rsb	r2, r2, #32
 8000ece:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ed2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed6:	f140 0000 	adc.w	r0, r0, #0
 8000eda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ede:	bf08      	it	eq
 8000ee0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee4:	4770      	bx	lr
 8000ee6:	f092 0f00 	teq	r2, #0
 8000eea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0040      	lsleq	r0, r0, #1
 8000ef2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef6:	3a01      	subeq	r2, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fmul+0xce>
 8000efa:	ea40 000c 	orr.w	r0, r0, ip
 8000efe:	f093 0f00 	teq	r3, #0
 8000f02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0049      	lsleq	r1, r1, #1
 8000f0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0e:	3b01      	subeq	r3, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fmul+0xe6>
 8000f12:	ea41 010c 	orr.w	r1, r1, ip
 8000f16:	e78f      	b.n	8000e38 <__aeabi_fmul+0x18>
 8000f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	bf18      	it	ne
 8000f22:	ea93 0f0c 	teqne	r3, ip
 8000f26:	d00a      	beq.n	8000f3e <__aeabi_fmul+0x11e>
 8000f28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f2c:	bf18      	it	ne
 8000f2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f32:	d1d8      	bne.n	8000ee6 <__aeabi_fmul+0xc6>
 8000f34:	ea80 0001 	eor.w	r0, r0, r1
 8000f38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f3c:	4770      	bx	lr
 8000f3e:	f090 0f00 	teq	r0, #0
 8000f42:	bf17      	itett	ne
 8000f44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f48:	4608      	moveq	r0, r1
 8000f4a:	f091 0f00 	teqne	r1, #0
 8000f4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f52:	d014      	beq.n	8000f7e <__aeabi_fmul+0x15e>
 8000f54:	ea92 0f0c 	teq	r2, ip
 8000f58:	d101      	bne.n	8000f5e <__aeabi_fmul+0x13e>
 8000f5a:	0242      	lsls	r2, r0, #9
 8000f5c:	d10f      	bne.n	8000f7e <__aeabi_fmul+0x15e>
 8000f5e:	ea93 0f0c 	teq	r3, ip
 8000f62:	d103      	bne.n	8000f6c <__aeabi_fmul+0x14c>
 8000f64:	024b      	lsls	r3, r1, #9
 8000f66:	bf18      	it	ne
 8000f68:	4608      	movne	r0, r1
 8000f6a:	d108      	bne.n	8000f7e <__aeabi_fmul+0x15e>
 8000f6c:	ea80 0001 	eor.w	r0, r0, r1
 8000f70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f7c:	4770      	bx	lr
 8000f7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f86:	4770      	bx	lr

08000f88 <__aeabi_fdiv>:
 8000f88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f90:	bf1e      	ittt	ne
 8000f92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f96:	ea92 0f0c 	teqne	r2, ip
 8000f9a:	ea93 0f0c 	teqne	r3, ip
 8000f9e:	d069      	beq.n	8001074 <__aeabi_fdiv+0xec>
 8000fa0:	eba2 0203 	sub.w	r2, r2, r3
 8000fa4:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa8:	0249      	lsls	r1, r1, #9
 8000faa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fae:	d037      	beq.n	8001020 <__aeabi_fdiv+0x98>
 8000fb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	bf38      	it	cc
 8000fc4:	005b      	lslcc	r3, r3, #1
 8000fc6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	bf24      	itt	cs
 8000fd2:	1a5b      	subcs	r3, r3, r1
 8000fd4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fdc:	bf24      	itt	cs
 8000fde:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fe2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fea:	bf24      	itt	cs
 8000fec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ff0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff8:	bf24      	itt	cs
 8000ffa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	bf18      	it	ne
 8001006:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800100a:	d1e0      	bne.n	8000fce <__aeabi_fdiv+0x46>
 800100c:	2afd      	cmp	r2, #253	; 0xfd
 800100e:	f63f af50 	bhi.w	8000eb2 <__aeabi_fmul+0x92>
 8001012:	428b      	cmp	r3, r1
 8001014:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001018:	bf08      	it	eq
 800101a:	f020 0001 	biceq.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001024:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001028:	327f      	adds	r2, #127	; 0x7f
 800102a:	bfc2      	ittt	gt
 800102c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001030:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001034:	4770      	bxgt	lr
 8001036:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	3a01      	subs	r2, #1
 8001040:	e737      	b.n	8000eb2 <__aeabi_fmul+0x92>
 8001042:	f092 0f00 	teq	r2, #0
 8001046:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800104a:	bf02      	ittt	eq
 800104c:	0040      	lsleq	r0, r0, #1
 800104e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001052:	3a01      	subeq	r2, #1
 8001054:	d0f9      	beq.n	800104a <__aeabi_fdiv+0xc2>
 8001056:	ea40 000c 	orr.w	r0, r0, ip
 800105a:	f093 0f00 	teq	r3, #0
 800105e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001062:	bf02      	ittt	eq
 8001064:	0049      	lsleq	r1, r1, #1
 8001066:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800106a:	3b01      	subeq	r3, #1
 800106c:	d0f9      	beq.n	8001062 <__aeabi_fdiv+0xda>
 800106e:	ea41 010c 	orr.w	r1, r1, ip
 8001072:	e795      	b.n	8000fa0 <__aeabi_fdiv+0x18>
 8001074:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001078:	ea92 0f0c 	teq	r2, ip
 800107c:	d108      	bne.n	8001090 <__aeabi_fdiv+0x108>
 800107e:	0242      	lsls	r2, r0, #9
 8001080:	f47f af7d 	bne.w	8000f7e <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	f47f af70 	bne.w	8000f6c <__aeabi_fmul+0x14c>
 800108c:	4608      	mov	r0, r1
 800108e:	e776      	b.n	8000f7e <__aeabi_fmul+0x15e>
 8001090:	ea93 0f0c 	teq	r3, ip
 8001094:	d104      	bne.n	80010a0 <__aeabi_fdiv+0x118>
 8001096:	024b      	lsls	r3, r1, #9
 8001098:	f43f af4c 	beq.w	8000f34 <__aeabi_fmul+0x114>
 800109c:	4608      	mov	r0, r1
 800109e:	e76e      	b.n	8000f7e <__aeabi_fmul+0x15e>
 80010a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a4:	bf18      	it	ne
 80010a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010aa:	d1ca      	bne.n	8001042 <__aeabi_fdiv+0xba>
 80010ac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010b0:	f47f af5c 	bne.w	8000f6c <__aeabi_fmul+0x14c>
 80010b4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b8:	f47f af3c 	bne.w	8000f34 <__aeabi_fmul+0x114>
 80010bc:	e75f      	b.n	8000f7e <__aeabi_fmul+0x15e>
 80010be:	bf00      	nop

080010c0 <__gesf2>:
 80010c0:	f04f 3cff 	mov.w	ip, #4294967295
 80010c4:	e006      	b.n	80010d4 <__cmpsf2+0x4>
 80010c6:	bf00      	nop

080010c8 <__lesf2>:
 80010c8:	f04f 0c01 	mov.w	ip, #1
 80010cc:	e002      	b.n	80010d4 <__cmpsf2+0x4>
 80010ce:	bf00      	nop

080010d0 <__cmpsf2>:
 80010d0:	f04f 0c01 	mov.w	ip, #1
 80010d4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e4:	bf18      	it	ne
 80010e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ea:	d011      	beq.n	8001110 <__cmpsf2+0x40>
 80010ec:	b001      	add	sp, #4
 80010ee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010f2:	bf18      	it	ne
 80010f4:	ea90 0f01 	teqne	r0, r1
 80010f8:	bf58      	it	pl
 80010fa:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fe:	bf88      	it	hi
 8001100:	17c8      	asrhi	r0, r1, #31
 8001102:	bf38      	it	cc
 8001104:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001108:	bf18      	it	ne
 800110a:	f040 0001 	orrne.w	r0, r0, #1
 800110e:	4770      	bx	lr
 8001110:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001114:	d102      	bne.n	800111c <__cmpsf2+0x4c>
 8001116:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800111a:	d105      	bne.n	8001128 <__cmpsf2+0x58>
 800111c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001120:	d1e4      	bne.n	80010ec <__cmpsf2+0x1c>
 8001122:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001126:	d0e1      	beq.n	80010ec <__cmpsf2+0x1c>
 8001128:	f85d 0b04 	ldr.w	r0, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <__aeabi_cfrcmple>:
 8001130:	4684      	mov	ip, r0
 8001132:	4608      	mov	r0, r1
 8001134:	4661      	mov	r1, ip
 8001136:	e7ff      	b.n	8001138 <__aeabi_cfcmpeq>

08001138 <__aeabi_cfcmpeq>:
 8001138:	b50f      	push	{r0, r1, r2, r3, lr}
 800113a:	f7ff ffc9 	bl	80010d0 <__cmpsf2>
 800113e:	2800      	cmp	r0, #0
 8001140:	bf48      	it	mi
 8001142:	f110 0f00 	cmnmi.w	r0, #0
 8001146:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001148 <__aeabi_fcmpeq>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff fff4 	bl	8001138 <__aeabi_cfcmpeq>
 8001150:	bf0c      	ite	eq
 8001152:	2001      	moveq	r0, #1
 8001154:	2000      	movne	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmplt>:
 800115c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001160:	f7ff ffea 	bl	8001138 <__aeabi_cfcmpeq>
 8001164:	bf34      	ite	cc
 8001166:	2001      	movcc	r0, #1
 8001168:	2000      	movcs	r0, #0
 800116a:	f85d fb08 	ldr.w	pc, [sp], #8
 800116e:	bf00      	nop

08001170 <__aeabi_fcmple>:
 8001170:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001174:	f7ff ffe0 	bl	8001138 <__aeabi_cfcmpeq>
 8001178:	bf94      	ite	ls
 800117a:	2001      	movls	r0, #1
 800117c:	2000      	movhi	r0, #0
 800117e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001182:	bf00      	nop

08001184 <__aeabi_fcmpge>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff ffd2 	bl	8001130 <__aeabi_cfrcmple>
 800118c:	bf94      	ite	ls
 800118e:	2001      	movls	r0, #1
 8001190:	2000      	movhi	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmpgt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffc8 	bl	8001130 <__aeabi_cfrcmple>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmpun>:
 80011ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011b8:	d102      	bne.n	80011c0 <__aeabi_fcmpun+0x14>
 80011ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011be:	d108      	bne.n	80011d2 <__aeabi_fcmpun+0x26>
 80011c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011c4:	d102      	bne.n	80011cc <__aeabi_fcmpun+0x20>
 80011c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011ca:	d102      	bne.n	80011d2 <__aeabi_fcmpun+0x26>
 80011cc:	f04f 0000 	mov.w	r0, #0
 80011d0:	4770      	bx	lr
 80011d2:	f04f 0001 	mov.w	r0, #1
 80011d6:	4770      	bx	lr

080011d8 <__aeabi_f2uiz>:
 80011d8:	0042      	lsls	r2, r0, #1
 80011da:	d20e      	bcs.n	80011fa <__aeabi_f2uiz+0x22>
 80011dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011e0:	d30b      	bcc.n	80011fa <__aeabi_f2uiz+0x22>
 80011e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ea:	d409      	bmi.n	8001200 <__aeabi_f2uiz+0x28>
 80011ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011f4:	fa23 f002 	lsr.w	r0, r3, r2
 80011f8:	4770      	bx	lr
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4770      	bx	lr
 8001200:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001204:	d101      	bne.n	800120a <__aeabi_f2uiz+0x32>
 8001206:	0242      	lsls	r2, r0, #9
 8001208:	d102      	bne.n	8001210 <__aeabi_f2uiz+0x38>
 800120a:	f04f 30ff 	mov.w	r0, #4294967295
 800120e:	4770      	bx	lr
 8001210:	f04f 0000 	mov.w	r0, #0
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <__aeabi_d2lz>:
 8001218:	b538      	push	{r3, r4, r5, lr}
 800121a:	4605      	mov	r5, r0
 800121c:	460c      	mov	r4, r1
 800121e:	2200      	movs	r2, #0
 8001220:	2300      	movs	r3, #0
 8001222:	4628      	mov	r0, r5
 8001224:	4621      	mov	r1, r4
 8001226:	f7ff fc3f 	bl	8000aa8 <__aeabi_dcmplt>
 800122a:	b928      	cbnz	r0, 8001238 <__aeabi_d2lz+0x20>
 800122c:	4628      	mov	r0, r5
 800122e:	4621      	mov	r1, r4
 8001230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001234:	f000 b80a 	b.w	800124c <__aeabi_d2ulz>
 8001238:	4628      	mov	r0, r5
 800123a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800123e:	f000 f805 	bl	800124c <__aeabi_d2ulz>
 8001242:	4240      	negs	r0, r0
 8001244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001248:	bd38      	pop	{r3, r4, r5, pc}
 800124a:	bf00      	nop

0800124c <__aeabi_d2ulz>:
 800124c:	b5d0      	push	{r4, r6, r7, lr}
 800124e:	2200      	movs	r2, #0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <__aeabi_d2ulz+0x34>)
 8001252:	4606      	mov	r6, r0
 8001254:	460f      	mov	r7, r1
 8001256:	f7ff f9b5 	bl	80005c4 <__aeabi_dmul>
 800125a:	f7ff fc63 	bl	8000b24 <__aeabi_d2uiz>
 800125e:	4604      	mov	r4, r0
 8001260:	f7ff f936 	bl	80004d0 <__aeabi_ui2d>
 8001264:	2200      	movs	r2, #0
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <__aeabi_d2ulz+0x38>)
 8001268:	f7ff f9ac 	bl	80005c4 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4630      	mov	r0, r6
 8001272:	4639      	mov	r1, r7
 8001274:	f7fe ffee 	bl	8000254 <__aeabi_dsub>
 8001278:	f7ff fc54 	bl	8000b24 <__aeabi_d2uiz>
 800127c:	4621      	mov	r1, r4
 800127e:	bdd0      	pop	{r4, r6, r7, pc}
 8001280:	3df00000 	.word	0x3df00000
 8001284:	41f00000 	.word	0x41f00000

08001288 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <MX_ADC1_Init+0xcc>)
 800129a:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <MX_ADC1_Init+0xd0>)
 800129c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012c2:	2204      	movs	r2, #4
 80012c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c6:	4823      	ldr	r0, [pc, #140]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012c8:	f007 f956 	bl	8008578 <HAL_ADC_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80012d2:	f000 fb6e 	bl	80019b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012da:	2301      	movs	r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80012de:	2305      	movs	r3, #5
 80012e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	481b      	ldr	r0, [pc, #108]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012e8:	f007 fb2a 	bl	8008940 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012f2:	f000 fb5e 	bl	80019b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4814      	ldr	r0, [pc, #80]	; (8001354 <MX_ADC1_Init+0xcc>)
 8001304:	f007 fb1c 	bl	8008940 <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800130e:	f000 fb50 	bl	80019b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001312:	2302      	movs	r3, #2
 8001314:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001316:	2303      	movs	r3, #3
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_ADC1_Init+0xcc>)
 8001320:	f007 fb0e 	bl	8008940 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800132a:	f000 fb42 	bl	80019b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800132e:	2303      	movs	r3, #3
 8001330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001332:	2304      	movs	r3, #4
 8001334:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_ADC1_Init+0xcc>)
 800133c:	f007 fb00 	bl	8008940 <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001346:	f000 fb34 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000240 	.word	0x20000240
 8001358:	40012400 	.word	0x40012400

0800135c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <HAL_ADC_MspInit+0xbc>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d149      	bne.n	8001410 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_ADC_MspInit+0xc0>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a26      	ldr	r2, [pc, #152]	; (800141c <HAL_ADC_MspInit+0xc0>)
 8001382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_ADC_MspInit+0xc0>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_ADC_MspInit+0xc0>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <HAL_ADC_MspInit+0xc0>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_ADC_MspInit+0xc0>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013ac:	230f      	movs	r3, #15
 80013ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b0:	2303      	movs	r3, #3
 80013b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4819      	ldr	r0, [pc, #100]	; (8001420 <HAL_ADC_MspInit+0xc4>)
 80013bc:	f009 fa36 	bl	800a82c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013c2:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HAL_ADC_MspInit+0xcc>)
 80013c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013ea:	2220      	movs	r2, #32
 80013ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013f6:	f008 fd1d 	bl	8009e34 <HAL_DMA_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001400:	f000 fad7 	bl	80019b2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 8001408:	621a      	str	r2, [r3, #32]
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40012400 	.word	0x40012400
 800141c:	40021000 	.word	0x40021000
 8001420:	40010800 	.word	0x40010800
 8001424:	20000270 	.word	0x20000270
 8001428:	40020008 	.word	0x40020008

0800142c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_CAN_Init+0x64>)
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <MX_CAN_Init+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_CAN_Init+0x64>)
 8001438:	2208      	movs	r2, #8
 800143a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_CAN_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_CAN_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_CAN_Init+0x64>)
 800144a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800144e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_CAN_Init+0x64>)
 8001452:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001456:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MX_CAN_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_CAN_Init+0x64>)
 8001460:	2201      	movs	r2, #1
 8001462:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <MX_CAN_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_CAN_Init+0x64>)
 800146c:	2201      	movs	r2, #1
 800146e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MX_CAN_Init+0x64>)
 8001472:	2200      	movs	r2, #0
 8001474:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_CAN_Init+0x64>)
 8001478:	2200      	movs	r2, #0
 800147a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_CAN_Init+0x64>)
 800147e:	f007 fc58 	bl	8008d32 <HAL_CAN_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001488:	f000 fa93 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200002b4 	.word	0x200002b4
 8001494:	40006400 	.word	0x40006400

08001498 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a2c      	ldr	r2, [pc, #176]	; (8001564 <HAL_CAN_MspInit+0xcc>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d151      	bne.n	800155c <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c2:	61d3      	str	r3, [r2, #28]
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a24      	ldr	r2, [pc, #144]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	481b      	ldr	r0, [pc, #108]	; (800156c <HAL_CAN_MspInit+0xd4>)
 80014fe:	f009 f995 	bl	800a82c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	4815      	ldr	r0, [pc, #84]	; (800156c <HAL_CAN_MspInit+0xd4>)
 8001518:	f009 f988 	bl	800a82c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 10, 10);
 800151c:	220a      	movs	r2, #10
 800151e:	210a      	movs	r1, #10
 8001520:	2013      	movs	r0, #19
 8001522:	f008 fb4a 	bl	8009bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001526:	2013      	movs	r0, #19
 8001528:	f008 fb63 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 10, 10);
 800152c:	220a      	movs	r2, #10
 800152e:	210a      	movs	r1, #10
 8001530:	2014      	movs	r0, #20
 8001532:	f008 fb42 	bl	8009bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001536:	2014      	movs	r0, #20
 8001538:	f008 fb5b 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 10, 10);
 800153c:	220a      	movs	r2, #10
 800153e:	210a      	movs	r1, #10
 8001540:	2015      	movs	r0, #21
 8001542:	f008 fb3a 	bl	8009bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001546:	2015      	movs	r0, #21
 8001548:	f008 fb53 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 10, 10);
 800154c:	220a      	movs	r2, #10
 800154e:	210a      	movs	r1, #10
 8001550:	2016      	movs	r0, #22
 8001552:	f008 fb32 	bl	8009bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001556:	2016      	movs	r0, #22
 8001558:	f008 fb4b 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40006400 	.word	0x40006400
 8001568:	40021000 	.word	0x40021000
 800156c:	40010800 	.word	0x40010800

08001570 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001576:	463b      	mov	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_DAC_Init+0x60>)
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <MX_DAC_Init+0x64>)
 8001582:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <MX_DAC_Init+0x60>)
 8001586:	f008 fb5c 	bl	8009c42 <HAL_DAC_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001590:	f000 fa0f 	bl	80019b2 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	4619      	mov	r1, r3
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <MX_DAC_Init+0x60>)
 80015a4:	f008 fbee 	bl	8009d84 <HAL_DAC_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015ae:	f000 fa00 	bl	80019b2 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	2210      	movs	r2, #16
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_DAC_Init+0x60>)
 80015ba:	f008 fbe3 	bl	8009d84 <HAL_DAC_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80015c4:	f000 f9f5 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200002dc 	.word	0x200002dc
 80015d4:	40007400 	.word	0x40007400

080015d8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_DAC_MspInit+0x6c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d121      	bne.n	800163c <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_DAC_MspInit+0x70>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_DAC_MspInit+0x70>)
 80015fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001602:	61d3      	str	r3, [r2, #28]
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_DAC_MspInit+0x70>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_DAC_MspInit+0x70>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <HAL_DAC_MspInit+0x70>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_DAC_MspInit+0x70>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001628:	2330      	movs	r3, #48	; 0x30
 800162a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162c:	2303      	movs	r3, #3
 800162e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <HAL_DAC_MspInit+0x74>)
 8001638:	f009 f8f8 	bl	800a82c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40007400 	.word	0x40007400
 8001648:	40021000 	.word	0x40021000
 800164c:	40010800 	.word	0x40010800

08001650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <MX_DMA_Init+0x90>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <MX_DMA_Init+0x90>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6153      	str	r3, [r2, #20]
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <MX_DMA_Init+0x90>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_DMA_Init+0x90>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <MX_DMA_Init+0x90>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_DMA_Init+0x90>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	200b      	movs	r0, #11
 800168c:	f008 fa95 	bl	8009bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001690:	200b      	movs	r0, #11
 8001692:	f008 faae 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	200d      	movs	r0, #13
 800169c:	f008 fa8d 	bl	8009bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016a0:	200d      	movs	r0, #13
 80016a2:	f008 faa6 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	200f      	movs	r0, #15
 80016ac:	f008 fa85 	bl	8009bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016b0:	200f      	movs	r0, #15
 80016b2:	f008 fa9e 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2010      	movs	r0, #16
 80016bc:	f008 fa7d 	bl	8009bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80016c0:	2010      	movs	r0, #16
 80016c2:	f008 fa96 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	203a      	movs	r0, #58	; 0x3a
 80016cc:	f008 fa75 	bl	8009bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80016d0:	203a      	movs	r0, #58	; 0x3a
 80016d2:	f008 fa8e 	bl	8009bf2 <HAL_NVIC_EnableIRQ>

}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_I2C1_Init+0x50>)
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <MX_I2C1_Init+0x54>)
 80016ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_I2C1_Init+0x50>)
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <MX_I2C1_Init+0x58>)
 80016f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_I2C1_Init+0x50>)
 8001702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <MX_I2C1_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_I2C1_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_I2C1_Init+0x50>)
 8001722:	f009 fb2b 	bl	800ad7c <HAL_I2C_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800172c:	f000 f941 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200002f0 	.word	0x200002f0
 8001738:	40005400 	.word	0x40005400
 800173c:	000186a0 	.word	0x000186a0

08001740 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <HAL_I2C_MspInit+0x70>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d123      	bne.n	80017a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001778:	23c0      	movs	r3, #192	; 0xc0
 800177a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177c:	2312      	movs	r3, #18
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2302      	movs	r3, #2
 8001782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4619      	mov	r1, r3
 800178a:	480b      	ldr	r0, [pc, #44]	; (80017b8 <HAL_I2C_MspInit+0x78>)
 800178c:	f009 f84e 	bl	800a82c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179a:	61d3      	str	r3, [r2, #28]
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40005400 	.word	0x40005400
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010c00 	.word	0x40010c00

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80017c0:	f006 fe54 	bl	800846c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c4:	f000 f898 	bl	80018f8 <SystemClock_Config>
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
 //MX_GPIO_Init();
  GPIO_Configuration();
 80017c8:	f003 fba0 	bl	8004f0c <GPIO_Configuration>
  MX_DMA_Init();
 80017cc:	f7ff ff40 	bl	8001650 <MX_DMA_Init>
  MX_CAN_Init();
 80017d0:	f7ff fe2c 	bl	800142c <MX_CAN_Init>
  MX_DAC_Init();
 80017d4:	f7ff fecc 	bl	8001570 <MX_DAC_Init>
  MX_I2C1_Init();
 80017d8:	f7ff ff84 	bl	80016e4 <MX_I2C1_Init>
  MX_TIM4_Init();
 80017dc:	f000 fc7a 	bl	80020d4 <MX_TIM4_Init>
  MX_UART4_Init();
 80017e0:	f000 fd80 	bl	80022e4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80017e4:	f000 fda8 	bl	8002338 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80017e8:	f000 fdd0 	bl	800238c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017ec:	f000 fdf8 	bl	80023e0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80017f0:	f000 fc22 	bl	8002038 <MX_TIM3_Init>
  MX_ADC1_Init();
 80017f4:	f7ff fd48 	bl	8001288 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  bsp_can_init();
 80017f8:	f005 feda 	bl	80075b0 <bsp_can_init>
  cliInit();
 80017fc:	f001 fcc4 	bl	8003188 <cliInit>
  uartInit();
 8001800:	f001 fab2 	bl	8002d68 <uartInit>
  uartOpen(_DEF_UART2, 115200);  // UART
 8001804:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001808:	2001      	movs	r0, #1
 800180a:	f001 fac7 	bl	8002d9c <uartOpen>
  cliOpen(_DEF_UART2, 115200);
 800180e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001812:	2001      	movs	r0, #1
 8001814:	f001 fd54 	bl	80032c0 <cliOpen>
  bsp_adc_init();
 8001818:	f001 f976 	bl	8002b08 <bsp_adc_init>

  HAL_GPIO_WritePin(GPIOB, GPIO_I2C_WP, GPIO_PIN_RESET); 
 800181c:	2200      	movs	r2, #0
 800181e:	2120      	movs	r1, #32
 8001820:	482a      	ldr	r0, [pc, #168]	; (80018cc <main+0x110>)
 8001822:	f009 fa7a 	bl	800ad1a <HAL_GPIO_WritePin>
  init_set_read();
 8001826:	f005 fc95 	bl	8007154 <init_set_read>
 

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800182a:	2100      	movs	r1, #0
 800182c:	4828      	ldr	r0, [pc, #160]	; (80018d0 <main+0x114>)
 800182e:	f008 fa2a 	bl	8009c86 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001832:	2110      	movs	r1, #16
 8001834:	4826      	ldr	r0, [pc, #152]	; (80018d0 <main+0x114>)
 8001836:	f008 fa26 	bl	8009c86 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 800183a:	2300      	movs	r3, #0
 800183c:	2208      	movs	r2, #8
 800183e:	2100      	movs	r1, #0
 8001840:	4823      	ldr	r0, [pc, #140]	; (80018d0 <main+0x114>)
 8001842:	f008 fa76 	bl	8009d32 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, 0);
 8001846:	2300      	movs	r3, #0
 8001848:	2208      	movs	r2, #8
 800184a:	2110      	movs	r1, #16
 800184c:	4820      	ldr	r0, [pc, #128]	; (80018d0 <main+0x114>)
 800184e:	f008 fa70 	bl	8009d32 <HAL_DAC_SetValue>

  HAL_TIM_Base_Start_IT (&htim3); // 1ms 
 8001852:	4820      	ldr	r0, [pc, #128]	; (80018d4 <main+0x118>)
 8001854:	f00b f802 	bl	800c85c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim4); // PWM OUT PUT 
 8001858:	481f      	ldr	r0, [pc, #124]	; (80018d8 <main+0x11c>)
 800185a:	f00a ffff 	bl	800c85c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800185e:	210c      	movs	r1, #12
 8001860:	481d      	ldr	r0, [pc, #116]	; (80018d8 <main+0x11c>)
 8001862:	f00b f8b3 	bl	800c9cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001866:	2108      	movs	r1, #8
 8001868:	481b      	ldr	r0, [pc, #108]	; (80018d8 <main+0x11c>)
 800186a:	f00b f8af 	bl	800c9cc <HAL_TIM_PWM_Start>

  Var_Init();
 800186e:	f006 fcff 	bl	8008270 <Var_Init>
  init_set();
 8001872:	f006 fdcb 	bl	800840c <init_set>
  Init_DrvPortSet();
 8001876:	f005 fba1 	bl	8006fbc <Init_DrvPortSet>
  HAL_Delay(300);
 800187a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800187e:	f006 fe57 	bl	8008530 <HAL_Delay>
  INIT_Check();
 8001882:	f006 fbfd 	bl	8008080 <INIT_Check>

  u16_RFMNChkCnt = 2000;			/* 약 1000ms 동안 RFR Main 신호가 없으면 All Motor Stop */
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <main+0x120>)
 8001888:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800188c:	801a      	strh	r2, [r3, #0]
  u32_SysRunTime = 0;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <main+0x124>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
  CAN_RcvCount = 0;
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <main+0x128>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
  canDTIntime = 2000;	
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <main+0x12c>)
 800189c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018a0:	801a      	strh	r2, [r3, #0]
  u2DTInTime = 2000;	
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <main+0x130>)
 80018a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018a8:	801a      	strh	r2, [r3, #0]
  crash_Cnt = 50;			
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <main+0x134>)
 80018ac:	2232      	movs	r2, #50	; 0x32
 80018ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */
  cliPrintf(">> SYS_ON \r\n");
 80018b0:	4810      	ldr	r0, [pc, #64]	; (80018f4 <main+0x138>)
 80018b2:	f002 f9cf 	bl	8003c54 <cliPrintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {  
    
    User_Interface();
 80018b6:	f004 fd03 	bl	80062c0 <User_Interface>
    Motor_Control();
 80018ba:	f005 fbb1 	bl	8007020 <Motor_Control>
    Timer_Event();
 80018be:	f005 fe51 	bl	8007564 <Timer_Event>
    Comm_Check();
 80018c2:	f003 fae7 	bl	8004e94 <Comm_Check>
    cliMain();
 80018c6:	f001 fdb3 	bl	8003430 <cliMain>
    User_Interface();
 80018ca:	e7f4      	b.n	80018b6 <main+0xfa>
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	200002dc 	.word	0x200002dc
 80018d4:	20000364 	.word	0x20000364
 80018d8:	200003ac 	.word	0x200003ac
 80018dc:	20000d3c 	.word	0x20000d3c
 80018e0:	20000d04 	.word	0x20000d04
 80018e4:	20000d4c 	.word	0x20000d4c
 80018e8:	20000d56 	.word	0x20000d56
 80018ec:	20000d3a 	.word	0x20000d3a
 80018f0:	20000d58 	.word	0x20000d58
 80018f4:	08011b70 	.word	0x08011b70

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b096      	sub	sp, #88	; 0x58
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001902:	2228      	movs	r2, #40	; 0x28
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f00c ff9e 	bl	800e848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800192c:	2301      	movs	r3, #1
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193a:	2301      	movs	r3, #1
 800193c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193e:	2302      	movs	r3, #2
 8001940:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001946:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001948:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800194c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001952:	4618      	mov	r0, r3
 8001954:	f00a fa6c 	bl	800be30 <HAL_RCC_OscConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800195e:	f000 f828 	bl	80019b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001962:	230f      	movs	r3, #15
 8001964:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001966:	2302      	movs	r3, #2
 8001968:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800196e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	2102      	movs	r1, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f00a fcd8 	bl	800c334 <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800198a:	f000 f812 	bl	80019b2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800198e:	2302      	movs	r3, #2
 8001990:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001996:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4618      	mov	r0, r3
 800199c:	f00a fe58 	bl	800c650 <HAL_RCCEx_PeriphCLKConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80019a6:	f000 f804 	bl	80019b2 <Error_Handler>
  }
}
 80019aa:	bf00      	nop
 80019ac:	3758      	adds	r7, #88	; 0x58
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b6:	b672      	cpsid	i
}
 80019b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ba:	e7fe      	b.n	80019ba <Error_Handler+0x8>

080019bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_MspInit+0x5c>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_MspInit+0x5c>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6193      	str	r3, [r2, #24]
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_MspInit+0x5c>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_MspInit+0x5c>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_MspInit+0x5c>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_MspInit+0x5c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_MspInit+0x60>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_MspInit+0x60>)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000

08001a20 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001a66:	f006 fd47 	bl	80084f8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <DMA1_Channel1_IRQHandler+0x10>)
 8001a76:	f008 fc6f 	bl	800a358 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000270 	.word	0x20000270

08001a84 <DMA1_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA1 channel3 global interrupt.
 */
void DMA1_Channel3_IRQHandler(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

	/* USER CODE END DMA1_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <DMA1_Channel3_IRQHandler+0x10>)
 8001a8a:	f008 fc65 	bl	800a358 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

	/* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200005e0 	.word	0x200005e0

08001a98 <DMA1_Channel5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

	/* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <DMA1_Channel5_IRQHandler+0x10>)
 8001a9e:	f008 fc5b 	bl	800a358 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

	/* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000558 	.word	0x20000558

08001aac <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <DMA1_Channel6_IRQHandler+0x10>)
 8001ab2:	f008 fc51 	bl	800a358 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000059c 	.word	0x2000059c

08001ac0 <USB_HP_CAN1_TX_IRQHandler>:

/**
 * @brief This function handles USB high priority or CAN TX interrupts.
 */
void USB_HP_CAN1_TX_IRQHandler(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

	/* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001ac6:	f007 fd51 	bl	800956c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

	/* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002b4 	.word	0x200002b4

08001ad4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
 * @brief This function handles USB low priority or CAN RX0 interrupts.
 */
/// 여기가 찐 CAN RX
void USB_LP_CAN1_RX0_IRQHandler(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	CanRxMsg CanRxData;
	
	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8001ada:	483c      	ldr	r0, [pc, #240]	; (8001bcc <USB_LP_CAN1_RX0_IRQHandler+0xf8>)
 8001adc:	f007 fd46 	bl	800956c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader, &CanRxData.Data);
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	330b      	adds	r3, #11
 8001ae4:	4a3a      	ldr	r2, [pc, #232]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4838      	ldr	r0, [pc, #224]	; (8001bcc <USB_LP_CAN1_RX0_IRQHandler+0xf8>)
 8001aea:	f007 fbf9 	bl	80092e0 <HAL_CAN_GetRxMessage>

	#if 1 // 나이사님 ver 
	if((rxHeader.StdId == 0x123)&&(rxHeader.IDE == CAN_ID_STD)&&(rxHeader.DLC == 2))
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f240 1223 	movw	r2, #291	; 0x123
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d126      	bne.n	8001b48 <USB_LP_CAN1_RX0_IRQHandler+0x74>
 8001afa:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d122      	bne.n	8001b48 <USB_LP_CAN1_RX0_IRQHandler+0x74>
 8001b02:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d11e      	bne.n	8001b48 <USB_LP_CAN1_RX0_IRQHandler+0x74>
	{
		CAN_RxData[0] = CanRxData.Data[0];	/* Line ���� �� ����, ���� Command */
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <USB_LP_CAN1_RX0_IRQHandler+0x100>)
 8001b0e:	701a      	strb	r2, [r3, #0]
		CAN_RxData[1] = CanRxData.Data[1];	/* Ready Byte */
 8001b10:	7c3a      	ldrb	r2, [r7, #16]
 8001b12:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <USB_LP_CAN1_RX0_IRQHandler+0x100>)
 8001b14:	705a      	strb	r2, [r3, #1]

		Received_canID = rxHeader.StdId;
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a2f      	ldr	r2, [pc, #188]	; (8001bd8 <USB_LP_CAN1_RX0_IRQHandler+0x104>)
 8001b1c:	6013      	str	r3, [r2, #0]
		Received_canIDType = rxHeader.IDE;
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <USB_LP_CAN1_RX0_IRQHandler+0x108>)
 8001b26:	701a      	strb	r2, [r3, #0]
		Received_canDLC = rxHeader.DLC;
 8001b28:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <USB_LP_CAN1_RX0_IRQHandler+0x10c>)
 8001b30:	701a      	strb	r2, [r3, #0]
		canDTIntime = 2000; 		/* nck-1222 */
 8001b32:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <USB_LP_CAN1_RX0_IRQHandler+0x110>)
 8001b34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b38:	801a      	strh	r2, [r3, #0]
		uCommStatusFlag |= f_canDTIn;
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <USB_LP_CAN1_RX0_IRQHandler+0x114>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <USB_LP_CAN1_RX0_IRQHandler+0x114>)
 8001b46:	801a      	strh	r2, [r3, #0]
	}
	if((rxHeader.StdId == 0x500)&&(rxHeader.IDE == CAN_ID_STD)&&(rxHeader.DLC == 8))
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b50:	d137      	bne.n	8001bc2 <USB_LP_CAN1_RX0_IRQHandler+0xee>
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d133      	bne.n	8001bc2 <USB_LP_CAN1_RX0_IRQHandler+0xee>
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d12f      	bne.n	8001bc2 <USB_LP_CAN1_RX0_IRQHandler+0xee>
	{
		CAN_RxData_Error[0] = CanRxData.Data[0];	
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <USB_LP_CAN1_RX0_IRQHandler+0x118>)
 8001b66:	701a      	strb	r2, [r3, #0]
		CAN_RxData_Error[1] = CanRxData.Data[1];
 8001b68:	7c3a      	ldrb	r2, [r7, #16]
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <USB_LP_CAN1_RX0_IRQHandler+0x118>)
 8001b6c:	705a      	strb	r2, [r3, #1]
		CAN_RxData_Error[2] = CanRxData.Data[2];	
 8001b6e:	7c7a      	ldrb	r2, [r7, #17]
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <USB_LP_CAN1_RX0_IRQHandler+0x118>)
 8001b72:	709a      	strb	r2, [r3, #2]
		CAN_RxData_Error[3] = CanRxData.Data[3];
 8001b74:	7cba      	ldrb	r2, [r7, #18]
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <USB_LP_CAN1_RX0_IRQHandler+0x118>)
 8001b78:	70da      	strb	r2, [r3, #3]
		CAN_RxData_Error[4] = CanRxData.Data[4];	
 8001b7a:	7cfa      	ldrb	r2, [r7, #19]
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <USB_LP_CAN1_RX0_IRQHandler+0x118>)
 8001b7e:	711a      	strb	r2, [r3, #4]
		CAN_RxData_Error[5] = CanRxData.Data[5];
 8001b80:	7d3a      	ldrb	r2, [r7, #20]
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <USB_LP_CAN1_RX0_IRQHandler+0x118>)
 8001b84:	715a      	strb	r2, [r3, #5]
		CAN_RxData_Error[6] = CanRxData.Data[6];	
 8001b86:	7d7a      	ldrb	r2, [r7, #21]
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <USB_LP_CAN1_RX0_IRQHandler+0x118>)
 8001b8a:	719a      	strb	r2, [r3, #6]
		CAN_RxData_Error[7] = CanRxData.Data[7];	
 8001b8c:	7dba      	ldrb	r2, [r7, #22]
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <USB_LP_CAN1_RX0_IRQHandler+0x118>)
 8001b90:	71da      	strb	r2, [r3, #7]
		can1_Trans8b(0x03);
 8001b92:	2003      	movs	r0, #3
 8001b94:	f005 fba6 	bl	80072e4 <can1_Trans8b>
	
		Received_canID = rxHeader.StdId;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <USB_LP_CAN1_RX0_IRQHandler+0x104>)
 8001b9e:	6013      	str	r3, [r2, #0]
		Received_canIDType = rxHeader.IDE;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <USB_LP_CAN1_RX0_IRQHandler+0x108>)
 8001ba8:	701a      	strb	r2, [r3, #0]
		Received_canDLC = rxHeader.DLC;
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <USB_LP_CAN1_RX0_IRQHandler+0x10c>)
 8001bb2:	701a      	strb	r2, [r3, #0]
		
		uCommStatusFlag |= f_canERIn;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <USB_LP_CAN1_RX0_IRQHandler+0x114>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <USB_LP_CAN1_RX0_IRQHandler+0x114>)
 8001bc0:	801a      	strh	r2, [r3, #0]
	#endif 



	/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200002b4 	.word	0x200002b4
 8001bd0:	20000344 	.word	0x20000344
 8001bd4:	20000d64 	.word	0x20000d64
 8001bd8:	20000d50 	.word	0x20000d50
 8001bdc:	20000d54 	.word	0x20000d54
 8001be0:	20000d55 	.word	0x20000d55
 8001be4:	20000d56 	.word	0x20000d56
 8001be8:	20000d00 	.word	0x20000d00
 8001bec:	20000d68 	.word	0x20000d68

08001bf0 <CAN1_RX1_IRQHandler>:

/**
 * @brief This function handles CAN RX1 interrupt.
 */
void CAN1_RX1_IRQHandler(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX1_IRQn 0 */

	/* USER CODE END CAN1_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <CAN1_RX1_IRQHandler+0x10>)
 8001bf6:	f007 fcb9 	bl	800956c <HAL_CAN_IRQHandler>


}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200002b4 	.word	0x200002b4

08001c04 <CAN1_SCE_IRQHandler>:

/**
 * @brief This function handles CAN SCE interrupt.
 */
void CAN1_SCE_IRQHandler(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_SCE_IRQn 0 */

	/* USER CODE END CAN1_SCE_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <CAN1_SCE_IRQHandler+0x10>)
 8001c0a:	f007 fcaf 	bl	800956c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_SCE_IRQn 1 */

	/* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200002b4 	.word	0x200002b4

08001c18 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	ms_cnt++;
 8001c1c:	4b71      	ldr	r3, [pc, #452]	; (8001de4 <TIM3_IRQHandler+0x1cc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	4a70      	ldr	r2, [pc, #448]	; (8001de4 <TIM3_IRQHandler+0x1cc>)
 8001c24:	6013      	str	r3, [r2, #0]
	if ((ms_cnt % dac_max_value) == 0)
 8001c26:	4b6f      	ldr	r3, [pc, #444]	; (8001de4 <TIM3_IRQHandler+0x1cc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6f      	ldr	r2, [pc, #444]	; (8001de8 <TIM3_IRQHandler+0x1d0>)
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c32:	fb01 f202 	mul.w	r2, r1, r2
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d106      	bne.n	8001c4a <TIM3_IRQHandler+0x32>
		uTimerFlag |= TIM_10ms;
 8001c3c:	4b6b      	ldr	r3, [pc, #428]	; (8001dec <TIM3_IRQHandler+0x1d4>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	4b69      	ldr	r3, [pc, #420]	; (8001dec <TIM3_IRQHandler+0x1d4>)
 8001c48:	801a      	strh	r2, [r3, #0]
	if ((ms_cnt % 30) == 0)
 8001c4a:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <TIM3_IRQHandler+0x1cc>)
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <TIM3_IRQHandler+0x1d8>)
 8001c50:	fba3 2301 	umull	r2, r3, r3, r1
 8001c54:	091a      	lsrs	r2, r3, #4
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	1aca      	subs	r2, r1, r3
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	d106      	bne.n	8001c72 <TIM3_IRQHandler+0x5a>
		uTimerFlag |= TIM_30ms;
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <TIM3_IRQHandler+0x1d4>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <TIM3_IRQHandler+0x1d4>)
 8001c70:	801a      	strh	r2, [r3, #0]
	if ((ms_cnt % 100) == 0)
 8001c72:	4b5c      	ldr	r3, [pc, #368]	; (8001de4 <TIM3_IRQHandler+0x1cc>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b5f      	ldr	r3, [pc, #380]	; (8001df4 <TIM3_IRQHandler+0x1dc>)
 8001c78:	fba3 1302 	umull	r1, r3, r3, r2
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	2164      	movs	r1, #100	; 0x64
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <TIM3_IRQHandler+0x80>
		uTimerFlag |= TIM_100ms;
 8001c8a:	4b58      	ldr	r3, [pc, #352]	; (8001dec <TIM3_IRQHandler+0x1d4>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	f043 0310 	orr.w	r3, r3, #16
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b55      	ldr	r3, [pc, #340]	; (8001dec <TIM3_IRQHandler+0x1d4>)
 8001c96:	801a      	strh	r2, [r3, #0]
	if ((ms_cnt % 200) == 0)
 8001c98:	4b52      	ldr	r3, [pc, #328]	; (8001de4 <TIM3_IRQHandler+0x1cc>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <TIM3_IRQHandler+0x1dc>)
 8001c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8001ca2:	099b      	lsrs	r3, r3, #6
 8001ca4:	21c8      	movs	r1, #200	; 0xc8
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d106      	bne.n	8001cbe <TIM3_IRQHandler+0xa6>
		uTimerFlag |= TIM_200ms;
 8001cb0:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <TIM3_IRQHandler+0x1d4>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <TIM3_IRQHandler+0x1d4>)
 8001cbc:	801a      	strh	r2, [r3, #0]
	if ((ms_cnt % 500) == 0)
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <TIM3_IRQHandler+0x1cc>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <TIM3_IRQHandler+0x1e0>)
 8001cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8001cc8:	095b      	lsrs	r3, r3, #5
 8001cca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d106      	bne.n	8001ce6 <TIM3_IRQHandler+0xce>
		uTimerFlag |= TIM_500ms;
 8001cd8:	4b44      	ldr	r3, [pc, #272]	; (8001dec <TIM3_IRQHandler+0x1d4>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b42      	ldr	r3, [pc, #264]	; (8001dec <TIM3_IRQHandler+0x1d4>)
 8001ce4:	801a      	strh	r2, [r3, #0]


	if (Local_Key.lK_ChatCnt)
 8001ce6:	4b45      	ldr	r3, [pc, #276]	; (8001dfc <TIM3_IRQHandler+0x1e4>)
 8001ce8:	88db      	ldrh	r3, [r3, #6]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <TIM3_IRQHandler+0xe2>
		--Local_Key.lK_ChatCnt;
 8001cee:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <TIM3_IRQHandler+0x1e4>)
 8001cf0:	88db      	ldrh	r3, [r3, #6]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <TIM3_IRQHandler+0x1e4>)
 8001cf8:	80da      	strh	r2, [r3, #6]
	if (RFR_Key.rK_ChatCnt)
 8001cfa:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <TIM3_IRQHandler+0x1e8>)
 8001cfc:	88db      	ldrh	r3, [r3, #6]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <TIM3_IRQHandler+0xf6>
		--RFR_Key.rK_ChatCnt;
 8001d02:	4b3f      	ldr	r3, [pc, #252]	; (8001e00 <TIM3_IRQHandler+0x1e8>)
 8001d04:	88db      	ldrh	r3, [r3, #6]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <TIM3_IRQHandler+0x1e8>)
 8001d0c:	80da      	strh	r2, [r3, #6]
	if (DMotorWaitime)
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <TIM3_IRQHandler+0x1ec>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <TIM3_IRQHandler+0x10a>
		--DMotorWaitime;
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <TIM3_IRQHandler+0x1ec>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <TIM3_IRQHandler+0x1ec>)
 8001d20:	801a      	strh	r2, [r3, #0]
	if (SMotorWaitime)
 8001d22:	4b39      	ldr	r3, [pc, #228]	; (8001e08 <TIM3_IRQHandler+0x1f0>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <TIM3_IRQHandler+0x11e>
		--SMotorWaitime;
 8001d2a:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <TIM3_IRQHandler+0x1f0>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <TIM3_IRQHandler+0x1f0>)
 8001d34:	801a      	strh	r2, [r3, #0]
	if (PumpWaittime)
 8001d36:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <TIM3_IRQHandler+0x1f4>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <TIM3_IRQHandler+0x132>
		--PumpWaittime; /* PUMP */
 8001d3e:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <TIM3_IRQHandler+0x1f4>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <TIM3_IRQHandler+0x1f4>)
 8001d48:	801a      	strh	r2, [r3, #0]
	if (FanWaittime)
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <TIM3_IRQHandler+0x1f8>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <TIM3_IRQHandler+0x146>
		--FanWaittime; /* FAN */
 8001d52:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <TIM3_IRQHandler+0x1f8>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <TIM3_IRQHandler+0x1f8>)
 8001d5c:	801a      	strh	r2, [r3, #0]
	if (canDTIntime)
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <TIM3_IRQHandler+0x1fc>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <TIM3_IRQHandler+0x15a>
		--canDTIntime; 
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <TIM3_IRQHandler+0x1fc>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <TIM3_IRQHandler+0x1fc>)
 8001d70:	801a      	strh	r2, [r3, #0]
	//if(u2Init_time)	--u2Init_time;
	if (u2DTInTime)
 8001d72:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <TIM3_IRQHandler+0x200>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <TIM3_IRQHandler+0x16e>
		--u2DTInTime;
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <TIM3_IRQHandler+0x200>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <TIM3_IRQHandler+0x200>)
 8001d84:	801a      	strh	r2, [r3, #0]
	//if(uMainWait_tm)	--uMainWait_tm;
	if (u16_RFMNChkCnt)
 8001d86:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <TIM3_IRQHandler+0x204>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <TIM3_IRQHandler+0x182>
		--u16_RFMNChkCnt;
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <TIM3_IRQHandler+0x204>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <TIM3_IRQHandler+0x204>)
 8001d98:	801a      	strh	r2, [r3, #0]
	if (LKSeqDlyTime)
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <TIM3_IRQHandler+0x208>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <TIM3_IRQHandler+0x196>
		--LKSeqDlyTime;
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <TIM3_IRQHandler+0x208>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <TIM3_IRQHandler+0x208>)
 8001dac:	801a      	strh	r2, [r3, #0]
	if ( Bcon_dly)
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <TIM3_IRQHandler+0x20c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <TIM3_IRQHandler+0x1a8>
		--Bcon_dly;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <TIM3_IRQHandler+0x20c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <TIM3_IRQHandler+0x20c>)
 8001dbe:	6013      	str	r3, [r2, #0]
	if ( RTK_check_flag )
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <TIM3_IRQHandler+0x210>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <TIM3_IRQHandler+0x1c2>
	{
		if ( RTK_check_dly )
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <TIM3_IRQHandler+0x214>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d004      	beq.n	8001dda <TIM3_IRQHandler+0x1c2>
		--RTK_check_dly;
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <TIM3_IRQHandler+0x214>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <TIM3_IRQHandler+0x214>)
 8001dd8:	6013      	str	r3, [r2, #0]
	}
	

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8001dda:	4815      	ldr	r0, [pc, #84]	; (8001e30 <TIM3_IRQHandler+0x218>)
 8001ddc:	f00a feb0 	bl	800cb40 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000d60 	.word	0x20000d60
 8001de8:	2000002c 	.word	0x2000002c
 8001dec:	20000cf4 	.word	0x20000cf4
 8001df0:	88888889 	.word	0x88888889
 8001df4:	51eb851f 	.word	0x51eb851f
 8001df8:	10624dd3 	.word	0x10624dd3
 8001dfc:	20000cdc 	.word	0x20000cdc
 8001e00:	20000ce8 	.word	0x20000ce8
 8001e04:	20000d20 	.word	0x20000d20
 8001e08:	20000d22 	.word	0x20000d22
 8001e0c:	20000d24 	.word	0x20000d24
 8001e10:	20000d26 	.word	0x20000d26
 8001e14:	20000d56 	.word	0x20000d56
 8001e18:	20000d3a 	.word	0x20000d3a
 8001e1c:	20000d3c 	.word	0x20000d3c
 8001e20:	20000d5a 	.word	0x20000d5a
 8001e24:	20000de8 	.word	0x20000de8
 8001e28:	20000cd8 	.word	0x20000cd8
 8001e2c:	20000cd4 	.word	0x20000cd4
 8001e30:	20000364 	.word	0x20000364

08001e34 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <TIM4_IRQHandler+0x10>)
 8001e3a:	f00a fe81 	bl	800cb40 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200003ac 	.word	0x200003ac

08001e48 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <USART1_IRQHandler+0x10>)
 8001e4e:	f00b fdbd 	bl	800d9cc <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000043c 	.word	0x2000043c

08001e5c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <USART2_IRQHandler+0x10>)
 8001e62:	f00b fdb3 	bl	800d9cc <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000484 	.word	0x20000484

08001e70 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <USART3_IRQHandler+0x10>)
 8001e76:	f00b fda9 	bl	800d9cc <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200004cc 	.word	0x200004cc

08001e84 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */

	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <UART4_IRQHandler+0x10>)
 8001e8a:	f00b fd9f 	bl	800d9cc <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200003f4 	.word	0x200003f4

08001e98 <DMA2_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA2 channel3 global interrupt.
 */
void DMA2_Channel3_IRQHandler(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

	/* USER CODE END DMA2_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <DMA2_Channel3_IRQHandler+0x10>)
 8001e9e:	f008 fa5b 	bl	800a358 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

	/* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000514 	.word	0x20000514

08001eac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return 1;
 8001eb0:	2301      	movs	r3, #1
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <_kill>:

int _kill(int pid, int sig)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ec4:	f00c fc88 	bl	800e7d8 <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2216      	movs	r2, #22
 8001ecc:	601a      	str	r2, [r3, #0]
  return -1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_exit>:

void _exit (int status)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffe7 	bl	8001eba <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eec:	e7fe      	b.n	8001eec <_exit+0x12>

08001eee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e00a      	b.n	8001f16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f00:	f3af 8000 	nop.w
 8001f04:	4601      	mov	r1, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	60ba      	str	r2, [r7, #8]
 8001f0c:	b2ca      	uxtb	r2, r1
 8001f0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbf0      	blt.n	8001f00 <_read+0x12>
  }

  return len;
 8001f1e:	687b      	ldr	r3, [r7, #4]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e009      	b.n	8001f4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	60ba      	str	r2, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dbf1      	blt.n	8001f3a <_write+0x12>
  }
  return len;
 8001f56:	687b      	ldr	r3, [r7, #4]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_close>:

int _close(int file)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f86:	605a      	str	r2, [r3, #4]
  return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <_isatty>:

int _isatty(int file)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f9c:	2301      	movs	r3, #1
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <_sbrk+0x5c>)
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <_sbrk+0x60>)
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <_sbrk+0x64>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <_sbrk+0x64>)
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <_sbrk+0x68>)
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d207      	bcs.n	8002000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff0:	f00c fbf2 	bl	800e7d8 <__errno>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	e009      	b.n	8002014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <_sbrk+0x64>)
 8002010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000c000 	.word	0x2000c000
 8002020:	00000400 	.word	0x00000400
 8002024:	20000360 	.word	0x20000360
 8002028:	20000e08 	.word	0x20000e08

0800202c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203e:	f107 0308 	add.w	r3, r7, #8
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204c:	463b      	mov	r3, r7
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <MX_TIM3_Init+0x94>)
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <MX_TIM3_Init+0x98>)
 8002058:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <MX_TIM3_Init+0x94>)
 800205c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002060:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <MX_TIM3_Init+0x94>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <MX_TIM3_Init+0x94>)
 800206a:	2263      	movs	r2, #99	; 0x63
 800206c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <MX_TIM3_Init+0x94>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002074:	4b15      	ldr	r3, [pc, #84]	; (80020cc <MX_TIM3_Init+0x94>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800207a:	4814      	ldr	r0, [pc, #80]	; (80020cc <MX_TIM3_Init+0x94>)
 800207c:	f00a fb9e 	bl	800c7bc <HAL_TIM_Base_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002086:	f7ff fc94 	bl	80019b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002090:	f107 0308 	add.w	r3, r7, #8
 8002094:	4619      	mov	r1, r3
 8002096:	480d      	ldr	r0, [pc, #52]	; (80020cc <MX_TIM3_Init+0x94>)
 8002098:	f00a ff1c 	bl	800ced4 <HAL_TIM_ConfigClockSource>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80020a2:	f7ff fc86 	bl	80019b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020ae:	463b      	mov	r3, r7
 80020b0:	4619      	mov	r1, r3
 80020b2:	4806      	ldr	r0, [pc, #24]	; (80020cc <MX_TIM3_Init+0x94>)
 80020b4:	f00b fae2 	bl	800d67c <HAL_TIMEx_MasterConfigSynchronization>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80020be:	f7ff fc78 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000364 	.word	0x20000364
 80020d0:	40000400 	.word	0x40000400

080020d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08e      	sub	sp, #56	; 0x38
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	f107 0320 	add.w	r3, r7, #32
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <MX_TIM4_Init+0xfc>)
 8002106:	4a33      	ldr	r2, [pc, #204]	; (80021d4 <MX_TIM4_Init+0x100>)
 8002108:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <MX_TIM4_Init+0xfc>)
 800210c:	2247      	movs	r2, #71	; 0x47
 800210e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <MX_TIM4_Init+0xfc>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <MX_TIM4_Init+0xfc>)
 8002118:	f240 32e7 	movw	r2, #999	; 0x3e7
 800211c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <MX_TIM4_Init+0xfc>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <MX_TIM4_Init+0xfc>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800212a:	4829      	ldr	r0, [pc, #164]	; (80021d0 <MX_TIM4_Init+0xfc>)
 800212c:	f00a fb46 	bl	800c7bc <HAL_TIM_Base_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002136:	f7ff fc3c 	bl	80019b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002140:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002144:	4619      	mov	r1, r3
 8002146:	4822      	ldr	r0, [pc, #136]	; (80021d0 <MX_TIM4_Init+0xfc>)
 8002148:	f00a fec4 	bl	800ced4 <HAL_TIM_ConfigClockSource>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002152:	f7ff fc2e 	bl	80019b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002156:	481e      	ldr	r0, [pc, #120]	; (80021d0 <MX_TIM4_Init+0xfc>)
 8002158:	f00a fbe0 	bl	800c91c <HAL_TIM_PWM_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002162:	f7ff fc26 	bl	80019b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800216e:	f107 0320 	add.w	r3, r7, #32
 8002172:	4619      	mov	r1, r3
 8002174:	4816      	ldr	r0, [pc, #88]	; (80021d0 <MX_TIM4_Init+0xfc>)
 8002176:	f00b fa81 	bl	800d67c <HAL_TIMEx_MasterConfigSynchronization>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002180:	f7ff fc17 	bl	80019b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002184:	2360      	movs	r3, #96	; 0x60
 8002186:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	2208      	movs	r2, #8
 8002198:	4619      	mov	r1, r3
 800219a:	480d      	ldr	r0, [pc, #52]	; (80021d0 <MX_TIM4_Init+0xfc>)
 800219c:	f00a fdd8 	bl	800cd50 <HAL_TIM_PWM_ConfigChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80021a6:	f7ff fc04 	bl	80019b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	220c      	movs	r2, #12
 80021ae:	4619      	mov	r1, r3
 80021b0:	4807      	ldr	r0, [pc, #28]	; (80021d0 <MX_TIM4_Init+0xfc>)
 80021b2:	f00a fdcd 	bl	800cd50 <HAL_TIM_PWM_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80021bc:	f7ff fbf9 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <MX_TIM4_Init+0xfc>)
 80021c2:	f000 f84b 	bl	800225c <HAL_TIM_MspPostInit>

}
 80021c6:	bf00      	nop
 80021c8:	3738      	adds	r7, #56	; 0x38
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200003ac 	.word	0x200003ac
 80021d4:	40000800 	.word	0x40000800

080021d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1a      	ldr	r2, [pc, #104]	; (8002250 <HAL_TIM_Base_MspInit+0x78>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d114      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_TIM_Base_MspInit+0x7c>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_TIM_Base_MspInit+0x7c>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_TIM_Base_MspInit+0x7c>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	201d      	movs	r0, #29
 8002208:	f007 fcd7 	bl	8009bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800220c:	201d      	movs	r0, #29
 800220e:	f007 fcf0 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002212:	e018      	b.n	8002246 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <HAL_TIM_Base_MspInit+0x80>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d113      	bne.n	8002246 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_TIM_Base_MspInit+0x7c>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_TIM_Base_MspInit+0x7c>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_TIM_Base_MspInit+0x7c>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	201e      	movs	r0, #30
 800223c:	f007 fcbd 	bl	8009bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002240:	201e      	movs	r0, #30
 8002242:	f007 fcd6 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40000400 	.word	0x40000400
 8002254:	40021000 	.word	0x40021000
 8002258:	40000800 	.word	0x40000800

0800225c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <HAL_TIM_MspPostInit+0x78>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d126      	bne.n	80022ca <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_TIM_MspPostInit+0x7c>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <HAL_TIM_MspPostInit+0x7c>)
 8002282:	f043 0320 	orr.w	r3, r3, #32
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_TIM_MspPostInit+0x7c>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002294:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002298:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2302      	movs	r3, #2
 80022a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	4619      	mov	r1, r3
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <HAL_TIM_MspPostInit+0x80>)
 80022aa:	f008 fabf 	bl	800a82c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_TIM_MspPostInit+0x84>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <HAL_TIM_MspPostInit+0x84>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022ca:	bf00      	nop
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40000800 	.word	0x40000800
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40011400 	.word	0x40011400
 80022e0:	40010000 	.word	0x40010000

080022e4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <MX_UART4_Init+0x4c>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <MX_UART4_Init+0x50>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <MX_UART4_Init+0x4c>)
 80022f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <MX_UART4_Init+0x4c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <MX_UART4_Init+0x4c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <MX_UART4_Init+0x4c>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <MX_UART4_Init+0x4c>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <MX_UART4_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <MX_UART4_Init+0x4c>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <MX_UART4_Init+0x4c>)
 800231c:	f00b fa2c 	bl	800d778 <HAL_UART_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002326:	f7ff fb44 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200003f4 	.word	0x200003f4
 8002334:	40004c00 	.word	0x40004c00

08002338 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <MX_USART1_UART_Init+0x50>)
 8002340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002370:	f00b fa02 	bl	800d778 <HAL_UART_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800237a:	f7ff fb1a 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000043c 	.word	0x2000043c
 8002388:	40013800 	.word	0x40013800

0800238c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_USART2_UART_Init+0x4c>)
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <MX_USART2_UART_Init+0x50>)
 8002394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <MX_USART2_UART_Init+0x4c>)
 8002398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800239c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_USART2_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_USART2_UART_Init+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <MX_USART2_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_USART2_UART_Init+0x4c>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <MX_USART2_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_USART2_UART_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023c2:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_USART2_UART_Init+0x4c>)
 80023c4:	f00b f9d8 	bl	800d778 <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ce:	f7ff faf0 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000484 	.word	0x20000484
 80023dc:	40004400 	.word	0x40004400

080023e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_USART3_UART_Init+0x4c>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <MX_USART3_UART_Init+0x50>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <MX_USART3_UART_Init+0x4c>)
 80023ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_USART3_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_USART3_UART_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <MX_USART3_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_USART3_UART_Init+0x4c>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <MX_USART3_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_USART3_UART_Init+0x4c>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_USART3_UART_Init+0x4c>)
 8002418:	f00b f9ae 	bl	800d778 <HAL_UART_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002422:	f7ff fac6 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200004cc 	.word	0x200004cc
 8002430:	40004800 	.word	0x40004800

08002434 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b090      	sub	sp, #64	; 0x40
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a9e      	ldr	r2, [pc, #632]	; (80026c8 <HAL_UART_MspInit+0x294>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d160      	bne.n	8002516 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002454:	4b9d      	ldr	r3, [pc, #628]	; (80026cc <HAL_UART_MspInit+0x298>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	4a9c      	ldr	r2, [pc, #624]	; (80026cc <HAL_UART_MspInit+0x298>)
 800245a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800245e:	61d3      	str	r3, [r2, #28]
 8002460:	4b9a      	ldr	r3, [pc, #616]	; (80026cc <HAL_UART_MspInit+0x298>)
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800246c:	4b97      	ldr	r3, [pc, #604]	; (80026cc <HAL_UART_MspInit+0x298>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	4a96      	ldr	r2, [pc, #600]	; (80026cc <HAL_UART_MspInit+0x298>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	6193      	str	r3, [r2, #24]
 8002478:	4b94      	ldr	r3, [pc, #592]	; (80026cc <HAL_UART_MspInit+0x298>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002496:	4619      	mov	r1, r3
 8002498:	488d      	ldr	r0, [pc, #564]	; (80026d0 <HAL_UART_MspInit+0x29c>)
 800249a:	f008 f9c7 	bl	800a82c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800249e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a4:	2300      	movs	r3, #0
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b0:	4619      	mov	r1, r3
 80024b2:	4887      	ldr	r0, [pc, #540]	; (80026d0 <HAL_UART_MspInit+0x29c>)
 80024b4:	f008 f9ba 	bl	800a82c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 80024b8:	4b86      	ldr	r3, [pc, #536]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80024ba:	4a87      	ldr	r2, [pc, #540]	; (80026d8 <HAL_UART_MspInit+0x2a4>)
 80024bc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024be:	4b85      	ldr	r3, [pc, #532]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c4:	4b83      	ldr	r3, [pc, #524]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ca:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d0:	4b80      	ldr	r3, [pc, #512]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d6:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80024dc:	4b7d      	ldr	r3, [pc, #500]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80024de:	2220      	movs	r2, #32
 80024e0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024e2:	4b7c      	ldr	r3, [pc, #496]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80024e8:	487a      	ldr	r0, [pc, #488]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80024ea:	f007 fca3 	bl	8009e34 <HAL_DMA_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80024f4:	f7ff fa5d 	bl	80019b2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a76      	ldr	r2, [pc, #472]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80024fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80024fe:	4a75      	ldr	r2, [pc, #468]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	2034      	movs	r0, #52	; 0x34
 800250a:	f007 fb56 	bl	8009bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800250e:	2034      	movs	r0, #52	; 0x34
 8002510:	f007 fb6f 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002514:	e159      	b.n	80027ca <HAL_UART_MspInit+0x396>
  else if(uartHandle->Instance==USART1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a70      	ldr	r2, [pc, #448]	; (80026dc <HAL_UART_MspInit+0x2a8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d160      	bne.n	80025e2 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002520:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_UART_MspInit+0x298>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a69      	ldr	r2, [pc, #420]	; (80026cc <HAL_UART_MspInit+0x298>)
 8002526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_UART_MspInit+0x298>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002534:	623b      	str	r3, [r7, #32]
 8002536:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	4b64      	ldr	r3, [pc, #400]	; (80026cc <HAL_UART_MspInit+0x298>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4a63      	ldr	r2, [pc, #396]	; (80026cc <HAL_UART_MspInit+0x298>)
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	6193      	str	r3, [r2, #24]
 8002544:	4b61      	ldr	r3, [pc, #388]	; (80026cc <HAL_UART_MspInit+0x298>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002562:	4619      	mov	r1, r3
 8002564:	485e      	ldr	r0, [pc, #376]	; (80026e0 <HAL_UART_MspInit+0x2ac>)
 8002566:	f008 f961 	bl	800a82c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800256a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002570:	2300      	movs	r3, #0
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	4858      	ldr	r0, [pc, #352]	; (80026e0 <HAL_UART_MspInit+0x2ac>)
 8002580:	f008 f954 	bl	800a82c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002584:	4b57      	ldr	r3, [pc, #348]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 8002586:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <HAL_UART_MspInit+0x2b4>)
 8002588:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800258a:	4b56      	ldr	r3, [pc, #344]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 800258c:	2200      	movs	r2, #0
 800258e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002590:	4b54      	ldr	r3, [pc, #336]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002596:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259c:	4b51      	ldr	r3, [pc, #324]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a2:	4b50      	ldr	r3, [pc, #320]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80025a8:	4b4e      	ldr	r3, [pc, #312]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 80025aa:	2220      	movs	r2, #32
 80025ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ae:	4b4d      	ldr	r3, [pc, #308]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025b4:	484b      	ldr	r0, [pc, #300]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 80025b6:	f007 fc3d 	bl	8009e34 <HAL_DMA_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_UART_MspInit+0x190>
      Error_Handler();
 80025c0:	f7ff f9f7 	bl	80019b2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a47      	ldr	r2, [pc, #284]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 80025c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80025ca:	4a46      	ldr	r2, [pc, #280]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2100      	movs	r1, #0
 80025d4:	2025      	movs	r0, #37	; 0x25
 80025d6:	f007 faf0 	bl	8009bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025da:	2025      	movs	r0, #37	; 0x25
 80025dc:	f007 fb09 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
}
 80025e0:	e0f3      	b.n	80027ca <HAL_UART_MspInit+0x396>
  else if(uartHandle->Instance==USART2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a41      	ldr	r2, [pc, #260]	; (80026ec <HAL_UART_MspInit+0x2b8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	f040 8089 	bne.w	8002700 <HAL_UART_MspInit+0x2cc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_UART_MspInit+0x298>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4a36      	ldr	r2, [pc, #216]	; (80026cc <HAL_UART_MspInit+0x298>)
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f8:	61d3      	str	r3, [r2, #28]
 80025fa:	4b34      	ldr	r3, [pc, #208]	; (80026cc <HAL_UART_MspInit+0x298>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002606:	4b31      	ldr	r3, [pc, #196]	; (80026cc <HAL_UART_MspInit+0x298>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	4a30      	ldr	r2, [pc, #192]	; (80026cc <HAL_UART_MspInit+0x298>)
 800260c:	f043 0320 	orr.w	r3, r3, #32
 8002610:	6193      	str	r3, [r2, #24]
 8002612:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <HAL_UART_MspInit+0x298>)
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800261e:	2320      	movs	r3, #32
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800262a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262e:	4619      	mov	r1, r3
 8002630:	482f      	ldr	r0, [pc, #188]	; (80026f0 <HAL_UART_MspInit+0x2bc>)
 8002632:	f008 f8fb 	bl	800a82c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002636:	2340      	movs	r3, #64	; 0x40
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263a:	2300      	movs	r3, #0
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002646:	4619      	mov	r1, r3
 8002648:	4829      	ldr	r0, [pc, #164]	; (80026f0 <HAL_UART_MspInit+0x2bc>)
 800264a:	f008 f8ef 	bl	800a82c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART2_ENABLE();
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <HAL_UART_MspInit+0x2c0>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002656:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800265c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265e:	f043 0308 	orr.w	r3, r3, #8
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <HAL_UART_MspInit+0x2c0>)
 8002666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002668:	6053      	str	r3, [r2, #4]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_UART_MspInit+0x2c4>)
 800266c:	4a23      	ldr	r2, [pc, #140]	; (80026fc <HAL_UART_MspInit+0x2c8>)
 800266e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002670:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_UART_MspInit+0x2c4>)
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_UART_MspInit+0x2c4>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800267c:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_UART_MspInit+0x2c4>)
 800267e:	2280      	movs	r2, #128	; 0x80
 8002680:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_UART_MspInit+0x2c4>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_UART_MspInit+0x2c4>)
 800268a:	2200      	movs	r2, #0
 800268c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_UART_MspInit+0x2c4>)
 8002690:	2220      	movs	r2, #32
 8002692:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_UART_MspInit+0x2c4>)
 8002696:	2200      	movs	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800269a:	4817      	ldr	r0, [pc, #92]	; (80026f8 <HAL_UART_MspInit+0x2c4>)
 800269c:	f007 fbca 	bl	8009e34 <HAL_DMA_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_UART_MspInit+0x276>
      Error_Handler();
 80026a6:	f7ff f984 	bl	80019b2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <HAL_UART_MspInit+0x2c4>)
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80026b0:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <HAL_UART_MspInit+0x2c4>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	2026      	movs	r0, #38	; 0x26
 80026bc:	f007 fa7d 	bl	8009bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026c0:	2026      	movs	r0, #38	; 0x26
 80026c2:	f007 fa96 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
}
 80026c6:	e080      	b.n	80027ca <HAL_UART_MspInit+0x396>
 80026c8:	40004c00 	.word	0x40004c00
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40011000 	.word	0x40011000
 80026d4:	20000514 	.word	0x20000514
 80026d8:	40020430 	.word	0x40020430
 80026dc:	40013800 	.word	0x40013800
 80026e0:	40010800 	.word	0x40010800
 80026e4:	20000558 	.word	0x20000558
 80026e8:	40020058 	.word	0x40020058
 80026ec:	40004400 	.word	0x40004400
 80026f0:	40011400 	.word	0x40011400
 80026f4:	40010000 	.word	0x40010000
 80026f8:	2000059c 	.word	0x2000059c
 80026fc:	4002006c 	.word	0x4002006c
  else if(uartHandle->Instance==USART3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a33      	ldr	r2, [pc, #204]	; (80027d4 <HAL_UART_MspInit+0x3a0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d15f      	bne.n	80027ca <HAL_UART_MspInit+0x396>
    __HAL_RCC_USART3_CLK_ENABLE();
 800270a:	4b33      	ldr	r3, [pc, #204]	; (80027d8 <HAL_UART_MspInit+0x3a4>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4a32      	ldr	r2, [pc, #200]	; (80027d8 <HAL_UART_MspInit+0x3a4>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002714:	61d3      	str	r3, [r2, #28]
 8002716:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_UART_MspInit+0x3a4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_UART_MspInit+0x3a4>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <HAL_UART_MspInit+0x3a4>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	6193      	str	r3, [r2, #24]
 800272e:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <HAL_UART_MspInit+0x3a4>)
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800273a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800274c:	4619      	mov	r1, r3
 800274e:	4823      	ldr	r0, [pc, #140]	; (80027dc <HAL_UART_MspInit+0x3a8>)
 8002750:	f008 f86c 	bl	800a82c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275a:	2300      	movs	r3, #0
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002766:	4619      	mov	r1, r3
 8002768:	481c      	ldr	r0, [pc, #112]	; (80027dc <HAL_UART_MspInit+0x3a8>)
 800276a:	f008 f85f 	bl	800a82c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_UART_MspInit+0x3ac>)
 8002770:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_UART_MspInit+0x3b0>)
 8002772:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <HAL_UART_MspInit+0x3ac>)
 8002776:	2200      	movs	r2, #0
 8002778:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277a:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_UART_MspInit+0x3ac>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <HAL_UART_MspInit+0x3ac>)
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_UART_MspInit+0x3ac>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <HAL_UART_MspInit+0x3ac>)
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_UART_MspInit+0x3ac>)
 8002794:	2220      	movs	r2, #32
 8002796:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_UART_MspInit+0x3ac>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800279e:	4810      	ldr	r0, [pc, #64]	; (80027e0 <HAL_UART_MspInit+0x3ac>)
 80027a0:	f007 fb48 	bl	8009e34 <HAL_DMA_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_UART_MspInit+0x37a>
      Error_Handler();
 80027aa:	f7ff f902 	bl	80019b2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <HAL_UART_MspInit+0x3ac>)
 80027b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80027b4:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_UART_MspInit+0x3ac>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	2027      	movs	r0, #39	; 0x27
 80027c0:	f007 f9fb 	bl	8009bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027c4:	2027      	movs	r0, #39	; 0x27
 80027c6:	f007 fa14 	bl	8009bf2 <HAL_NVIC_EnableIRQ>
}
 80027ca:	bf00      	nop
 80027cc:	3740      	adds	r7, #64	; 0x40
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40004800 	.word	0x40004800
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40010c00 	.word	0x40010c00
 80027e0:	200005e0 	.word	0x200005e0
 80027e4:	40020030 	.word	0x40020030

080027e8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART4)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a31      	ldr	r2, [pc, #196]	; (80028bc <HAL_UART_MspDeInit+0xd4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d113      	bne.n	8002822 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_UART_MspDeInit+0xd8>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <HAL_UART_MspDeInit+0xd8>)
 8002800:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002804:	61d3      	str	r3, [r2, #28]

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8002806:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800280a:	482e      	ldr	r0, [pc, #184]	; (80028c4 <HAL_UART_MspDeInit+0xdc>)
 800280c:	f008 f9a2 	bl	800ab54 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	4618      	mov	r0, r3
 8002816:	f007 fb83 	bl	8009f20 <HAL_DMA_DeInit>

    /* UART4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800281a:	2034      	movs	r0, #52	; 0x34
 800281c:	f007 f9f7 	bl	8009c0e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8002820:	e048      	b.n	80028b4 <HAL_UART_MspDeInit+0xcc>
  else if(uartHandle->Instance==USART1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a28      	ldr	r2, [pc, #160]	; (80028c8 <HAL_UART_MspDeInit+0xe0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d113      	bne.n	8002854 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART1_CLK_DISABLE();
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_UART_MspDeInit+0xd8>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_UART_MspDeInit+0xd8>)
 8002832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002836:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002838:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800283c:	4823      	ldr	r0, [pc, #140]	; (80028cc <HAL_UART_MspDeInit+0xe4>)
 800283e:	f008 f989 	bl	800ab54 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	4618      	mov	r0, r3
 8002848:	f007 fb6a 	bl	8009f20 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800284c:	2025      	movs	r0, #37	; 0x25
 800284e:	f007 f9de 	bl	8009c0e <HAL_NVIC_DisableIRQ>
}
 8002852:	e02f      	b.n	80028b4 <HAL_UART_MspDeInit+0xcc>
  else if(uartHandle->Instance==USART2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_UART_MspDeInit+0xe8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d112      	bne.n	8002884 <HAL_UART_MspDeInit+0x9c>
    __HAL_RCC_USART2_CLK_DISABLE();
 800285e:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <HAL_UART_MspDeInit+0xd8>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <HAL_UART_MspDeInit+0xd8>)
 8002864:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002868:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 800286a:	2160      	movs	r1, #96	; 0x60
 800286c:	4819      	ldr	r0, [pc, #100]	; (80028d4 <HAL_UART_MspDeInit+0xec>)
 800286e:	f008 f971 	bl	800ab54 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	4618      	mov	r0, r3
 8002878:	f007 fb52 	bl	8009f20 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800287c:	2026      	movs	r0, #38	; 0x26
 800287e:	f007 f9c6 	bl	8009c0e <HAL_NVIC_DisableIRQ>
}
 8002882:	e017      	b.n	80028b4 <HAL_UART_MspDeInit+0xcc>
  else if(uartHandle->Instance==USART3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <HAL_UART_MspDeInit+0xf0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d112      	bne.n	80028b4 <HAL_UART_MspDeInit+0xcc>
    __HAL_RCC_USART3_CLK_DISABLE();
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_UART_MspDeInit+0xd8>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <HAL_UART_MspDeInit+0xd8>)
 8002894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002898:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800289a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800289e:	480f      	ldr	r0, [pc, #60]	; (80028dc <HAL_UART_MspDeInit+0xf4>)
 80028a0:	f008 f958 	bl	800ab54 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	4618      	mov	r0, r3
 80028aa:	f007 fb39 	bl	8009f20 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80028ae:	2027      	movs	r0, #39	; 0x27
 80028b0:	f007 f9ad 	bl	8009c0e <HAL_NVIC_DisableIRQ>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40004c00 	.word	0x40004c00
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40011000 	.word	0x40011000
 80028c8:	40013800 	.word	0x40013800
 80028cc:	40010800 	.word	0x40010800
 80028d0:	40004400 	.word	0x40004400
 80028d4:	40011400 	.word	0x40011400
 80028d8:	40004800 	.word	0x40004800
 80028dc:	40010c00 	.word	0x40010c00

080028e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028e0:	f7ff fba4 	bl	800202c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e4:	480b      	ldr	r0, [pc, #44]	; (8002914 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028e6:	490c      	ldr	r1, [pc, #48]	; (8002918 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028e8:	4a0c      	ldr	r2, [pc, #48]	; (800291c <LoopFillZerobss+0x16>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a09      	ldr	r2, [pc, #36]	; (8002920 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028fc:	4c09      	ldr	r4, [pc, #36]	; (8002924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800290a:	f00b ff6b 	bl	800e7e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290e:	f7fe ff55 	bl	80017bc <main>
  bx lr
 8002912:	4770      	bx	lr
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 800291c:	08013264 	.word	0x08013264
  ldr r2, =_sbss
 8002920:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8002924:	20000e04 	.word	0x20000e04

08002928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC1_2_IRQHandler>

0800292a <at24_HAL_WriteBytes>:
  * @param	pData	     : Pointer to data buffer
  * @param  TxBufferSize : Amount of data you wanna Write
  * @retval
  */
int at24_HAL_WriteBytes(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress, uint8_t *pData,uint16_t TxBufferSize)
{
 800292a:	b590      	push	{r4, r7, lr}
 800292c:	b089      	sub	sp, #36	; 0x24
 800292e:	af04      	add	r7, sp, #16
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	817b      	strh	r3, [r7, #10]
 8002938:	4613      	mov	r3, r2
 800293a:	813b      	strh	r3, [r7, #8]
	 * You know that the most of the EEprom address start with 0xA0
	 * give MemAddress for the location you want to write to
	 * give Data buffer so it can write Data on this location
	 */
	//Note that this function works properly to 31 bytes
	if(MemAddress+TxBufferSize > 16)
 800293c:	893a      	ldrh	r2, [r7, #8]
 800293e:	8c3b      	ldrh	r3, [r7, #32]
 8002940:	4413      	add	r3, r2
 8002942:	2b10      	cmp	r3, #16
 8002944:	dd4f      	ble.n	80029e6 <at24_HAL_WriteBytes+0xbc>
	{
		//Write to 16bytes
		while(HAL_I2C_Mem_Write(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)16-MemAddress,1000)!= HAL_OK);
 8002946:	bf00      	nop
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	893b      	ldrh	r3, [r7, #8]
 800294c:	f1c3 0310 	rsb	r3, r3, #16
 8002950:	b29b      	uxth	r3, r3
 8002952:	893a      	ldrh	r2, [r7, #8]
 8002954:	8979      	ldrh	r1, [r7, #10]
 8002956:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800295a:	9402      	str	r4, [sp, #8]
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	2301      	movs	r3, #1
 8002964:	f008 fb4e 	bl	800b004 <HAL_I2C_Mem_Write>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1ec      	bne.n	8002948 <at24_HAL_WriteBytes+0x1e>
		//write remaining bytes
		*pData = *pData + (16-MemAddress);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	893b      	ldrh	r3, [r7, #8]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3310      	adds	r3, #16
 800297c:	b2da      	uxtb	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	701a      	strb	r2, [r3, #0]
		while(HAL_I2C_Mem_Write(hi2c,(uint16_t)DevAddress,(uint16_t)16,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)((MemAddress+TxBufferSize)-16),1000)!= HAL_OK);
 8002982:	bf00      	nop
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	893a      	ldrh	r2, [r7, #8]
 8002988:	8c3b      	ldrh	r3, [r7, #32]
 800298a:	4413      	add	r3, r2
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b10      	subs	r3, #16
 8002990:	b29b      	uxth	r3, r3
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002998:	9202      	str	r2, [sp, #8]
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2301      	movs	r3, #1
 80029a2:	2210      	movs	r2, #16
 80029a4:	f008 fb2e 	bl	800b004 <HAL_I2C_Mem_Write>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ea      	bne.n	8002984 <at24_HAL_WriteBytes+0x5a>
 80029ae:	e02e      	b.n	8002a0e <at24_HAL_WriteBytes+0xe4>
	else
	{
			while( (TxBufferSize-16)>0 )
			{
				//if your data is more than 16 bytes,you are here
				 while(HAL_I2C_Mem_Write(&hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)16,1000)!= HAL_OK);
 80029b0:	bf00      	nop
 80029b2:	893a      	ldrh	r2, [r7, #8]
 80029b4:	8979      	ldrh	r1, [r7, #10]
 80029b6:	f107 000c 	add.w	r0, r7, #12
 80029ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	2310      	movs	r3, #16
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2301      	movs	r3, #1
 80029ca:	f008 fb1b 	bl	800b004 <HAL_I2C_Mem_Write>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ee      	bne.n	80029b2 <at24_HAL_WriteBytes+0x88>
				 TxBufferSize-=16;
 80029d4:	8c3b      	ldrh	r3, [r7, #32]
 80029d6:	3b10      	subs	r3, #16
 80029d8:	843b      	strh	r3, [r7, #32]
				 pData+=16;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3310      	adds	r3, #16
 80029de:	607b      	str	r3, [r7, #4]
				 MemAddress+=16;
 80029e0:	893b      	ldrh	r3, [r7, #8]
 80029e2:	3310      	adds	r3, #16
 80029e4:	813b      	strh	r3, [r7, #8]
			while( (TxBufferSize-16)>0 )
 80029e6:	8c3b      	ldrh	r3, [r7, #32]
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d8e1      	bhi.n	80029b0 <at24_HAL_WriteBytes+0x86>
			}
			//remaining data
			while(HAL_I2C_Mem_Write(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)TxBufferSize,1000)!= HAL_OK);
 80029ec:	bf00      	nop
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	893a      	ldrh	r2, [r7, #8]
 80029f2:	8979      	ldrh	r1, [r7, #10]
 80029f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f8:	9302      	str	r3, [sp, #8]
 80029fa:	8c3b      	ldrh	r3, [r7, #32]
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2301      	movs	r3, #1
 8002a04:	f008 fafe 	bl	800b004 <HAL_I2C_Mem_Write>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ef      	bne.n	80029ee <at24_HAL_WriteBytes+0xc4>
	}
	return 1;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd90      	pop	{r4, r7, pc}

08002a18 <at24_HAL_ReadBytes>:


int at24_HAL_ReadBytes(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress, uint8_t *pData,uint16_t RxBufferSize)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af04      	add	r7, sp, #16
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	817b      	strh	r3, [r7, #10]
 8002a26:	4613      	mov	r3, r2
 8002a28:	813b      	strh	r3, [r7, #8]
	 * get the MemAddress for the location you want to write data on it
	 * get the Data buffer so it can write Data on this location
	 */
	//Note that this function works properly to 31bytes

			while( (RxBufferSize-16)>0 )
 8002a2a:	e021      	b.n	8002a70 <at24_HAL_ReadBytes+0x58>
			{
				//if your data is more than 16 bytes,you are here
				TimeOut = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
				 while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)16,1000)!= HAL_OK && TimeOut < 10)
 8002a30:	e002      	b.n	8002a38 <at24_HAL_ReadBytes+0x20>
				 {
						TimeOut++;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3301      	adds	r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
				 while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)16,1000)!= HAL_OK && TimeOut < 10)
 8002a38:	893a      	ldrh	r2, [r7, #8]
 8002a3a:	8979      	ldrh	r1, [r7, #10]
 8002a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a40:	9302      	str	r3, [sp, #8]
 8002a42:	2310      	movs	r3, #16
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f008 fbd3 	bl	800b1f8 <HAL_I2C_Mem_Read>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <at24_HAL_ReadBytes+0x46>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b09      	cmp	r3, #9
 8002a5c:	dde9      	ble.n	8002a32 <at24_HAL_ReadBytes+0x1a>
				 }

				 RxBufferSize-=16;
 8002a5e:	8c3b      	ldrh	r3, [r7, #32]
 8002a60:	3b10      	subs	r3, #16
 8002a62:	843b      	strh	r3, [r7, #32]
				 pData+=16;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3310      	adds	r3, #16
 8002a68:	607b      	str	r3, [r7, #4]
				 MemAddress+=16;
 8002a6a:	893b      	ldrh	r3, [r7, #8]
 8002a6c:	3310      	adds	r3, #16
 8002a6e:	813b      	strh	r3, [r7, #8]
			while( (RxBufferSize-16)>0 )
 8002a70:	8c3b      	ldrh	r3, [r7, #32]
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d8da      	bhi.n	8002a2c <at24_HAL_ReadBytes+0x14>
			}
//			//remaining data
			TimeOut = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
			while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)RxBufferSize,1000)!= HAL_OK && TimeOut < 10)
 8002a7a:	e002      	b.n	8002a82 <at24_HAL_ReadBytes+0x6a>
			{
				TimeOut++;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
			while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)RxBufferSize,1000)!= HAL_OK && TimeOut < 10)
 8002a82:	893a      	ldrh	r2, [r7, #8]
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8a:	9302      	str	r3, [sp, #8]
 8002a8c:	8c3b      	ldrh	r3, [r7, #32]
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2301      	movs	r3, #1
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f008 fbae 	bl	800b1f8 <HAL_I2C_Mem_Read>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <at24_HAL_ReadBytes+0x90>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b09      	cmp	r3, #9
 8002aa6:	dde9      	ble.n	8002a7c <at24_HAL_ReadBytes+0x64>
			}

	return 1;
 8002aa8:	2301      	movs	r3, #1
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <ADC_DMA_AVERAGE>:
uint8_t remote_value;

void get_remote_val();

uint16_t ADC_DMA_AVERAGE(int channel)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum;
	int i;
	
	adc_sum = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
	if(channel < NUMBER_ADC_CHANNEL )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	dc14      	bgt.n	8002af0 <ADC_DMA_AVERAGE+0x3c>
	{
		for(i=0; i<NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL; i++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	e00d      	b.n	8002ae8 <ADC_DMA_AVERAGE+0x34>
			adc_sum += ADC_DMA_BUFF[channel+i*NUMBER_ADC_CHANNEL];
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <ADC_DMA_AVERAGE+0x50>)
 8002ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
		for(i=0; i<NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL; i++)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b07      	cmp	r3, #7
 8002aec:	ddee      	ble.n	8002acc <ADC_DMA_AVERAGE+0x18>
 8002aee:	e001      	b.n	8002af4 <ADC_DMA_AVERAGE+0x40>
	}
	else
		return 1;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e002      	b.n	8002afa <ADC_DMA_AVERAGE+0x46>
	
	return adc_sum/NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	08db      	lsrs	r3, r3, #3
 8002af8:	b29b      	uxth	r3, r3
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	20000624 	.word	0x20000624

08002b08 <bsp_adc_init>:


uint32_t adc_value[3];

void bsp_adc_init()
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_DMA_BUFF, NUMBER_ADC_CHANNEL * NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL);
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	4903      	ldr	r1, [pc, #12]	; (8002b1c <bsp_adc_init+0x14>)
 8002b10:	4803      	ldr	r0, [pc, #12]	; (8002b20 <bsp_adc_init+0x18>)
 8002b12:	f005 fe1b 	bl	800874c <HAL_ADC_Start_DMA>
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000624 	.word	0x20000624
 8002b20:	20000240 	.word	0x20000240

08002b24 <get_adc_value>:

void get_adc_value()
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	get_remote_val();
 8002b28:	f000 f8a2 	bl	8002c70 <get_remote_val>
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <map_function>:




float map_function(float x, float in_min, float in_max, float out_min, float out_max) 
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7fe f863 	bl	8000c0c <__aeabi_fsub>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461c      	mov	r4, r3
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	6a38      	ldr	r0, [r7, #32]
 8002b4e:	f7fe f85d 	bl	8000c0c <__aeabi_fsub>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4619      	mov	r1, r3
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7fe f962 	bl	8000e20 <__aeabi_fmul>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461c      	mov	r4, r3
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe f852 	bl	8000c0c <__aeabi_fsub>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7fe fa0b 	bl	8000f88 <__aeabi_fdiv>
 8002b72:	4603      	mov	r3, r0
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe f84a 	bl	8000c10 <__addsf3>
 8002b7c:	4603      	mov	r3, r0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd90      	pop	{r4, r7, pc}

08002b86 <multiMap>:


float multiMap(float val, float* _in, float* _out, uint16_t size){
 8002b86:	b590      	push	{r4, r7, lr}
 8002b88:	b089      	sub	sp, #36	; 0x24
 8002b8a:	af02      	add	r7, sp, #8
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	807b      	strh	r3, [r7, #2]
    if (val <= _in[0]) return _out[0];
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f7fe fae8 	bl	8001170 <__aeabi_fcmple>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <multiMap+0x26>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	e05c      	b.n	8002c66 <multiMap+0xe0>
    if (val >= _in[size-1]) return _out[size-1];
 8002bac:	887b      	ldrh	r3, [r7, #2]
 8002bae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	4413      	add	r3, r2
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7fe fae0 	bl	8001184 <__aeabi_fcmpge>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <multiMap+0x56>
 8002bca:	887b      	ldrh	r3, [r7, #2]
 8002bcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	e044      	b.n	8002c66 <multiMap+0xe0>
    uint8_t pos = 1; 
 8002bdc:	2301      	movs	r3, #1
 8002bde:	75fb      	strb	r3, [r7, #23]
    while(val > _in[pos]) pos++;
 8002be0:	e002      	b.n	8002be8 <multiMap+0x62>
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	3301      	adds	r3, #1
 8002be6:	75fb      	strb	r3, [r7, #23]
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	4413      	add	r3, r2
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7fe facf 	bl	8001198 <__aeabi_fcmpgt>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <multiMap+0x5c>
    if (val == _in[pos]) return _out[pos];
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	4413      	add	r3, r2
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7fe fa9b 	bl	8001148 <__aeabi_fcmpeq>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <multiMap+0x9e>
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	e020      	b.n	8002c66 <multiMap+0xe0>
    return map_function(val, _in[pos-1], _in[pos], _out[pos-1], _out[pos]);
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4413      	add	r3, r2
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c44:	3b01      	subs	r3, #1
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	681c      	ldr	r4, [r3, #0]
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff ff66 	bl	8002b30 <map_function>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd90      	pop	{r4, r7, pc}
	...

08002c70 <get_remote_val>:



void get_remote_val()
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	V_Battery = ((60.5 * ADC_DMA_AVERAGE(0))/4095)-1; 
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7ff ff1d 	bl	8002ab4 <ADC_DMA_AVERAGE>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc37 	bl	80004f0 <__aeabi_i2d>
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <get_remote_val+0xd8>)
 8002c88:	f7fd fc9c 	bl	80005c4 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	a32a      	add	r3, pc, #168	; (adr r3, 8002d40 <get_remote_val+0xd0>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f7fd fdbd 	bl	8000818 <__aeabi_ddiv>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <get_remote_val+0xdc>)
 8002cac:	f7fd fad2 	bl	8000254 <__aeabi_dsub>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fd ff54 	bl	8000b64 <__aeabi_d2f>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <get_remote_val+0xe0>)
 8002cc0:	6013      	str	r3, [r2, #0]
    outValue = multiMap(ADC_DMA_AVERAGE(1), &remoteAdc, &remoteMpa, Speed_MAX_SIZE);
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f7ff fef6 	bl	8002ab4 <ADC_DMA_AVERAGE>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe f850 	bl	8000d70 <__aeabi_ui2f>
 8002cd0:	2305      	movs	r3, #5
 8002cd2:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <get_remote_val+0xe4>)
 8002cd4:	4920      	ldr	r1, [pc, #128]	; (8002d58 <get_remote_val+0xe8>)
 8002cd6:	f7ff ff56 	bl	8002b86 <multiMap>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <get_remote_val+0xec>)
 8002cde:	6013      	str	r3, [r2, #0]
	remote_value = (uint8_t)outValue ;
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <get_remote_val+0xec>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe fa77 	bl	80011d8 <__aeabi_f2uiz>
 8002cea:	4603      	mov	r3, r0
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <get_remote_val+0xf0>)
 8002cf0:	701a      	strb	r2, [r3, #0]
	
	if(remote_value <= 120)
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <get_remote_val+0xf0>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b78      	cmp	r3, #120	; 0x78
 8002cf8:	d803      	bhi.n	8002d02 <get_remote_val+0x92>
		DRV_Speed = 1;
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <get_remote_val+0xf4>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
		DRV_Speed = 4;
	else
		DRV_Speed = 5;


}
 8002d00:	e01a      	b.n	8002d38 <get_remote_val+0xc8>
	else if(remote_value <= 140)
 8002d02:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <get_remote_val+0xf0>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b8c      	cmp	r3, #140	; 0x8c
 8002d08:	d803      	bhi.n	8002d12 <get_remote_val+0xa2>
		DRV_Speed = 2;
 8002d0a:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <get_remote_val+0xf4>)
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
}
 8002d10:	e012      	b.n	8002d38 <get_remote_val+0xc8>
	else if(remote_value <= 160)
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <get_remote_val+0xf0>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2ba0      	cmp	r3, #160	; 0xa0
 8002d18:	d803      	bhi.n	8002d22 <get_remote_val+0xb2>
		DRV_Speed = 3;
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <get_remote_val+0xf4>)
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	701a      	strb	r2, [r3, #0]
}
 8002d20:	e00a      	b.n	8002d38 <get_remote_val+0xc8>
	else if(remote_value <= 180)
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <get_remote_val+0xf0>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2bb4      	cmp	r3, #180	; 0xb4
 8002d28:	d803      	bhi.n	8002d32 <get_remote_val+0xc2>
		DRV_Speed = 4;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <get_remote_val+0xf4>)
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	701a      	strb	r2, [r3, #0]
}
 8002d30:	e002      	b.n	8002d38 <get_remote_val+0xc8>
		DRV_Speed = 5;
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <get_remote_val+0xf4>)
 8002d34:	2205      	movs	r2, #5
 8002d36:	701a      	strb	r2, [r3, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	f3af 8000 	nop.w
 8002d40:	00000000 	.word	0x00000000
 8002d44:	40affe00 	.word	0x40affe00
 8002d48:	404e4000 	.word	0x404e4000
 8002d4c:	3ff00000 	.word	0x3ff00000
 8002d50:	20000034 	.word	0x20000034
 8002d54:	20000004 	.word	0x20000004
 8002d58:	20000018 	.word	0x20000018
 8002d5c:	20000664 	.word	0x20000664
 8002d60:	20000668 	.word	0x20000668
 8002d64:	20000038 	.word	0x20000038

08002d68 <uartInit>:
extern DMA_HandleTypeDef hdma_usart2_rx;



bool uartInit(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	e007      	b.n	8002d84 <uartInit+0x1c>
  {
    is_open[i] = false;
 8002d74:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <uartInit+0x30>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3301      	adds	r3, #1
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	ddf4      	ble.n	8002d74 <uartInit+0xc>
  }


  return true;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	2000066c 	.word	0x2000066c

08002d9c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002da8:	2300      	movs	r3, #0
 8002daa:	75fb      	strb	r3, [r7, #23]


  switch(ch)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <uartOpen+0x1c>
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d06e      	beq.n	8002e94 <uartOpen+0xf8>
 8002db6:	e0db      	b.n	8002f70 <uartOpen+0x1d4>
  {
    case _DEF_UART1:
    {
      huart2.Instance         = USART2;
 8002db8:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <uartOpen+0x1e0>)
 8002dba:	4a71      	ldr	r2, [pc, #452]	; (8002f80 <uartOpen+0x1e4>)
 8002dbc:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate    = baud;
 8002dbe:	4a6f      	ldr	r2, [pc, #444]	; (8002f7c <uartOpen+0x1e0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength  = UART_WORDLENGTH_8B;
 8002dc4:	4b6d      	ldr	r3, [pc, #436]	; (8002f7c <uartOpen+0x1e0>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits    = UART_STOPBITS_1;
 8002dca:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <uartOpen+0x1e0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity      = UART_PARITY_NONE;
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <uartOpen+0x1e0>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode        = UART_MODE_TX_RX;
 8002dd6:	4b69      	ldr	r3, [pc, #420]	; (8002f7c <uartOpen+0x1e0>)
 8002dd8:	220c      	movs	r2, #12
 8002dda:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8002ddc:	4b67      	ldr	r3, [pc, #412]	; (8002f7c <uartOpen+0x1e0>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling= UART_OVERSAMPLING_16;
 8002de2:	4b66      	ldr	r3, [pc, #408]	; (8002f7c <uartOpen+0x1e0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart2);
 8002de8:	4864      	ldr	r0, [pc, #400]	; (8002f7c <uartOpen+0x1e0>)
 8002dea:	f00a fd15 	bl	800d818 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf_ch1[0], 256);
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	4a64      	ldr	r2, [pc, #400]	; (8002f84 <uartOpen+0x1e8>)
 8002df4:	4413      	add	r3, r2
 8002df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dfa:	4963      	ldr	r1, [pc, #396]	; (8002f88 <uartOpen+0x1ec>)
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 f93b 	bl	8007078 <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8002e02:	4b62      	ldr	r3, [pc, #392]	; (8002f8c <uartOpen+0x1f0>)
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	4a61      	ldr	r2, [pc, #388]	; (8002f8c <uartOpen+0x1f0>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6153      	str	r3, [r2, #20]
 8002e0e:	4b5f      	ldr	r3, [pc, #380]	; (8002f8c <uartOpen+0x1f0>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
      HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	2010      	movs	r0, #16
 8002e20:	f006 fecb 	bl	8009bba <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002e24:	2010      	movs	r0, #16
 8002e26:	f006 fee4 	bl	8009bf2 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e2a:	4854      	ldr	r0, [pc, #336]	; (8002f7c <uartOpen+0x1e0>)
 8002e2c:	f00a fca4 	bl	800d778 <HAL_UART_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <uartOpen+0xa0>
      {
        ret = false;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
    }
    break;
 8002e3a:	e099      	b.n	8002f70 <uartOpen+0x1d4>
        ret = true;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	4a53      	ldr	r2, [pc, #332]	; (8002f90 <uartOpen+0x1f4>)
 8002e44:	2101      	movs	r1, #1
 8002e46:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf_ch1[0], 256) != HAL_OK)
 8002e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e4c:	494e      	ldr	r1, [pc, #312]	; (8002f88 <uartOpen+0x1ec>)
 8002e4e:	484b      	ldr	r0, [pc, #300]	; (8002f7c <uartOpen+0x1e0>)
 8002e50:	f00a fd97 	bl	800d982 <HAL_UART_Receive_DMA>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <uartOpen+0xc2>
          ret = false;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	4a48      	ldr	r2, [pc, #288]	; (8002f84 <uartOpen+0x1e8>)
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	4413      	add	r3, r2
 8002e66:	3308      	adds	r3, #8
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <uartOpen+0x1f8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	1a8a      	subs	r2, r1, r2
 8002e74:	4943      	ldr	r1, [pc, #268]	; (8002f84 <uartOpen+0x1e8>)
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	440b      	add	r3, r1
 8002e7a:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8002e7c:	79fa      	ldrb	r2, [r7, #7]
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	4940      	ldr	r1, [pc, #256]	; (8002f84 <uartOpen+0x1e8>)
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	440a      	add	r2, r1
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	493e      	ldr	r1, [pc, #248]	; (8002f84 <uartOpen+0x1e8>)
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3304      	adds	r3, #4
 8002e90:	601a      	str	r2, [r3, #0]
    break;
 8002e92:	e06d      	b.n	8002f70 <uartOpen+0x1d4>

    case _DEF_UART2:
    {
      huart1.Instance         = USART1;
 8002e94:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <uartOpen+0x1fc>)
 8002e96:	4a41      	ldr	r2, [pc, #260]	; (8002f9c <uartOpen+0x200>)
 8002e98:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 8002e9a:	4a3f      	ldr	r2, [pc, #252]	; (8002f98 <uartOpen+0x1fc>)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8002ea0:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <uartOpen+0x1fc>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits    = UART_STOPBITS_1;
 8002ea6:	4b3c      	ldr	r3, [pc, #240]	; (8002f98 <uartOpen+0x1fc>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity      = UART_PARITY_NONE;
 8002eac:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <uartOpen+0x1fc>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode        = UART_MODE_TX_RX;
 8002eb2:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <uartOpen+0x1fc>)
 8002eb4:	220c      	movs	r2, #12
 8002eb6:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8002eb8:	4b37      	ldr	r3, [pc, #220]	; (8002f98 <uartOpen+0x1fc>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8002ebe:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <uartOpen+0x1fc>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8002ec4:	4834      	ldr	r0, [pc, #208]	; (8002f98 <uartOpen+0x1fc>)
 8002ec6:	f00a fca7 	bl	800d818 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf_ch2[0], 256);
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	4a2d      	ldr	r2, [pc, #180]	; (8002f84 <uartOpen+0x1e8>)
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed6:	4932      	ldr	r1, [pc, #200]	; (8002fa0 <uartOpen+0x204>)
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f004 f8cd 	bl	8007078 <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <uartOpen+0x1f0>)
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4a2a      	ldr	r2, [pc, #168]	; (8002f8c <uartOpen+0x1f0>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6153      	str	r3, [r2, #20]
 8002eea:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <uartOpen+0x1f0>)
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	200f      	movs	r0, #15
 8002efc:	f006 fe5d 	bl	8009bba <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002f00:	200f      	movs	r0, #15
 8002f02:	f006 fe76 	bl	8009bf2 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f06:	4824      	ldr	r0, [pc, #144]	; (8002f98 <uartOpen+0x1fc>)
 8002f08:	f00a fc36 	bl	800d778 <HAL_UART_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <uartOpen+0x17c>
      {
        ret = false;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
    }
      
    break;
 8002f16:	e02a      	b.n	8002f6e <uartOpen+0x1d2>
        ret = true;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <uartOpen+0x1f4>)
 8002f20:	2101      	movs	r1, #1
 8002f22:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf_ch2[0], 256) != HAL_OK)
 8002f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f28:	491d      	ldr	r1, [pc, #116]	; (8002fa0 <uartOpen+0x204>)
 8002f2a:	481b      	ldr	r0, [pc, #108]	; (8002f98 <uartOpen+0x1fc>)
 8002f2c:	f00a fd29 	bl	800d982 <HAL_UART_Receive_DMA>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <uartOpen+0x19e>
          ret = false;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <uartOpen+0x1e8>)
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	4413      	add	r3, r2
 8002f42:	3308      	adds	r3, #8
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <uartOpen+0x208>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	1a8a      	subs	r2, r1, r2
 8002f50:	490c      	ldr	r1, [pc, #48]	; (8002f84 <uartOpen+0x1e8>)
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	440b      	add	r3, r1
 8002f56:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8002f58:	79fa      	ldrb	r2, [r7, #7]
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	4909      	ldr	r1, [pc, #36]	; (8002f84 <uartOpen+0x1e8>)
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	440a      	add	r2, r1
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	4907      	ldr	r1, [pc, #28]	; (8002f84 <uartOpen+0x1e8>)
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	440b      	add	r3, r1
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	601a      	str	r2, [r3, #0]
    break;
 8002f6e:	bf00      	nop
  }

  return ret;
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000484 	.word	0x20000484
 8002f80:	40004400 	.word	0x40004400
 8002f84:	20000670 	.word	0x20000670
 8002f88:	20000690 	.word	0x20000690
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	2000066c 	.word	0x2000066c
 8002f94:	2000059c 	.word	0x2000059c
 8002f98:	2000043c 	.word	0x2000043c
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	20000790 	.word	0x20000790
 8002fa4:	20000558 	.word	0x20000558

08002fa8 <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <uartAvailable+0x1a>
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d018      	beq.n	8002ff2 <uartAvailable+0x4a>
 8002fc0:	e02f      	b.n	8003022 <uartAvailable+0x7a>
  {
    case _DEF_UART1:
    {
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR);
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <uartAvailable+0x84>)
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4413      	add	r3, r2
 8002fca:	3308      	adds	r3, #8
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <uartAvailable+0x88>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	1a8a      	subs	r2, r1, r2
 8002fd8:	4914      	ldr	r1, [pc, #80]	; (800302c <uartAvailable+0x84>)
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	440b      	add	r3, r1
 8002fde:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	4a11      	ldr	r2, [pc, #68]	; (800302c <uartAvailable+0x84>)
 8002fe6:	4413      	add	r3, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 f89b 	bl	8007124 <qbufferAvailable>
 8002fee:	60f8      	str	r0, [r7, #12]
    }
    break;
 8002ff0:	e017      	b.n	8003022 <uartAvailable+0x7a>

    case _DEF_UART2:
    {
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	; (800302c <uartAvailable+0x84>)
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	6819      	ldr	r1, [r3, #0]
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <uartAvailable+0x8c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	1a8a      	subs	r2, r1, r2
 8003008:	4908      	ldr	r1, [pc, #32]	; (800302c <uartAvailable+0x84>)
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	440b      	add	r3, r1
 800300e:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4a05      	ldr	r2, [pc, #20]	; (800302c <uartAvailable+0x84>)
 8003016:	4413      	add	r3, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f004 f883 	bl	8007124 <qbufferAvailable>
 800301e:	60f8      	str	r0, [r7, #12]
    }
    break;
 8003020:	bf00      	nop
  
  }

  return ret;
 8003022:	68fb      	ldr	r3, [r7, #12]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000670 	.word	0x20000670
 8003030:	2000059c 	.word	0x2000059c
 8003034:	20000558 	.word	0x20000558

08003038 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <uartRead+0x1a>
 800304c:	2b01      	cmp	r3, #1
 800304e:	d008      	beq.n	8003062 <uartRead+0x2a>
 8003050:	e00f      	b.n	8003072 <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8003052:	f107 030f 	add.w	r3, r7, #15
 8003056:	2201      	movs	r2, #1
 8003058:	4619      	mov	r1, r3
 800305a:	4808      	ldr	r0, [pc, #32]	; (800307c <uartRead+0x44>)
 800305c:	f004 f826 	bl	80070ac <qbufferRead>
      break;
 8003060:	e007      	b.n	8003072 <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8003062:	f107 030f 	add.w	r3, r7, #15
 8003066:	2201      	movs	r2, #1
 8003068:	4619      	mov	r1, r3
 800306a:	4805      	ldr	r0, [pc, #20]	; (8003080 <uartRead+0x48>)
 800306c:	f004 f81e 	bl	80070ac <qbufferRead>
      break;
 8003070:	bf00      	nop
  }

  return ret;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000670 	.word	0x20000670
 8003080:	20000680 	.word	0x20000680

08003084 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <uartWrite+0x1e>
 800309c:	2b01      	cmp	r3, #1
 800309e:	d00f      	beq.n	80030c0 <uartWrite+0x3c>
 80030a0:	e020      	b.n	80030e4 <uartWrite+0x60>
  {
    case _DEF_UART1:
    {
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	2364      	movs	r3, #100	; 0x64
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	4811      	ldr	r0, [pc, #68]	; (80030f0 <uartWrite+0x6c>)
 80030ac:	f00a fbe6 	bl	800d87c <HAL_UART_Transmit>
 80030b0:	4603      	mov	r3, r0
 80030b2:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d111      	bne.n	80030de <uartWrite+0x5a>
      {
        ret = length;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	617b      	str	r3, [r7, #20]
      }
    }
    break;
 80030be:	e00e      	b.n	80030de <uartWrite+0x5a>

    case _DEF_UART2:
    {
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	2364      	movs	r3, #100	; 0x64
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	4809      	ldr	r0, [pc, #36]	; (80030f0 <uartWrite+0x6c>)
 80030ca:	f00a fbd7 	bl	800d87c <HAL_UART_Transmit>
 80030ce:	4603      	mov	r3, r0
 80030d0:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <uartWrite+0x5e>
      {
        ret = length;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	617b      	str	r3, [r7, #20]
      }
    }
    break;
 80030dc:	e001      	b.n	80030e2 <uartWrite+0x5e>
    break;
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <uartWrite+0x60>
    break;
 80030e2:	bf00      	nop
  }

  return ret;
 80030e4:	697b      	ldr	r3, [r7, #20]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2000043c 	.word	0x2000043c

080030f4 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80030f4:	b40e      	push	{r1, r2, r3}
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b0c7      	sub	sp, #284	; 0x11c
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4602      	mov	r2, r0
 80030fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003102:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003106:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003108:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800310c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003110:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003114:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8003116:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800311a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800311e:	f107 0010 	add.w	r0, r7, #16
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800312c:	f00c fae6 	bl	800f6fc <vsniprintf>
 8003130:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8003134:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003138:	f107 0110 	add.w	r1, r7, #16
 800313c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003140:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ff9c 	bl	8003084 <uartWrite>
 800314c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8003150:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003154:	4618      	mov	r0, r3
 8003156:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800315a:	46bd      	mov	sp, r7
 800315c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003160:	b003      	add	sp, #12
 8003162:	4770      	bx	lr

08003164 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  return 0;
 800317e:	bf00      	nop

}
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <cliInit>:





bool cliInit(void) {
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
	cli_node.is_open = false;
 800318c:	4b2f      	ldr	r3, [pc, #188]	; (800324c <cliInit+0xc4>)
 800318e:	2200      	movs	r2, #0
 8003190:	721a      	strb	r2, [r3, #8]
	cli_node.is_log = false;
 8003192:	4b2e      	ldr	r3, [pc, #184]	; (800324c <cliInit+0xc4>)
 8003194:	2200      	movs	r2, #0
 8003196:	725a      	strb	r2, [r3, #9]
	cli_node.state = CLI_RX_IDLE;
 8003198:	4b2c      	ldr	r3, [pc, #176]	; (800324c <cliInit+0xc4>)
 800319a:	2200      	movs	r2, #0
 800319c:	741a      	strb	r2, [r3, #16]

	cli_node.hist_line_i = 0;
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <cliInit+0xc4>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	cli_node.hist_line_last = 0;
 80031a6:	4b29      	ldr	r3, [pc, #164]	; (800324c <cliInit+0xc4>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	cli_node.hist_line_count = 0;
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <cliInit+0xc4>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	cli_node.hist_line_new = false;
 80031b6:	4b25      	ldr	r3, [pc, #148]	; (800324c <cliInit+0xc4>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

	cli_node.cmd_args.getData = cliArgsGetData;
 80031be:	4b23      	ldr	r3, [pc, #140]	; (800324c <cliInit+0xc4>)
 80031c0:	4a23      	ldr	r2, [pc, #140]	; (8003250 <cliInit+0xc8>)
 80031c2:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
	cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <cliInit+0xc4>)
 80031c8:	4a22      	ldr	r2, [pc, #136]	; (8003254 <cliInit+0xcc>)
 80031ca:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	cli_node.cmd_args.getStr = cliArgsGetStr;
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <cliInit+0xc4>)
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <cliInit+0xd0>)
 80031d2:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
	cli_node.cmd_args.isStr = cliArgsIsStr;
 80031d6:	4b1d      	ldr	r3, [pc, #116]	; (800324c <cliInit+0xc4>)
 80031d8:	4a20      	ldr	r2, [pc, #128]	; (800325c <cliInit+0xd4>)
 80031da:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

	cliLineClean(&cli_node);
 80031de:	481b      	ldr	r0, [pc, #108]	; (800324c <cliInit+0xc4>)
 80031e0:	f000 fbae 	bl	8003940 <cliLineClean>
// 조향모터 , 주행모터 , 저속, 중속, type 
	cliAdd("help", cliShowList);
 80031e4:	491e      	ldr	r1, [pc, #120]	; (8003260 <cliInit+0xd8>)
 80031e6:	481f      	ldr	r0, [pc, #124]	; (8003264 <cliInit+0xdc>)
 80031e8:	f000 fe28 	bl	8003e3c <cliAdd>
	cliAdd("drv", cli_drv_sqc); // 주행 curtis / dmcs
 80031ec:	491e      	ldr	r1, [pc, #120]	; (8003268 <cliInit+0xe0>)
 80031ee:	481f      	ldr	r0, [pc, #124]	; (800326c <cliInit+0xe4>)
 80031f0:	f000 fe24 	bl	8003e3c <cliAdd>
	cliAdd("sentype", cli_sentype_sqc); // 센서타입 
 80031f4:	491e      	ldr	r1, [pc, #120]	; (8003270 <cliInit+0xe8>)
 80031f6:	481f      	ldr	r0, [pc, #124]	; (8003274 <cliInit+0xec>)
 80031f8:	f000 fe20 	bl	8003e3c <cliAdd>
	cliAdd("speed", cli_speed_offset_sqc); // idle speed offset
 80031fc:	491e      	ldr	r1, [pc, #120]	; (8003278 <cliInit+0xf0>)
 80031fe:	481f      	ldr	r0, [pc, #124]	; (800327c <cliInit+0xf4>)
 8003200:	f000 fe1c 	bl	8003e3c <cliAdd>
	cliAdd("low", cli_speed_low_sqc); // 자율주행 저속
 8003204:	491e      	ldr	r1, [pc, #120]	; (8003280 <cliInit+0xf8>)
 8003206:	481f      	ldr	r0, [pc, #124]	; (8003284 <cliInit+0xfc>)
 8003208:	f000 fe18 	bl	8003e3c <cliAdd>
	cliAdd("high", cli_speed_high_sqc); // 자율주행 고속
 800320c:	491e      	ldr	r1, [pc, #120]	; (8003288 <cliInit+0x100>)
 800320e:	481f      	ldr	r0, [pc, #124]	; (800328c <cliInit+0x104>)
 8003210:	f000 fe14 	bl	8003e3c <cliAdd>
	cliAdd("remote", cli_remote_sqc); // 리모컨 종류 jeico / rfmaster	
 8003214:	491e      	ldr	r1, [pc, #120]	; (8003290 <cliInit+0x108>)
 8003216:	481f      	ldr	r0, [pc, #124]	; (8003294 <cliInit+0x10c>)
 8003218:	f000 fe10 	bl	8003e3c <cliAdd>
	cliAdd("bat", cli_battery_sqc); // 배터리타입 
 800321c:	491e      	ldr	r1, [pc, #120]	; (8003298 <cliInit+0x110>)
 800321e:	481f      	ldr	r0, [pc, #124]	; (800329c <cliInit+0x114>)
 8003220:	f000 fe0c 	bl	8003e3c <cliAdd>
	cliAdd("valve", cli_valve_sqc); // 후적밸브
 8003224:	491e      	ldr	r1, [pc, #120]	; (80032a0 <cliInit+0x118>)
 8003226:	481f      	ldr	r0, [pc, #124]	; (80032a4 <cliInit+0x11c>)
 8003228:	f000 fe08 	bl	8003e3c <cliAdd>
	cliAdd("rtk", cli_rtk_sqc); // 후적밸브
 800322c:	491e      	ldr	r1, [pc, #120]	; (80032a8 <cliInit+0x120>)
 800322e:	481f      	ldr	r0, [pc, #124]	; (80032ac <cliInit+0x124>)
 8003230:	f000 fe04 	bl	8003e3c <cliAdd>
	cliAdd("info", cli_info_sqc); // 설정값 정보
 8003234:	491e      	ldr	r1, [pc, #120]	; (80032b0 <cliInit+0x128>)
 8003236:	481f      	ldr	r0, [pc, #124]	; (80032b4 <cliInit+0x12c>)
 8003238:	f000 fe00 	bl	8003e3c <cliAdd>
	cliAdd("save", cli_eep_save_sqc); // 설정값 저장
 800323c:	491e      	ldr	r1, [pc, #120]	; (80032b8 <cliInit+0x130>)
 800323e:	481f      	ldr	r0, [pc, #124]	; (80032bc <cliInit+0x134>)
 8003240:	f000 fdfc 	bl	8003e3c <cliAdd>
	return true;
 8003244:	2301      	movs	r3, #1
}
 8003246:	4618      	mov	r0, r3
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000890 	.word	0x20000890
 8003250:	08003d05 	.word	0x08003d05
 8003254:	08003d55 	.word	0x08003d55
 8003258:	08003da5 	.word	0x08003da5
 800325c:	08003de9 	.word	0x08003de9
 8003260:	08003ed1 	.word	0x08003ed1
 8003264:	08011b80 	.word	0x08011b80
 8003268:	08003f6d 	.word	0x08003f6d
 800326c:	08011b88 	.word	0x08011b88
 8003270:	0800408d 	.word	0x0800408d
 8003274:	08011b8c 	.word	0x08011b8c
 8003278:	080041ad 	.word	0x080041ad
 800327c:	08011b94 	.word	0x08011b94
 8003280:	080042b5 	.word	0x080042b5
 8003284:	08011b9c 	.word	0x08011b9c
 8003288:	080043bd 	.word	0x080043bd
 800328c:	08011ba0 	.word	0x08011ba0
 8003290:	080044c5 	.word	0x080044c5
 8003294:	08011ba8 	.word	0x08011ba8
 8003298:	080045d9 	.word	0x080045d9
 800329c:	08011bb0 	.word	0x08011bb0
 80032a0:	080046ed 	.word	0x080046ed
 80032a4:	08011bb4 	.word	0x08011bb4
 80032a8:	08004801 	.word	0x08004801
 80032ac:	08011bbc 	.word	0x08011bbc
 80032b0:	08004915 	.word	0x08004915
 80032b4:	08011bc0 	.word	0x08011bc0
 80032b8:	08004a55 	.word	0x08004a55
 80032bc:	08011bc8 	.word	0x08011bc8

080032c0 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
	cli_node.ch = ch;
 80032cc:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <cliOpen+0x38>)
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	7013      	strb	r3, [r2, #0]
	cli_node.baud = baud;
 80032d2:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <cliOpen+0x38>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6053      	str	r3, [r2, #4]

	cli_node.is_open = uartOpen(ch, baud);
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	6839      	ldr	r1, [r7, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fd5d 	bl	8002d9c <uartOpen>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <cliOpen+0x38>)
 80032e8:	721a      	strb	r2, [r3, #8]

	return cli_node.is_open;
 80032ea:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <cliOpen+0x38>)
 80032ec:	7a1b      	ldrb	r3, [r3, #8]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000890 	.word	0x20000890

080032fc <cliShowLog>:
bool cliLogClose(void) {
	cli_node.is_log = false;
	return true;
}

void cliShowLog(cli_t *p_cli) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	if (cli_node.is_log == true) {
 8003304:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <cliShowLog+0xdc>)
 8003306:	7a5b      	ldrb	r3, [r3, #9]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d061      	beq.n	80033d0 <cliShowLog+0xd4>
		uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7a98      	ldrb	r0, [r3, #10]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003316:	461a      	mov	r2, r3
 8003318:	4930      	ldr	r1, [pc, #192]	; (80033dc <cliShowLog+0xe0>)
 800331a:	f7ff feeb 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7a98      	ldrb	r0, [r3, #10]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8003328:	461a      	mov	r2, r3
 800332a:	492d      	ldr	r1, [pc, #180]	; (80033e0 <cliShowLog+0xe4>)
 800332c:	f7ff fee2 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	7a98      	ldrb	r0, [r3, #10]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800333a:	461a      	mov	r2, r3
 800333c:	4929      	ldr	r1, [pc, #164]	; (80033e4 <cliShowLog+0xe8>)
 800333e:	f7ff fed9 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7a98      	ldrb	r0, [r3, #10]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800334c:	461a      	mov	r2, r3
 800334e:	4926      	ldr	r1, [pc, #152]	; (80033e8 <cliShowLog+0xec>)
 8003350:	f7ff fed0 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7a98      	ldrb	r0, [r3, #10]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800335e:	461a      	mov	r2, r3
 8003360:	4922      	ldr	r1, [pc, #136]	; (80033ec <cliShowLog+0xf0>)
 8003362:	f7ff fec7 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7a98      	ldrb	r0, [r3, #10]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003370:	461a      	mov	r2, r3
 8003372:	491f      	ldr	r1, [pc, #124]	; (80033f0 <cliShowLog+0xf4>)
 8003374:	f7ff febe 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7a98      	ldrb	r0, [r3, #10]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8003382:	461a      	mov	r2, r3
 8003384:	491b      	ldr	r1, [pc, #108]	; (80033f4 <cliShowLog+0xf8>)
 8003386:	f7ff feb5 	bl	80030f4 <uartPrintf>

		for (int i = 0; i < p_cli->hist_line_count; i++) {
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e012      	b.n	80033b6 <cliShowLog+0xba>
			uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	7a98      	ldrb	r0, [r3, #10]
					p_cli->line_buf[i].buf);
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4613      	mov	r3, r2
 8003398:	015b      	lsls	r3, r3, #5
 800339a:	4413      	add	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
			uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i,
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4913      	ldr	r1, [pc, #76]	; (80033f8 <cliShowLog+0xfc>)
 80033ac:	f7ff fea2 	bl	80030f4 <uartPrintf>
		for (int i = 0; i < p_cli->hist_line_count; i++) {
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3301      	adds	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80033bc:	461a      	mov	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4293      	cmp	r3, r2
 80033c2:	dbe5      	blt.n	8003390 <cliShowLog+0x94>
		}
		uartPrintf(p_cli->log_ch, "\n");
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7a9b      	ldrb	r3, [r3, #10]
 80033c8:	490c      	ldr	r1, [pc, #48]	; (80033fc <cliShowLog+0x100>)
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fe92 	bl	80030f4 <uartPrintf>
	}
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20000890 	.word	0x20000890
 80033dc:	08011bd0 	.word	0x08011bd0
 80033e0:	08011be0 	.word	0x08011be0
 80033e4:	08011bf0 	.word	0x08011bf0
 80033e8:	08011c00 	.word	0x08011c00
 80033ec:	08011c10 	.word	0x08011c10
 80033f0:	08011c20 	.word	0x08011c20
 80033f4:	08011c30 	.word	0x08011c30
 80033f8:	08011c40 	.word	0x08011c40
 80033fc:	08011c50 	.word	0x08011c50

08003400 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	uartPrintf(p_cli->ch, "\n\r");
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4906      	ldr	r1, [pc, #24]	; (8003428 <cliShowPrompt+0x28>)
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fe70 	bl	80030f4 <uartPrintf>
	uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	4904      	ldr	r1, [pc, #16]	; (800342c <cliShowPrompt+0x2c>)
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fe6a 	bl	80030f4 <uartPrintf>
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	08011c54 	.word	0x08011c54
 800342c:	08011c58 	.word	0x08011c58

08003430 <cliMain>:

bool cliMain(void) {
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
	if (cli_node.is_open != true) {
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <cliMain+0x40>)
 8003436:	7a1b      	ldrb	r3, [r3, #8]
 8003438:	f083 0301 	eor.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <cliMain+0x16>
		return false;
 8003442:	2300      	movs	r3, #0
 8003444:	e012      	b.n	800346c <cliMain+0x3c>
	}

	if (uartAvailable(cli_node.ch) > 0) {
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <cliMain+0x40>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fdac 	bl	8002fa8 <uartAvailable>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <cliMain+0x3a>
		cliUpdate(&cli_node, uartRead(cli_node.ch));
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <cliMain+0x40>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fdec 	bl	8003038 <uartRead>
 8003460:	4603      	mov	r3, r0
 8003462:	4619      	mov	r1, r3
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <cliMain+0x40>)
 8003466:	f000 f805 	bl	8003474 <cliUpdate>
	}

	return true;
 800346a:	2301      	movs	r3, #1
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000890 	.word	0x20000890

08003474 <cliUpdate>:

uint32_t cliWrite(uint8_t *p_data, uint32_t length) {
	return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	; 0x30
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	70fb      	strb	r3, [r7, #3]
	bool ret = false;
 8003480:	2300      	movs	r3, #0
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t tx_buf[8];
	cli_line_t *line;

	line = &p_cli->line;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800348c:	61fb      	str	r3, [r7, #28]

	if (p_cli->state == CLI_RX_IDLE) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7c1b      	ldrb	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 8168 	bne.w	8003768 <cliUpdate+0x2f4>
		switch (rx_data) {
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	2b7f      	cmp	r3, #127	; 0x7f
 800349c:	d02a      	beq.n	80034f4 <cliUpdate+0x80>
 800349e:	2b7f      	cmp	r3, #127	; 0x7f
 80034a0:	f300 80da 	bgt.w	8003658 <cliUpdate+0x1e4>
 80034a4:	2b1b      	cmp	r3, #27
 80034a6:	d021      	beq.n	80034ec <cliUpdate+0x78>
 80034a8:	2b1b      	cmp	r3, #27
 80034aa:	f300 80d5 	bgt.w	8003658 <cliUpdate+0x1e4>
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d062      	beq.n	8003578 <cliUpdate+0x104>
 80034b2:	2b0d      	cmp	r3, #13
 80034b4:	f040 80d0 	bne.w	8003658 <cliUpdate+0x1e4>
		// 엔터
		//
		case CLI_KEY_ENTER:
			if (line->count > 0) {
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <cliUpdate+0x5a>
				cliLineAdd(p_cli);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa55 	bl	8003972 <cliLineAdd>
				cliRunCmd(p_cli);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fb21 	bl	8003b10 <cliRunCmd>
			}

			line->count = 0;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			line->cursor = 0;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			line->buf[0] = 0;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
			cliShowPrompt(p_cli);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff8b 	bl	8003400 <cliShowPrompt>
			break;
 80034ea:	e144      	b.n	8003776 <cliUpdate+0x302>

		case CLI_KEY_ESC:
			p_cli->state = CLI_RX_SP1;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	741a      	strb	r2, [r3, #16]
			break;
 80034f2:	e140      	b.n	8003776 <cliUpdate+0x302>

			// DEL
			//
		case CLI_KEY_DEL:
			if (line->cursor < line->count) {
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003500:	429a      	cmp	r2, r3
 8003502:	f080 8133 	bcs.w	800376c <cliUpdate+0x2f8>
				uint8_t mov_len;

				mov_len = line->count - line->cursor;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	76fb      	strb	r3, [r7, #27]
				for (int i = 1; i < mov_len; i++) {
 8003516:	2301      	movs	r3, #1
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800351a:	e013      	b.n	8003544 <cliUpdate+0xd0>
					line->buf[line->cursor + i - 1] =
							line->buf[line->cursor + i];
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003522:	461a      	mov	r2, r3
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	441a      	add	r2, r3
					line->buf[line->cursor + i - 1] =
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800352e:	4619      	mov	r1, r3
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	440b      	add	r3, r1
 8003534:	3b01      	subs	r3, #1
							line->buf[line->cursor + i];
 8003536:	69f9      	ldr	r1, [r7, #28]
 8003538:	5c89      	ldrb	r1, [r1, r2]
					line->buf[line->cursor + i - 1] =
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	54d1      	strb	r1, [r2, r3]
				for (int i = 1; i < mov_len; i++) {
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	3301      	adds	r3, #1
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003544:	7efb      	ldrb	r3, [r7, #27]
 8003546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003548:	429a      	cmp	r2, r3
 800354a:	dbe7      	blt.n	800351c <cliUpdate+0xa8>
				}

				line->count--;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003552:	3b01      	subs	r3, #1
 8003554:	b2da      	uxtb	r2, r3
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
				line->buf[line->count] = 0;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003562:	461a      	mov	r2, r3
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

				uartPrintf(p_cli->ch, "\x1B[1P");
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	498e      	ldr	r1, [pc, #568]	; (80037a8 <cliUpdate+0x334>)
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fdbf 	bl	80030f4 <uartPrintf>
			}
			break;
 8003576:	e0f9      	b.n	800376c <cliUpdate+0x2f8>

			// 백스페이스
			//
		case CLI_KEY_BACK:
			if (line->count > 0 && line->cursor > 0) {
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800357e:	2b00      	cmp	r3, #0
 8003580:	d055      	beq.n	800362e <cliUpdate+0x1ba>
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003588:	2b00      	cmp	r3, #0
 800358a:	d050      	beq.n	800362e <cliUpdate+0x1ba>
				if (line->cursor == line->count) {
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003598:	429a      	cmp	r2, r3
 800359a:	d10e      	bne.n	80035ba <cliUpdate+0x146>
					line->count--;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
					line->buf[line->count] = 0;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035b2:	461a      	mov	r2, r3
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]
				}

				if (line->cursor < line->count) {
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d231      	bcs.n	800362e <cliUpdate+0x1ba>
					uint8_t mov_len;

					mov_len = line->count - line->cursor;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	76bb      	strb	r3, [r7, #26]

					for (int i = 0; i < mov_len; i++) {
 80035da:	2300      	movs	r3, #0
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035de:	e013      	b.n	8003608 <cliUpdate+0x194>
						line->buf[line->cursor + i - 1] = line->buf[line->cursor
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e6:	461a      	mov	r2, r3
								+ i];
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	441a      	add	r2, r3
						line->buf[line->cursor + i - 1] = line->buf[line->cursor
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f2:	4619      	mov	r1, r3
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	440b      	add	r3, r1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	69f9      	ldr	r1, [r7, #28]
 80035fc:	5c89      	ldrb	r1, [r1, r2]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < mov_len; i++) {
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	3301      	adds	r3, #1
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
 8003608:	7ebb      	ldrb	r3, [r7, #26]
 800360a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800360c:	429a      	cmp	r2, r3
 800360e:	dbe7      	blt.n	80035e0 <cliUpdate+0x16c>
					}

					line->count--;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003616:	3b01      	subs	r3, #1
 8003618:	b2da      	uxtb	r2, r3
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
					line->buf[line->count] = 0;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003626:	461a      	mov	r2, r3
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]
				}
			}

			if (line->cursor > 0) {
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 809b 	beq.w	8003770 <cliUpdate+0x2fc>
				line->cursor--;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003640:	3b01      	subs	r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
				uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	4957      	ldr	r1, [pc, #348]	; (80037ac <cliUpdate+0x338>)
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fd4f 	bl	80030f4 <uartPrintf>
			}
			break;
 8003656:	e08b      	b.n	8003770 <cliUpdate+0x2fc>

		default:
			if ((line->count + 1) < line->buf_len) {
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800365e:	3301      	adds	r3, #1
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8003666:	4293      	cmp	r3, r2
 8003668:	f280 8084 	bge.w	8003774 <cliUpdate+0x300>
				if (line->cursor == line->count) {
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003678:	429a      	cmp	r2, r3
 800367a:	d124      	bne.n	80036c6 <cliUpdate+0x252>
					uartWrite(p_cli->ch, &rx_data, 1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	1cf9      	adds	r1, r7, #3
 8003682:	2201      	movs	r2, #1
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fcfd 	bl	8003084 <uartWrite>

					line->buf[line->cursor] = rx_data;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003690:	461a      	mov	r2, r3
 8003692:	78f9      	ldrb	r1, [r7, #3]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	5499      	strb	r1, [r3, r2]
					line->count++;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800369e:	3301      	adds	r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
					line->cursor++;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ae:	3301      	adds	r3, #1
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
					line->buf[line->count] = 0;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036be:	461a      	mov	r2, r3
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2100      	movs	r1, #0
 80036c4:	5499      	strb	r1, [r3, r2]
				}
				if (line->cursor < line->count) {
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d24e      	bcs.n	8003774 <cliUpdate+0x300>
					uint8_t mov_len;

					mov_len = line->count - line->cursor;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	767b      	strb	r3, [r7, #25]
					for (int i = 0; i < mov_len; i++) {
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ea:	e013      	b.n	8003714 <cliUpdate+0x2a0>
						line->buf[line->count - i] = line->buf[line->count - i
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036f2:	461a      	mov	r2, r3
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	1ad3      	subs	r3, r2, r3
								- 1];
 80036f8:	1e5a      	subs	r2, r3, #1
						line->buf[line->count - i] = line->buf[line->count - i
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003700:	4619      	mov	r1, r3
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	1acb      	subs	r3, r1, r3
 8003706:	69f9      	ldr	r1, [r7, #28]
 8003708:	5c89      	ldrb	r1, [r1, r2]
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < mov_len; i++) {
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	3301      	adds	r3, #1
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
 8003714:	7e7b      	ldrb	r3, [r7, #25]
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	429a      	cmp	r2, r3
 800371a:	dbe7      	blt.n	80036ec <cliUpdate+0x278>
					}
					line->buf[line->cursor] = rx_data;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003722:	461a      	mov	r2, r3
 8003724:	78f9      	ldrb	r1, [r7, #3]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	5499      	strb	r1, [r3, r2]
					line->count++;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003730:	3301      	adds	r3, #1
 8003732:	b2da      	uxtb	r2, r3
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
					line->cursor++;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003740:	3301      	adds	r3, #1
 8003742:	b2da      	uxtb	r2, r3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
					line->buf[line->count] = 0;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003750:	461a      	mov	r2, r3
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

					uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	4914      	ldr	r1, [pc, #80]	; (80037b0 <cliUpdate+0x33c>)
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fcc7 	bl	80030f4 <uartPrintf>
				}
			}
			break;
 8003766:	e005      	b.n	8003774 <cliUpdate+0x300>
		}
	}
 8003768:	bf00      	nop
 800376a:	e004      	b.n	8003776 <cliUpdate+0x302>
			break;
 800376c:	bf00      	nop
 800376e:	e002      	b.n	8003776 <cliUpdate+0x302>
			break;
 8003770:	bf00      	nop
 8003772:	e000      	b.n	8003776 <cliUpdate+0x302>
			break;
 8003774:	bf00      	nop

	switch (p_cli->state) {
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7c1b      	ldrb	r3, [r3, #16]
 800377a:	3b01      	subs	r3, #1
 800377c:	2b03      	cmp	r3, #3
 800377e:	f200 80d2 	bhi.w	8003926 <cliUpdate+0x4b2>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <cliUpdate+0x314>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	08003799 	.word	0x08003799
 800378c:	080037a1 	.word	0x080037a1
 8003790:	080037b5 	.word	0x080037b5
 8003794:	0800391d 	.word	0x0800391d
	case CLI_RX_SP1:
		p_cli->state = CLI_RX_SP2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	741a      	strb	r2, [r3, #16]
		break;
 800379e:	e0c2      	b.n	8003926 <cliUpdate+0x4b2>

	case CLI_RX_SP2:
		p_cli->state = CLI_RX_SP3;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2203      	movs	r2, #3
 80037a4:	741a      	strb	r2, [r3, #16]
		break;
 80037a6:	e0be      	b.n	8003926 <cliUpdate+0x4b2>
 80037a8:	08011c60 	.word	0x08011c60
 80037ac:	08011c68 	.word	0x08011c68
 80037b0:	08011c70 	.word	0x08011c70

	case CLI_RX_SP3:
		p_cli->state = CLI_RX_IDLE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	741a      	strb	r2, [r3, #16]

		if (rx_data == CLI_KEY_LEFT) {
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	2b44      	cmp	r3, #68	; 0x44
 80037be:	d11a      	bne.n	80037f6 <cliUpdate+0x382>
			if (line->cursor > 0) {
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d015      	beq.n	80037f6 <cliUpdate+0x382>
				line->cursor--;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
				tx_buf[0] = 0x1B;
 80037da:	231b      	movs	r3, #27
 80037dc:	733b      	strb	r3, [r7, #12]
				tx_buf[1] = 0x5B;
 80037de:	235b      	movs	r3, #91	; 0x5b
 80037e0:	737b      	strb	r3, [r7, #13]
				tx_buf[2] = rx_data;
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	73bb      	strb	r3, [r7, #14]
				uartWrite(p_cli->ch, tx_buf, 3);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	f107 010c 	add.w	r1, r7, #12
 80037ee:	2203      	movs	r2, #3
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fc47 	bl	8003084 <uartWrite>
			}
		}

		if (rx_data == CLI_KEY_RIGHT) {
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	2b43      	cmp	r3, #67	; 0x43
 80037fa:	d11d      	bne.n	8003838 <cliUpdate+0x3c4>
			if (line->cursor < line->count) {
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003808:	429a      	cmp	r2, r3
 800380a:	d215      	bcs.n	8003838 <cliUpdate+0x3c4>
				line->cursor++;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003812:	3301      	adds	r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

				tx_buf[0] = 0x1B;
 800381c:	231b      	movs	r3, #27
 800381e:	733b      	strb	r3, [r7, #12]
				tx_buf[1] = 0x5B;
 8003820:	235b      	movs	r3, #91	; 0x5b
 8003822:	737b      	strb	r3, [r7, #13]
				tx_buf[2] = rx_data;
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	73bb      	strb	r3, [r7, #14]
				uartWrite(p_cli->ch, tx_buf, 3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	f107 010c 	add.w	r1, r7, #12
 8003830:	2203      	movs	r2, #3
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fc26 	bl	8003084 <uartWrite>
			}
		}

		if (rx_data == CLI_KEY_UP) {
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	2b41      	cmp	r3, #65	; 0x41
 800383c:	d10c      	bne.n	8003858 <cliUpdate+0x3e4>
			cliLineChange(p_cli, true);
 800383e:	2101      	movs	r1, #1
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f8db 	bl	80039fc <cliLineChange>
			uartPrintf(p_cli->ch, (char*) p_cli->line.buf);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f7ff fc4e 	bl	80030f4 <uartPrintf>
		}

		if (rx_data == CLI_KEY_DOWN) {
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	2b42      	cmp	r3, #66	; 0x42
 800385c:	d10c      	bne.n	8003878 <cliUpdate+0x404>
			cliLineChange(p_cli, false);
 800385e:	2100      	movs	r1, #0
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8cb 	bl	80039fc <cliLineChange>
			uartPrintf(p_cli->ch, (char*) p_cli->line.buf);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f7ff fc3e 	bl	80030f4 <uartPrintf>
		}

		if (rx_data == CLI_KEY_HOME) {
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	2b31      	cmp	r3, #49	; 0x31
 800387c:	d10f      	bne.n	800389e <cliUpdate+0x42a>
			uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7818      	ldrb	r0, [r3, #0]
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003888:	461a      	mov	r2, r3
 800388a:	492b      	ldr	r1, [pc, #172]	; (8003938 <cliUpdate+0x4c4>)
 800388c:	f7ff fc32 	bl	80030f4 <uartPrintf>
			line->cursor = 0;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			p_cli->state = CLI_RX_SP4;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2204      	movs	r2, #4
 800389c:	741a      	strb	r2, [r3, #16]
		}

		if (rx_data == CLI_KEY_END) {
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	2b34      	cmp	r3, #52	; 0x34
 80038a2:	d13f      	bne.n	8003924 <cliUpdate+0x4b0>
			uint16_t mov_len;

			if (line->cursor < line->count) {
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d210      	bcs.n	80038d6 <cliUpdate+0x462>
				mov_len = line->count - line->cursor;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	82fb      	strh	r3, [r7, #22]
				uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	8afa      	ldrh	r2, [r7, #22]
 80038ce:	491b      	ldr	r1, [pc, #108]	; (800393c <cliUpdate+0x4c8>)
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fc0f 	bl	80030f4 <uartPrintf>
			}
			if (line->cursor > line->count) {
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d910      	bls.n	8003908 <cliUpdate+0x494>
				mov_len = line->cursor - line->count;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	82fb      	strh	r3, [r7, #22]
				uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	8afa      	ldrh	r2, [r7, #22]
 8003900:	490d      	ldr	r1, [pc, #52]	; (8003938 <cliUpdate+0x4c4>)
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fbf6 	bl	80030f4 <uartPrintf>
			}
			line->cursor = line->count;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			p_cli->state = CLI_RX_SP4;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2204      	movs	r2, #4
 8003918:	741a      	strb	r2, [r3, #16]
		}
		break;
 800391a:	e003      	b.n	8003924 <cliUpdate+0x4b0>

	case CLI_RX_SP4:
		p_cli->state = CLI_RX_IDLE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	741a      	strb	r2, [r3, #16]
		break;
 8003922:	e000      	b.n	8003926 <cliUpdate+0x4b2>
		break;
 8003924:	bf00      	nop
	}

	cliShowLog(p_cli);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff fce8 	bl	80032fc <cliShowLog>

	return ret;
 800392c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003930:	4618      	mov	r0, r3
 8003932:	3730      	adds	r7, #48	; 0x30
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	08011c7c 	.word	0x08011c7c
 800393c:	08011c84 	.word	0x08011c84

08003940 <cliLineClean>:

void cliLineClean(cli_t *p_cli) {
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	p_cli->line.count = 0;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	p_cli->line.cursor = 0;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	223f      	movs	r2, #63	; 0x3f
 800395c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
	p_cli->line.buf[0] = 0;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr

08003972 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli) {
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]

	p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003980:	461a      	mov	r2, r3
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	015b      	lsls	r3, r3, #5
 8003988:	4413      	add	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	440b      	add	r3, r1
 8003990:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4610      	mov	r0, r2
 8003998:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800399c:	2243      	movs	r2, #67	; 0x43
 800399e:	4619      	mov	r1, r3
 80039a0:	f00a ff44 	bl	800e82c <memcpy>

	if (p_cli->hist_line_count < CLI_LINE_HIS_MAX) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d807      	bhi.n	80039be <cliLineAdd+0x4c>
		p_cli->hist_line_count++;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80039b4:	3301      	adds	r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	}

	p_cli->hist_line_i = p_cli->hist_line_last;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80039c4:	b25a      	sxtb	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80039d2:	3301      	adds	r3, #1
 80039d4:	425a      	negs	r2, r3
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	f002 0203 	and.w	r2, r2, #3
 80039de:	bf58      	it	pl
 80039e0:	4253      	negpl	r3, r2
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	p_cli->hist_line_new = true;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	70fb      	strb	r3, [r7, #3]
	uint8_t change_i;

	if (p_cli->hist_line_count == 0) {
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d076      	beq.n	8003b00 <cliLineChange+0x104>
		return;
	}

	if (p_cli->line.cursor > 0) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <cliLineChange+0x32>
		uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	7818      	ldrb	r0, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003a26:	461a      	mov	r2, r3
 8003a28:	4937      	ldr	r1, [pc, #220]	; (8003b08 <cliLineChange+0x10c>)
 8003a2a:	f7ff fb63 	bl	80030f4 <uartPrintf>
	}
	if (p_cli->line.count > 0) {
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <cliLineChange+0x4e>
		uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7818      	ldrb	r0, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8003a42:	461a      	mov	r2, r3
 8003a44:	4931      	ldr	r1, [pc, #196]	; (8003b0c <cliLineChange+0x110>)
 8003a46:	f7ff fb55 	bl	80030f4 <uartPrintf>
	}

	if (key_up == true) {
 8003a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d125      	bne.n	8003a9e <cliLineChange+0xa2>
		if (p_cli->hist_line_new == true) {
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d006      	beq.n	8003a6a <cliLineChange+0x6e>
			p_cli->hist_line_i = p_cli->hist_line_last;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003a62:	b25a      	sxtb	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
		}
		p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003a70:	461a      	mov	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8003a78:	4413      	add	r3, r2
 8003a7a:	3b01      	subs	r3, #1
				% p_cli->hist_line_count;
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8003a82:	fb93 f1f2 	sdiv	r1, r3, r2
 8003a86:	fb01 f202 	mul.w	r2, r1, r2
 8003a8a:	1a9b      	subs	r3, r3, r2
		p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1)
 8003a8c:	b25a      	sxtb	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
		change_i = p_cli->hist_line_i;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	e013      	b.n	8003ac6 <cliLineChange+0xca>
	} else {
		p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8003aac:	fb93 f1f2 	sdiv	r1, r3, r2
 8003ab0:	fb01 f202 	mul.w	r2, r1, r2
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	b25a      	sxtb	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
		change_i = p_cli->hist_line_i;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003ac4:	73fb      	strb	r3, [r7, #15]
	}

	p_cli->line = p_cli->line_buf[change_i];
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	015b      	lsls	r3, r3, #5
 8003ad0:	4413      	add	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4403      	add	r3, r0
 8003ad8:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8003adc:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	2243      	movs	r2, #67	; 0x43
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f00a fea1 	bl	800e82c <memcpy>
	p_cli->line.cursor = p_cli->line.count;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

	p_cli->hist_line_new = false;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8003afe:	e000      	b.n	8003b02 <cliLineChange+0x106>
		return;
 8003b00:	bf00      	nop
}
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08011c7c 	.word	0x08011c7c
 8003b0c:	08011c8c 	.word	0x08011c8c

08003b10 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	72fb      	strb	r3, [r7, #11]

	if (cliParseArgs(p_cli) == true) {
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f851 	bl	8003bc4 <cliParseArgs>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d046      	beq.n	8003bb6 <cliRunCmd+0xa6>
		cliPrintf("\r\n");
 8003b28:	4825      	ldr	r0, [pc, #148]	; (8003bc0 <cliRunCmd+0xb0>)
 8003b2a:	f000 f893 	bl	8003c54 <cliPrintf>

		cliToUpper(p_cli->argv[0]);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f8b1 	bl	8003c9c <cliToUpper>

		for (int i = 0; i < p_cli->cmd_count; i++) {
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e033      	b.n	8003ba8 <cliRunCmd+0x98>
			if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4413      	add	r3, r2
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f7fc fb64 	bl	8000228 <strcmp>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11d      	bne.n	8003ba2 <cliRunCmd+0x92>
				p_cli->cmd_args.argc = p_cli->argc - 1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
				p_cli->cmd_args.argv = &p_cli->argv[1];
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
				p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4798      	blx	r3
				break;
 8003ba0:	e009      	b.n	8003bb6 <cliRunCmd+0xa6>
		for (int i = 0; i < p_cli->cmd_count; i++) {
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	dbc4      	blt.n	8003b40 <cliRunCmd+0x30>
			}
		}
	}

	return ret;
 8003bb6:	7afb      	ldrb	r3, [r7, #11]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	08011c94 	.word	0x08011c94

08003bc4 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	77fb      	strb	r3, [r7, #31]
	char *tok;
	char *next_ptr;
	uint16_t argc = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	82fb      	strh	r3, [r7, #22]
	static const char *delim = " \f\n\r\t\v";
	char *cmdline;
	char **argv;

	p_cli->argc = 0;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

	cmdline = (char*) p_cli->line.buf;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8003be2:	613b      	str	r3, [r7, #16]
	argv = p_cli->argv;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8003bea:	60fb      	str	r3, [r7, #12]

	argv[argc] = NULL;
 8003bec:	8afb      	ldrh	r3, [r7, #22]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

	for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 8003bf8:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <cliParseArgs+0x8c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f107 0208 	add.w	r2, r7, #8
 8003c00:	4619      	mov	r1, r3
 8003c02:	6938      	ldr	r0, [r7, #16]
 8003c04:	f00b fcce 	bl	800f5a4 <strtok_r>
 8003c08:	61b8      	str	r0, [r7, #24]
 8003c0a:	e010      	b.n	8003c2e <cliParseArgs+0x6a>
			tok = strtok_r(NULL, delim, &next_ptr)) {
		argv[argc++] = tok;
 8003c0c:	8afb      	ldrh	r3, [r7, #22]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	82fa      	strh	r2, [r7, #22]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	601a      	str	r2, [r3, #0]
			tok = strtok_r(NULL, delim, &next_ptr)) {
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <cliParseArgs+0x8c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f107 0208 	add.w	r2, r7, #8
 8003c24:	4619      	mov	r1, r3
 8003c26:	2000      	movs	r0, #0
 8003c28:	f00b fcbc 	bl	800f5a4 <strtok_r>
 8003c2c:	61b8      	str	r0, [r7, #24]
	for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1eb      	bne.n	8003c0c <cliParseArgs+0x48>
	}

	p_cli->argc = argc;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8afa      	ldrh	r2, [r7, #22]
 8003c38:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

	if (argc > 0) {
 8003c3c:	8afb      	ldrh	r3, [r7, #22]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <cliParseArgs+0x82>
		ret = true;
 8003c42:	2301      	movs	r3, #1
 8003c44:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 8003c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000030 	.word	0x20000030

08003c54 <cliPrintf>:

void cliPrintf(const char *fmt, ...) {
 8003c54:	b40f      	push	{r0, r1, r2, r3}
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
	va_list arg;
	va_start(arg, fmt);
 8003c5c:	f107 031c 	add.w	r3, r7, #28
 8003c60:	607b      	str	r3, [r7, #4]
	int32_t len;
	cli_t *p_cli = &cli_node;
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <cliPrintf+0x44>)
 8003c64:	60fb      	str	r3, [r7, #12]

	len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f103 0011 	add.w	r0, r3, #17
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c74:	f00b fd42 	bl	800f6fc <vsniprintf>
 8003c78:	60b8      	str	r0, [r7, #8]
	va_end(arg);

	uartWrite(p_cli->ch, (uint8_t*) p_cli->print_buffer, len);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	7818      	ldrb	r0, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3311      	adds	r3, #17
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7ff f9fd 	bl	8003084 <uartWrite>
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c94:	b004      	add	sp, #16
 8003c96:	4770      	bx	lr
 8003c98:	20000890 	.word	0x20000890

08003c9c <cliToUpper>:

void cliToUpper(char *str) {
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint8_t str_ch;

	for (i = 0; i < CLI_CMD_NAME_MAX; i++) {
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	81fb      	strh	r3, [r7, #14]
 8003ca8:	e018      	b.n	8003cdc <cliToUpper+0x40>
		str_ch = str[i];
 8003caa:	89fb      	ldrh	r3, [r7, #14]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	737b      	strb	r3, [r7, #13]

		if (str_ch == 0) {
 8003cb4:	7b7b      	ldrb	r3, [r7, #13]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d014      	beq.n	8003ce4 <cliToUpper+0x48>
			break;
		}

		if ((str_ch >= 'a') && (str_ch <= 'z')) {
 8003cba:	7b7b      	ldrb	r3, [r7, #13]
 8003cbc:	2b60      	cmp	r3, #96	; 0x60
 8003cbe:	d905      	bls.n	8003ccc <cliToUpper+0x30>
 8003cc0:	7b7b      	ldrb	r3, [r7, #13]
 8003cc2:	2b7a      	cmp	r3, #122	; 0x7a
 8003cc4:	d802      	bhi.n	8003ccc <cliToUpper+0x30>
			str_ch = str_ch - 'a' + 'A';
 8003cc6:	7b7b      	ldrb	r3, [r7, #13]
 8003cc8:	3b20      	subs	r3, #32
 8003cca:	737b      	strb	r3, [r7, #13]
		}
		str[i] = str_ch;
 8003ccc:	89fb      	ldrh	r3, [r7, #14]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	7b7a      	ldrb	r2, [r7, #13]
 8003cd4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < CLI_CMD_NAME_MAX; i++) {
 8003cd6:	89fb      	ldrh	r3, [r7, #14]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	81fb      	strh	r3, [r7, #14]
 8003cdc:	89fb      	ldrh	r3, [r7, #14]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	d9e3      	bls.n	8003caa <cliToUpper+0xe>
 8003ce2:	e000      	b.n	8003ce6 <cliToUpper+0x4a>
			break;
 8003ce4:	bf00      	nop
	}

	if (i == CLI_CMD_NAME_MAX) {
 8003ce6:	89fb      	ldrh	r3, [r7, #14]
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d105      	bne.n	8003cf8 <cliToUpper+0x5c>
		str[i - 1] = 0;
 8003cec:	89fb      	ldrh	r3, [r7, #14]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
	}
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
	...

08003d04 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
	int32_t ret = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
	cli_t *p_cli = &cli_node;
 8003d12:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <cliArgsGetData+0x4c>)
 8003d14:	60bb      	str	r3, [r7, #8]

	if (index >= p_cli->cmd_args.argc) {
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d301      	bcc.n	8003d28 <cliArgsGetData+0x24>
		return 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e00e      	b.n	8003d46 <cliArgsGetData+0x42>
	}

	ret = (int32_t) strtoul((const char*) p_cli->cmd_args.argv[index],
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f00b fca8 	bl	800f690 <strtoul>
 8003d40:	4603      	mov	r3, r0
 8003d42:	60fb      	str	r3, [r7, #12]
			(char**) NULL, (int) 0);

	return ret;
 8003d44:	68fb      	ldr	r3, [r7, #12]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000890 	.word	0x20000890

08003d54 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
	float ret = 0.0;
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
	cli_t *p_cli = &cli_node;
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <cliArgsGetFloat+0x4c>)
 8003d66:	60bb      	str	r3, [r7, #8]

	if (index >= p_cli->cmd_args.argc) {
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <cliArgsGetFloat+0x28>
		return 0;
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e00c      	b.n	8003d96 <cliArgsGetFloat+0x42>
	}

	ret = (float) strtof((const char*) p_cli->cmd_args.argv[index],
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f00b fb8f 	bl	800f4b0 <strtof>
 8003d92:	60f8      	str	r0, [r7, #12]
			(char**) NULL);

	return ret;
 8003d94:	68fb      	ldr	r3, [r7, #12]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000890 	.word	0x20000890

08003da4 <cliArgsGetStr>:

char* cliArgsGetStr(uint8_t index) {
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	71fb      	strb	r3, [r7, #7]
	char *ret = NULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
	cli_t *p_cli = &cli_node;
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <cliArgsGetStr+0x40>)
 8003db4:	60bb      	str	r3, [r7, #8]

	if (index >= p_cli->cmd_args.argc) {
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d301      	bcc.n	8003dc8 <cliArgsGetStr+0x24>
		return 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e008      	b.n	8003dda <cliArgsGetStr+0x36>
	}

	ret = p_cli->cmd_args.argv[index];
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

	return ret;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	20000890 	.word	0x20000890

08003de8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	6039      	str	r1, [r7, #0]
 8003df2:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]
	cli_t *p_cli = &cli_node;
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <cliArgsIsStr+0x50>)
 8003dfa:	60bb      	str	r3, [r7, #8]

	if (index >= p_cli->cmd_args.argc) {
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d301      	bcc.n	8003e0e <cliArgsIsStr+0x26>
		return 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e010      	b.n	8003e30 <cliArgsIsStr+0x48>
	}

	if (strcmp(p_str, p_cli->cmd_args.argv[index]) == 0) {
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6838      	ldr	r0, [r7, #0]
 8003e20:	f7fc fa02 	bl	8000228 <strcmp>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <cliArgsIsStr+0x46>
		ret = true;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000890 	.word	0x20000890

08003e3c <cliAdd>:
	} else {
		return false;
	}
}

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t*)) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
	bool ret = true;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
	cli_t *p_cli = &cli_node;
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <cliAdd+0x90>)
 8003e4c:	613b      	str	r3, [r7, #16]
	uint16_t index;

	if (p_cli->cmd_count >= CLI_CMD_LIST_MAX) {
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8003e54:	2b0f      	cmp	r3, #15
 8003e56:	d901      	bls.n	8003e5c <cliAdd+0x20>
		return false;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e032      	b.n	8003ec2 <cliAdd+0x86>
	}

	index = p_cli->cmd_count;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8003e62:	81fb      	strh	r3, [r7, #14]

	strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8003e64:	89fa      	ldrh	r2, [r7, #14]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f00a fd04 	bl	800e888 <strcpy>
	p_cli->cmd_list[index].cmd_func = p_func;
 8003e80:	89fa      	ldrh	r2, [r7, #14]
 8003e82:	6939      	ldr	r1, [r7, #16]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	601a      	str	r2, [r3, #0]

	cliToUpper(p_cli->cmd_list[index].cmd_str);
 8003e96:	89fa      	ldrh	r2, [r7, #14]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fef6 	bl	8003c9c <cliToUpper>

	p_cli->cmd_count++;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

	return ret;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000890 	.word	0x20000890

08003ed0 <cliShowList>:

void cliShowList(cli_args_t *args) 
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	cli_t *p_cli = &cli_node;
 8003ed8:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <cliShowList+0x7c>)
 8003eda:	60bb      	str	r3, [r7, #8]

	cliPrintf("\r\n");
 8003edc:	481c      	ldr	r0, [pc, #112]	; (8003f50 <cliShowList+0x80>)
 8003ede:	f7ff feb9 	bl	8003c54 <cliPrintf>
	cliPrintf("%s========= CMD LIST =========\r\n",C_YLLW);
 8003ee2:	491c      	ldr	r1, [pc, #112]	; (8003f54 <cliShowList+0x84>)
 8003ee4:	481c      	ldr	r0, [pc, #112]	; (8003f58 <cliShowList+0x88>)
 8003ee6:	f7ff feb5 	bl	8003c54 <cliPrintf>
	cliPrintf("%s",C_NRML);
 8003eea:	491c      	ldr	r1, [pc, #112]	; (8003f5c <cliShowList+0x8c>)
 8003eec:	481c      	ldr	r0, [pc, #112]	; (8003f60 <cliShowList+0x90>)
 8003eee:	f7ff feb1 	bl	8003c54 <cliPrintf>

	for (int i = 0; i < p_cli->cmd_count; i++) 
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	e015      	b.n	8003f24 <cliShowList+0x54>
	{
		cliPrintf("            ");
 8003ef8:	481a      	ldr	r0, [pc, #104]	; (8003f64 <cliShowList+0x94>)
 8003efa:	f7ff feab 	bl	8003c54 <cliPrintf>
		cliPrintf(p_cli->cmd_list[i].cmd_str);
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	4413      	add	r3, r2
 8003f10:	3304      	adds	r3, #4
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fe9e 	bl	8003c54 <cliPrintf>
		cliPrintf("\r\n");
 8003f18:	480d      	ldr	r0, [pc, #52]	; (8003f50 <cliShowList+0x80>)
 8003f1a:	f7ff fe9b 	bl	8003c54 <cliPrintf>
	for (int i = 0; i < p_cli->cmd_count; i++) 
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3301      	adds	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	dbe2      	blt.n	8003ef8 <cliShowList+0x28>
	}

	cliPrintf("%s============================\r\n",C_YLLW);
 8003f32:	4908      	ldr	r1, [pc, #32]	; (8003f54 <cliShowList+0x84>)
 8003f34:	480c      	ldr	r0, [pc, #48]	; (8003f68 <cliShowList+0x98>)
 8003f36:	f7ff fe8d 	bl	8003c54 <cliPrintf>
	cliPrintf("%s",C_NRML);
 8003f3a:	4908      	ldr	r1, [pc, #32]	; (8003f5c <cliShowList+0x8c>)
 8003f3c:	4808      	ldr	r0, [pc, #32]	; (8003f60 <cliShowList+0x90>)
 8003f3e:	f7ff fe89 	bl	8003c54 <cliPrintf>
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000890 	.word	0x20000890
 8003f50:	08011c94 	.word	0x08011c94
 8003f54:	08011c98 	.word	0x08011c98
 8003f58:	08011ca0 	.word	0x08011ca0
 8003f5c:	08011cc4 	.word	0x08011cc4
 8003f60:	08011ccc 	.word	0x08011ccc
 8003f64:	08011cd0 	.word	0x08011cd0
 8003f68:	08011ce0 	.word	0x08011ce0

08003f6c <cli_drv_sqc>:


void cli_drv_sqc(cli_args_t *args) 
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	unsigned int *addr;
	int argc = args->argc;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d11c      	bne.n	8003fc2 <cli_drv_sqc+0x56>
	{
		cliPrintf("%s======== DRV MOTOR TYPE SELECT =========\r\n",C_RED);
 8003f88:	4931      	ldr	r1, [pc, #196]	; (8004050 <cli_drv_sqc+0xe4>)
 8003f8a:	4832      	ldr	r0, [pc, #200]	; (8004054 <cli_drv_sqc+0xe8>)
 8003f8c:	f7ff fe62 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8003f90:	4931      	ldr	r1, [pc, #196]	; (8004058 <cli_drv_sqc+0xec>)
 8003f92:	4832      	ldr	r0, [pc, #200]	; (800405c <cli_drv_sqc+0xf0>)
 8003f94:	f7ff fe5e 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 8003f98:	4831      	ldr	r0, [pc, #196]	; (8004060 <cli_drv_sqc+0xf4>)
 8003f9a:	f7ff fe5b 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  CURTIS TPYE \r\n");
 8003f9e:	4831      	ldr	r0, [pc, #196]	; (8004064 <cli_drv_sqc+0xf8>)
 8003fa0:	f7ff fe58 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  DMCS   TPYE \r\n");
 8003fa4:	4830      	ldr	r0, [pc, #192]	; (8004068 <cli_drv_sqc+0xfc>)
 8003fa6:	f7ff fe55 	bl	8003c54 <cliPrintf>
		cliPrintf("      EX) drv 1  -> CURTIS TYPE SET \r\n");
 8003faa:	4830      	ldr	r0, [pc, #192]	; (800406c <cli_drv_sqc+0x100>)
 8003fac:	f7ff fe52 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 8003fb0:	4927      	ldr	r1, [pc, #156]	; (8004050 <cli_drv_sqc+0xe4>)
 8003fb2:	482f      	ldr	r0, [pc, #188]	; (8004070 <cli_drv_sqc+0x104>)
 8003fb4:	f7ff fe4e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8003fb8:	4927      	ldr	r1, [pc, #156]	; (8004058 <cli_drv_sqc+0xec>)
 8003fba:	4828      	ldr	r0, [pc, #160]	; (800405c <cli_drv_sqc+0xf0>)
 8003fbc:	f7ff fe4a 	bl	8003c54 <cliPrintf>
		return;
 8003fc0:	e042      	b.n	8004048 <cli_drv_sqc+0xdc>
	}


	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f00b fb60 	bl	800f690 <strtoul>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	60fb      	str	r3, [r7, #12]
	if (addr == 1) // ch
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d113      	bne.n	8004002 <cli_drv_sqc+0x96>
	{
		load_value.Motor_type = 1;
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <cli_drv_sqc+0x108>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8003fe0:	4925      	ldr	r1, [pc, #148]	; (8004078 <cli_drv_sqc+0x10c>)
 8003fe2:	4823      	ldr	r0, [pc, #140]	; (8004070 <cli_drv_sqc+0x104>)
 8003fe4:	f7ff fe36 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET CURTIS TYPE ===========\r\n",C_YLLW);
 8003fe8:	4923      	ldr	r1, [pc, #140]	; (8004078 <cli_drv_sqc+0x10c>)
 8003fea:	4824      	ldr	r0, [pc, #144]	; (800407c <cli_drv_sqc+0x110>)
 8003fec:	f7ff fe32 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8003ff0:	4921      	ldr	r1, [pc, #132]	; (8004078 <cli_drv_sqc+0x10c>)
 8003ff2:	481f      	ldr	r0, [pc, #124]	; (8004070 <cli_drv_sqc+0x104>)
 8003ff4:	f7ff fe2e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8003ff8:	4917      	ldr	r1, [pc, #92]	; (8004058 <cli_drv_sqc+0xec>)
 8003ffa:	4818      	ldr	r0, [pc, #96]	; (800405c <cli_drv_sqc+0xf0>)
 8003ffc:	f7ff fe2a 	bl	8003c54 <cliPrintf>
 8004000:	e022      	b.n	8004048 <cli_drv_sqc+0xdc>
	}
	else if ( addr == 2)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d113      	bne.n	8004030 <cli_drv_sqc+0xc4>
	{
		load_value.Motor_type = 2;
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <cli_drv_sqc+0x108>)
 800400a:	2202      	movs	r2, #2
 800400c:	701a      	strb	r2, [r3, #0]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800400e:	491a      	ldr	r1, [pc, #104]	; (8004078 <cli_drv_sqc+0x10c>)
 8004010:	4817      	ldr	r0, [pc, #92]	; (8004070 <cli_drv_sqc+0x104>)
 8004012:	f7ff fe1f 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET DMCS TYPE ===========\r\n",C_YLLW);
 8004016:	4918      	ldr	r1, [pc, #96]	; (8004078 <cli_drv_sqc+0x10c>)
 8004018:	4819      	ldr	r0, [pc, #100]	; (8004080 <cli_drv_sqc+0x114>)
 800401a:	f7ff fe1b 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800401e:	4916      	ldr	r1, [pc, #88]	; (8004078 <cli_drv_sqc+0x10c>)
 8004020:	4813      	ldr	r0, [pc, #76]	; (8004070 <cli_drv_sqc+0x104>)
 8004022:	f7ff fe17 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004026:	490c      	ldr	r1, [pc, #48]	; (8004058 <cli_drv_sqc+0xec>)
 8004028:	480c      	ldr	r0, [pc, #48]	; (800405c <cli_drv_sqc+0xf0>)
 800402a:	f7ff fe13 	bl	8003c54 <cliPrintf>
 800402e:	e00b      	b.n	8004048 <cli_drv_sqc+0xdc>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 8004030:	4907      	ldr	r1, [pc, #28]	; (8004050 <cli_drv_sqc+0xe4>)
 8004032:	4814      	ldr	r0, [pc, #80]	; (8004084 <cli_drv_sqc+0x118>)
 8004034:	f7ff fe0e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 8004038:	4905      	ldr	r1, [pc, #20]	; (8004050 <cli_drv_sqc+0xe4>)
 800403a:	4813      	ldr	r0, [pc, #76]	; (8004088 <cli_drv_sqc+0x11c>)
 800403c:	f7ff fe0a 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004040:	4905      	ldr	r1, [pc, #20]	; (8004058 <cli_drv_sqc+0xec>)
 8004042:	4806      	ldr	r0, [pc, #24]	; (800405c <cli_drv_sqc+0xf0>)
 8004044:	f7ff fe06 	bl	8003c54 <cliPrintf>
	}

}
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	08011d04 	.word	0x08011d04
 8004054:	08011d0c 	.word	0x08011d0c
 8004058:	08011cc4 	.word	0x08011cc4
 800405c:	08011ccc 	.word	0x08011ccc
 8004060:	08011d3c 	.word	0x08011d3c
 8004064:	08011d60 	.word	0x08011d60
 8004068:	08011d84 	.word	0x08011d84
 800406c:	08011da8 	.word	0x08011da8
 8004070:	08011dd0 	.word	0x08011dd0
 8004074:	20000dd4 	.word	0x20000dd4
 8004078:	08011c98 	.word	0x08011c98
 800407c:	08011e00 	.word	0x08011e00
 8004080:	08011e2c 	.word	0x08011e2c
 8004084:	08011e58 	.word	0x08011e58
 8004088:	08011e7c 	.word	0x08011e7c

0800408c <cli_sentype_sqc>:


void cli_sentype_sqc(cli_args_t *args)  // NPN PNP
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	
	unsigned int *addr;
	int argc = args->argc;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11c      	bne.n	80040e2 <cli_sentype_sqc+0x56>
	{
		cliPrintf("%s======== STR SENSOR TYPE SELECT =========\r\n",C_RED);
 80040a8:	4931      	ldr	r1, [pc, #196]	; (8004170 <cli_sentype_sqc+0xe4>)
 80040aa:	4832      	ldr	r0, [pc, #200]	; (8004174 <cli_sentype_sqc+0xe8>)
 80040ac:	f7ff fdd2 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80040b0:	4931      	ldr	r1, [pc, #196]	; (8004178 <cli_sentype_sqc+0xec>)
 80040b2:	4832      	ldr	r0, [pc, #200]	; (800417c <cli_sentype_sqc+0xf0>)
 80040b4:	f7ff fdce 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 80040b8:	4831      	ldr	r0, [pc, #196]	; (8004180 <cli_sentype_sqc+0xf4>)
 80040ba:	f7ff fdcb 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  NPN   TPYE \r\n");
 80040be:	4831      	ldr	r0, [pc, #196]	; (8004184 <cli_sentype_sqc+0xf8>)
 80040c0:	f7ff fdc8 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  PNP   TPYE \r\n");
 80040c4:	4830      	ldr	r0, [pc, #192]	; (8004188 <cli_sentype_sqc+0xfc>)
 80040c6:	f7ff fdc5 	bl	8003c54 <cliPrintf>
		cliPrintf("      EX) type 1  -> NPN TYPE SET \r\n");
 80040ca:	4830      	ldr	r0, [pc, #192]	; (800418c <cli_sentype_sqc+0x100>)
 80040cc:	f7ff fdc2 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 80040d0:	4927      	ldr	r1, [pc, #156]	; (8004170 <cli_sentype_sqc+0xe4>)
 80040d2:	482f      	ldr	r0, [pc, #188]	; (8004190 <cli_sentype_sqc+0x104>)
 80040d4:	f7ff fdbe 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80040d8:	4927      	ldr	r1, [pc, #156]	; (8004178 <cli_sentype_sqc+0xec>)
 80040da:	4828      	ldr	r0, [pc, #160]	; (800417c <cli_sentype_sqc+0xf0>)
 80040dc:	f7ff fdba 	bl	8003c54 <cliPrintf>
		return;
 80040e0:	e042      	b.n	8004168 <cli_sentype_sqc+0xdc>
	}


	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f00b fad0 	bl	800f690 <strtoul>
 80040f0:	4603      	mov	r3, r0
 80040f2:	60fb      	str	r3, [r7, #12]
	if (addr == 1) // ch
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d113      	bne.n	8004122 <cli_sentype_sqc+0x96>
	{

		load_value.Sensor_type = 2;
 80040fa:	4b26      	ldr	r3, [pc, #152]	; (8004194 <cli_sentype_sqc+0x108>)
 80040fc:	2202      	movs	r2, #2
 80040fe:	705a      	strb	r2, [r3, #1]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004100:	4925      	ldr	r1, [pc, #148]	; (8004198 <cli_sentype_sqc+0x10c>)
 8004102:	4823      	ldr	r0, [pc, #140]	; (8004190 <cli_sentype_sqc+0x104>)
 8004104:	f7ff fda6 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET NPN TYPE ===========\r\n",C_YLLW);
 8004108:	4923      	ldr	r1, [pc, #140]	; (8004198 <cli_sentype_sqc+0x10c>)
 800410a:	4824      	ldr	r0, [pc, #144]	; (800419c <cli_sentype_sqc+0x110>)
 800410c:	f7ff fda2 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004110:	4921      	ldr	r1, [pc, #132]	; (8004198 <cli_sentype_sqc+0x10c>)
 8004112:	481f      	ldr	r0, [pc, #124]	; (8004190 <cli_sentype_sqc+0x104>)
 8004114:	f7ff fd9e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004118:	4917      	ldr	r1, [pc, #92]	; (8004178 <cli_sentype_sqc+0xec>)
 800411a:	4818      	ldr	r0, [pc, #96]	; (800417c <cli_sentype_sqc+0xf0>)
 800411c:	f7ff fd9a 	bl	8003c54 <cliPrintf>
 8004120:	e022      	b.n	8004168 <cli_sentype_sqc+0xdc>
	}
	else if ( addr == 2)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d113      	bne.n	8004150 <cli_sentype_sqc+0xc4>
	{
		load_value.Sensor_type = 1;
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <cli_sentype_sqc+0x108>)
 800412a:	2201      	movs	r2, #1
 800412c:	705a      	strb	r2, [r3, #1]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800412e:	491a      	ldr	r1, [pc, #104]	; (8004198 <cli_sentype_sqc+0x10c>)
 8004130:	4817      	ldr	r0, [pc, #92]	; (8004190 <cli_sentype_sqc+0x104>)
 8004132:	f7ff fd8f 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET PNP TYPE ===========\r\n",C_YLLW);
 8004136:	4918      	ldr	r1, [pc, #96]	; (8004198 <cli_sentype_sqc+0x10c>)
 8004138:	4819      	ldr	r0, [pc, #100]	; (80041a0 <cli_sentype_sqc+0x114>)
 800413a:	f7ff fd8b 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800413e:	4916      	ldr	r1, [pc, #88]	; (8004198 <cli_sentype_sqc+0x10c>)
 8004140:	4813      	ldr	r0, [pc, #76]	; (8004190 <cli_sentype_sqc+0x104>)
 8004142:	f7ff fd87 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004146:	490c      	ldr	r1, [pc, #48]	; (8004178 <cli_sentype_sqc+0xec>)
 8004148:	480c      	ldr	r0, [pc, #48]	; (800417c <cli_sentype_sqc+0xf0>)
 800414a:	f7ff fd83 	bl	8003c54 <cliPrintf>
 800414e:	e00b      	b.n	8004168 <cli_sentype_sqc+0xdc>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 8004150:	4907      	ldr	r1, [pc, #28]	; (8004170 <cli_sentype_sqc+0xe4>)
 8004152:	4814      	ldr	r0, [pc, #80]	; (80041a4 <cli_sentype_sqc+0x118>)
 8004154:	f7ff fd7e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 8004158:	4905      	ldr	r1, [pc, #20]	; (8004170 <cli_sentype_sqc+0xe4>)
 800415a:	4813      	ldr	r0, [pc, #76]	; (80041a8 <cli_sentype_sqc+0x11c>)
 800415c:	f7ff fd7a 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004160:	4905      	ldr	r1, [pc, #20]	; (8004178 <cli_sentype_sqc+0xec>)
 8004162:	4806      	ldr	r0, [pc, #24]	; (800417c <cli_sentype_sqc+0xf0>)
 8004164:	f7ff fd76 	bl	8003c54 <cliPrintf>
	}
}
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	08011d04 	.word	0x08011d04
 8004174:	08011ea8 	.word	0x08011ea8
 8004178:	08011cc4 	.word	0x08011cc4
 800417c:	08011ccc 	.word	0x08011ccc
 8004180:	08011d3c 	.word	0x08011d3c
 8004184:	08011ed8 	.word	0x08011ed8
 8004188:	08011efc 	.word	0x08011efc
 800418c:	08011f20 	.word	0x08011f20
 8004190:	08011dd0 	.word	0x08011dd0
 8004194:	20000dd4 	.word	0x20000dd4
 8004198:	08011c98 	.word	0x08011c98
 800419c:	08011f48 	.word	0x08011f48
 80041a0:	08011f70 	.word	0x08011f70
 80041a4:	08011e58 	.word	0x08011e58
 80041a8:	08011e7c 	.word	0x08011e7c

080041ac <cli_speed_offset_sqc>:

void cli_speed_offset_sqc(cli_args_t *args) 
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	uint8_t temp = 10;
 80041b4:	230a      	movs	r3, #10
 80041b6:	75fb      	strb	r3, [r7, #23]
	
	unsigned int *addr;
	int argc = args->argc;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	613b      	str	r3, [r7, #16]
	char **argv = args->argv;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	60fb      	str	r3, [r7, #12]

	if (args->argc < 1) 
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d120      	bne.n	800420e <cli_speed_offset_sqc+0x62>
	{
		cliPrintf("%s======== AUTO SPEED TYPE SELECT =========\r\n",C_RED);
 80041cc:	492b      	ldr	r1, [pc, #172]	; (800427c <cli_speed_offset_sqc+0xd0>)
 80041ce:	482c      	ldr	r0, [pc, #176]	; (8004280 <cli_speed_offset_sqc+0xd4>)
 80041d0:	f7ff fd40 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80041d4:	492b      	ldr	r1, [pc, #172]	; (8004284 <cli_speed_offset_sqc+0xd8>)
 80041d6:	482c      	ldr	r0, [pc, #176]	; (8004288 <cli_speed_offset_sqc+0xdc>)
 80041d8:	f7ff fd3c 	bl	8003c54 <cliPrintf>
		cliPrintf("%s      >> CURRENT SPEED OFFSET = %d \r\n",C_AQUA,temp);
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	461a      	mov	r2, r3
 80041e0:	492a      	ldr	r1, [pc, #168]	; (800428c <cli_speed_offset_sqc+0xe0>)
 80041e2:	482b      	ldr	r0, [pc, #172]	; (8004290 <cli_speed_offset_sqc+0xe4>)
 80041e4:	f7ff fd36 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80041e8:	4926      	ldr	r1, [pc, #152]	; (8004284 <cli_speed_offset_sqc+0xd8>)
 80041ea:	4827      	ldr	r0, [pc, #156]	; (8004288 <cli_speed_offset_sqc+0xdc>)
 80041ec:	f7ff fd32 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose 1 - 20 RANGE \r\n");
 80041f0:	4828      	ldr	r0, [pc, #160]	; (8004294 <cli_speed_offset_sqc+0xe8>)
 80041f2:	f7ff fd2f 	bl	8003c54 <cliPrintf>
		cliPrintf("      EX) speed 10  -> SPEED OFFSET 10 SET \r\n");
 80041f6:	4828      	ldr	r0, [pc, #160]	; (8004298 <cli_speed_offset_sqc+0xec>)
 80041f8:	f7ff fd2c 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 80041fc:	491f      	ldr	r1, [pc, #124]	; (800427c <cli_speed_offset_sqc+0xd0>)
 80041fe:	4827      	ldr	r0, [pc, #156]	; (800429c <cli_speed_offset_sqc+0xf0>)
 8004200:	f7ff fd28 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004204:	491f      	ldr	r1, [pc, #124]	; (8004284 <cli_speed_offset_sqc+0xd8>)
 8004206:	4820      	ldr	r0, [pc, #128]	; (8004288 <cli_speed_offset_sqc+0xdc>)
 8004208:	f7ff fd24 	bl	8003c54 <cliPrintf>
		return;
 800420c:	e032      	b.n	8004274 <cli_speed_offset_sqc+0xc8>
	}


	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f00b fa3a 	bl	800f690 <strtoul>
 800421c:	4603      	mov	r3, r0
 800421e:	60bb      	str	r3, [r7, #8]
	if (addr>=1 && addr<=20) 
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d01a      	beq.n	800425c <cli_speed_offset_sqc+0xb0>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b14      	cmp	r3, #20
 800422a:	d817      	bhi.n	800425c <cli_speed_offset_sqc+0xb0>
	{
		load_value.IDLE_SPD = addr;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	b2da      	uxtb	r2, r3
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <cli_speed_offset_sqc+0xf4>)
 8004232:	711a      	strb	r2, [r3, #4]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004234:	491b      	ldr	r1, [pc, #108]	; (80042a4 <cli_speed_offset_sqc+0xf8>)
 8004236:	4819      	ldr	r0, [pc, #100]	; (800429c <cli_speed_offset_sqc+0xf0>)
 8004238:	f7ff fd0c 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========= SET SPD OFFSET = %d ==========\r\n",C_YLLW,load_value.IDLE_SPD);
 800423c:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <cli_speed_offset_sqc+0xf4>)
 800423e:	791b      	ldrb	r3, [r3, #4]
 8004240:	461a      	mov	r2, r3
 8004242:	4918      	ldr	r1, [pc, #96]	; (80042a4 <cli_speed_offset_sqc+0xf8>)
 8004244:	4818      	ldr	r0, [pc, #96]	; (80042a8 <cli_speed_offset_sqc+0xfc>)
 8004246:	f7ff fd05 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800424a:	4916      	ldr	r1, [pc, #88]	; (80042a4 <cli_speed_offset_sqc+0xf8>)
 800424c:	4813      	ldr	r0, [pc, #76]	; (800429c <cli_speed_offset_sqc+0xf0>)
 800424e:	f7ff fd01 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004252:	490c      	ldr	r1, [pc, #48]	; (8004284 <cli_speed_offset_sqc+0xd8>)
 8004254:	480c      	ldr	r0, [pc, #48]	; (8004288 <cli_speed_offset_sqc+0xdc>)
 8004256:	f7ff fcfd 	bl	8003c54 <cliPrintf>
 800425a:	e00b      	b.n	8004274 <cli_speed_offset_sqc+0xc8>
	}
	
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 800425c:	4907      	ldr	r1, [pc, #28]	; (800427c <cli_speed_offset_sqc+0xd0>)
 800425e:	4813      	ldr	r0, [pc, #76]	; (80042ac <cli_speed_offset_sqc+0x100>)
 8004260:	f7ff fcf8 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 8004264:	4905      	ldr	r1, [pc, #20]	; (800427c <cli_speed_offset_sqc+0xd0>)
 8004266:	4812      	ldr	r0, [pc, #72]	; (80042b0 <cli_speed_offset_sqc+0x104>)
 8004268:	f7ff fcf4 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800426c:	4905      	ldr	r1, [pc, #20]	; (8004284 <cli_speed_offset_sqc+0xd8>)
 800426e:	4806      	ldr	r0, [pc, #24]	; (8004288 <cli_speed_offset_sqc+0xdc>)
 8004270:	f7ff fcf0 	bl	8003c54 <cliPrintf>
	}
}
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	08011d04 	.word	0x08011d04
 8004280:	08011f98 	.word	0x08011f98
 8004284:	08011cc4 	.word	0x08011cc4
 8004288:	08011ccc 	.word	0x08011ccc
 800428c:	08011fc8 	.word	0x08011fc8
 8004290:	08011fd0 	.word	0x08011fd0
 8004294:	08011ff8 	.word	0x08011ff8
 8004298:	08012020 	.word	0x08012020
 800429c:	08011dd0 	.word	0x08011dd0
 80042a0:	20000dd4 	.word	0x20000dd4
 80042a4:	08011c98 	.word	0x08011c98
 80042a8:	08012050 	.word	0x08012050
 80042ac:	08011e58 	.word	0x08011e58
 80042b0:	08011e7c 	.word	0x08011e7c

080042b4 <cli_speed_low_sqc>:


void cli_speed_low_sqc(cli_args_t *args) 
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	uint8_t temp = 100;
 80042bc:	2364      	movs	r3, #100	; 0x64
 80042be:	75fb      	strb	r3, [r7, #23]
	unsigned int *addr;
	int argc = args->argc;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	613b      	str	r3, [r7, #16]
	char **argv = args->argv;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]

	if (args->argc < 1) 
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d120      	bne.n	8004316 <cli_speed_low_sqc+0x62>
	{
		cliPrintf("%s======== AUTO SPEED TYPE SELECT =========\r\n",C_RED);
 80042d4:	492b      	ldr	r1, [pc, #172]	; (8004384 <cli_speed_low_sqc+0xd0>)
 80042d6:	482c      	ldr	r0, [pc, #176]	; (8004388 <cli_speed_low_sqc+0xd4>)
 80042d8:	f7ff fcbc 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80042dc:	492b      	ldr	r1, [pc, #172]	; (800438c <cli_speed_low_sqc+0xd8>)
 80042de:	482c      	ldr	r0, [pc, #176]	; (8004390 <cli_speed_low_sqc+0xdc>)
 80042e0:	f7ff fcb8 	bl	8003c54 <cliPrintf>
		cliPrintf("%s      >> CURRENT L SPEED = %d \r\n",C_AQUA,temp);
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	461a      	mov	r2, r3
 80042e8:	492a      	ldr	r1, [pc, #168]	; (8004394 <cli_speed_low_sqc+0xe0>)
 80042ea:	482b      	ldr	r0, [pc, #172]	; (8004398 <cli_speed_low_sqc+0xe4>)
 80042ec:	f7ff fcb2 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80042f0:	4926      	ldr	r1, [pc, #152]	; (800438c <cli_speed_low_sqc+0xd8>)
 80042f2:	4827      	ldr	r0, [pc, #156]	; (8004390 <cli_speed_low_sqc+0xdc>)
 80042f4:	f7ff fcae 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose 90 - 150 RANGE \r\n");
 80042f8:	4828      	ldr	r0, [pc, #160]	; (800439c <cli_speed_low_sqc+0xe8>)
 80042fa:	f7ff fcab 	bl	8003c54 <cliPrintf>
		cliPrintf("      EX) low 120  -> low SPEED 120 SET \r\n");
 80042fe:	4828      	ldr	r0, [pc, #160]	; (80043a0 <cli_speed_low_sqc+0xec>)
 8004300:	f7ff fca8 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 8004304:	491f      	ldr	r1, [pc, #124]	; (8004384 <cli_speed_low_sqc+0xd0>)
 8004306:	4827      	ldr	r0, [pc, #156]	; (80043a4 <cli_speed_low_sqc+0xf0>)
 8004308:	f7ff fca4 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800430c:	491f      	ldr	r1, [pc, #124]	; (800438c <cli_speed_low_sqc+0xd8>)
 800430e:	4820      	ldr	r0, [pc, #128]	; (8004390 <cli_speed_low_sqc+0xdc>)
 8004310:	f7ff fca0 	bl	8003c54 <cliPrintf>
		return;
 8004314:	e032      	b.n	800437c <cli_speed_low_sqc+0xc8>
	}

	
	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2200      	movs	r2, #0
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f00b f9b6 	bl	800f690 <strtoul>
 8004324:	4603      	mov	r3, r0
 8004326:	60bb      	str	r3, [r7, #8]
	if (addr>=90 && addr<=150) 
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b59      	cmp	r3, #89	; 0x59
 800432c:	d91a      	bls.n	8004364 <cli_speed_low_sqc+0xb0>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b96      	cmp	r3, #150	; 0x96
 8004332:	d817      	bhi.n	8004364 <cli_speed_low_sqc+0xb0>
	{
		load_value.ATD_LOW_SPD = addr;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <cli_speed_low_sqc+0xf4>)
 800433a:	715a      	strb	r2, [r3, #5]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800433c:	491b      	ldr	r1, [pc, #108]	; (80043ac <cli_speed_low_sqc+0xf8>)
 800433e:	4819      	ldr	r0, [pc, #100]	; (80043a4 <cli_speed_low_sqc+0xf0>)
 8004340:	f7ff fc88 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========= SET L SPD OFFSET = %d ==========\r\n",C_YLLW,load_value.ATD_LOW_SPD);
 8004344:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <cli_speed_low_sqc+0xf4>)
 8004346:	795b      	ldrb	r3, [r3, #5]
 8004348:	461a      	mov	r2, r3
 800434a:	4918      	ldr	r1, [pc, #96]	; (80043ac <cli_speed_low_sqc+0xf8>)
 800434c:	4818      	ldr	r0, [pc, #96]	; (80043b0 <cli_speed_low_sqc+0xfc>)
 800434e:	f7ff fc81 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004352:	4916      	ldr	r1, [pc, #88]	; (80043ac <cli_speed_low_sqc+0xf8>)
 8004354:	4813      	ldr	r0, [pc, #76]	; (80043a4 <cli_speed_low_sqc+0xf0>)
 8004356:	f7ff fc7d 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800435a:	490c      	ldr	r1, [pc, #48]	; (800438c <cli_speed_low_sqc+0xd8>)
 800435c:	480c      	ldr	r0, [pc, #48]	; (8004390 <cli_speed_low_sqc+0xdc>)
 800435e:	f7ff fc79 	bl	8003c54 <cliPrintf>
 8004362:	e00b      	b.n	800437c <cli_speed_low_sqc+0xc8>
	}
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 8004364:	4907      	ldr	r1, [pc, #28]	; (8004384 <cli_speed_low_sqc+0xd0>)
 8004366:	4813      	ldr	r0, [pc, #76]	; (80043b4 <cli_speed_low_sqc+0x100>)
 8004368:	f7ff fc74 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 800436c:	4905      	ldr	r1, [pc, #20]	; (8004384 <cli_speed_low_sqc+0xd0>)
 800436e:	4812      	ldr	r0, [pc, #72]	; (80043b8 <cli_speed_low_sqc+0x104>)
 8004370:	f7ff fc70 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004374:	4905      	ldr	r1, [pc, #20]	; (800438c <cli_speed_low_sqc+0xd8>)
 8004376:	4806      	ldr	r0, [pc, #24]	; (8004390 <cli_speed_low_sqc+0xdc>)
 8004378:	f7ff fc6c 	bl	8003c54 <cliPrintf>
	}

}
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	08011d04 	.word	0x08011d04
 8004388:	08011f98 	.word	0x08011f98
 800438c:	08011cc4 	.word	0x08011cc4
 8004390:	08011ccc 	.word	0x08011ccc
 8004394:	08011fc8 	.word	0x08011fc8
 8004398:	08012080 	.word	0x08012080
 800439c:	080120a4 	.word	0x080120a4
 80043a0:	080120d0 	.word	0x080120d0
 80043a4:	08011dd0 	.word	0x08011dd0
 80043a8:	20000dd4 	.word	0x20000dd4
 80043ac:	08011c98 	.word	0x08011c98
 80043b0:	080120fc 	.word	0x080120fc
 80043b4:	08011e58 	.word	0x08011e58
 80043b8:	08011e7c 	.word	0x08011e7c

080043bc <cli_speed_high_sqc>:


void cli_speed_high_sqc(cli_args_t *args) 
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	uint8_t temp = 120;
 80043c4:	2378      	movs	r3, #120	; 0x78
 80043c6:	75fb      	strb	r3, [r7, #23]
	
	unsigned int *addr;
	int argc = args->argc;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	613b      	str	r3, [r7, #16]
	char **argv = args->argv;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	60fb      	str	r3, [r7, #12]

	if (args->argc < 1) 
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d120      	bne.n	800441e <cli_speed_high_sqc+0x62>
	{
		cliPrintf("%s======== AUTO SPEED TYPE SELECT =========\r\n",C_RED);
 80043dc:	492b      	ldr	r1, [pc, #172]	; (800448c <cli_speed_high_sqc+0xd0>)
 80043de:	482c      	ldr	r0, [pc, #176]	; (8004490 <cli_speed_high_sqc+0xd4>)
 80043e0:	f7ff fc38 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80043e4:	492b      	ldr	r1, [pc, #172]	; (8004494 <cli_speed_high_sqc+0xd8>)
 80043e6:	482c      	ldr	r0, [pc, #176]	; (8004498 <cli_speed_high_sqc+0xdc>)
 80043e8:	f7ff fc34 	bl	8003c54 <cliPrintf>
		cliPrintf("%s      >> CURRENT H SPEED = %d \r\n",C_AQUA,temp);
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	461a      	mov	r2, r3
 80043f0:	492a      	ldr	r1, [pc, #168]	; (800449c <cli_speed_high_sqc+0xe0>)
 80043f2:	482b      	ldr	r0, [pc, #172]	; (80044a0 <cli_speed_high_sqc+0xe4>)
 80043f4:	f7ff fc2e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80043f8:	4926      	ldr	r1, [pc, #152]	; (8004494 <cli_speed_high_sqc+0xd8>)
 80043fa:	4827      	ldr	r0, [pc, #156]	; (8004498 <cli_speed_high_sqc+0xdc>)
 80043fc:	f7ff fc2a 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose 90 - 150 RANGE \r\n");
 8004400:	4828      	ldr	r0, [pc, #160]	; (80044a4 <cli_speed_high_sqc+0xe8>)
 8004402:	f7ff fc27 	bl	8003c54 <cliPrintf>
		cliPrintf("      EX) high 140  -> high SPEED 140 SET \r\n");
 8004406:	4828      	ldr	r0, [pc, #160]	; (80044a8 <cli_speed_high_sqc+0xec>)
 8004408:	f7ff fc24 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 800440c:	491f      	ldr	r1, [pc, #124]	; (800448c <cli_speed_high_sqc+0xd0>)
 800440e:	4827      	ldr	r0, [pc, #156]	; (80044ac <cli_speed_high_sqc+0xf0>)
 8004410:	f7ff fc20 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004414:	491f      	ldr	r1, [pc, #124]	; (8004494 <cli_speed_high_sqc+0xd8>)
 8004416:	4820      	ldr	r0, [pc, #128]	; (8004498 <cli_speed_high_sqc+0xdc>)
 8004418:	f7ff fc1c 	bl	8003c54 <cliPrintf>
		return;
 800441c:	e032      	b.n	8004484 <cli_speed_high_sqc+0xc8>
	}


	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f00b f932 	bl	800f690 <strtoul>
 800442c:	4603      	mov	r3, r0
 800442e:	60bb      	str	r3, [r7, #8]

	if (addr>=90 && addr<=150) 
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b59      	cmp	r3, #89	; 0x59
 8004434:	d91a      	bls.n	800446c <cli_speed_high_sqc+0xb0>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b96      	cmp	r3, #150	; 0x96
 800443a:	d817      	bhi.n	800446c <cli_speed_high_sqc+0xb0>
	{
		load_value.ATD_HIGH_SPD = addr;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	b2da      	uxtb	r2, r3
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <cli_speed_high_sqc+0xf4>)
 8004442:	719a      	strb	r2, [r3, #6]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004444:	491b      	ldr	r1, [pc, #108]	; (80044b4 <cli_speed_high_sqc+0xf8>)
 8004446:	4819      	ldr	r0, [pc, #100]	; (80044ac <cli_speed_high_sqc+0xf0>)
 8004448:	f7ff fc04 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========= SET H SPD OFFSET = %d ==========\r\n",C_YLLW,load_value.ATD_HIGH_SPD);
 800444c:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <cli_speed_high_sqc+0xf4>)
 800444e:	799b      	ldrb	r3, [r3, #6]
 8004450:	461a      	mov	r2, r3
 8004452:	4918      	ldr	r1, [pc, #96]	; (80044b4 <cli_speed_high_sqc+0xf8>)
 8004454:	4818      	ldr	r0, [pc, #96]	; (80044b8 <cli_speed_high_sqc+0xfc>)
 8004456:	f7ff fbfd 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800445a:	4916      	ldr	r1, [pc, #88]	; (80044b4 <cli_speed_high_sqc+0xf8>)
 800445c:	4813      	ldr	r0, [pc, #76]	; (80044ac <cli_speed_high_sqc+0xf0>)
 800445e:	f7ff fbf9 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004462:	490c      	ldr	r1, [pc, #48]	; (8004494 <cli_speed_high_sqc+0xd8>)
 8004464:	480c      	ldr	r0, [pc, #48]	; (8004498 <cli_speed_high_sqc+0xdc>)
 8004466:	f7ff fbf5 	bl	8003c54 <cliPrintf>
 800446a:	e00b      	b.n	8004484 <cli_speed_high_sqc+0xc8>
	}
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 800446c:	4907      	ldr	r1, [pc, #28]	; (800448c <cli_speed_high_sqc+0xd0>)
 800446e:	4813      	ldr	r0, [pc, #76]	; (80044bc <cli_speed_high_sqc+0x100>)
 8004470:	f7ff fbf0 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 8004474:	4905      	ldr	r1, [pc, #20]	; (800448c <cli_speed_high_sqc+0xd0>)
 8004476:	4812      	ldr	r0, [pc, #72]	; (80044c0 <cli_speed_high_sqc+0x104>)
 8004478:	f7ff fbec 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800447c:	4905      	ldr	r1, [pc, #20]	; (8004494 <cli_speed_high_sqc+0xd8>)
 800447e:	4806      	ldr	r0, [pc, #24]	; (8004498 <cli_speed_high_sqc+0xdc>)
 8004480:	f7ff fbe8 	bl	8003c54 <cliPrintf>
	}
}
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	08011d04 	.word	0x08011d04
 8004490:	08011f98 	.word	0x08011f98
 8004494:	08011cc4 	.word	0x08011cc4
 8004498:	08011ccc 	.word	0x08011ccc
 800449c:	08011fc8 	.word	0x08011fc8
 80044a0:	0801212c 	.word	0x0801212c
 80044a4:	080120a4 	.word	0x080120a4
 80044a8:	08012150 	.word	0x08012150
 80044ac:	08011dd0 	.word	0x08011dd0
 80044b0:	20000dd4 	.word	0x20000dd4
 80044b4:	08011c98 	.word	0x08011c98
 80044b8:	08012180 	.word	0x08012180
 80044bc:	08011e58 	.word	0x08011e58
 80044c0:	08011e7c 	.word	0x08011e7c

080044c4 <cli_remote_sqc>:


void cli_remote_sqc(cli_args_t *args) 
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	
	unsigned int *addr;
	int argc = args->argc;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d119      	bne.n	8004514 <cli_remote_sqc+0x50>
	{
		cliPrintf("%s======== REMOTE TYPE SELECT =========\r\n",C_RED);
 80044e0:	492f      	ldr	r1, [pc, #188]	; (80045a0 <cli_remote_sqc+0xdc>)
 80044e2:	4830      	ldr	r0, [pc, #192]	; (80045a4 <cli_remote_sqc+0xe0>)
 80044e4:	f7ff fbb6 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80044e8:	492f      	ldr	r1, [pc, #188]	; (80045a8 <cli_remote_sqc+0xe4>)
 80044ea:	4830      	ldr	r0, [pc, #192]	; (80045ac <cli_remote_sqc+0xe8>)
 80044ec:	f7ff fbb2 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 80044f0:	482f      	ldr	r0, [pc, #188]	; (80045b0 <cli_remote_sqc+0xec>)
 80044f2:	f7ff fbaf 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  RF MATSER   TPYE \r\n");
 80044f6:	482f      	ldr	r0, [pc, #188]	; (80045b4 <cli_remote_sqc+0xf0>)
 80044f8:	f7ff fbac 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  JEICO TPYE \r\n");
 80044fc:	482e      	ldr	r0, [pc, #184]	; (80045b8 <cli_remote_sqc+0xf4>)
 80044fe:	f7ff fba9 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 8004502:	4927      	ldr	r1, [pc, #156]	; (80045a0 <cli_remote_sqc+0xdc>)
 8004504:	482d      	ldr	r0, [pc, #180]	; (80045bc <cli_remote_sqc+0xf8>)
 8004506:	f7ff fba5 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800450a:	4927      	ldr	r1, [pc, #156]	; (80045a8 <cli_remote_sqc+0xe4>)
 800450c:	4827      	ldr	r0, [pc, #156]	; (80045ac <cli_remote_sqc+0xe8>)
 800450e:	f7ff fba1 	bl	8003c54 <cliPrintf>
		return;
 8004512:	e042      	b.n	800459a <cli_remote_sqc+0xd6>
	}


	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f00b f8b7 	bl	800f690 <strtoul>
 8004522:	4603      	mov	r3, r0
 8004524:	60fb      	str	r3, [r7, #12]

	if (addr == 1) // ch
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d113      	bne.n	8004554 <cli_remote_sqc+0x90>
	{
		load_value.Remote_type = 1;
 800452c:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <cli_remote_sqc+0xfc>)
 800452e:	2201      	movs	r2, #1
 8004530:	709a      	strb	r2, [r3, #2]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004532:	4924      	ldr	r1, [pc, #144]	; (80045c4 <cli_remote_sqc+0x100>)
 8004534:	4821      	ldr	r0, [pc, #132]	; (80045bc <cli_remote_sqc+0xf8>)
 8004536:	f7ff fb8d 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET RF_MASTER TYPE ===========\r\n",C_YLLW);
 800453a:	4922      	ldr	r1, [pc, #136]	; (80045c4 <cli_remote_sqc+0x100>)
 800453c:	4822      	ldr	r0, [pc, #136]	; (80045c8 <cli_remote_sqc+0x104>)
 800453e:	f7ff fb89 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004542:	4920      	ldr	r1, [pc, #128]	; (80045c4 <cli_remote_sqc+0x100>)
 8004544:	481d      	ldr	r0, [pc, #116]	; (80045bc <cli_remote_sqc+0xf8>)
 8004546:	f7ff fb85 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800454a:	4917      	ldr	r1, [pc, #92]	; (80045a8 <cli_remote_sqc+0xe4>)
 800454c:	4817      	ldr	r0, [pc, #92]	; (80045ac <cli_remote_sqc+0xe8>)
 800454e:	f7ff fb81 	bl	8003c54 <cliPrintf>
 8004552:	e022      	b.n	800459a <cli_remote_sqc+0xd6>
	}
	else if ( addr == 2)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d113      	bne.n	8004582 <cli_remote_sqc+0xbe>
	{
		load_value.Remote_type = 2;
 800455a:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <cli_remote_sqc+0xfc>)
 800455c:	2202      	movs	r2, #2
 800455e:	709a      	strb	r2, [r3, #2]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004560:	4918      	ldr	r1, [pc, #96]	; (80045c4 <cli_remote_sqc+0x100>)
 8004562:	4816      	ldr	r0, [pc, #88]	; (80045bc <cli_remote_sqc+0xf8>)
 8004564:	f7ff fb76 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET JEICO TYPE ===========\r\n",C_YLLW);
 8004568:	4916      	ldr	r1, [pc, #88]	; (80045c4 <cli_remote_sqc+0x100>)
 800456a:	4818      	ldr	r0, [pc, #96]	; (80045cc <cli_remote_sqc+0x108>)
 800456c:	f7ff fb72 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004570:	4914      	ldr	r1, [pc, #80]	; (80045c4 <cli_remote_sqc+0x100>)
 8004572:	4812      	ldr	r0, [pc, #72]	; (80045bc <cli_remote_sqc+0xf8>)
 8004574:	f7ff fb6e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004578:	490b      	ldr	r1, [pc, #44]	; (80045a8 <cli_remote_sqc+0xe4>)
 800457a:	480c      	ldr	r0, [pc, #48]	; (80045ac <cli_remote_sqc+0xe8>)
 800457c:	f7ff fb6a 	bl	8003c54 <cliPrintf>
 8004580:	e00b      	b.n	800459a <cli_remote_sqc+0xd6>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 8004582:	4907      	ldr	r1, [pc, #28]	; (80045a0 <cli_remote_sqc+0xdc>)
 8004584:	4812      	ldr	r0, [pc, #72]	; (80045d0 <cli_remote_sqc+0x10c>)
 8004586:	f7ff fb65 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 800458a:	4905      	ldr	r1, [pc, #20]	; (80045a0 <cli_remote_sqc+0xdc>)
 800458c:	4811      	ldr	r0, [pc, #68]	; (80045d4 <cli_remote_sqc+0x110>)
 800458e:	f7ff fb61 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004592:	4905      	ldr	r1, [pc, #20]	; (80045a8 <cli_remote_sqc+0xe4>)
 8004594:	4805      	ldr	r0, [pc, #20]	; (80045ac <cli_remote_sqc+0xe8>)
 8004596:	f7ff fb5d 	bl	8003c54 <cliPrintf>
	}
}
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	08011d04 	.word	0x08011d04
 80045a4:	080121b0 	.word	0x080121b0
 80045a8:	08011cc4 	.word	0x08011cc4
 80045ac:	08011ccc 	.word	0x08011ccc
 80045b0:	08011d3c 	.word	0x08011d3c
 80045b4:	080121dc 	.word	0x080121dc
 80045b8:	08012204 	.word	0x08012204
 80045bc:	08011dd0 	.word	0x08011dd0
 80045c0:	20000dd4 	.word	0x20000dd4
 80045c4:	08011c98 	.word	0x08011c98
 80045c8:	08012228 	.word	0x08012228
 80045cc:	08012258 	.word	0x08012258
 80045d0:	08011e58 	.word	0x08011e58
 80045d4:	08011e7c 	.word	0x08011e7c

080045d8 <cli_battery_sqc>:

void cli_battery_sqc(cli_args_t *args) 
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	
	unsigned int *addr;
	int argc = args->argc;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d119      	bne.n	8004628 <cli_battery_sqc+0x50>
	{
		cliPrintf("%s======== BATTERY TYPE SELECT =========\r\n",C_RED);
 80045f4:	492f      	ldr	r1, [pc, #188]	; (80046b4 <cli_battery_sqc+0xdc>)
 80045f6:	4830      	ldr	r0, [pc, #192]	; (80046b8 <cli_battery_sqc+0xe0>)
 80045f8:	f7ff fb2c 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80045fc:	492f      	ldr	r1, [pc, #188]	; (80046bc <cli_battery_sqc+0xe4>)
 80045fe:	4830      	ldr	r0, [pc, #192]	; (80046c0 <cli_battery_sqc+0xe8>)
 8004600:	f7ff fb28 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 8004604:	482f      	ldr	r0, [pc, #188]	; (80046c4 <cli_battery_sqc+0xec>)
 8004606:	f7ff fb25 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  ATLAS   TPYE \r\n");
 800460a:	482f      	ldr	r0, [pc, #188]	; (80046c8 <cli_battery_sqc+0xf0>)
 800460c:	f7ff fb22 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  LONGIST  TPYE \r\n");
 8004610:	482e      	ldr	r0, [pc, #184]	; (80046cc <cli_battery_sqc+0xf4>)
 8004612:	f7ff fb1f 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 8004616:	4927      	ldr	r1, [pc, #156]	; (80046b4 <cli_battery_sqc+0xdc>)
 8004618:	482d      	ldr	r0, [pc, #180]	; (80046d0 <cli_battery_sqc+0xf8>)
 800461a:	f7ff fb1b 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800461e:	4927      	ldr	r1, [pc, #156]	; (80046bc <cli_battery_sqc+0xe4>)
 8004620:	4827      	ldr	r0, [pc, #156]	; (80046c0 <cli_battery_sqc+0xe8>)
 8004622:	f7ff fb17 	bl	8003c54 <cliPrintf>
		return;
 8004626:	e042      	b.n	80046ae <cli_battery_sqc+0xd6>
	}
	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2200      	movs	r2, #0
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f00b f82d 	bl	800f690 <strtoul>
 8004636:	4603      	mov	r3, r0
 8004638:	60fb      	str	r3, [r7, #12]
	

	if (addr == 1) // ch
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d113      	bne.n	8004668 <cli_battery_sqc+0x90>
	{
		load_value.Battery_type = 1;
 8004640:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <cli_battery_sqc+0xfc>)
 8004642:	2201      	movs	r2, #1
 8004644:	70da      	strb	r2, [r3, #3]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004646:	4924      	ldr	r1, [pc, #144]	; (80046d8 <cli_battery_sqc+0x100>)
 8004648:	4821      	ldr	r0, [pc, #132]	; (80046d0 <cli_battery_sqc+0xf8>)
 800464a:	f7ff fb03 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET ATLAS TYPE ===========\r\n",C_YLLW);
 800464e:	4922      	ldr	r1, [pc, #136]	; (80046d8 <cli_battery_sqc+0x100>)
 8004650:	4822      	ldr	r0, [pc, #136]	; (80046dc <cli_battery_sqc+0x104>)
 8004652:	f7ff faff 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004656:	4920      	ldr	r1, [pc, #128]	; (80046d8 <cli_battery_sqc+0x100>)
 8004658:	481d      	ldr	r0, [pc, #116]	; (80046d0 <cli_battery_sqc+0xf8>)
 800465a:	f7ff fafb 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800465e:	4917      	ldr	r1, [pc, #92]	; (80046bc <cli_battery_sqc+0xe4>)
 8004660:	4817      	ldr	r0, [pc, #92]	; (80046c0 <cli_battery_sqc+0xe8>)
 8004662:	f7ff faf7 	bl	8003c54 <cliPrintf>
 8004666:	e022      	b.n	80046ae <cli_battery_sqc+0xd6>
	}
	else if ( addr == 2)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d113      	bne.n	8004696 <cli_battery_sqc+0xbe>
	{	
		load_value.Battery_type = 2;
 800466e:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <cli_battery_sqc+0xfc>)
 8004670:	2202      	movs	r2, #2
 8004672:	70da      	strb	r2, [r3, #3]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004674:	4918      	ldr	r1, [pc, #96]	; (80046d8 <cli_battery_sqc+0x100>)
 8004676:	4816      	ldr	r0, [pc, #88]	; (80046d0 <cli_battery_sqc+0xf8>)
 8004678:	f7ff faec 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET LONGIST TYPE ===========\r\n",C_YLLW);
 800467c:	4916      	ldr	r1, [pc, #88]	; (80046d8 <cli_battery_sqc+0x100>)
 800467e:	4818      	ldr	r0, [pc, #96]	; (80046e0 <cli_battery_sqc+0x108>)
 8004680:	f7ff fae8 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004684:	4914      	ldr	r1, [pc, #80]	; (80046d8 <cli_battery_sqc+0x100>)
 8004686:	4812      	ldr	r0, [pc, #72]	; (80046d0 <cli_battery_sqc+0xf8>)
 8004688:	f7ff fae4 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800468c:	490b      	ldr	r1, [pc, #44]	; (80046bc <cli_battery_sqc+0xe4>)
 800468e:	480c      	ldr	r0, [pc, #48]	; (80046c0 <cli_battery_sqc+0xe8>)
 8004690:	f7ff fae0 	bl	8003c54 <cliPrintf>
 8004694:	e00b      	b.n	80046ae <cli_battery_sqc+0xd6>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 8004696:	4907      	ldr	r1, [pc, #28]	; (80046b4 <cli_battery_sqc+0xdc>)
 8004698:	4812      	ldr	r0, [pc, #72]	; (80046e4 <cli_battery_sqc+0x10c>)
 800469a:	f7ff fadb 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 800469e:	4905      	ldr	r1, [pc, #20]	; (80046b4 <cli_battery_sqc+0xdc>)
 80046a0:	4811      	ldr	r0, [pc, #68]	; (80046e8 <cli_battery_sqc+0x110>)
 80046a2:	f7ff fad7 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80046a6:	4905      	ldr	r1, [pc, #20]	; (80046bc <cli_battery_sqc+0xe4>)
 80046a8:	4805      	ldr	r0, [pc, #20]	; (80046c0 <cli_battery_sqc+0xe8>)
 80046aa:	f7ff fad3 	bl	8003c54 <cliPrintf>
	}


	
}
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	08011d04 	.word	0x08011d04
 80046b8:	08012284 	.word	0x08012284
 80046bc:	08011cc4 	.word	0x08011cc4
 80046c0:	08011ccc 	.word	0x08011ccc
 80046c4:	08011d3c 	.word	0x08011d3c
 80046c8:	080122b0 	.word	0x080122b0
 80046cc:	080122d4 	.word	0x080122d4
 80046d0:	08011dd0 	.word	0x08011dd0
 80046d4:	20000dd4 	.word	0x20000dd4
 80046d8:	08011c98 	.word	0x08011c98
 80046dc:	080122fc 	.word	0x080122fc
 80046e0:	08012328 	.word	0x08012328
 80046e4:	08011e58 	.word	0x08011e58
 80046e8:	08011e7c 	.word	0x08011e7c

080046ec <cli_valve_sqc>:

void cli_valve_sqc(cli_args_t *args) 
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
	
	unsigned int *addr;
	int argc = args->argc;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d119      	bne.n	800473c <cli_valve_sqc+0x50>
	{
		cliPrintf("%s======== VALVE TYPE SELECT =========\r\n",C_RED);
 8004708:	492f      	ldr	r1, [pc, #188]	; (80047c8 <cli_valve_sqc+0xdc>)
 800470a:	4830      	ldr	r0, [pc, #192]	; (80047cc <cli_valve_sqc+0xe0>)
 800470c:	f7ff faa2 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004710:	492f      	ldr	r1, [pc, #188]	; (80047d0 <cli_valve_sqc+0xe4>)
 8004712:	4830      	ldr	r0, [pc, #192]	; (80047d4 <cli_valve_sqc+0xe8>)
 8004714:	f7ff fa9e 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 8004718:	482f      	ldr	r0, [pc, #188]	; (80047d8 <cli_valve_sqc+0xec>)
 800471a:	f7ff fa9b 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  VALVE   TPYE \r\n");
 800471e:	482f      	ldr	r0, [pc, #188]	; (80047dc <cli_valve_sqc+0xf0>)
 8004720:	f7ff fa98 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  NONE    TPYE \r\n");
 8004724:	482e      	ldr	r0, [pc, #184]	; (80047e0 <cli_valve_sqc+0xf4>)
 8004726:	f7ff fa95 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 800472a:	4927      	ldr	r1, [pc, #156]	; (80047c8 <cli_valve_sqc+0xdc>)
 800472c:	482d      	ldr	r0, [pc, #180]	; (80047e4 <cli_valve_sqc+0xf8>)
 800472e:	f7ff fa91 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004732:	4927      	ldr	r1, [pc, #156]	; (80047d0 <cli_valve_sqc+0xe4>)
 8004734:	4827      	ldr	r0, [pc, #156]	; (80047d4 <cli_valve_sqc+0xe8>)
 8004736:	f7ff fa8d 	bl	8003c54 <cliPrintf>
		return;
 800473a:	e042      	b.n	80047c2 <cli_valve_sqc+0xd6>
	}
	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2200      	movs	r2, #0
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f00a ffa3 	bl	800f690 <strtoul>
 800474a:	4603      	mov	r3, r0
 800474c:	60fb      	str	r3, [r7, #12]
	

	if (addr == 1) // ch
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d113      	bne.n	800477c <cli_valve_sqc+0x90>
	{
		load_value.Spray_type = 1;
 8004754:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <cli_valve_sqc+0xfc>)
 8004756:	2201      	movs	r2, #1
 8004758:	71da      	strb	r2, [r3, #7]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800475a:	4924      	ldr	r1, [pc, #144]	; (80047ec <cli_valve_sqc+0x100>)
 800475c:	4821      	ldr	r0, [pc, #132]	; (80047e4 <cli_valve_sqc+0xf8>)
 800475e:	f7ff fa79 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET VALVE TYPE ===========\r\n",C_YLLW);
 8004762:	4922      	ldr	r1, [pc, #136]	; (80047ec <cli_valve_sqc+0x100>)
 8004764:	4822      	ldr	r0, [pc, #136]	; (80047f0 <cli_valve_sqc+0x104>)
 8004766:	f7ff fa75 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800476a:	4920      	ldr	r1, [pc, #128]	; (80047ec <cli_valve_sqc+0x100>)
 800476c:	481d      	ldr	r0, [pc, #116]	; (80047e4 <cli_valve_sqc+0xf8>)
 800476e:	f7ff fa71 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004772:	4917      	ldr	r1, [pc, #92]	; (80047d0 <cli_valve_sqc+0xe4>)
 8004774:	4817      	ldr	r0, [pc, #92]	; (80047d4 <cli_valve_sqc+0xe8>)
 8004776:	f7ff fa6d 	bl	8003c54 <cliPrintf>
 800477a:	e022      	b.n	80047c2 <cli_valve_sqc+0xd6>
	}
	else if ( addr == 2)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d113      	bne.n	80047aa <cli_valve_sqc+0xbe>
	{	
		load_value.Spray_type = 2;
 8004782:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <cli_valve_sqc+0xfc>)
 8004784:	2202      	movs	r2, #2
 8004786:	71da      	strb	r2, [r3, #7]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004788:	4918      	ldr	r1, [pc, #96]	; (80047ec <cli_valve_sqc+0x100>)
 800478a:	4816      	ldr	r0, [pc, #88]	; (80047e4 <cli_valve_sqc+0xf8>)
 800478c:	f7ff fa62 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET NONE TYPE ===========\r\n",C_YLLW);
 8004790:	4916      	ldr	r1, [pc, #88]	; (80047ec <cli_valve_sqc+0x100>)
 8004792:	4818      	ldr	r0, [pc, #96]	; (80047f4 <cli_valve_sqc+0x108>)
 8004794:	f7ff fa5e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004798:	4914      	ldr	r1, [pc, #80]	; (80047ec <cli_valve_sqc+0x100>)
 800479a:	4812      	ldr	r0, [pc, #72]	; (80047e4 <cli_valve_sqc+0xf8>)
 800479c:	f7ff fa5a 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80047a0:	490b      	ldr	r1, [pc, #44]	; (80047d0 <cli_valve_sqc+0xe4>)
 80047a2:	480c      	ldr	r0, [pc, #48]	; (80047d4 <cli_valve_sqc+0xe8>)
 80047a4:	f7ff fa56 	bl	8003c54 <cliPrintf>
 80047a8:	e00b      	b.n	80047c2 <cli_valve_sqc+0xd6>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 80047aa:	4907      	ldr	r1, [pc, #28]	; (80047c8 <cli_valve_sqc+0xdc>)
 80047ac:	4812      	ldr	r0, [pc, #72]	; (80047f8 <cli_valve_sqc+0x10c>)
 80047ae:	f7ff fa51 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 80047b2:	4905      	ldr	r1, [pc, #20]	; (80047c8 <cli_valve_sqc+0xdc>)
 80047b4:	4811      	ldr	r0, [pc, #68]	; (80047fc <cli_valve_sqc+0x110>)
 80047b6:	f7ff fa4d 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80047ba:	4905      	ldr	r1, [pc, #20]	; (80047d0 <cli_valve_sqc+0xe4>)
 80047bc:	4805      	ldr	r0, [pc, #20]	; (80047d4 <cli_valve_sqc+0xe8>)
 80047be:	f7ff fa49 	bl	8003c54 <cliPrintf>
	}


	
}
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	08011d04 	.word	0x08011d04
 80047cc:	08012354 	.word	0x08012354
 80047d0:	08011cc4 	.word	0x08011cc4
 80047d4:	08011ccc 	.word	0x08011ccc
 80047d8:	08011d3c 	.word	0x08011d3c
 80047dc:	08012380 	.word	0x08012380
 80047e0:	080123a4 	.word	0x080123a4
 80047e4:	08011dd0 	.word	0x08011dd0
 80047e8:	20000dd4 	.word	0x20000dd4
 80047ec:	08011c98 	.word	0x08011c98
 80047f0:	080123c8 	.word	0x080123c8
 80047f4:	080123f4 	.word	0x080123f4
 80047f8:	08011e58 	.word	0x08011e58
 80047fc:	08011e7c 	.word	0x08011e7c

08004800 <cli_rtk_sqc>:


void cli_rtk_sqc(cli_args_t *args) 
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	
	unsigned int *addr;
	

	int argc = args->argc;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d119      	bne.n	8004850 <cli_rtk_sqc+0x50>
	{
		cliPrintf("%s======== RTK TYPE SELECT =========\r\n",C_RED);
 800481c:	492f      	ldr	r1, [pc, #188]	; (80048dc <cli_rtk_sqc+0xdc>)
 800481e:	4830      	ldr	r0, [pc, #192]	; (80048e0 <cli_rtk_sqc+0xe0>)
 8004820:	f7ff fa18 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004824:	492f      	ldr	r1, [pc, #188]	; (80048e4 <cli_rtk_sqc+0xe4>)
 8004826:	4830      	ldr	r0, [pc, #192]	; (80048e8 <cli_rtk_sqc+0xe8>)
 8004828:	f7ff fa14 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 800482c:	482f      	ldr	r0, [pc, #188]	; (80048ec <cli_rtk_sqc+0xec>)
 800482e:	f7ff fa11 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  RTK   TPYE \r\n");
 8004832:	482f      	ldr	r0, [pc, #188]	; (80048f0 <cli_rtk_sqc+0xf0>)
 8004834:	f7ff fa0e 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  LINE  TPYE \r\n");
 8004838:	482e      	ldr	r0, [pc, #184]	; (80048f4 <cli_rtk_sqc+0xf4>)
 800483a:	f7ff fa0b 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 800483e:	4927      	ldr	r1, [pc, #156]	; (80048dc <cli_rtk_sqc+0xdc>)
 8004840:	482d      	ldr	r0, [pc, #180]	; (80048f8 <cli_rtk_sqc+0xf8>)
 8004842:	f7ff fa07 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004846:	4927      	ldr	r1, [pc, #156]	; (80048e4 <cli_rtk_sqc+0xe4>)
 8004848:	4827      	ldr	r0, [pc, #156]	; (80048e8 <cli_rtk_sqc+0xe8>)
 800484a:	f7ff fa03 	bl	8003c54 <cliPrintf>
		return;
 800484e:	e042      	b.n	80048d6 <cli_rtk_sqc+0xd6>
	}
	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2200      	movs	r2, #0
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f00a ff19 	bl	800f690 <strtoul>
 800485e:	4603      	mov	r3, r0
 8004860:	60fb      	str	r3, [r7, #12]
	

	if (addr == 1) // ch
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d113      	bne.n	8004890 <cli_rtk_sqc+0x90>
	{
		load_value.rtk_type = 1;
 8004868:	4b24      	ldr	r3, [pc, #144]	; (80048fc <cli_rtk_sqc+0xfc>)
 800486a:	2201      	movs	r2, #1
 800486c:	721a      	strb	r2, [r3, #8]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800486e:	4924      	ldr	r1, [pc, #144]	; (8004900 <cli_rtk_sqc+0x100>)
 8004870:	4821      	ldr	r0, [pc, #132]	; (80048f8 <cli_rtk_sqc+0xf8>)
 8004872:	f7ff f9ef 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET RTK TYPE ===========\r\n",C_YLLW);
 8004876:	4922      	ldr	r1, [pc, #136]	; (8004900 <cli_rtk_sqc+0x100>)
 8004878:	4822      	ldr	r0, [pc, #136]	; (8004904 <cli_rtk_sqc+0x104>)
 800487a:	f7ff f9eb 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800487e:	4920      	ldr	r1, [pc, #128]	; (8004900 <cli_rtk_sqc+0x100>)
 8004880:	481d      	ldr	r0, [pc, #116]	; (80048f8 <cli_rtk_sqc+0xf8>)
 8004882:	f7ff f9e7 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004886:	4917      	ldr	r1, [pc, #92]	; (80048e4 <cli_rtk_sqc+0xe4>)
 8004888:	4817      	ldr	r0, [pc, #92]	; (80048e8 <cli_rtk_sqc+0xe8>)
 800488a:	f7ff f9e3 	bl	8003c54 <cliPrintf>
 800488e:	e022      	b.n	80048d6 <cli_rtk_sqc+0xd6>
	}
	else if ( addr == 2)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d113      	bne.n	80048be <cli_rtk_sqc+0xbe>
	{	
		load_value.rtk_type = 2;
 8004896:	4b19      	ldr	r3, [pc, #100]	; (80048fc <cli_rtk_sqc+0xfc>)
 8004898:	2202      	movs	r2, #2
 800489a:	721a      	strb	r2, [r3, #8]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800489c:	4918      	ldr	r1, [pc, #96]	; (8004900 <cli_rtk_sqc+0x100>)
 800489e:	4816      	ldr	r0, [pc, #88]	; (80048f8 <cli_rtk_sqc+0xf8>)
 80048a0:	f7ff f9d8 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET LINE TYPE ===========\r\n",C_YLLW);
 80048a4:	4916      	ldr	r1, [pc, #88]	; (8004900 <cli_rtk_sqc+0x100>)
 80048a6:	4818      	ldr	r0, [pc, #96]	; (8004908 <cli_rtk_sqc+0x108>)
 80048a8:	f7ff f9d4 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 80048ac:	4914      	ldr	r1, [pc, #80]	; (8004900 <cli_rtk_sqc+0x100>)
 80048ae:	4812      	ldr	r0, [pc, #72]	; (80048f8 <cli_rtk_sqc+0xf8>)
 80048b0:	f7ff f9d0 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80048b4:	490b      	ldr	r1, [pc, #44]	; (80048e4 <cli_rtk_sqc+0xe4>)
 80048b6:	480c      	ldr	r0, [pc, #48]	; (80048e8 <cli_rtk_sqc+0xe8>)
 80048b8:	f7ff f9cc 	bl	8003c54 <cliPrintf>
 80048bc:	e00b      	b.n	80048d6 <cli_rtk_sqc+0xd6>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 80048be:	4907      	ldr	r1, [pc, #28]	; (80048dc <cli_rtk_sqc+0xdc>)
 80048c0:	4812      	ldr	r0, [pc, #72]	; (800490c <cli_rtk_sqc+0x10c>)
 80048c2:	f7ff f9c7 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 80048c6:	4905      	ldr	r1, [pc, #20]	; (80048dc <cli_rtk_sqc+0xdc>)
 80048c8:	4811      	ldr	r0, [pc, #68]	; (8004910 <cli_rtk_sqc+0x110>)
 80048ca:	f7ff f9c3 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80048ce:	4905      	ldr	r1, [pc, #20]	; (80048e4 <cli_rtk_sqc+0xe4>)
 80048d0:	4805      	ldr	r0, [pc, #20]	; (80048e8 <cli_rtk_sqc+0xe8>)
 80048d2:	f7ff f9bf 	bl	8003c54 <cliPrintf>
	}


	
}
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	08011d04 	.word	0x08011d04
 80048e0:	08012420 	.word	0x08012420
 80048e4:	08011cc4 	.word	0x08011cc4
 80048e8:	08011ccc 	.word	0x08011ccc
 80048ec:	08011d3c 	.word	0x08011d3c
 80048f0:	08012448 	.word	0x08012448
 80048f4:	0801246c 	.word	0x0801246c
 80048f8:	08011dd0 	.word	0x08011dd0
 80048fc:	20000dd4 	.word	0x20000dd4
 8004900:	08011c98 	.word	0x08011c98
 8004904:	08012490 	.word	0x08012490
 8004908:	080124b8 	.word	0x080124b8
 800490c:	08011e58 	.word	0x08011e58
 8004910:	08011e7c 	.word	0x08011e7c

08004914 <cli_info_sqc>:

void cli_info_sqc(cli_args_t *args) 
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	int argc = args->argc;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	60fb      	str	r3, [r7, #12]

	if (args->argc < 1) 
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d164      	bne.n	80049f4 <cli_info_sqc+0xe0>
	{
		cliPrintf("%s====== CHECK YOUR SETTTING INFO =======\r\n",C_YLLW);
 800492a:	4934      	ldr	r1, [pc, #208]	; (80049fc <cli_info_sqc+0xe8>)
 800492c:	4834      	ldr	r0, [pc, #208]	; (8004a00 <cli_info_sqc+0xec>)
 800492e:	f7ff f991 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_GREN);
 8004932:	4934      	ldr	r1, [pc, #208]	; (8004a04 <cli_info_sqc+0xf0>)
 8004934:	4834      	ldr	r0, [pc, #208]	; (8004a08 <cli_info_sqc+0xf4>)
 8004936:	f7ff f98d 	bl	8003c54 <cliPrintf>
		if (load_value.Motor_type == 1 )
 800493a:	4b34      	ldr	r3, [pc, #208]	; (8004a0c <cli_info_sqc+0xf8>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d103      	bne.n	800494a <cli_info_sqc+0x36>
			cliPrintf("      >> DRV MOTOR TYPE    = CURTIS \r\n");
 8004942:	4833      	ldr	r0, [pc, #204]	; (8004a10 <cli_info_sqc+0xfc>)
 8004944:	f7ff f986 	bl	8003c54 <cliPrintf>
 8004948:	e002      	b.n	8004950 <cli_info_sqc+0x3c>
		else
			cliPrintf("      >> DRV MOTOR TYPE    = DMCS \r\n");
 800494a:	4832      	ldr	r0, [pc, #200]	; (8004a14 <cli_info_sqc+0x100>)
 800494c:	f7ff f982 	bl	8003c54 <cliPrintf>
		if (load_value.Sensor_type == 1 )
 8004950:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <cli_info_sqc+0xf8>)
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d103      	bne.n	8004960 <cli_info_sqc+0x4c>
			cliPrintf("      >> STR SENSOR TPYE   = PNP\r\n");
 8004958:	482f      	ldr	r0, [pc, #188]	; (8004a18 <cli_info_sqc+0x104>)
 800495a:	f7ff f97b 	bl	8003c54 <cliPrintf>
 800495e:	e002      	b.n	8004966 <cli_info_sqc+0x52>
		else
			cliPrintf("      >> STR SENSOR TPYE   = NPN\r\n");	
 8004960:	482e      	ldr	r0, [pc, #184]	; (8004a1c <cli_info_sqc+0x108>)
 8004962:	f7ff f977 	bl	8003c54 <cliPrintf>
		if ( load_value.Remote_type == 1 )
 8004966:	4b29      	ldr	r3, [pc, #164]	; (8004a0c <cli_info_sqc+0xf8>)
 8004968:	789b      	ldrb	r3, [r3, #2]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d103      	bne.n	8004976 <cli_info_sqc+0x62>
			cliPrintf("      >> REMOTE TPYE       = RF_MASTER\r\n");
 800496e:	482c      	ldr	r0, [pc, #176]	; (8004a20 <cli_info_sqc+0x10c>)
 8004970:	f7ff f970 	bl	8003c54 <cliPrintf>
 8004974:	e002      	b.n	800497c <cli_info_sqc+0x68>
		else
			cliPrintf("      >> REMOTE TPYE       = JEICO\r\n");
 8004976:	482b      	ldr	r0, [pc, #172]	; (8004a24 <cli_info_sqc+0x110>)
 8004978:	f7ff f96c 	bl	8003c54 <cliPrintf>
		if ( load_value.Battery_type == 1 )
 800497c:	4b23      	ldr	r3, [pc, #140]	; (8004a0c <cli_info_sqc+0xf8>)
 800497e:	78db      	ldrb	r3, [r3, #3]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d103      	bne.n	800498c <cli_info_sqc+0x78>
			cliPrintf("      >> BATTERY TPYE      = ATLAS\r\n");
 8004984:	4828      	ldr	r0, [pc, #160]	; (8004a28 <cli_info_sqc+0x114>)
 8004986:	f7ff f965 	bl	8003c54 <cliPrintf>
 800498a:	e002      	b.n	8004992 <cli_info_sqc+0x7e>
		else 
			cliPrintf("      >> BATTERY TPYE      = LONGIST\r\n");
 800498c:	4827      	ldr	r0, [pc, #156]	; (8004a2c <cli_info_sqc+0x118>)
 800498e:	f7ff f961 	bl	8003c54 <cliPrintf>
		if ( load_value.Spray_type == 1)
 8004992:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <cli_info_sqc+0xf8>)
 8004994:	79db      	ldrb	r3, [r3, #7]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d103      	bne.n	80049a2 <cli_info_sqc+0x8e>
			cliPrintf("      >> VALVE TYPE        = VALVE\r\n");
 800499a:	4825      	ldr	r0, [pc, #148]	; (8004a30 <cli_info_sqc+0x11c>)
 800499c:	f7ff f95a 	bl	8003c54 <cliPrintf>
 80049a0:	e002      	b.n	80049a8 <cli_info_sqc+0x94>
		else
			cliPrintf("      >> VALVE TYPE        = NONE\r\n");
 80049a2:	4824      	ldr	r0, [pc, #144]	; (8004a34 <cli_info_sqc+0x120>)
 80049a4:	f7ff f956 	bl	8003c54 <cliPrintf>
		if ( load_value.rtk_type == 1)
 80049a8:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <cli_info_sqc+0xf8>)
 80049aa:	7a1b      	ldrb	r3, [r3, #8]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d103      	bne.n	80049b8 <cli_info_sqc+0xa4>
			cliPrintf("      >> RTK TYPE          = RTK\r\n");
 80049b0:	4821      	ldr	r0, [pc, #132]	; (8004a38 <cli_info_sqc+0x124>)
 80049b2:	f7ff f94f 	bl	8003c54 <cliPrintf>
 80049b6:	e002      	b.n	80049be <cli_info_sqc+0xaa>
		else
			cliPrintf("      >> RTK TYPE          = LINE\r\n");
 80049b8:	4820      	ldr	r0, [pc, #128]	; (8004a3c <cli_info_sqc+0x128>)
 80049ba:	f7ff f94b 	bl	8003c54 <cliPrintf>

			
		cliPrintf("      >> IDLE SPEED OFFSET = %d\r\n",load_value.IDLE_SPD);
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <cli_info_sqc+0xf8>)
 80049c0:	791b      	ldrb	r3, [r3, #4]
 80049c2:	4619      	mov	r1, r3
 80049c4:	481e      	ldr	r0, [pc, #120]	; (8004a40 <cli_info_sqc+0x12c>)
 80049c6:	f7ff f945 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> AUTO DRV LOW  SPD = %d\r\n",load_value.ATD_LOW_SPD);
 80049ca:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <cli_info_sqc+0xf8>)
 80049cc:	795b      	ldrb	r3, [r3, #5]
 80049ce:	4619      	mov	r1, r3
 80049d0:	481c      	ldr	r0, [pc, #112]	; (8004a44 <cli_info_sqc+0x130>)
 80049d2:	f7ff f93f 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> AUTO DRV HIGH SPD = %d\r\n",load_value.ATD_HIGH_SPD);
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <cli_info_sqc+0xf8>)
 80049d8:	799b      	ldrb	r3, [r3, #6]
 80049da:	4619      	mov	r1, r3
 80049dc:	481a      	ldr	r0, [pc, #104]	; (8004a48 <cli_info_sqc+0x134>)
 80049de:	f7ff f939 	bl	8003c54 <cliPrintf>
		cliPrintf("%s=======================================\r\n",C_YLLW);
 80049e2:	4906      	ldr	r1, [pc, #24]	; (80049fc <cli_info_sqc+0xe8>)
 80049e4:	4819      	ldr	r0, [pc, #100]	; (8004a4c <cli_info_sqc+0x138>)
 80049e6:	f7ff f935 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80049ea:	4919      	ldr	r1, [pc, #100]	; (8004a50 <cli_info_sqc+0x13c>)
 80049ec:	4806      	ldr	r0, [pc, #24]	; (8004a08 <cli_info_sqc+0xf4>)
 80049ee:	f7ff f931 	bl	8003c54 <cliPrintf>
		return;
 80049f2:	bf00      	nop
	}

}
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	08011c98 	.word	0x08011c98
 8004a00:	080124e4 	.word	0x080124e4
 8004a04:	08012510 	.word	0x08012510
 8004a08:	08011ccc 	.word	0x08011ccc
 8004a0c:	20000dd4 	.word	0x20000dd4
 8004a10:	08012518 	.word	0x08012518
 8004a14:	08012540 	.word	0x08012540
 8004a18:	08012568 	.word	0x08012568
 8004a1c:	0801258c 	.word	0x0801258c
 8004a20:	080125b0 	.word	0x080125b0
 8004a24:	080125dc 	.word	0x080125dc
 8004a28:	08012604 	.word	0x08012604
 8004a2c:	0801262c 	.word	0x0801262c
 8004a30:	08012654 	.word	0x08012654
 8004a34:	0801267c 	.word	0x0801267c
 8004a38:	080126a0 	.word	0x080126a0
 8004a3c:	080126c4 	.word	0x080126c4
 8004a40:	080126e8 	.word	0x080126e8
 8004a44:	0801270c 	.word	0x0801270c
 8004a48:	08012730 	.word	0x08012730
 8004a4c:	08012754 	.word	0x08012754
 8004a50:	08011cc4 	.word	0x08011cc4

08004a54 <cli_eep_save_sqc>:


void cli_eep_save_sqc(cli_args_t *args) 
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

	int argc = args->argc;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]


	if (args->argc < 1) 
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d11f      	bne.n	8004aaa <cli_eep_save_sqc+0x56>
	{
		
		init_set_save();
 8004a6a:	f002 fc03 	bl	8007274 <init_set_save>
		cliPrintf("%sSAVE..\r\n",C_RED);
 8004a6e:	4910      	ldr	r1, [pc, #64]	; (8004ab0 <cli_eep_save_sqc+0x5c>)
 8004a70:	4810      	ldr	r0, [pc, #64]	; (8004ab4 <cli_eep_save_sqc+0x60>)
 8004a72:	f7ff f8ef 	bl	8003c54 <cliPrintf>
		HAL_Delay(150);
 8004a76:	2096      	movs	r0, #150	; 0x96
 8004a78:	f003 fd5a 	bl	8008530 <HAL_Delay>
		cliPrintf("%sSAVE....\r\n",C_RED);
 8004a7c:	490c      	ldr	r1, [pc, #48]	; (8004ab0 <cli_eep_save_sqc+0x5c>)
 8004a7e:	480e      	ldr	r0, [pc, #56]	; (8004ab8 <cli_eep_save_sqc+0x64>)
 8004a80:	f7ff f8e8 	bl	8003c54 <cliPrintf>
		HAL_Delay(150);
 8004a84:	2096      	movs	r0, #150	; 0x96
 8004a86:	f003 fd53 	bl	8008530 <HAL_Delay>
		cliPrintf("%sSAVE......\r\n",C_RED);
 8004a8a:	4909      	ldr	r1, [pc, #36]	; (8004ab0 <cli_eep_save_sqc+0x5c>)
 8004a8c:	480b      	ldr	r0, [pc, #44]	; (8004abc <cli_eep_save_sqc+0x68>)
 8004a8e:	f7ff f8e1 	bl	8003c54 <cliPrintf>
		HAL_Delay(150);
 8004a92:	2096      	movs	r0, #150	; 0x96
 8004a94:	f003 fd4c 	bl	8008530 <HAL_Delay>
		cliPrintf("%sCOMPLETE\r\n",C_RED);
 8004a98:	4905      	ldr	r1, [pc, #20]	; (8004ab0 <cli_eep_save_sqc+0x5c>)
 8004a9a:	4809      	ldr	r0, [pc, #36]	; (8004ac0 <cli_eep_save_sqc+0x6c>)
 8004a9c:	f7ff f8da 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004aa0:	4908      	ldr	r1, [pc, #32]	; (8004ac4 <cli_eep_save_sqc+0x70>)
 8004aa2:	4809      	ldr	r0, [pc, #36]	; (8004ac8 <cli_eep_save_sqc+0x74>)
 8004aa4:	f7ff f8d6 	bl	8003c54 <cliPrintf>
		return;
 8004aa8:	bf00      	nop
	}
	
}
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	08011d04 	.word	0x08011d04
 8004ab4:	08012780 	.word	0x08012780
 8004ab8:	0801278c 	.word	0x0801278c
 8004abc:	0801279c 	.word	0x0801279c
 8004ac0:	080127ac 	.word	0x080127ac
 8004ac4:	08011cc4 	.word	0x08011cc4
 8004ac8:	08011ccc 	.word	0x08011ccc

08004acc <CAN_ER_Decode>:
16  #define ERR_FIND_COURSE_OK      17		// 경로찾기 OK

*/

void CAN_ER_Decode() 
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
	uCommStatusFlag &= ~f_canERIn;
 8004ad0:	4b9a      	ldr	r3, [pc, #616]	; (8004d3c <CAN_ER_Decode+0x270>)
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	f023 0304 	bic.w	r3, r3, #4
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	4b98      	ldr	r3, [pc, #608]	; (8004d3c <CAN_ER_Decode+0x270>)
 8004adc:	801a      	strh	r2, [r3, #0]
	uKeyStatusFlag &= ~ frk_AutoDrv;
 8004ade:	4b98      	ldr	r3, [pc, #608]	; (8004d40 <CAN_ER_Decode+0x274>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae6:	4a96      	ldr	r2, [pc, #600]	; (8004d40 <CAN_ER_Decode+0x274>)
 8004ae8:	6013      	str	r3, [r2, #0]
	uSysStatusFlag &= ~f_AutoRun;
 8004aea:	4b96      	ldr	r3, [pc, #600]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af2:	4a94      	ldr	r2, [pc, #592]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004af4:	6013      	str	r3, [r2, #0]
	if( CAN_RxData_Error[1] & 0x01 )
 8004af6:	4b94      	ldr	r3, [pc, #592]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004af8:	785b      	ldrb	r3, [r3, #1]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d019      	beq.n	8004b36 <CAN_ER_Decode+0x6a>
	{	
		cliPrintf("%sHeading Error\r\n",C_RED);
 8004b02:	4992      	ldr	r1, [pc, #584]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004b04:	4892      	ldr	r0, [pc, #584]	; (8004d50 <CAN_ER_Decode+0x284>)
 8004b06:	f7ff f8a5 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004b0a:	4992      	ldr	r1, [pc, #584]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004b0c:	4892      	ldr	r0, [pc, #584]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004b0e:	f7ff f8a1 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004b12:	4b8c      	ldr	r3, [pc, #560]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b1a:	4a8a      	ldr	r2, [pc, #552]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b1c:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004b1e:	4b8f      	ldr	r3, [pc, #572]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004b20:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004b24:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x01;
 8004b26:	4b88      	ldr	r3, [pc, #544]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	4b85      	ldr	r3, [pc, #532]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b32:	705a      	strb	r2, [r3, #1]
		uSysStatusFlag |= a_Auto_Ready;
		Bcon_dly = 1200;
		CAN_RxData_Error[2] &= ~ 0x02;	
	}

}
 8004b34:	e0ff      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x02 )
 8004b36:	4b84      	ldr	r3, [pc, #528]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d019      	beq.n	8004b76 <CAN_ER_Decode+0xaa>
		cliPrintf("%sDistance Error\r\n",C_RED);
 8004b42:	4982      	ldr	r1, [pc, #520]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004b44:	4886      	ldr	r0, [pc, #536]	; (8004d60 <CAN_ER_Decode+0x294>)
 8004b46:	f7ff f885 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004b4a:	4982      	ldr	r1, [pc, #520]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004b4c:	4882      	ldr	r0, [pc, #520]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004b4e:	f7ff f881 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004b52:	4b7c      	ldr	r3, [pc, #496]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b5a:	4a7a      	ldr	r2, [pc, #488]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b5c:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004b5e:	4b7f      	ldr	r3, [pc, #508]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004b60:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004b64:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x02;
 8004b66:	4b78      	ldr	r3, [pc, #480]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	f023 0302 	bic.w	r3, r3, #2
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	4b75      	ldr	r3, [pc, #468]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b72:	705a      	strb	r2, [r3, #1]
}
 8004b74:	e0df      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x04 )
 8004b76:	4b74      	ldr	r3, [pc, #464]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b78:	785b      	ldrb	r3, [r3, #1]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d019      	beq.n	8004bb6 <CAN_ER_Decode+0xea>
		cliPrintf("%sLocation Find Error\r\n",C_RED);
 8004b82:	4972      	ldr	r1, [pc, #456]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004b84:	4877      	ldr	r0, [pc, #476]	; (8004d64 <CAN_ER_Decode+0x298>)
 8004b86:	f7ff f865 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004b8a:	4972      	ldr	r1, [pc, #456]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004b8c:	4872      	ldr	r0, [pc, #456]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004b8e:	f7ff f861 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004b92:	4b6c      	ldr	r3, [pc, #432]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b9a:	4a6a      	ldr	r2, [pc, #424]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b9c:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004b9e:	4b6f      	ldr	r3, [pc, #444]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004ba0:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004ba4:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x04;
 8004ba6:	4b68      	ldr	r3, [pc, #416]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	f023 0304 	bic.w	r3, r3, #4
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	4b65      	ldr	r3, [pc, #404]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004bb2:	705a      	strb	r2, [r3, #1]
}
 8004bb4:	e0bf      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x08 )
 8004bb6:	4b64      	ldr	r3, [pc, #400]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004bb8:	785b      	ldrb	r3, [r3, #1]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d019      	beq.n	8004bf6 <CAN_ER_Decode+0x12a>
		cliPrintf("%sLocation change Error\r\n",C_RED);
 8004bc2:	4962      	ldr	r1, [pc, #392]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004bc4:	4868      	ldr	r0, [pc, #416]	; (8004d68 <CAN_ER_Decode+0x29c>)
 8004bc6:	f7ff f845 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004bca:	4962      	ldr	r1, [pc, #392]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004bcc:	4862      	ldr	r0, [pc, #392]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004bce:	f7ff f841 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004bd2:	4b5c      	ldr	r3, [pc, #368]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bda:	4a5a      	ldr	r2, [pc, #360]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004bdc:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004bde:	4b5f      	ldr	r3, [pc, #380]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004be0:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004be4:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x08;
 8004be6:	4b58      	ldr	r3, [pc, #352]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004be8:	785b      	ldrb	r3, [r3, #1]
 8004bea:	f023 0308 	bic.w	r3, r3, #8
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	4b55      	ldr	r3, [pc, #340]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004bf2:	705a      	strb	r2, [r3, #1]
}
 8004bf4:	e09f      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x10 )
 8004bf6:	4b54      	ldr	r3, [pc, #336]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d019      	beq.n	8004c36 <CAN_ER_Decode+0x16a>
		cliPrintf("%sCenter SW Error\r\n",C_RED);
 8004c02:	4952      	ldr	r1, [pc, #328]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004c04:	4859      	ldr	r0, [pc, #356]	; (8004d6c <CAN_ER_Decode+0x2a0>)
 8004c06:	f7ff f825 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004c0a:	4952      	ldr	r1, [pc, #328]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004c0c:	4852      	ldr	r0, [pc, #328]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004c0e:	f7ff f821 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004c12:	4b4c      	ldr	r3, [pc, #304]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c1a:	4a4a      	ldr	r2, [pc, #296]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004c1c:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004c20:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004c24:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x10;	
 8004c26:	4b48      	ldr	r3, [pc, #288]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	f023 0310 	bic.w	r3, r3, #16
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	4b45      	ldr	r3, [pc, #276]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c32:	705a      	strb	r2, [r3, #1]
}
 8004c34:	e07f      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x20 )
 8004c36:	4b44      	ldr	r3, [pc, #272]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c38:	785b      	ldrb	r3, [r3, #1]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d019      	beq.n	8004c76 <CAN_ER_Decode+0x1aa>
		cliPrintf("%sIMU CAL Error\r\n",C_RED);
 8004c42:	4942      	ldr	r1, [pc, #264]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004c44:	484a      	ldr	r0, [pc, #296]	; (8004d70 <CAN_ER_Decode+0x2a4>)
 8004c46:	f7ff f805 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004c4a:	4942      	ldr	r1, [pc, #264]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004c4c:	4842      	ldr	r0, [pc, #264]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004c4e:	f7ff f801 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004c52:	4b3c      	ldr	r3, [pc, #240]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c5a:	4a3a      	ldr	r2, [pc, #232]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004c5c:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004c60:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004c64:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x20;	
 8004c66:	4b38      	ldr	r3, [pc, #224]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	f023 0320 	bic.w	r3, r3, #32
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	4b35      	ldr	r3, [pc, #212]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c72:	705a      	strb	r2, [r3, #1]
}
 8004c74:	e05f      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x40 )
 8004c76:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00f      	beq.n	8004ca2 <CAN_ER_Decode+0x1d6>
		cliPrintf("%sRTK CAN Error\r\n",C_RED);
 8004c82:	4932      	ldr	r1, [pc, #200]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004c84:	483b      	ldr	r0, [pc, #236]	; (8004d74 <CAN_ER_Decode+0x2a8>)
 8004c86:	f7fe ffe5 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004c8a:	4932      	ldr	r1, [pc, #200]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004c8c:	4832      	ldr	r0, [pc, #200]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004c8e:	f7fe ffe1 	bl	8003c54 <cliPrintf>
		CAN_RxData_Error[1] &= ~ 0x40;	
 8004c92:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c94:	785b      	ldrb	r3, [r3, #1]
 8004c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	4b2a      	ldr	r3, [pc, #168]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c9e:	705a      	strb	r2, [r3, #1]
}
 8004ca0:	e049      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x80 )
 8004ca2:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004ca4:	785b      	ldrb	r3, [r3, #1]
 8004ca6:	b25b      	sxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da0f      	bge.n	8004ccc <CAN_ER_Decode+0x200>
		cliPrintf("%sIMU CAN Error\r\n",C_RED);
 8004cac:	4927      	ldr	r1, [pc, #156]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004cae:	4832      	ldr	r0, [pc, #200]	; (8004d78 <CAN_ER_Decode+0x2ac>)
 8004cb0:	f7fe ffd0 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004cb4:	4927      	ldr	r1, [pc, #156]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004cb6:	4828      	ldr	r0, [pc, #160]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004cb8:	f7fe ffcc 	bl	8003c54 <cliPrintf>
		CAN_RxData_Error[1] &= ~ 0x80;	
 8004cbc:	4b22      	ldr	r3, [pc, #136]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cc8:	705a      	strb	r2, [r3, #1]
}
 8004cca:	e034      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[2] & 0x01 )
 8004ccc:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cce:	789b      	ldrb	r3, [r3, #2]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00f      	beq.n	8004cf8 <CAN_ER_Decode+0x22c>
		cliPrintf("%sCAR CAN Error\r\n",C_RED);
 8004cd8:	491c      	ldr	r1, [pc, #112]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004cda:	4828      	ldr	r0, [pc, #160]	; (8004d7c <CAN_ER_Decode+0x2b0>)
 8004cdc:	f7fe ffba 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004ce0:	491c      	ldr	r1, [pc, #112]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004ce2:	481d      	ldr	r0, [pc, #116]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004ce4:	f7fe ffb6 	bl	8003c54 <cliPrintf>
		CAN_RxData_Error[2] &= ~ 0x01;	
 8004ce8:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cea:	789b      	ldrb	r3, [r3, #2]
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cf4:	709a      	strb	r2, [r3, #2]
}
 8004cf6:	e01e      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[2] & 0x02 )
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cfa:	789b      	ldrb	r3, [r3, #2]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d018      	beq.n	8004d36 <CAN_ER_Decode+0x26a>
		cliPrintf("%sLocation FIND OK \r\n",C_RED);
 8004d04:	4911      	ldr	r1, [pc, #68]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004d06:	481e      	ldr	r0, [pc, #120]	; (8004d80 <CAN_ER_Decode+0x2b4>)
 8004d08:	f7fe ffa4 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004d0c:	4911      	ldr	r1, [pc, #68]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004d0e:	4812      	ldr	r0, [pc, #72]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004d10:	f7fe ffa0 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_Auto_Ready;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d1c:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004d1e:	6013      	str	r3, [r2, #0]
		Bcon_dly = 1200;
 8004d20:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004d22:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8004d26:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[2] &= ~ 0x02;	
 8004d28:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004d2a:	789b      	ldrb	r3, [r3, #2]
 8004d2c:	f023 0302 	bic.w	r3, r3, #2
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004d34:	709a      	strb	r2, [r3, #2]
}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000d00 	.word	0x20000d00
 8004d40:	20000cfc 	.word	0x20000cfc
 8004d44:	20000cf8 	.word	0x20000cf8
 8004d48:	20000d68 	.word	0x20000d68
 8004d4c:	08012884 	.word	0x08012884
 8004d50:	0801288c 	.word	0x0801288c
 8004d54:	080128a0 	.word	0x080128a0
 8004d58:	080128a8 	.word	0x080128a8
 8004d5c:	20000de8 	.word	0x20000de8
 8004d60:	080128ac 	.word	0x080128ac
 8004d64:	080128c0 	.word	0x080128c0
 8004d68:	080128d8 	.word	0x080128d8
 8004d6c:	080128f4 	.word	0x080128f4
 8004d70:	08012908 	.word	0x08012908
 8004d74:	0801291c 	.word	0x0801291c
 8004d78:	08012930 	.word	0x08012930
 8004d7c:	08012944 	.word	0x08012944
 8004d80:	08012958 	.word	0x08012958

08004d84 <CAN_DT_Decode>:
void CAN_DT_Decode() 
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
	
	uCommStatusFlag &= ~f_canDTIn;
 8004d88:	4b3c      	ldr	r3, [pc, #240]	; (8004e7c <CAN_DT_Decode+0xf8>)
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <CAN_DT_Decode+0xf8>)
 8004d94:	801a      	strh	r2, [r3, #0]
	if (is_NotUrgency() == 0) 
 8004d96:	f000 fa4d 	bl	8005234 <is_NotUrgency>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10f      	bne.n	8004dc0 <CAN_DT_Decode+0x3c>
	{
		uSysStatusFlag &= ~f_TraceLine;
 8004da0:	4b37      	ldr	r3, [pc, #220]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004da8:	4a35      	ldr	r2, [pc, #212]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004daa:	6013      	str	r3, [r2, #0]
		uSysStatusFlag &= ~f_smartConnected;
 8004dac:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004db4:	4a32      	ldr	r2, [pc, #200]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004db6:	6013      	str	r3, [r2, #0]
		smt_Command = 0;
 8004db8:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <CAN_DT_Decode+0x100>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	801a      	strh	r2, [r3, #0]
		return;
 8004dbe:	e05b      	b.n	8004e78 <CAN_DT_Decode+0xf4>
	}
	//
	if (CAN_RxData[0] & 0x40 ) // rtk state 1 detect
 8004dc0:	4b31      	ldr	r3, [pc, #196]	; (8004e88 <CAN_DT_Decode+0x104>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <CAN_DT_Decode+0x50>
	{
		RTK_state = 1;
 8004dcc:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <CAN_DT_Decode+0x108>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e002      	b.n	8004dda <CAN_DT_Decode+0x56>
	}
	else // 원래 0 
	{
		RTK_state = 0;
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <CAN_DT_Decode+0x108>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	701a      	strb	r2, [r3, #0]
		}
	}
	
	#endif 

	if (CAN_RxData[0] & 0x80) 
 8004dda:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <CAN_DT_Decode+0x104>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	b25b      	sxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da2c      	bge.n	8004e3e <CAN_DT_Decode+0xba>
	{
		uSysStatusFlag |= f_TraceLine; /* ������ ���� �� */
 8004de4:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dec:	4a24      	ldr	r2, [pc, #144]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004dee:	6013      	str	r3, [r2, #0]
		smt_Command = (CAN_RxData[1] << 8) | CAN_RxData[0];
 8004df0:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <CAN_DT_Decode+0x104>)
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	b21a      	sxth	r2, r3
 8004df8:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <CAN_DT_Decode+0x104>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	b21b      	sxth	r3, r3
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	b21b      	sxth	r3, r3
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <CAN_DT_Decode+0x100>)
 8004e06:	801a      	strh	r2, [r3, #0]
		smt_Command &= 0x008D; /* 0000 0000 1000 1101 Heart Bit & Backward Bit Clear */
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <CAN_DT_Decode+0x100>)
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	f003 038d 	and.w	r3, r3, #141	; 0x8d
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <CAN_DT_Decode+0x100>)
 8004e14:	801a      	strh	r2, [r3, #0]
		uSysStatusFlag |= f_smartConnected;
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e1e:	4a18      	ldr	r2, [pc, #96]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e20:	6013      	str	r3, [r2, #0]
		//
		if (uSysStatusFlag & f_OPT_AutodrvSPD) 
 8004e22:	4b17      	ldr	r3, [pc, #92]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <CAN_DT_Decode+0xb2>
		{
			smt_DRVSpeed = 3;
 8004e2e:	4b18      	ldr	r3, [pc, #96]	; (8004e90 <CAN_DT_Decode+0x10c>)
 8004e30:	2203      	movs	r2, #3
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	e020      	b.n	8004e78 <CAN_DT_Decode+0xf4>
		}
		else 
		{
			smt_DRVSpeed = 2;
 8004e36:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <CAN_DT_Decode+0x10c>)
 8004e38:	2202      	movs	r2, #2
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e01c      	b.n	8004e78 <CAN_DT_Decode+0xf4>
		}
		
	} 
	else 
	{
		if (uSysStatusFlag & f_TraceLine) 
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <CAN_DT_Decode+0xf4>
		{
			uSysStatusFlag &= ~f_TraceLine; /* ������ ���� �� */
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e52:	4a0b      	ldr	r2, [pc, #44]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e54:	6013      	str	r3, [r2, #0]
			uSysStatusFlag &= ~f_smartConnected;
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e60:	6013      	str	r3, [r2, #0]
			smt_Command = 0;
 8004e62:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <CAN_DT_Decode+0x100>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	801a      	strh	r2, [r3, #0]
			//
			if (uSysStatusFlag & f_AutoRun)
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <CAN_DT_Decode+0xf4>
				all_MotorStop();
 8004e74:	f001 ff48 	bl	8006d08 <all_MotorStop>
		}
	}

}
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000d00 	.word	0x20000d00
 8004e80:	20000cf8 	.word	0x20000cf8
 8004e84:	20000d36 	.word	0x20000d36
 8004e88:	20000d64 	.word	0x20000d64
 8004e8c:	20000d88 	.word	0x20000d88
 8004e90:	20000039 	.word	0x20000039

08004e94 <Comm_Check>:


void Comm_Check() {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
	if (f_commCAN) 
 8004e98:	4b18      	ldr	r3, [pc, #96]	; (8004efc <Comm_Check+0x68>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d02a      	beq.n	8004ef6 <Comm_Check+0x62>
	{
		if (uCommStatusFlag & f_canDTIn) 
 8004ea0:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <Comm_Check+0x6c>)
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <Comm_Check+0x1e>
		{
			CAN_DT_Decode();
 8004eac:	f7ff ff6a 	bl	8004d84 <CAN_DT_Decode>
					uSysStatusFlag &= ~f_ADRVnoCANData;
				}
			}
		}
	}
}
 8004eb0:	e021      	b.n	8004ef6 <Comm_Check+0x62>
		else if (uCommStatusFlag & f_canERIn)
 8004eb2:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <Comm_Check+0x6c>)
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <Comm_Check+0x30>
			CAN_ER_Decode();
 8004ebe:	f7ff fe05 	bl	8004acc <CAN_ER_Decode>
}
 8004ec2:	e018      	b.n	8004ef6 <Comm_Check+0x62>
			if (uSysStatusFlag & f_AutoRun) 
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <Comm_Check+0x70>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d012      	beq.n	8004ef6 <Comm_Check+0x62>
				if (canDTIntime == 0) 
 8004ed0:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <Comm_Check+0x74>)
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d108      	bne.n	8004eea <Comm_Check+0x56>
					uSysStatusFlag |= f_ADRVnoCANData;
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <Comm_Check+0x70>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ee0:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <Comm_Check+0x70>)
 8004ee2:	6013      	str	r3, [r2, #0]
					all_MotorStop();
 8004ee4:	f001 ff10 	bl	8006d08 <all_MotorStop>
}
 8004ee8:	e005      	b.n	8004ef6 <Comm_Check+0x62>
					uSysStatusFlag &= ~f_ADRVnoCANData;
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <Comm_Check+0x70>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ef2:	4a04      	ldr	r2, [pc, #16]	; (8004f04 <Comm_Check+0x70>)
 8004ef4:	6013      	str	r3, [r2, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000cf2 	.word	0x20000cf2
 8004f00:	20000d00 	.word	0x20000d00
 8004f04:	20000cf8 	.word	0x20000cf8
 8004f08:	20000d56 	.word	0x20000d56

08004f0c <GPIO_Configuration>:

extern LocalKeyType Local_Key;
uint8_t isAutoCondition();

void GPIO_Configuration(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af00      	add	r7, sp, #0
	
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f12:	f107 0318 	add.w	r3, r7, #24
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	60da      	str	r2, [r3, #12]
	
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004f20:	4b9f      	ldr	r3, [pc, #636]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	4a9e      	ldr	r2, [pc, #632]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f26:	f043 0304 	orr.w	r3, r3, #4
 8004f2a:	6193      	str	r3, [r2, #24]
 8004f2c:	4b9c      	ldr	r3, [pc, #624]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004f38:	4b99      	ldr	r3, [pc, #612]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	4a98      	ldr	r2, [pc, #608]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f3e:	f043 0308 	orr.w	r3, r3, #8
 8004f42:	6193      	str	r3, [r2, #24]
 8004f44:	4b96      	ldr	r3, [pc, #600]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004f50:	4b93      	ldr	r3, [pc, #588]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	4a92      	ldr	r2, [pc, #584]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f56:	f043 0310 	orr.w	r3, r3, #16
 8004f5a:	6193      	str	r3, [r2, #24]
 8004f5c:	4b90      	ldr	r3, [pc, #576]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004f68:	4b8d      	ldr	r3, [pc, #564]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	4a8c      	ldr	r2, [pc, #560]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f6e:	f043 0320 	orr.w	r3, r3, #32
 8004f72:	6193      	str	r3, [r2, #24]
 8004f74:	4b8a      	ldr	r3, [pc, #552]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004f80:	4b87      	ldr	r3, [pc, #540]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	4a86      	ldr	r2, [pc, #536]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8a:	6193      	str	r3, [r2, #24]
 8004f8c:	4b84      	ldr	r3, [pc, #528]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]

    

    /* PORT A Input Define_ADC :  PA 0, 1, 2, 3  */
    GPIO_InitStruct.Pin  = A_in_ADC1_0 | A_in_ADC1_1 | A_in_ADC1_2 | A_in_ADC1_3;   
 8004f98:	230f      	movs	r3, #15
 8004f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);                                       
 8004fa4:	f107 0318 	add.w	r3, r7, #24
 8004fa8:	4619      	mov	r1, r3
 8004faa:	487e      	ldr	r0, [pc, #504]	; (80051a4 <GPIO_Configuration+0x298>)
 8004fac:	f005 fc3e 	bl	800a82c <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
	#endif 
	/* PORT A Output Define : PA 6(Buzzer) */
	GPIO_InitStruct.Pin   = A_BUZZER; 
 8004fb0:	2340      	movs	r3, #64	; 0x40
 8004fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004fc0:	f107 0318 	add.w	r3, r7, #24
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4877      	ldr	r0, [pc, #476]	; (80051a4 <GPIO_Configuration+0x298>)
 8004fc8:	f005 fc30 	bl	800a82c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_CAN1_Tx;
    GPIO_InitStruct.Mode = GPIO_Mode_AF_PP;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
	#endif 
	
	GPIO_InitStruct.Pin   = B_BEACON_G | B_BEACON_B | GPIO_I2C_WP | GPIO_I2C_SCL | GPIO_I2C_SDA;	   
 8004fcc:	23e3      	movs	r3, #227	; 0xe3
 8004fce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fdc:	f107 0318 	add.w	r3, r7, #24
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4871      	ldr	r0, [pc, #452]	; (80051a8 <GPIO_Configuration+0x29c>)
 8004fe4:	f005 fc22 	bl	800a82c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = B_LED_Y | B_LED_W;	 
 8004fe8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);										 
 8004ffa:	f107 0318 	add.w	r3, r7, #24
 8004ffe:	4619      	mov	r1, r3
 8005000:	4869      	ldr	r0, [pc, #420]	; (80051a8 <GPIO_Configuration+0x29c>)
 8005002:	f005 fc13 	bl	800a82c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	GPIO_InitStruct.Pin  = GPIO_UART3_Rx;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	#endif
	GPIO_InitStruct.Pin  = B_PMPON | B_PMPUP | B_PMPOFF | B_PMPDN;	 
 8005006:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800500a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800500c:	2301      	movs	r3, #1
 800500e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005010:	2300      	movs	r3, #0
 8005012:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005014:	2302      	movs	r3, #2
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);	
 8005018:	f107 0318 	add.w	r3, r7, #24
 800501c:	4619      	mov	r1, r3
 800501e:	4862      	ldr	r0, [pc, #392]	; (80051a8 <GPIO_Configuration+0x29c>)
 8005020:	f005 fc04 	bl	800a82c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, B_PMPON, GPIO_PIN_RESET);
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800502a:	485f      	ldr	r0, [pc, #380]	; (80051a8 <GPIO_Configuration+0x29c>)
 800502c:	f005 fe75 	bl	800ad1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8005030:	2200      	movs	r2, #0
 8005032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005036:	485c      	ldr	r0, [pc, #368]	; (80051a8 <GPIO_Configuration+0x29c>)
 8005038:	f005 fe6f 	bl	800ad1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B_PMPOFF, GPIO_PIN_RESET);
 800503c:	2200      	movs	r2, #0
 800503e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005042:	4859      	ldr	r0, [pc, #356]	; (80051a8 <GPIO_Configuration+0x29c>)
 8005044:	f005 fe69 	bl	800ad1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B_PMPDN, GPIO_PIN_RESET);
 8005048:	2200      	movs	r2, #0
 800504a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800504e:	4856      	ldr	r0, [pc, #344]	; (80051a8 <GPIO_Configuration+0x29c>)
 8005050:	f005 fe63 	bl	800ad1a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin  = C_STRright_LMT | C_STRleft_LMT | C_STRcenter;   
 8005054:	2313      	movs	r3, #19
 8005056:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800505c:	2302      	movs	r3, #2
 800505e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005060:	f107 0318 	add.w	r3, r7, #24
 8005064:	4619      	mov	r1, r3
 8005066:	4851      	ldr	r0, [pc, #324]	; (80051ac <GPIO_Configuration+0x2a0>)
 8005068:	f005 fbe0 	bl	800a82c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = C_CRASH_1;   
 800506c:	2304      	movs	r3, #4
 800506e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005074:	2302      	movs	r3, #2
 8005076:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005078:	f107 0318 	add.w	r3, r7, #24
 800507c:	4619      	mov	r1, r3
 800507e:	484b      	ldr	r0, [pc, #300]	; (80051ac <GPIO_Configuration+0x2a0>)
 8005080:	f005 fbd4 	bl	800a82c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = C_WLS_IN1 | C_WLS_IN2;   
 8005084:	23c0      	movs	r3, #192	; 0xc0
 8005086:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800508c:	2302      	movs	r3, #2
 800508e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005090:	f107 0318 	add.w	r3, r7, #24
 8005094:	4619      	mov	r1, r3
 8005096:	4845      	ldr	r0, [pc, #276]	; (80051ac <GPIO_Configuration+0x2a0>)
 8005098:	f005 fbc8 	bl	800a82c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = C_BEACON_R;	 
 800509c:	2320      	movs	r3, #32
 800509e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80050a0:	2301      	movs	r3, #1
 80050a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);	
 80050a4:	f107 0318 	add.w	r3, r7, #24
 80050a8:	4619      	mov	r1, r3
 80050aa:	4840      	ldr	r0, [pc, #256]	; (80051ac <GPIO_Configuration+0x2a0>)
 80050ac:	f005 fbbe 	bl	800a82c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = C_OPT_RDY | C_OPT_VISION;	 
 80050b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80050ba:	2302      	movs	r3, #2
 80050bc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);										 
 80050be:	f107 0318 	add.w	r3, r7, #24
 80050c2:	4619      	mov	r1, r3
 80050c4:	4839      	ldr	r0, [pc, #228]	; (80051ac <GPIO_Configuration+0x2a0>)
 80050c6:	f005 fbb1 	bl	800a82c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = IR_FORWARD | IR_AUTODRIVE | IR_FANONUP | IR_FANOFF;	 
 80050ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80050ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80050d4:	2302      	movs	r3, #2
 80050d6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);										 
 80050d8:	f107 0318 	add.w	r3, r7, #24
 80050dc:	4619      	mov	r1, r3
 80050de:	4833      	ldr	r0, [pc, #204]	; (80051ac <GPIO_Configuration+0x2a0>)
 80050e0:	f005 fba4 	bl	800a82c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = IR_BACKWARD | IR_LEFT | IR_RIGHT | IR_PUMP | IR_Main;   
 80050e4:	231f      	movs	r3, #31
 80050e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80050ec:	2302      	movs	r3, #2
 80050ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);                                       
 80050f0:	f107 0318 	add.w	r3, r7, #24
 80050f4:	4619      	mov	r1, r3
 80050f6:	482e      	ldr	r0, [pc, #184]	; (80051b0 <GPIO_Configuration+0x2a4>)
 80050f8:	f005 fb98 	bl	800a82c <HAL_GPIO_Init>
	/* PORT D Output Define  PWM */
	GPIO_InitStruct.Pin   = PWM_RDY | PWM_FAN; 
	GPIO_InitStruct.Mode = GPIO_Mode_AF_PP;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
	#endif 
	GPIO_InitStruct.Pin   = E_LED_R | E_LED_G; 
 80050fc:	2303      	movs	r3, #3
 80050fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8005100:	2301      	movs	r3, #1
 8005102:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005104:	2300      	movs	r3, #0
 8005106:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005108:	2302      	movs	r3, #2
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);	
 800510c:	f107 0318 	add.w	r3, r7, #24
 8005110:	4619      	mov	r1, r3
 8005112:	4828      	ldr	r0, [pc, #160]	; (80051b4 <GPIO_Configuration+0x2a8>)
 8005114:	f005 fb8a 	bl	800a82c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin   = E_strM_BREAK | E_strM_CWCCW; 
 8005118:	f44f 7340 	mov.w	r3, #768	; 0x300
 800511c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800511e:	2301      	movs	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005122:	2300      	movs	r3, #0
 8005124:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005126:	2302      	movs	r3, #2
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);	
 800512a:	f107 0318 	add.w	r3, r7, #24
 800512e:	4619      	mov	r1, r3
 8005130:	4820      	ldr	r0, [pc, #128]	; (80051b4 <GPIO_Configuration+0x2a8>)
 8005132:	f005 fb7b 	bl	800a82c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin   = E_drvM_BREAK | E_drvM_CWCCW | E_SOLv_1; 
 8005136:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800513a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800513c:	2301      	movs	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005144:	2302      	movs	r3, #2
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);	
 8005148:	f107 0318 	add.w	r3, r7, #24
 800514c:	4619      	mov	r1, r3
 800514e:	4819      	ldr	r0, [pc, #100]	; (80051b4 <GPIO_Configuration+0x2a8>)
 8005150:	f005 fb6c 	bl	800a82c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = E_KEY_EMERGENCY | E_KEY_FORWARD | E_KEY_BACKWORD | E_KEY_LEFT | E_KEY_RIGHT;   
 8005154:	237c      	movs	r3, #124	; 0x7c
 8005156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005158:	2300      	movs	r3, #0
 800515a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800515c:	2302      	movs	r3, #2
 800515e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);                                       
 8005160:	f107 0318 	add.w	r3, r7, #24
 8005164:	4619      	mov	r1, r3
 8005166:	4813      	ldr	r0, [pc, #76]	; (80051b4 <GPIO_Configuration+0x2a8>)
 8005168:	f005 fb60 	bl	800a82c <HAL_GPIO_Init>
	/* PORT E Output Define :  PE 0, 1, 8, 9, 11, 12 */
    GPIO_InitStruct.Pin  = E_OPT_Pumpspeed | E_OPT_Autospeed;   
 800516c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005176:	2302      	movs	r3, #2
 8005178:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);                                       
 800517a:	f107 0318 	add.w	r3, r7, #24
 800517e:	4619      	mov	r1, r3
 8005180:	480c      	ldr	r0, [pc, #48]	; (80051b4 <GPIO_Configuration+0x2a8>)
 8005182:	f005 fb53 	bl	800a82c <HAL_GPIO_Init>
	R_LED_Off();
 8005186:	f002 fa69 	bl	800765c <R_LED_Off>
	G_LED_On();
 800518a:	f002 fa73 	bl	8007674 <G_LED_On>
	B_LED_Off();
 800518e:	f002 fa93 	bl	80076b8 <B_LED_Off>
	#if _ATBD_PST
	f_commCAN = TRUE;		/* PST BD --> CAN */
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <GPIO_Configuration+0x2ac>)
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
	#endif 
}
 8005198:	bf00      	nop
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40010800 	.word	0x40010800
 80051a8:	40010c00 	.word	0x40010c00
 80051ac:	40011000 	.word	0x40011000
 80051b0:	40011400 	.word	0x40011400
 80051b4:	40011800 	.word	0x40011800
 80051b8:	20000cf2 	.word	0x20000cf2

080051bc <DRV_Start>:
//extern uint8_t SW_I2C_WriteControl_8Bit(uint8_t pageaddr, uint8_t regaddr, uint8_t data);


/* functions */
void DRV_Start()
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_DMotorACT) == 0)
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <DRV_Start+0x30>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <DRV_Start+0x28>
  {
	DMotorSeq = DMOTOR_START; 		  /* Local & RFR Forward */
 80051cc:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <DRV_Start+0x34>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]
	uSysStatusFlag |= f_DMotorACT;
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <DRV_Start+0x30>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <DRV_Start+0x30>)
 80051dc:	6013      	str	r3, [r2, #0]
	DMotorWaitime = 10;
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <DRV_Start+0x38>)
 80051e0:	220a      	movs	r2, #10
 80051e2:	801a      	strh	r2, [r3, #0]
  }
}
 80051e4:	bf00      	nop
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	20000cf8 	.word	0x20000cf8
 80051f0:	20000d1c 	.word	0x20000d1c
 80051f4:	20000d20 	.word	0x20000d20

080051f8 <STR_Start>:
//
void STR_Start()
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_SMotorACT) == 0)
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <STR_Start+0x30>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <STR_Start+0x28>
  {

	SMotorSeq = SMOTOR_START;
 8005208:	4b08      	ldr	r3, [pc, #32]	; (800522c <STR_Start+0x34>)
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
	uSysStatusFlag |= f_SMotorACT;
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <STR_Start+0x30>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f043 0308 	orr.w	r3, r3, #8
 8005216:	4a04      	ldr	r2, [pc, #16]	; (8005228 <STR_Start+0x30>)
 8005218:	6013      	str	r3, [r2, #0]
	SMotorWaitime = 10;
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <STR_Start+0x38>)
 800521c:	220a      	movs	r2, #10
 800521e:	801a      	strh	r2, [r3, #0]
  }
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr
 8005228:	20000cf8 	.word	0x20000cf8
 800522c:	20000d1d 	.word	0x20000d1d
 8005230:	20000d22 	.word	0x20000d22

08005234 <is_NotUrgency>:
  uKeyStatusFlag = uKeyStatusFlag & 0x000F;		/* 1100 0000 0001 1111 */
}
#endif
//
uint8_t is_NotUrgency()
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  if(((uSysStatusFlag & f_Crash) == 0) && ((uSysStatusFlag & f_LowBat) == 0))
 8005238:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <is_NotUrgency+0x9c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d120      	bne.n	8005286 <is_NotUrgency+0x52>
 8005244:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <is_NotUrgency+0x9c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d11a      	bne.n	8005286 <is_NotUrgency+0x52>
  {
  	if((uSysStatusFlag & f_RFR_Emergency) == 0)
 8005250:	4b1f      	ldr	r3, [pc, #124]	; (80052d0 <is_NotUrgency+0x9c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <is_NotUrgency+0x2c>
		return 1;
 800525c:	2301      	movs	r3, #1
 800525e:	e035      	b.n	80052cc <is_NotUrgency+0x98>
	else
	{
		if(LKAUTOSeq >= 4)
 8005260:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <is_NotUrgency+0xa0>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d901      	bls.n	800526c <is_NotUrgency+0x38>
		{
			return 1;
 8005268:	2301      	movs	r3, #1
 800526a:	e02f      	b.n	80052cc <is_NotUrgency+0x98>
		}
		else
		{
			if(LKAUTOSeq < 3)
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <is_NotUrgency+0xa0>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d806      	bhi.n	8005282 <is_NotUrgency+0x4e>
			{
				if(u16_DebugFlag == 1)
 8005274:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <is_NotUrgency+0xa4>)
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d102      	bne.n	8005282 <is_NotUrgency+0x4e>
					cliPrintf("\n URGENCY - RFR_Not MAIN");
 800527c:	4817      	ldr	r0, [pc, #92]	; (80052dc <is_NotUrgency+0xa8>)
 800527e:	f7fe fce9 	bl	8003c54 <cliPrintf>
			}
			return 0;
 8005282:	2300      	movs	r3, #0
 8005284:	e022      	b.n	80052cc <is_NotUrgency+0x98>
		}
	}
  }
  else
  {
	if(u16_DebugFlag == 1)
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <is_NotUrgency+0xa4>)
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d11d      	bne.n	80052ca <is_NotUrgency+0x96>
	{
		cliPrintf("\n URGENCY - ");
 800528e:	4814      	ldr	r0, [pc, #80]	; (80052e0 <is_NotUrgency+0xac>)
 8005290:	f7fe fce0 	bl	8003c54 <cliPrintf>
		if(uSysStatusFlag & f_Crash)
 8005294:	4b0e      	ldr	r3, [pc, #56]	; (80052d0 <is_NotUrgency+0x9c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <is_NotUrgency+0x72>
			cliPrintf("CRASH ");
 80052a0:	4810      	ldr	r0, [pc, #64]	; (80052e4 <is_NotUrgency+0xb0>)
 80052a2:	f7fe fcd7 	bl	8003c54 <cliPrintf>
		//
		if(uSysStatusFlag & f_LowBat)
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <is_NotUrgency+0x9c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <is_NotUrgency+0x84>
			cliPrintf("Low Bat. ");
 80052b2:	480d      	ldr	r0, [pc, #52]	; (80052e8 <is_NotUrgency+0xb4>)
 80052b4:	f7fe fcce 	bl	8003c54 <cliPrintf>
		//
		if(uSysStatusFlag & f_RFR_Emergency)
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <is_NotUrgency+0x9c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <is_NotUrgency+0x96>
			cliPrintf("RFR_Not MAIN ");
 80052c4:	4809      	ldr	r0, [pc, #36]	; (80052ec <is_NotUrgency+0xb8>)
 80052c6:	f7fe fcc5 	bl	8003c54 <cliPrintf>
	}
	return 0;
 80052ca:	2300      	movs	r3, #0
  }
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000cf8 	.word	0x20000cf8
 80052d4:	20000d59 	.word	0x20000d59
 80052d8:	20000d08 	.word	0x20000d08
 80052dc:	08012970 	.word	0x08012970
 80052e0:	0801298c 	.word	0x0801298c
 80052e4:	0801299c 	.word	0x0801299c
 80052e8:	080129a4 	.word	0x080129a4
 80052ec:	080129b0 	.word	0x080129b0

080052f0 <Drive_REQ>:
#define f_RFR_Emergency		(1 << 15)	/* 1 =  Battery V. Low 35V 이하 */
충돌 : 후진 Key 만 동작 한다.
구동과 조향 Key 이외는 위 3가지 경우에는 동작 하지 않는다.
#endif
void Drive_REQ(uint8_t Control)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	71fb      	strb	r3, [r7, #7]
  if(uSysStatusFlag & f_Crash)		/* 충돌 중에는 후진 Key 만 먹는다. */
 80052fa:	4b9f      	ldr	r3, [pc, #636]	; (8005578 <Drive_REQ+0x288>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <Drive_REQ+0x20>
  {
	if(Control != KEY_BACKWORD)
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d001      	beq.n	8005310 <Drive_REQ+0x20>
	{
		Control = KEY_NONE;	
 800530c:	2300      	movs	r3, #0
 800530e:	71fb      	strb	r3, [r7, #7]
	}
  }
  //
  switch(Control)
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	f000 8185 	beq.w	8005622 <Drive_REQ+0x332>
 8005318:	2b80      	cmp	r3, #128	; 0x80
 800531a:	f300 81e7 	bgt.w	80056ec <Drive_REQ+0x3fc>
 800531e:	2b20      	cmp	r3, #32
 8005320:	dc4a      	bgt.n	80053b8 <Drive_REQ+0xc8>
 8005322:	2b00      	cmp	r3, #0
 8005324:	f340 81e2 	ble.w	80056ec <Drive_REQ+0x3fc>
 8005328:	3b01      	subs	r3, #1
 800532a:	2b1f      	cmp	r3, #31
 800532c:	f200 81de 	bhi.w	80056ec <Drive_REQ+0x3fc>
 8005330:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <Drive_REQ+0x48>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	080053c1 	.word	0x080053c1
 800533c:	080053e3 	.word	0x080053e3
 8005340:	080056ed 	.word	0x080056ed
 8005344:	08005405 	.word	0x08005405
 8005348:	080056ed 	.word	0x080056ed
 800534c:	080056ed 	.word	0x080056ed
 8005350:	080056ed 	.word	0x080056ed
 8005354:	08005435 	.word	0x08005435
 8005358:	080056ed 	.word	0x080056ed
 800535c:	080056ed 	.word	0x080056ed
 8005360:	080056ed 	.word	0x080056ed
 8005364:	080056ed 	.word	0x080056ed
 8005368:	080056ed 	.word	0x080056ed
 800536c:	080056ed 	.word	0x080056ed
 8005370:	080056ed 	.word	0x080056ed
 8005374:	08005465 	.word	0x08005465
 8005378:	080056ed 	.word	0x080056ed
 800537c:	080056ed 	.word	0x080056ed
 8005380:	080056ed 	.word	0x080056ed
 8005384:	080056ed 	.word	0x080056ed
 8005388:	080056ed 	.word	0x080056ed
 800538c:	080056ed 	.word	0x080056ed
 8005390:	080056ed 	.word	0x080056ed
 8005394:	080056ed 	.word	0x080056ed
 8005398:	080056ed 	.word	0x080056ed
 800539c:	080056ed 	.word	0x080056ed
 80053a0:	080056ed 	.word	0x080056ed
 80053a4:	080056ed 	.word	0x080056ed
 80053a8:	080056ed 	.word	0x080056ed
 80053ac:	080056ed 	.word	0x080056ed
 80053b0:	080056ed 	.word	0x080056ed
 80053b4:	0800565d 	.word	0x0800565d
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	f000 8088 	beq.w	80054ce <Drive_REQ+0x1de>
			}
		}			
		break;
		//
	default:
		break;
 80053be:	e195      	b.n	80056ec <Drive_REQ+0x3fc>
		uSysStatusFlag |= f_DMForward;
 80053c0:	4b6d      	ldr	r3, [pc, #436]	; (8005578 <Drive_REQ+0x288>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f043 0302 	orr.w	r3, r3, #2
 80053c8:	4a6b      	ldr	r2, [pc, #428]	; (8005578 <Drive_REQ+0x288>)
 80053ca:	6013      	str	r3, [r2, #0]
		DRV_Start();
 80053cc:	f7ff fef6 	bl	80051bc <DRV_Start>
		if(u16_DebugFlag == 3)
 80053d0:	4b6a      	ldr	r3, [pc, #424]	; (800557c <Drive_REQ+0x28c>)
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	f040 818b 	bne.w	80056f0 <Drive_REQ+0x400>
			cliPrintf("\n DRV_ForStart");
 80053da:	4869      	ldr	r0, [pc, #420]	; (8005580 <Drive_REQ+0x290>)
 80053dc:	f7fe fc3a 	bl	8003c54 <cliPrintf>
		break;
 80053e0:	e186      	b.n	80056f0 <Drive_REQ+0x400>
		uSysStatusFlag &= ~f_DMForward;			
 80053e2:	4b65      	ldr	r3, [pc, #404]	; (8005578 <Drive_REQ+0x288>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 0302 	bic.w	r3, r3, #2
 80053ea:	4a63      	ldr	r2, [pc, #396]	; (8005578 <Drive_REQ+0x288>)
 80053ec:	6013      	str	r3, [r2, #0]
		DRV_Start();
 80053ee:	f7ff fee5 	bl	80051bc <DRV_Start>
		if(u16_DebugFlag == 3)
 80053f2:	4b62      	ldr	r3, [pc, #392]	; (800557c <Drive_REQ+0x28c>)
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	f040 817c 	bne.w	80056f4 <Drive_REQ+0x404>
			cliPrintf("\n DRV_BackStart");
 80053fc:	4861      	ldr	r0, [pc, #388]	; (8005584 <Drive_REQ+0x294>)
 80053fe:	f7fe fc29 	bl	8003c54 <cliPrintf>
		break;
 8005402:	e177      	b.n	80056f4 <Drive_REQ+0x404>
		if((uSysStatusFlag & f_LimitLeft) == 0)
 8005404:	4b5c      	ldr	r3, [pc, #368]	; (8005578 <Drive_REQ+0x288>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 8173 	bne.w	80056f8 <Drive_REQ+0x408>
			uSysStatusFlag |= f_SMLeft;
 8005412:	4b59      	ldr	r3, [pc, #356]	; (8005578 <Drive_REQ+0x288>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f043 0310 	orr.w	r3, r3, #16
 800541a:	4a57      	ldr	r2, [pc, #348]	; (8005578 <Drive_REQ+0x288>)
 800541c:	6013      	str	r3, [r2, #0]
			STR_Start();
 800541e:	f7ff feeb 	bl	80051f8 <STR_Start>
			if(u16_DebugFlag == 3)
 8005422:	4b56      	ldr	r3, [pc, #344]	; (800557c <Drive_REQ+0x28c>)
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	2b03      	cmp	r3, #3
 8005428:	f040 8166 	bne.w	80056f8 <Drive_REQ+0x408>
				cliPrintf("\n STR_LeftStart");
 800542c:	4856      	ldr	r0, [pc, #344]	; (8005588 <Drive_REQ+0x298>)
 800542e:	f7fe fc11 	bl	8003c54 <cliPrintf>
		break;
 8005432:	e161      	b.n	80056f8 <Drive_REQ+0x408>
		if((uSysStatusFlag & f_LimitRight) == 0)
 8005434:	4b50      	ldr	r3, [pc, #320]	; (8005578 <Drive_REQ+0x288>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 815d 	bne.w	80056fc <Drive_REQ+0x40c>
			uSysStatusFlag &= ~f_SMLeft;
 8005442:	4b4d      	ldr	r3, [pc, #308]	; (8005578 <Drive_REQ+0x288>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 0310 	bic.w	r3, r3, #16
 800544a:	4a4b      	ldr	r2, [pc, #300]	; (8005578 <Drive_REQ+0x288>)
 800544c:	6013      	str	r3, [r2, #0]
			STR_Start();
 800544e:	f7ff fed3 	bl	80051f8 <STR_Start>
			if(u16_DebugFlag == 3)
 8005452:	4b4a      	ldr	r3, [pc, #296]	; (800557c <Drive_REQ+0x28c>)
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	2b03      	cmp	r3, #3
 8005458:	f040 8150 	bne.w	80056fc <Drive_REQ+0x40c>
				cliPrintf("\n STR_RightStart");
 800545c:	484b      	ldr	r0, [pc, #300]	; (800558c <Drive_REQ+0x29c>)
 800545e:	f7fe fbf9 	bl	8003c54 <cliPrintf>
		break;
 8005462:	e14b      	b.n	80056fc <Drive_REQ+0x40c>
		if(is_NotUrgency())
 8005464:	f7ff fee6 	bl	8005234 <is_NotUrgency>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8148 	beq.w	8005700 <Drive_REQ+0x410>
			uSysStatusFlag ^= f_PumpOn;
 8005470:	4b41      	ldr	r3, [pc, #260]	; (8005578 <Drive_REQ+0x288>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f083 7380 	eor.w	r3, r3, #16777216	; 0x1000000
 8005478:	4a3f      	ldr	r2, [pc, #252]	; (8005578 <Drive_REQ+0x288>)
 800547a:	6013      	str	r3, [r2, #0]
			if(u16_DebugFlag == 1)
 800547c:	4b3f      	ldr	r3, [pc, #252]	; (800557c <Drive_REQ+0x28c>)
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d105      	bne.n	8005490 <Drive_REQ+0x1a0>
				cliPrintf("\n uSysStatusFlag[%0x]",uSysStatusFlag);
 8005484:	4b3c      	ldr	r3, [pc, #240]	; (8005578 <Drive_REQ+0x288>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	4841      	ldr	r0, [pc, #260]	; (8005590 <Drive_REQ+0x2a0>)
 800548c:	f7fe fbe2 	bl	8003c54 <cliPrintf>
			if(uSysStatusFlag & f_PumpOn)
 8005490:	4b39      	ldr	r3, [pc, #228]	; (8005578 <Drive_REQ+0x288>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d009      	beq.n	80054b0 <Drive_REQ+0x1c0>
				if(u16_DebugFlag == 1)
 800549c:	4b37      	ldr	r3, [pc, #220]	; (800557c <Drive_REQ+0x28c>)
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d102      	bne.n	80054aa <Drive_REQ+0x1ba>
					cliPrintf("\n PUMP ON SEQ");
 80054a4:	483b      	ldr	r0, [pc, #236]	; (8005594 <Drive_REQ+0x2a4>)
 80054a6:	f7fe fbd5 	bl	8003c54 <cliPrintf>
				pn_PumpOn();
 80054aa:	f001 fc05 	bl	8006cb8 <pn_PumpOn>
		break;
 80054ae:	e127      	b.n	8005700 <Drive_REQ+0x410>
				PumpSeq = PUMP_STOP;
 80054b0:	4b39      	ldr	r3, [pc, #228]	; (8005598 <Drive_REQ+0x2a8>)
 80054b2:	220d      	movs	r2, #13
 80054b4:	701a      	strb	r2, [r3, #0]
				PumpWaittime = 10;
 80054b6:	4b39      	ldr	r3, [pc, #228]	; (800559c <Drive_REQ+0x2ac>)
 80054b8:	220a      	movs	r2, #10
 80054ba:	801a      	strh	r2, [r3, #0]
				if(u16_DebugFlag == 1)
 80054bc:	4b2f      	ldr	r3, [pc, #188]	; (800557c <Drive_REQ+0x28c>)
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	f040 811d 	bne.w	8005700 <Drive_REQ+0x410>
					cliPrintf("\n PUMP STOP SEQ");
 80054c6:	4836      	ldr	r0, [pc, #216]	; (80055a0 <Drive_REQ+0x2b0>)
 80054c8:	f7fe fbc4 	bl	8003c54 <cliPrintf>
		break;
 80054cc:	e118      	b.n	8005700 <Drive_REQ+0x410>
		if(is_NotUrgency())
 80054ce:	f7ff feb1 	bl	8005234 <is_NotUrgency>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8115 	beq.w	8005704 <Drive_REQ+0x414>
			if(NotEmpty_WL())
 80054da:	f002 feb1 	bl	8008240 <NotEmpty_WL>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8096 	beq.w	8005612 <Drive_REQ+0x322>
				if((uSysStatusFlag & f_FanACT) == 0)
 80054e6:	4b24      	ldr	r3, [pc, #144]	; (8005578 <Drive_REQ+0x288>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d166      	bne.n	80055c0 <Drive_REQ+0x2d0>
					if(FAN_Speed >= 4)
 80054f2:	4b2c      	ldr	r3, [pc, #176]	; (80055a4 <Drive_REQ+0x2b4>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d902      	bls.n	8005500 <Drive_REQ+0x210>
						FAN_Speed = 1;
 80054fa:	4b2a      	ldr	r3, [pc, #168]	; (80055a4 <Drive_REQ+0x2b4>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
					if((FAN_Speed == 0) && (LKAUTOSeq == 0))
 8005500:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <Drive_REQ+0x2b4>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <Drive_REQ+0x226>
 8005508:	4b27      	ldr	r3, [pc, #156]	; (80055a8 <Drive_REQ+0x2b8>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <Drive_REQ+0x226>
						FAN_Speed = 1;					
 8005510:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <Drive_REQ+0x2b4>)
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
					if(FAN_Speed != 0)
 8005516:	4b23      	ldr	r3, [pc, #140]	; (80055a4 <Drive_REQ+0x2b4>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d019      	beq.n	8005552 <Drive_REQ+0x262>
						FanSeq = FAN_START;
 800551e:	4b23      	ldr	r3, [pc, #140]	; (80055ac <Drive_REQ+0x2bc>)
 8005520:	2201      	movs	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]
						uSysStatusFlag |= f_FanACT;
 8005524:	4b14      	ldr	r3, [pc, #80]	; (8005578 <Drive_REQ+0x288>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800552c:	4a12      	ldr	r2, [pc, #72]	; (8005578 <Drive_REQ+0x288>)
 800552e:	6013      	str	r3, [r2, #0]
						uSysStatusFlag |= f_FanOn;
 8005530:	4b11      	ldr	r3, [pc, #68]	; (8005578 <Drive_REQ+0x288>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005538:	4a0f      	ldr	r2, [pc, #60]	; (8005578 <Drive_REQ+0x288>)
 800553a:	6013      	str	r3, [r2, #0]
						FanWaittime = 10;
 800553c:	4b1c      	ldr	r3, [pc, #112]	; (80055b0 <Drive_REQ+0x2c0>)
 800553e:	220a      	movs	r2, #10
 8005540:	801a      	strh	r2, [r3, #0]
						FanTKPWM = FAN_PWM[FAN_Speed];
 8005542:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <Drive_REQ+0x2b4>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <Drive_REQ+0x2c4>)
 800554a:	5c9a      	ldrb	r2, [r3, r2]
 800554c:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <Drive_REQ+0x2c8>)
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e002      	b.n	8005558 <Drive_REQ+0x268>
						FanSeq = FAN_STOP;					
 8005552:	4b16      	ldr	r3, [pc, #88]	; (80055ac <Drive_REQ+0x2bc>)
 8005554:	2205      	movs	r2, #5
 8005556:	701a      	strb	r2, [r3, #0]
					if(u16_DebugFlag == 1)
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <Drive_REQ+0x28c>)
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	f040 80d1 	bne.w	8005704 <Drive_REQ+0x414>
						cliPrintf("\n FAN_Start SPEED[%0d],PWM[%0d]",FAN_Speed,FanTKPWM);
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <Drive_REQ+0x2b4>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	4619      	mov	r1, r3
 8005568:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <Drive_REQ+0x2c8>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	4813      	ldr	r0, [pc, #76]	; (80055bc <Drive_REQ+0x2cc>)
 8005570:	f7fe fb70 	bl	8003c54 <cliPrintf>
		break;
 8005574:	e0c6      	b.n	8005704 <Drive_REQ+0x414>
 8005576:	bf00      	nop
 8005578:	20000cf8 	.word	0x20000cf8
 800557c:	20000d08 	.word	0x20000d08
 8005580:	080129c0 	.word	0x080129c0
 8005584:	080129d0 	.word	0x080129d0
 8005588:	080129e0 	.word	0x080129e0
 800558c:	080129f0 	.word	0x080129f0
 8005590:	08012a04 	.word	0x08012a04
 8005594:	08012a1c 	.word	0x08012a1c
 8005598:	20000d1e 	.word	0x20000d1e
 800559c:	20000d24 	.word	0x20000d24
 80055a0:	08012a2c 	.word	0x08012a2c
 80055a4:	20000d32 	.word	0x20000d32
 80055a8:	20000d59 	.word	0x20000d59
 80055ac:	20000d1f 	.word	0x20000d1f
 80055b0:	20000d26 	.word	0x20000d26
 80055b4:	08012e0c 	.word	0x08012e0c
 80055b8:	20000d2a 	.word	0x20000d2a
 80055bc:	08012a3c 	.word	0x08012a3c
					++FAN_Speed;
 80055c0:	4b55      	ldr	r3, [pc, #340]	; (8005718 <Drive_REQ+0x428>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	4b53      	ldr	r3, [pc, #332]	; (8005718 <Drive_REQ+0x428>)
 80055ca:	701a      	strb	r2, [r3, #0]
					if(FAN_Speed >= 4)
 80055cc:	4b52      	ldr	r3, [pc, #328]	; (8005718 <Drive_REQ+0x428>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d902      	bls.n	80055da <Drive_REQ+0x2ea>
						FAN_Speed = 1;
 80055d4:	4b50      	ldr	r3, [pc, #320]	; (8005718 <Drive_REQ+0x428>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	701a      	strb	r2, [r3, #0]
					FanTKPWM = FAN_PWM[FAN_Speed];
 80055da:	4b4f      	ldr	r3, [pc, #316]	; (8005718 <Drive_REQ+0x428>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	4b4e      	ldr	r3, [pc, #312]	; (800571c <Drive_REQ+0x42c>)
 80055e2:	5c9a      	ldrb	r2, [r3, r2]
 80055e4:	4b4e      	ldr	r3, [pc, #312]	; (8005720 <Drive_REQ+0x430>)
 80055e6:	701a      	strb	r2, [r3, #0]
					FanSeq = FAN_SPEED;
 80055e8:	4b4e      	ldr	r3, [pc, #312]	; (8005724 <Drive_REQ+0x434>)
 80055ea:	2202      	movs	r2, #2
 80055ec:	701a      	strb	r2, [r3, #0]
					FanWaittime = 10;
 80055ee:	4b4e      	ldr	r3, [pc, #312]	; (8005728 <Drive_REQ+0x438>)
 80055f0:	220a      	movs	r2, #10
 80055f2:	801a      	strh	r2, [r3, #0]
					if(u16_DebugFlag == 1)
 80055f4:	4b4d      	ldr	r3, [pc, #308]	; (800572c <Drive_REQ+0x43c>)
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	f040 8083 	bne.w	8005704 <Drive_REQ+0x414>
						cliPrintf("\n FAN_UP SPEED[%0d],PWM[%0d]",FAN_Speed,FanTKPWM);
 80055fe:	4b46      	ldr	r3, [pc, #280]	; (8005718 <Drive_REQ+0x428>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	4619      	mov	r1, r3
 8005604:	4b46      	ldr	r3, [pc, #280]	; (8005720 <Drive_REQ+0x430>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	4849      	ldr	r0, [pc, #292]	; (8005730 <Drive_REQ+0x440>)
 800560c:	f7fe fb22 	bl	8003c54 <cliPrintf>
		break;
 8005610:	e078      	b.n	8005704 <Drive_REQ+0x414>
				if(u16_DebugFlag == 1)
 8005612:	4b46      	ldr	r3, [pc, #280]	; (800572c <Drive_REQ+0x43c>)
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d174      	bne.n	8005704 <Drive_REQ+0x414>
					cliPrintf("\n !! WL_Empty !!");
 800561a:	4846      	ldr	r0, [pc, #280]	; (8005734 <Drive_REQ+0x444>)
 800561c:	f7fe fb1a 	bl	8003c54 <cliPrintf>
		break;
 8005620:	e070      	b.n	8005704 <Drive_REQ+0x414>
		if(uSysStatusFlag & f_FanACT)
 8005622:	4b45      	ldr	r3, [pc, #276]	; (8005738 <Drive_REQ+0x448>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d06c      	beq.n	8005708 <Drive_REQ+0x418>
			uSysStatusFlag &= ~f_FanOn;
 800562e:	4b42      	ldr	r3, [pc, #264]	; (8005738 <Drive_REQ+0x448>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005636:	4a40      	ldr	r2, [pc, #256]	; (8005738 <Drive_REQ+0x448>)
 8005638:	6013      	str	r3, [r2, #0]
			FanSeq = FAN_STOP;
 800563a:	4b3a      	ldr	r3, [pc, #232]	; (8005724 <Drive_REQ+0x434>)
 800563c:	2205      	movs	r2, #5
 800563e:	701a      	strb	r2, [r3, #0]
			FanWaittime = 10;
 8005640:	4b39      	ldr	r3, [pc, #228]	; (8005728 <Drive_REQ+0x438>)
 8005642:	220a      	movs	r2, #10
 8005644:	801a      	strh	r2, [r3, #0]
			FAN_Speed = 0;
 8005646:	4b34      	ldr	r3, [pc, #208]	; (8005718 <Drive_REQ+0x428>)
 8005648:	2200      	movs	r2, #0
 800564a:	701a      	strb	r2, [r3, #0]
			if(u16_DebugFlag == 1)
 800564c:	4b37      	ldr	r3, [pc, #220]	; (800572c <Drive_REQ+0x43c>)
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d159      	bne.n	8005708 <Drive_REQ+0x418>
				cliPrintf("\n FAN STOP SEQ. LOGIC 0");
 8005654:	4839      	ldr	r0, [pc, #228]	; (800573c <Drive_REQ+0x44c>)
 8005656:	f7fe fafd 	bl	8003c54 <cliPrintf>
		break;
 800565a:	e055      	b.n	8005708 <Drive_REQ+0x418>
		if(is_NotUrgency())
 800565c:	f7ff fdea 	bl	8005234 <is_NotUrgency>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d052      	beq.n	800570c <Drive_REQ+0x41c>
			uSysStatusFlag ^= f_AutoRun;
 8005666:	4b34      	ldr	r3, [pc, #208]	; (8005738 <Drive_REQ+0x448>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800566e:	4a32      	ldr	r2, [pc, #200]	; (8005738 <Drive_REQ+0x448>)
 8005670:	6013      	str	r3, [r2, #0]
			if(uSysStatusFlag & f_WTEmptBuzReq)			// During Buzzer  기대자율떄문이네
 8005672:	4b31      	ldr	r3, [pc, #196]	; (8005738 <Drive_REQ+0x448>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <Drive_REQ+0x39a>
				uSysStatusFlag &= ~f_WTEmptBuzReq;		// Stop Buszzer		
 800567e:	4b2e      	ldr	r3, [pc, #184]	; (8005738 <Drive_REQ+0x448>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005686:	4a2c      	ldr	r2, [pc, #176]	; (8005738 <Drive_REQ+0x448>)
 8005688:	6013      	str	r3, [r2, #0]
			if(u16_DebugFlag == 1)
 800568a:	4b28      	ldr	r3, [pc, #160]	; (800572c <Drive_REQ+0x43c>)
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d107      	bne.n	80056a2 <Drive_REQ+0x3b2>
				cliPrintf("\n KEY_AUTO_RUN[%0x]",(uSysStatusFlag & f_AutoRun));
 8005692:	4b29      	ldr	r3, [pc, #164]	; (8005738 <Drive_REQ+0x448>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	4619      	mov	r1, r3
 800569c:	4828      	ldr	r0, [pc, #160]	; (8005740 <Drive_REQ+0x450>)
 800569e:	f7fe fad9 	bl	8003c54 <cliPrintf>
			if(uSysStatusFlag & f_AutoRun)
 80056a2:	4b25      	ldr	r3, [pc, #148]	; (8005738 <Drive_REQ+0x448>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00c      	beq.n	80056c8 <Drive_REQ+0x3d8>
				if(u16_DebugFlag == 1)
 80056ae:	4b1f      	ldr	r3, [pc, #124]	; (800572c <Drive_REQ+0x43c>)
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d12a      	bne.n	800570c <Drive_REQ+0x41c>
					cliPrintf("_[%0x]",uSysStatusFlag & f_AutoRun);
 80056b6:	4b20      	ldr	r3, [pc, #128]	; (8005738 <Drive_REQ+0x448>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056be:	4619      	mov	r1, r3
 80056c0:	4820      	ldr	r0, [pc, #128]	; (8005744 <Drive_REQ+0x454>)
 80056c2:	f7fe fac7 	bl	8003c54 <cliPrintf>
		break;
 80056c6:	e021      	b.n	800570c <Drive_REQ+0x41c>
				if(u16_DebugFlag == 1)
 80056c8:	4b18      	ldr	r3, [pc, #96]	; (800572c <Drive_REQ+0x43c>)
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d10a      	bne.n	80056e6 <Drive_REQ+0x3f6>
					cliPrintf("_[%0x]",uSysStatusFlag & f_AutoRun);
 80056d0:	4b19      	ldr	r3, [pc, #100]	; (8005738 <Drive_REQ+0x448>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d8:	4619      	mov	r1, r3
 80056da:	481a      	ldr	r0, [pc, #104]	; (8005744 <Drive_REQ+0x454>)
 80056dc:	f7fe faba 	bl	8003c54 <cliPrintf>
					cliPrintf(" - Driving AUTO, KEY IN - All Motor Stop");
 80056e0:	4819      	ldr	r0, [pc, #100]	; (8005748 <Drive_REQ+0x458>)
 80056e2:	f7fe fab7 	bl	8003c54 <cliPrintf>
				all_MotorStop();
 80056e6:	f001 fb0f 	bl	8006d08 <all_MotorStop>
		break;
 80056ea:	e00f      	b.n	800570c <Drive_REQ+0x41c>
		break;
 80056ec:	bf00      	nop
 80056ee:	e00e      	b.n	800570e <Drive_REQ+0x41e>
		break;
 80056f0:	bf00      	nop
 80056f2:	e00c      	b.n	800570e <Drive_REQ+0x41e>
		break;
 80056f4:	bf00      	nop
 80056f6:	e00a      	b.n	800570e <Drive_REQ+0x41e>
		break;
 80056f8:	bf00      	nop
 80056fa:	e008      	b.n	800570e <Drive_REQ+0x41e>
		break;
 80056fc:	bf00      	nop
 80056fe:	e006      	b.n	800570e <Drive_REQ+0x41e>
		break;
 8005700:	bf00      	nop
 8005702:	e004      	b.n	800570e <Drive_REQ+0x41e>
		break;
 8005704:	bf00      	nop
 8005706:	e002      	b.n	800570e <Drive_REQ+0x41e>
		break;
 8005708:	bf00      	nop
 800570a:	e000      	b.n	800570e <Drive_REQ+0x41e>
		break;
 800570c:	bf00      	nop
  }
  //}
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000d32 	.word	0x20000d32
 800571c:	08012e0c 	.word	0x08012e0c
 8005720:	20000d2a 	.word	0x20000d2a
 8005724:	20000d1f 	.word	0x20000d1f
 8005728:	20000d26 	.word	0x20000d26
 800572c:	20000d08 	.word	0x20000d08
 8005730:	08012a5c 	.word	0x08012a5c
 8005734:	08012a7c 	.word	0x08012a7c
 8005738:	20000cf8 	.word	0x20000cf8
 800573c:	08012a90 	.word	0x08012a90
 8005740:	08012aa8 	.word	0x08012aa8
 8005744:	08012abc 	.word	0x08012abc
 8005748:	08012ac4 	.word	0x08012ac4

0800574c <Lkey_Action>:
// uSysStatusFlag |= f_TraceLine
#if 0
	자율주행 중에는 주행,조향 Key 동작을 안한다.
#endif
void Lkey_Action()
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
#if 0
  printf("\n L_KEY[%0d]",Local_Key.lK_Last);	
#endif
  if((Local_Key.lK_Last & KEY_FORWARD)  == KEY_FORWARD)
 8005750:	4b42      	ldr	r3, [pc, #264]	; (800585c <Lkey_Action+0x110>)
 8005752:	885b      	ldrh	r3, [r3, #2]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d014      	beq.n	8005786 <Lkey_Action+0x3a>
  {
	if(isAutoCondition() == 0)	
 800575c:	f000 fbd0 	bl	8005f00 <isAutoCondition>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d136      	bne.n	80057d4 <Lkey_Action+0x88>
	{
		uKeyStatusFlag |= flk_Forward;
 8005766:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <Lkey_Action+0x114>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	4a3c      	ldr	r2, [pc, #240]	; (8005860 <Lkey_Action+0x114>)
 8005770:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~flk_Backward;
 8005772:	4b3b      	ldr	r3, [pc, #236]	; (8005860 <Lkey_Action+0x114>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 0302 	bic.w	r3, r3, #2
 800577a:	4a39      	ldr	r2, [pc, #228]	; (8005860 <Lkey_Action+0x114>)
 800577c:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_FORWARD);
 800577e:	2001      	movs	r0, #1
 8005780:	f7ff fdb6 	bl	80052f0 <Drive_REQ>
 8005784:	e026      	b.n	80057d4 <Lkey_Action+0x88>
	}
  }
  else if((Local_Key.lK_Last & KEY_BACKWORD)  == KEY_BACKWORD)
 8005786:	4b35      	ldr	r3, [pc, #212]	; (800585c <Lkey_Action+0x110>)
 8005788:	885b      	ldrh	r3, [r3, #2]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d014      	beq.n	80057bc <Lkey_Action+0x70>
  {
	if(isAutoCondition() == 0)
 8005792:	f000 fbb5 	bl	8005f00 <isAutoCondition>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d11b      	bne.n	80057d4 <Lkey_Action+0x88>
	{
		uKeyStatusFlag &= ~flk_Forward;
 800579c:	4b30      	ldr	r3, [pc, #192]	; (8005860 <Lkey_Action+0x114>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	4a2e      	ldr	r2, [pc, #184]	; (8005860 <Lkey_Action+0x114>)
 80057a6:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag |= flk_Backward;
 80057a8:	4b2d      	ldr	r3, [pc, #180]	; (8005860 <Lkey_Action+0x114>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f043 0302 	orr.w	r3, r3, #2
 80057b0:	4a2b      	ldr	r2, [pc, #172]	; (8005860 <Lkey_Action+0x114>)
 80057b2:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_BACKWORD);
 80057b4:	2002      	movs	r0, #2
 80057b6:	f7ff fd9b 	bl	80052f0 <Drive_REQ>
 80057ba:	e00b      	b.n	80057d4 <Lkey_Action+0x88>
	}
  }
  else
  {
	uKeyStatusFlag &= ~flk_Forward;
 80057bc:	4b28      	ldr	r3, [pc, #160]	; (8005860 <Lkey_Action+0x114>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 0301 	bic.w	r3, r3, #1
 80057c4:	4a26      	ldr	r2, [pc, #152]	; (8005860 <Lkey_Action+0x114>)
 80057c6:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~flk_Backward;
 80057c8:	4b25      	ldr	r3, [pc, #148]	; (8005860 <Lkey_Action+0x114>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f023 0302 	bic.w	r3, r3, #2
 80057d0:	4a23      	ldr	r2, [pc, #140]	; (8005860 <Lkey_Action+0x114>)
 80057d2:	6013      	str	r3, [r2, #0]
  }
  //
  if((Local_Key.lK_Last & KEY_LEFT) == KEY_LEFT)
 80057d4:	4b21      	ldr	r3, [pc, #132]	; (800585c <Lkey_Action+0x110>)
 80057d6:	885b      	ldrh	r3, [r3, #2]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d014      	beq.n	800580a <Lkey_Action+0xbe>
  {
	if(isAutoCondition() == 0)
 80057e0:	f000 fb8e 	bl	8005f00 <isAutoCondition>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d136      	bne.n	8005858 <Lkey_Action+0x10c>
	{
		uKeyStatusFlag |= flk_Left;
 80057ea:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <Lkey_Action+0x114>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f043 0304 	orr.w	r3, r3, #4
 80057f2:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <Lkey_Action+0x114>)
 80057f4:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~flk_Right;
 80057f6:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <Lkey_Action+0x114>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f023 0308 	bic.w	r3, r3, #8
 80057fe:	4a18      	ldr	r2, [pc, #96]	; (8005860 <Lkey_Action+0x114>)
 8005800:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_LEFT);
 8005802:	2004      	movs	r0, #4
 8005804:	f7ff fd74 	bl	80052f0 <Drive_REQ>
  else
  {
	uKeyStatusFlag &= ~flk_Left;
	uKeyStatusFlag &= ~flk_Right;
  }
}
 8005808:	e026      	b.n	8005858 <Lkey_Action+0x10c>
  else if((Local_Key.lK_Last & KEY_RIGHT) == KEY_RIGHT)
 800580a:	4b14      	ldr	r3, [pc, #80]	; (800585c <Lkey_Action+0x110>)
 800580c:	885b      	ldrh	r3, [r3, #2]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d014      	beq.n	8005840 <Lkey_Action+0xf4>
	if(isAutoCondition() == 0)
 8005816:	f000 fb73 	bl	8005f00 <isAutoCondition>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11b      	bne.n	8005858 <Lkey_Action+0x10c>
		uKeyStatusFlag &= ~flk_Left;
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <Lkey_Action+0x114>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f023 0304 	bic.w	r3, r3, #4
 8005828:	4a0d      	ldr	r2, [pc, #52]	; (8005860 <Lkey_Action+0x114>)
 800582a:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag |= flk_Right;
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <Lkey_Action+0x114>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f043 0308 	orr.w	r3, r3, #8
 8005834:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <Lkey_Action+0x114>)
 8005836:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_RIGHT);
 8005838:	2008      	movs	r0, #8
 800583a:	f7ff fd59 	bl	80052f0 <Drive_REQ>
}
 800583e:	e00b      	b.n	8005858 <Lkey_Action+0x10c>
	uKeyStatusFlag &= ~flk_Left;
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <Lkey_Action+0x114>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f023 0304 	bic.w	r3, r3, #4
 8005848:	4a05      	ldr	r2, [pc, #20]	; (8005860 <Lkey_Action+0x114>)
 800584a:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~flk_Right;
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <Lkey_Action+0x114>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f023 0308 	bic.w	r3, r3, #8
 8005854:	4a02      	ldr	r2, [pc, #8]	; (8005860 <Lkey_Action+0x114>)
 8005856:	6013      	str	r3, [r2, #0]
}
 8005858:	bf00      	nop
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000cdc 	.word	0x20000cdc
 8005860:	20000cfc 	.word	0x20000cfc

08005864 <Comm_Action>:
//
void Comm_Action()
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  if((smt_Command & KEY_FORWARD)  == KEY_FORWARD)
 8005868:	4b1c      	ldr	r3, [pc, #112]	; (80058dc <Comm_Action+0x78>)
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00f      	beq.n	8005894 <Comm_Action+0x30>
  {
	uKeyStatusFlag |= smt_Forward;
 8005874:	4b1a      	ldr	r3, [pc, #104]	; (80058e0 <Comm_Action+0x7c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800587c:	4a18      	ldr	r2, [pc, #96]	; (80058e0 <Comm_Action+0x7c>)
 800587e:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~smt_Backward;
 8005880:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <Comm_Action+0x7c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005888:	4a15      	ldr	r2, [pc, #84]	; (80058e0 <Comm_Action+0x7c>)
 800588a:	6013      	str	r3, [r2, #0]
	Drive_REQ(KEY_FORWARD);
 800588c:	2001      	movs	r0, #1
 800588e:	f7ff fd2f 	bl	80052f0 <Drive_REQ>
  {
	uKeyStatusFlag &= ~smt_Left;
	uKeyStatusFlag &= ~smt_Right;
  }
  #endif 
}
 8005892:	e021      	b.n	80058d8 <Comm_Action+0x74>
  else if((smt_Command & KEY_BACKWORD)	== KEY_BACKWORD)
 8005894:	4b11      	ldr	r3, [pc, #68]	; (80058dc <Comm_Action+0x78>)
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00f      	beq.n	80058c0 <Comm_Action+0x5c>
	uKeyStatusFlag &= ~smt_Forward;
 80058a0:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <Comm_Action+0x7c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058a8:	4a0d      	ldr	r2, [pc, #52]	; (80058e0 <Comm_Action+0x7c>)
 80058aa:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag |= smt_Backward;
 80058ac:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <Comm_Action+0x7c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058b4:	4a0a      	ldr	r2, [pc, #40]	; (80058e0 <Comm_Action+0x7c>)
 80058b6:	6013      	str	r3, [r2, #0]
	Drive_REQ(KEY_BACKWORD);
 80058b8:	2002      	movs	r0, #2
 80058ba:	f7ff fd19 	bl	80052f0 <Drive_REQ>
}
 80058be:	e00b      	b.n	80058d8 <Comm_Action+0x74>
	uKeyStatusFlag &= ~smt_Forward;
 80058c0:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <Comm_Action+0x7c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058c8:	4a05      	ldr	r2, [pc, #20]	; (80058e0 <Comm_Action+0x7c>)
 80058ca:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~smt_Backward;
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <Comm_Action+0x7c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058d4:	4a02      	ldr	r2, [pc, #8]	; (80058e0 <Comm_Action+0x7c>)
 80058d6:	6013      	str	r3, [r2, #0]
}
 80058d8:	bf00      	nop
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20000d36 	.word	0x20000d36
 80058e0:	20000cfc 	.word	0x20000cfc

080058e4 <Rkey_Action>:
uint8_t not_ready_flag = 0;
//
void Rkey_Action()	/* 무선리모컨  */
{
 80058e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058e8:	b089      	sub	sp, #36	; 0x24
 80058ea:	af08      	add	r7, sp, #32
  if(u16_DebugFlag == 1)
 80058ec:	4b99      	ldr	r3, [pc, #612]	; (8005b54 <Rkey_Action+0x270>)
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d132      	bne.n	800595a <Rkey_Action+0x76>
  {
	cliPrintf("\n R_KEY[%0x] >> B_ADC[%0d] B-VOLT[%.1f] -- [R_VOL_ADC[%0d] Voltage[%.1f] DRV_SPD[%0d]",RFR_Key.rK_Last,ADC_Battery, V_Battery,ADC_RFRVolume,V_RFRVolume,DRV_Speed);
 80058f4:	4b98      	ldr	r3, [pc, #608]	; (8005b58 <Rkey_Action+0x274>)
 80058f6:	885b      	ldrh	r3, [r3, #2]
 80058f8:	4698      	mov	r8, r3
 80058fa:	4b98      	ldr	r3, [pc, #608]	; (8005b5c <Rkey_Action+0x278>)
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	4699      	mov	r9, r3
 8005900:	4b97      	ldr	r3, [pc, #604]	; (8005b60 <Rkey_Action+0x27c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f7fa fe05 	bl	8000514 <__aeabi_f2d>
 800590a:	4604      	mov	r4, r0
 800590c:	460d      	mov	r5, r1
 800590e:	4b95      	ldr	r3, [pc, #596]	; (8005b64 <Rkey_Action+0x280>)
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	461e      	mov	r6, r3
 8005914:	4b94      	ldr	r3, [pc, #592]	; (8005b68 <Rkey_Action+0x284>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7fa fdfb 	bl	8000514 <__aeabi_f2d>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4992      	ldr	r1, [pc, #584]	; (8005b6c <Rkey_Action+0x288>)
 8005924:	7809      	ldrb	r1, [r1, #0]
 8005926:	9106      	str	r1, [sp, #24]
 8005928:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800592c:	9602      	str	r6, [sp, #8]
 800592e:	e9cd 4500 	strd	r4, r5, [sp]
 8005932:	464a      	mov	r2, r9
 8005934:	4641      	mov	r1, r8
 8005936:	488e      	ldr	r0, [pc, #568]	; (8005b70 <Rkey_Action+0x28c>)
 8005938:	f7fe f98c 	bl	8003c54 <cliPrintf>
	cliPrintf("\n Limit_C[%0x] L[%0x] R[%0x]",uSysStatusFlag & f_LimitCenter,uSysStatusFlag & f_LimitLeft,uSysStatusFlag & f_LimitRight);
 800593c:	4b8d      	ldr	r3, [pc, #564]	; (8005b74 <Rkey_Action+0x290>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8005944:	4b8b      	ldr	r3, [pc, #556]	; (8005b74 <Rkey_Action+0x290>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800594c:	4b89      	ldr	r3, [pc, #548]	; (8005b74 <Rkey_Action+0x290>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005954:	4888      	ldr	r0, [pc, #544]	; (8005b78 <Rkey_Action+0x294>)
 8005956:	f7fe f97d 	bl	8003c54 <cliPrintf>
  }
  //
  if((RFR_Key.rK_Last & RFR_FORWARD)  == RFR_FORWARD)			/* 0x20 */
 800595a:	4b7f      	ldr	r3, [pc, #508]	; (8005b58 <Rkey_Action+0x274>)
 800595c:	885b      	ldrh	r3, [r3, #2]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d014      	beq.n	8005990 <Rkey_Action+0xac>
  {
	if(isAutoCondition() == 0)
 8005966:	f000 facb 	bl	8005f00 <isAutoCondition>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d136      	bne.n	80059de <Rkey_Action+0xfa>
	{
		uKeyStatusFlag |= frk_Forward;
 8005970:	4b82      	ldr	r3, [pc, #520]	; (8005b7c <Rkey_Action+0x298>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f043 0320 	orr.w	r3, r3, #32
 8005978:	4a80      	ldr	r2, [pc, #512]	; (8005b7c <Rkey_Action+0x298>)
 800597a:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~frk_Backward;
 800597c:	4b7f      	ldr	r3, [pc, #508]	; (8005b7c <Rkey_Action+0x298>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005984:	4a7d      	ldr	r2, [pc, #500]	; (8005b7c <Rkey_Action+0x298>)
 8005986:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_FORWARD);
 8005988:	2001      	movs	r0, #1
 800598a:	f7ff fcb1 	bl	80052f0 <Drive_REQ>
 800598e:	e026      	b.n	80059de <Rkey_Action+0xfa>
	}
  }
  else if((RFR_Key.rK_Last & RFR_BACKWORD)  == RFR_BACKWORD)	/* 0x01 */
 8005990:	4b71      	ldr	r3, [pc, #452]	; (8005b58 <Rkey_Action+0x274>)
 8005992:	885b      	ldrh	r3, [r3, #2]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d014      	beq.n	80059c6 <Rkey_Action+0xe2>
  {
	if(isAutoCondition() == 0)
 800599c:	f000 fab0 	bl	8005f00 <isAutoCondition>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d11b      	bne.n	80059de <Rkey_Action+0xfa>
	{
		uKeyStatusFlag |= frk_Backward;
 80059a6:	4b75      	ldr	r3, [pc, #468]	; (8005b7c <Rkey_Action+0x298>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ae:	4a73      	ldr	r2, [pc, #460]	; (8005b7c <Rkey_Action+0x298>)
 80059b0:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~frk_Forward;
 80059b2:	4b72      	ldr	r3, [pc, #456]	; (8005b7c <Rkey_Action+0x298>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 0320 	bic.w	r3, r3, #32
 80059ba:	4a70      	ldr	r2, [pc, #448]	; (8005b7c <Rkey_Action+0x298>)
 80059bc:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_BACKWORD); 
 80059be:	2002      	movs	r0, #2
 80059c0:	f7ff fc96 	bl	80052f0 <Drive_REQ>
 80059c4:	e00b      	b.n	80059de <Rkey_Action+0xfa>
	}
  }
  else
  {
	uKeyStatusFlag &= ~frk_Forward;
 80059c6:	4b6d      	ldr	r3, [pc, #436]	; (8005b7c <Rkey_Action+0x298>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 0320 	bic.w	r3, r3, #32
 80059ce:	4a6b      	ldr	r2, [pc, #428]	; (8005b7c <Rkey_Action+0x298>)
 80059d0:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~frk_Backward;
 80059d2:	4b6a      	ldr	r3, [pc, #424]	; (8005b7c <Rkey_Action+0x298>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059da:	4a68      	ldr	r2, [pc, #416]	; (8005b7c <Rkey_Action+0x298>)
 80059dc:	6013      	str	r3, [r2, #0]
  }
  //
  if((RFR_Key.rK_Last & RFR_LEFT)  == RFR_LEFT)				/* 0x02 */
 80059de:	4b5e      	ldr	r3, [pc, #376]	; (8005b58 <Rkey_Action+0x274>)
 80059e0:	885b      	ldrh	r3, [r3, #2]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d014      	beq.n	8005a14 <Rkey_Action+0x130>
  {
	if(isAutoCondition() == 0)
 80059ea:	f000 fa89 	bl	8005f00 <isAutoCondition>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d136      	bne.n	8005a62 <Rkey_Action+0x17e>
	{
		uKeyStatusFlag |= frk_Left;
 80059f4:	4b61      	ldr	r3, [pc, #388]	; (8005b7c <Rkey_Action+0x298>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fc:	4a5f      	ldr	r2, [pc, #380]	; (8005b7c <Rkey_Action+0x298>)
 80059fe:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~frk_Right;
 8005a00:	4b5e      	ldr	r3, [pc, #376]	; (8005b7c <Rkey_Action+0x298>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a08:	4a5c      	ldr	r2, [pc, #368]	; (8005b7c <Rkey_Action+0x298>)
 8005a0a:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_LEFT); 
 8005a0c:	2004      	movs	r0, #4
 8005a0e:	f7ff fc6f 	bl	80052f0 <Drive_REQ>
 8005a12:	e026      	b.n	8005a62 <Rkey_Action+0x17e>
	}
  }
  else if((RFR_Key.rK_Last & RFR_RIGHT)  == RFR_RIGHT)		/* 0x04 */
 8005a14:	4b50      	ldr	r3, [pc, #320]	; (8005b58 <Rkey_Action+0x274>)
 8005a16:	885b      	ldrh	r3, [r3, #2]
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d014      	beq.n	8005a4a <Rkey_Action+0x166>
  {
	if(isAutoCondition() == 0)
 8005a20:	f000 fa6e 	bl	8005f00 <isAutoCondition>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d11b      	bne.n	8005a62 <Rkey_Action+0x17e>
	{
		uKeyStatusFlag |= frk_Right;
 8005a2a:	4b54      	ldr	r3, [pc, #336]	; (8005b7c <Rkey_Action+0x298>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a32:	4a52      	ldr	r2, [pc, #328]	; (8005b7c <Rkey_Action+0x298>)
 8005a34:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~frk_Left;
 8005a36:	4b51      	ldr	r3, [pc, #324]	; (8005b7c <Rkey_Action+0x298>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a3e:	4a4f      	ldr	r2, [pc, #316]	; (8005b7c <Rkey_Action+0x298>)
 8005a40:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_RIGHT); 
 8005a42:	2008      	movs	r0, #8
 8005a44:	f7ff fc54 	bl	80052f0 <Drive_REQ>
 8005a48:	e00b      	b.n	8005a62 <Rkey_Action+0x17e>
	}
  }
  else
  {
	uKeyStatusFlag &= ~frk_Left;
 8005a4a:	4b4c      	ldr	r3, [pc, #304]	; (8005b7c <Rkey_Action+0x298>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a52:	4a4a      	ldr	r2, [pc, #296]	; (8005b7c <Rkey_Action+0x298>)
 8005a54:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~frk_Right;
 8005a56:	4b49      	ldr	r3, [pc, #292]	; (8005b7c <Rkey_Action+0x298>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a5e:	4a47      	ldr	r2, [pc, #284]	; (8005b7c <Rkey_Action+0x298>)
 8005a60:	6013      	str	r3, [r2, #0]
  }
  //  
  if((RFR_Key.rK_Last & RFR_FANOFF) == RFR_FANOFF)			/* 0x100 --> 0x80 */
 8005a62:	4b3d      	ldr	r3, [pc, #244]	; (8005b58 <Rkey_Action+0x274>)
 8005a64:	885b      	ldrh	r3, [r3, #2]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d010      	beq.n	8005a90 <Rkey_Action+0x1ac>
  {
	if(u16_DebugFlag == 1)
 8005a6e:	4b39      	ldr	r3, [pc, #228]	; (8005b54 <Rkey_Action+0x270>)
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d102      	bne.n	8005a7c <Rkey_Action+0x198>
		cliPrintf("\n FAN_OFF");
 8005a76:	4842      	ldr	r0, [pc, #264]	; (8005b80 <Rkey_Action+0x29c>)
 8005a78:	f7fe f8ec 	bl	8003c54 <cliPrintf>
	
	uKeyStatusFlag |= frk_FanOff;
 8005a7c:	4b3f      	ldr	r3, [pc, #252]	; (8005b7c <Rkey_Action+0x298>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a84:	4a3d      	ldr	r2, [pc, #244]	; (8005b7c <Rkey_Action+0x298>)
 8005a86:	6013      	str	r3, [r2, #0]
	Drive_REQ(KEY_FANOFF);  
 8005a88:	2080      	movs	r0, #128	; 0x80
 8005a8a:	f7ff fc31 	bl	80052f0 <Drive_REQ>
 8005a8e:	e022      	b.n	8005ad6 <Rkey_Action+0x1f2>
  }
  else if((RFR_Key.rK_Last & RFR_FANONUP) == RFR_FANONUP)
 8005a90:	4b31      	ldr	r3, [pc, #196]	; (8005b58 <Rkey_Action+0x274>)
 8005a92:	885b      	ldrh	r3, [r3, #2]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d010      	beq.n	8005abe <Rkey_Action+0x1da>
  {
	if(u16_DebugFlag == 1)
 8005a9c:	4b2d      	ldr	r3, [pc, #180]	; (8005b54 <Rkey_Action+0x270>)
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d102      	bne.n	8005aaa <Rkey_Action+0x1c6>
    	cliPrintf("\n FAN_ON_UP");
 8005aa4:	4837      	ldr	r0, [pc, #220]	; (8005b84 <Rkey_Action+0x2a0>)
 8005aa6:	f7fe f8d5 	bl	8003c54 <cliPrintf>

	uKeyStatusFlag |= frk_FanOnUp;
 8005aaa:	4b34      	ldr	r3, [pc, #208]	; (8005b7c <Rkey_Action+0x298>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ab2:	4a32      	ldr	r2, [pc, #200]	; (8005b7c <Rkey_Action+0x298>)
 8005ab4:	6013      	str	r3, [r2, #0]
	Drive_REQ(KEY_FANONUP);  
 8005ab6:	2040      	movs	r0, #64	; 0x40
 8005ab8:	f7ff fc1a 	bl	80052f0 <Drive_REQ>
 8005abc:	e00b      	b.n	8005ad6 <Rkey_Action+0x1f2>
  }
  else
  {
	uKeyStatusFlag &= ~frk_FanOnUp;
 8005abe:	4b2f      	ldr	r3, [pc, #188]	; (8005b7c <Rkey_Action+0x298>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ac6:	4a2d      	ldr	r2, [pc, #180]	; (8005b7c <Rkey_Action+0x298>)
 8005ac8:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~frk_FanOff;
 8005aca:	4b2c      	ldr	r3, [pc, #176]	; (8005b7c <Rkey_Action+0x298>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad2:	4a2a      	ldr	r2, [pc, #168]	; (8005b7c <Rkey_Action+0x298>)
 8005ad4:	6013      	str	r3, [r2, #0]
  }
  // 
  if((RFR_Key.rK_Last & RFR_PUMP) == RFR_PUMP)
 8005ad6:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <Rkey_Action+0x274>)
 8005ad8:	885b      	ldrh	r3, [r3, #2]
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <Rkey_Action+0x220>
  {
	  if(u16_DebugFlag == 1)
 8005ae2:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <Rkey_Action+0x270>)
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d102      	bne.n	8005af0 <Rkey_Action+0x20c>
		  cliPrintf("\n RFR_PUMP");
 8005aea:	4827      	ldr	r0, [pc, #156]	; (8005b88 <Rkey_Action+0x2a4>)
 8005aec:	f7fe f8b2 	bl	8003c54 <cliPrintf>
	  
		uKeyStatusFlag |= frk_Pump;
 8005af0:	4b22      	ldr	r3, [pc, #136]	; (8005b7c <Rkey_Action+0x298>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005af8:	4a20      	ldr	r2, [pc, #128]	; (8005b7c <Rkey_Action+0x298>)
 8005afa:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_PUMP);  			/*  */
 8005afc:	2010      	movs	r0, #16
 8005afe:	f7ff fbf7 	bl	80052f0 <Drive_REQ>
 8005b02:	e005      	b.n	8005b10 <Rkey_Action+0x22c>
  }
  else
 	uKeyStatusFlag &= ~frk_Pump; 	
 8005b04:	4b1d      	ldr	r3, [pc, #116]	; (8005b7c <Rkey_Action+0x298>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b0c:	4a1b      	ldr	r2, [pc, #108]	; (8005b7c <Rkey_Action+0x298>)
 8005b0e:	6013      	str	r3, [r2, #0]
  //
  if((RFR_Key.rK_Last & RFR_ATDRV) == RFR_ATDRV)
 8005b10:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <Rkey_Action+0x274>)
 8005b12:	885b      	ldrh	r3, [r3, #2]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d058      	beq.n	8005bce <Rkey_Action+0x2ea>
  {
		

	if (RTK_state == 1)
 8005b1c:	4b1b      	ldr	r3, [pc, #108]	; (8005b8c <Rkey_Action+0x2a8>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d137      	bne.n	8005b94 <Rkey_Action+0x2b0>
	{
		if ( !(uSysStatusFlag & a_NotCondition))
 8005b24:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <Rkey_Action+0x290>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d14e      	bne.n	8005bce <Rkey_Action+0x2ea>
		{
			
			if (DRV_Speed  == 1 )
 8005b30:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <Rkey_Action+0x288>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d103      	bne.n	8005b40 <Rkey_Action+0x25c>
			{
				center_start = 3;
 8005b38:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <Rkey_Action+0x2ac>)
 8005b3a:	2203      	movs	r2, #3
 8005b3c:	701a      	strb	r2, [r3, #0]
		Bcon_dly = 2700;
	}
		
  }

}
 8005b3e:	e046      	b.n	8005bce <Rkey_Action+0x2ea>
				uKeyStatusFlag |= frk_AutoDrv;
 8005b40:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <Rkey_Action+0x298>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b48:	4a0c      	ldr	r2, [pc, #48]	; (8005b7c <Rkey_Action+0x298>)
 8005b4a:	6013      	str	r3, [r2, #0]
				Drive_REQ(KEY_AUTORUN);
 8005b4c:	2020      	movs	r0, #32
 8005b4e:	f7ff fbcf 	bl	80052f0 <Drive_REQ>
}
 8005b52:	e03c      	b.n	8005bce <Rkey_Action+0x2ea>
 8005b54:	20000d08 	.word	0x20000d08
 8005b58:	20000ce8 	.word	0x20000ce8
 8005b5c:	20000d0e 	.word	0x20000d0e
 8005b60:	20000034 	.word	0x20000034
 8005b64:	20000d10 	.word	0x20000d10
 8005b68:	20000d14 	.word	0x20000d14
 8005b6c:	20000038 	.word	0x20000038
 8005b70:	08012af0 	.word	0x08012af0
 8005b74:	20000cf8 	.word	0x20000cf8
 8005b78:	08012b48 	.word	0x08012b48
 8005b7c:	20000cfc 	.word	0x20000cfc
 8005b80:	08012b68 	.word	0x08012b68
 8005b84:	08012b74 	.word	0x08012b74
 8005b88:	08012b80 	.word	0x08012b80
 8005b8c:	20000d88 	.word	0x20000d88
 8005b90:	20000dde 	.word	0x20000dde
		uSysStatusFlag |= a_NotCondition;
 8005b94:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <Rkey_Action+0x2f4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b9c:	4a0e      	ldr	r2, [pc, #56]	; (8005bd8 <Rkey_Action+0x2f4>)
 8005b9e:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~ frk_AutoDrv;
 8005ba0:	4b0e      	ldr	r3, [pc, #56]	; (8005bdc <Rkey_Action+0x2f8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba8:	4a0c      	ldr	r2, [pc, #48]	; (8005bdc <Rkey_Action+0x2f8>)
 8005baa:	6013      	str	r3, [r2, #0]
		uSysStatusFlag &= ~f_AutoRun;
 8005bac:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <Rkey_Action+0x2f4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb4:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <Rkey_Action+0x2f4>)
 8005bb6:	6013      	str	r3, [r2, #0]
		not_ready_flag |= F_DRV_REQ;
 8005bb8:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <Rkey_Action+0x2fc>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f043 030f 	orr.w	r3, r3, #15
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <Rkey_Action+0x2fc>)
 8005bc4:	701a      	strb	r2, [r3, #0]
		Bcon_dly = 2700;
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <Rkey_Action+0x300>)
 8005bc8:	f640 228c 	movw	r2, #2700	; 0xa8c
 8005bcc:	601a      	str	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	3704      	adds	r7, #4
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bd8:	20000cf8 	.word	0x20000cf8
 8005bdc:	20000cfc 	.word	0x20000cfc
 8005be0:	20000d5c 	.word	0x20000d5c
 8005be4:	20000de8 	.word	0x20000de8

08005be8 <Key_IdentChk>:
//
/* 동시 KEY 처리 */
uint8_t Key_IdentChk(uint16_t In_LocalKey)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	80fb      	strh	r3, [r7, #6]
  if(((In_LocalKey & KEY_FORWARD) == KEY_FORWARD) && ((In_LocalKey & KEY_BACKWORD) == KEY_BACKWORD))
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d006      	beq.n	8005c0a <Key_IdentChk+0x22>
 8005bfc:	88fb      	ldrh	r3, [r7, #6]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <Key_IdentChk+0x22>
	return 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e00c      	b.n	8005c24 <Key_IdentChk+0x3c>
  //
  if(((In_LocalKey & KEY_LEFT) == KEY_LEFT) && ((In_LocalKey & KEY_RIGHT) == KEY_RIGHT))
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d006      	beq.n	8005c22 <Key_IdentChk+0x3a>
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <Key_IdentChk+0x3a>
	  return 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e000      	b.n	8005c24 <Key_IdentChk+0x3c>
  //	  
  return 1;
 8005c22:	2301      	movs	r3, #1
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr

08005c2e <Comm_IdentChk>:
/* */
#if 0
	동시 입력 Check (전진/ 후진, 좌향/ 우향)
#endif
uint8_t Comm_IdentChk(uint16_t In_LocalKey)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	4603      	mov	r3, r0
 8005c36:	80fb      	strh	r3, [r7, #6]
  if(((In_LocalKey & KEY_FORWARD) == KEY_FORWARD) && ((In_LocalKey & KEY_BACKWORD) == KEY_BACKWORD))
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d006      	beq.n	8005c50 <Comm_IdentChk+0x22>
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <Comm_IdentChk+0x22>
	return 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e00c      	b.n	8005c6a <Comm_IdentChk+0x3c>
  //
  if(((In_LocalKey & KEY_LEFT) == KEY_LEFT) && ((In_LocalKey & KEY_RIGHT) == KEY_RIGHT))
 8005c50:	88fb      	ldrh	r3, [r7, #6]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d006      	beq.n	8005c68 <Comm_IdentChk+0x3a>
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <Comm_IdentChk+0x3a>
	return 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	e000      	b.n	8005c6a <Comm_IdentChk+0x3c>
  //		
  return 1;
 8005c68:	2301      	movs	r3, #1
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <LKEY_Check>:
5	PE7 	IN		KEY_RIGHT						8
5	PE8 	IN		KEY_RIGHT						8

*/
void LKEY_Check()		/* Local 4 Key */
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
	  uint16_t L_KeyBuff;
	
	  L_KeyBuff = (GPIOE->IDR >> 3) & 0x000F;
 8005c7a:	4b3f      	ldr	r3, [pc, #252]	; (8005d78 <LKEY_Check+0x104>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	08db      	lsrs	r3, r3, #3
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	80fb      	strh	r3, [r7, #6]
	  if(L_KeyBuff != 0 && Key_IdentChk(L_KeyBuff)) 	/* 동시 Key 처리 --> 막는다. */
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d055      	beq.n	8005d3a <LKEY_Check+0xc6>
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff ffa9 	bl	8005be8 <Key_IdentChk>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d04e      	beq.n	8005d3a <LKEY_Check+0xc6>
	  {
		Local_Key.lK_Data = L_KeyBuff;
 8005c9c:	4a37      	ldr	r2, [pc, #220]	; (8005d7c <LKEY_Check+0x108>)
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	8013      	strh	r3, [r2, #0]
		if(Local_Key.lK_Data == Local_Key.lK_Back)
 8005ca2:	4b36      	ldr	r3, [pc, #216]	; (8005d7c <LKEY_Check+0x108>)
 8005ca4:	881a      	ldrh	r2, [r3, #0]
 8005ca6:	4b35      	ldr	r3, [pc, #212]	; (8005d7c <LKEY_Check+0x108>)
 8005ca8:	889b      	ldrh	r3, [r3, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d131      	bne.n	8005d12 <LKEY_Check+0x9e>
		{
			if(Local_Key.lK_ChatCnt == 0)
 8005cae:	4b33      	ldr	r3, [pc, #204]	; (8005d7c <LKEY_Check+0x108>)
 8005cb0:	88db      	ldrh	r3, [r3, #6]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d15a      	bne.n	8005d6c <LKEY_Check+0xf8>
			{
				uKeyStatusFlag |= fLK_Ok;
 8005cb6:	4b32      	ldr	r3, [pc, #200]	; (8005d80 <LKEY_Check+0x10c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cbe:	4a30      	ldr	r2, [pc, #192]	; (8005d80 <LKEY_Check+0x10c>)
 8005cc0:	6013      	str	r3, [r2, #0]
				uKeyStatusFlag &= ~fLK_Repeat;
 8005cc2:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <LKEY_Check+0x10c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cca:	4a2d      	ldr	r2, [pc, #180]	; (8005d80 <LKEY_Check+0x10c>)
 8005ccc:	6013      	str	r3, [r2, #0]
				if(Local_Key.lK_Data == Local_Key.lK_Last)
 8005cce:	4b2b      	ldr	r3, [pc, #172]	; (8005d7c <LKEY_Check+0x108>)
 8005cd0:	881a      	ldrh	r2, [r3, #0]
 8005cd2:	4b2a      	ldr	r3, [pc, #168]	; (8005d7c <LKEY_Check+0x108>)
 8005cd4:	885b      	ldrh	r3, [r3, #2]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d105      	bne.n	8005ce6 <LKEY_Check+0x72>
					uKeyStatusFlag |= fLK_Repeat;
 8005cda:	4b29      	ldr	r3, [pc, #164]	; (8005d80 <LKEY_Check+0x10c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce2:	4a27      	ldr	r2, [pc, #156]	; (8005d80 <LKEY_Check+0x10c>)
 8005ce4:	6013      	str	r3, [r2, #0]
				Local_Key.lK_Last = Local_Key.lK_Data;
 8005ce6:	4b25      	ldr	r3, [pc, #148]	; (8005d7c <LKEY_Check+0x108>)
 8005ce8:	881a      	ldrh	r2, [r3, #0]
 8005cea:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <LKEY_Check+0x108>)
 8005cec:	805a      	strh	r2, [r3, #2]
				//	
				Local_Key.lK_ChatCnt = 30;		/* 매 30ms 마다 */
 8005cee:	4b23      	ldr	r3, [pc, #140]	; (8005d7c <LKEY_Check+0x108>)
 8005cf0:	221e      	movs	r2, #30
 8005cf2:	80da      	strh	r2, [r3, #6]
				RK_PermitTime = 3000/30;		/* 3초 뒤 R Key Check */
 8005cf4:	4b23      	ldr	r3, [pc, #140]	; (8005d84 <LKEY_Check+0x110>)
 8005cf6:	2264      	movs	r2, #100	; 0x64
 8005cf8:	801a      	strh	r2, [r3, #0]
				
				if(uSysStatusFlag & f_AutoRun)		/* 자율 주행중, 유효한 Key 가 들어오면 */
 8005cfa:	4b23      	ldr	r3, [pc, #140]	; (8005d88 <LKEY_Check+0x114>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <LKEY_Check+0x98>
				{									/* 자울 주행을 중지한다. */
					all_MotorStop();
 8005d06:	f000 ffff 	bl	8006d08 <all_MotorStop>
		if(Local_Key.lK_Data == Local_Key.lK_Back)
 8005d0a:	e02f      	b.n	8005d6c <LKEY_Check+0xf8>
				}
				else					
					Lkey_Action();					
 8005d0c:	f7ff fd1e 	bl	800574c <Lkey_Action>
		if(Local_Key.lK_Data == Local_Key.lK_Back)
 8005d10:	e02c      	b.n	8005d6c <LKEY_Check+0xf8>
			}
		} 
		else 
		{
			Local_Key.lK_Back = Local_Key.lK_Data;
 8005d12:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <LKEY_Check+0x108>)
 8005d14:	881a      	ldrh	r2, [r3, #0]
 8005d16:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <LKEY_Check+0x108>)
 8005d18:	809a      	strh	r2, [r3, #4]
			Local_Key.lK_ChatCnt = 60;
 8005d1a:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <LKEY_Check+0x108>)
 8005d1c:	223c      	movs	r2, #60	; 0x3c
 8005d1e:	80da      	strh	r2, [r3, #6]
			uKeyStatusFlag &= ~fLK_Ok;
 8005d20:	4b17      	ldr	r3, [pc, #92]	; (8005d80 <LKEY_Check+0x10c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d28:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <LKEY_Check+0x10c>)
 8005d2a:	6013      	str	r3, [r2, #0]
			uKeyStatusFlag &= ~fLK_Repeat;
 8005d2c:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <LKEY_Check+0x10c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d34:	4a12      	ldr	r2, [pc, #72]	; (8005d80 <LKEY_Check+0x10c>)
 8005d36:	6013      	str	r3, [r2, #0]
		if(Local_Key.lK_Data == Local_Key.lK_Back)
 8005d38:	e018      	b.n	8005d6c <LKEY_Check+0xf8>
		}
	  }
	  else
	  {
		//LK_FlagClear();
		uKeyStatusFlag &= ~fLK_Ok;
 8005d3a:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <LKEY_Check+0x10c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d42:	4a0f      	ldr	r2, [pc, #60]	; (8005d80 <LKEY_Check+0x10c>)
 8005d44:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~fLK_Repeat;
 8005d46:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <LKEY_Check+0x10c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d4e:	4a0c      	ldr	r2, [pc, #48]	; (8005d80 <LKEY_Check+0x10c>)
 8005d50:	6013      	str	r3, [r2, #0]
		Local_Key.lK_Data = 0;
 8005d52:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <LKEY_Check+0x108>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	801a      	strh	r2, [r3, #0]
		Local_Key.lK_Back = 0;
 8005d58:	4b08      	ldr	r3, [pc, #32]	; (8005d7c <LKEY_Check+0x108>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	809a      	strh	r2, [r3, #4]
		Local_Key.lK_Last = 0;
 8005d5e:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <LKEY_Check+0x108>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	805a      	strh	r2, [r3, #2]
		Local_Key.lK_ChatCnt = 60;
 8005d64:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <LKEY_Check+0x108>)
 8005d66:	223c      	movs	r2, #60	; 0x3c
 8005d68:	80da      	strh	r2, [r3, #6]
	  }
}
 8005d6a:	e000      	b.n	8005d6e <LKEY_Check+0xfa>
		if(Local_Key.lK_Data == Local_Key.lK_Back)
 8005d6c:	bf00      	nop
}
 8005d6e:	bf00      	nop
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	40011800 	.word	0x40011800
 8005d7c:	20000cdc 	.word	0x20000cdc
 8005d80:	20000cfc 	.word	0x20000cfc
 8005d84:	20000d30 	.word	0x20000d30
 8005d88:	20000cf8 	.word	0x20000cf8

08005d8c <RKEY_Check>:
  else
  	return 0;	/* FANON 104, FAN)FF 108, AUTO  102, OUMP 180 */
}
#endif
void RKEY_Check()
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
	  uint16_t PC_rKey, PD_rKey, R_KeyBuff;
	
	  PC_rKey = (GPIOC->IDR & 0xF000) >> 12;
 8005d92:	4b55      	ldr	r3, [pc, #340]	; (8005ee8 <RKEY_Check+0x15c>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	0b1b      	lsrs	r3, r3, #12
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	80fb      	strh	r3, [r7, #6]
	  PD_rKey = (GPIOD->IDR & 0x001F) << 4;
 8005da0:	4b52      	ldr	r3, [pc, #328]	; (8005eec <RKEY_Check+0x160>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dae:	80bb      	strh	r3, [r7, #4]
	  R_KeyBuff = PC_rKey | PD_rKey;
 8005db0:	88fa      	ldrh	r2, [r7, #6]
 8005db2:	88bb      	ldrh	r3, [r7, #4]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	807b      	strh	r3, [r7, #2]
	  R_KeyBuff &= 0x01FF;
 8005db8:	887b      	ldrh	r3, [r7, #2]
 8005dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dbe:	807b      	strh	r3, [r7, #2]
#if 0	
	  printf("\n RFR_Port_Read[%0x]",R_KeyBuff);
#endif	
	  if(R_KeyBuff & 0x00FF)		/* RFR_MAIN 제외  */
 8005dc0:	887b      	ldrh	r3, [r7, #2]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d071      	beq.n	8005eac <RKEY_Check+0x120>
	  {
		RFR_Key.rK_Data = R_KeyBuff;
 8005dc8:	4a49      	ldr	r2, [pc, #292]	; (8005ef0 <RKEY_Check+0x164>)
 8005dca:	887b      	ldrh	r3, [r7, #2]
 8005dcc:	8013      	strh	r3, [r2, #0]
			
		if(RFR_Key.rK_Data == RFR_Key.rK_Back)
 8005dce:	4b48      	ldr	r3, [pc, #288]	; (8005ef0 <RKEY_Check+0x164>)
 8005dd0:	881a      	ldrh	r2, [r3, #0]
 8005dd2:	4b47      	ldr	r3, [pc, #284]	; (8005ef0 <RKEY_Check+0x164>)
 8005dd4:	889b      	ldrh	r3, [r3, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d154      	bne.n	8005e84 <RKEY_Check+0xf8>
		{
			if(RFR_Key.rK_ChatCnt == 0)
 8005dda:	4b45      	ldr	r3, [pc, #276]	; (8005ef0 <RKEY_Check+0x164>)
 8005ddc:	88db      	ldrh	r3, [r3, #6]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d17d      	bne.n	8005ede <RKEY_Check+0x152>
			{
				/* uKeyStatusFlag fLK_Ok */
				uKeyStatusFlag |= fRK_Ok;
 8005de2:	4b44      	ldr	r3, [pc, #272]	; (8005ef4 <RKEY_Check+0x168>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dea:	4a42      	ldr	r2, [pc, #264]	; (8005ef4 <RKEY_Check+0x168>)
 8005dec:	6013      	str	r3, [r2, #0]
				uKeyStatusFlag &= ~fRK_Repeat;
 8005dee:	4b41      	ldr	r3, [pc, #260]	; (8005ef4 <RKEY_Check+0x168>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005df6:	4a3f      	ldr	r2, [pc, #252]	; (8005ef4 <RKEY_Check+0x168>)
 8005df8:	6013      	str	r3, [r2, #0]
				if(RFR_Key.rK_Data == RFR_Key.rK_Last)
 8005dfa:	4b3d      	ldr	r3, [pc, #244]	; (8005ef0 <RKEY_Check+0x164>)
 8005dfc:	881a      	ldrh	r2, [r3, #0]
 8005dfe:	4b3c      	ldr	r3, [pc, #240]	; (8005ef0 <RKEY_Check+0x164>)
 8005e00:	885b      	ldrh	r3, [r3, #2]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d105      	bne.n	8005e12 <RKEY_Check+0x86>
					uKeyStatusFlag |= fRK_Repeat;
 8005e06:	4b3b      	ldr	r3, [pc, #236]	; (8005ef4 <RKEY_Check+0x168>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e0e:	4a39      	ldr	r2, [pc, #228]	; (8005ef4 <RKEY_Check+0x168>)
 8005e10:	6013      	str	r3, [r2, #0]
				//		
				RFR_Key.rK_Last = RFR_Key.rK_Data;
 8005e12:	4b37      	ldr	r3, [pc, #220]	; (8005ef0 <RKEY_Check+0x164>)
 8005e14:	881a      	ldrh	r2, [r3, #0]
 8005e16:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <RKEY_Check+0x164>)
 8005e18:	805a      	strh	r2, [r3, #2]
				RFR_Key.rK_Back = RFR_Key.rK_Data;
 8005e1a:	4b35      	ldr	r3, [pc, #212]	; (8005ef0 <RKEY_Check+0x164>)
 8005e1c:	881a      	ldrh	r2, [r3, #0]
 8005e1e:	4b34      	ldr	r3, [pc, #208]	; (8005ef0 <RKEY_Check+0x164>)
 8005e20:	809a      	strh	r2, [r3, #4]
				RFR_Key.rK_ChatCnt = 10;			/* 연속키 처리 타임  매 10ms 마다 */
 8005e22:	4b33      	ldr	r3, [pc, #204]	; (8005ef0 <RKEY_Check+0x164>)
 8005e24:	220a      	movs	r2, #10
 8005e26:	80da      	strh	r2, [r3, #6]
				if(u16_DebugFlag == 1)
 8005e28:	4b33      	ldr	r3, [pc, #204]	; (8005ef8 <RKEY_Check+0x16c>)
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d105      	bne.n	8005e3c <RKEY_Check+0xb0>
					cliPrintf(" R_KEY[%0x]\r\n",RFR_Key.rK_Back);
 8005e30:	4b2f      	ldr	r3, [pc, #188]	; (8005ef0 <RKEY_Check+0x164>)
 8005e32:	889b      	ldrh	r3, [r3, #4]
 8005e34:	4619      	mov	r1, r3
 8005e36:	4831      	ldr	r0, [pc, #196]	; (8005efc <RKEY_Check+0x170>)
 8005e38:	f7fd ff0c 	bl	8003c54 <cliPrintf>
				if(((RFR_Key.rK_Last & RFR_PUMP) == RFR_PUMP) || ((RFR_Key.rK_Last & RFR_FANONUP) == RFR_FANONUP) || ((RFR_Key.rK_Last & RFR_ATDRV) == RFR_ATDRV) || ((RFR_Key.rK_Last & RFR_FANOFF) == RFR_FANOFF)) 
 8005e3c:	4b2c      	ldr	r3, [pc, #176]	; (8005ef0 <RKEY_Check+0x164>)
 8005e3e:	885b      	ldrh	r3, [r3, #2]
 8005e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d111      	bne.n	8005e6c <RKEY_Check+0xe0>
 8005e48:	4b29      	ldr	r3, [pc, #164]	; (8005ef0 <RKEY_Check+0x164>)
 8005e4a:	885b      	ldrh	r3, [r3, #2]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <RKEY_Check+0xe0>
 8005e54:	4b26      	ldr	r3, [pc, #152]	; (8005ef0 <RKEY_Check+0x164>)
 8005e56:	885b      	ldrh	r3, [r3, #2]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d105      	bne.n	8005e6c <RKEY_Check+0xe0>
 8005e60:	4b23      	ldr	r3, [pc, #140]	; (8005ef0 <RKEY_Check+0x164>)
 8005e62:	885b      	ldrh	r3, [r3, #2]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <RKEY_Check+0xf2>
				{
					if((uKeyStatusFlag & fRK_Repeat) == 0)
 8005e6c:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <RKEY_Check+0x168>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d132      	bne.n	8005ede <RKEY_Check+0x152>
						Rkey_Action();
 8005e78:	f7ff fd34 	bl	80058e4 <Rkey_Action>
					if((uKeyStatusFlag & fRK_Repeat) == 0)
 8005e7c:	e02f      	b.n	8005ede <RKEY_Check+0x152>
					//
				}
				else
				{
					Rkey_Action();
 8005e7e:	f7ff fd31 	bl	80058e4 <Rkey_Action>
		RFR_Key.rK_Data = 0;
		RFR_Key.rK_Back = 0;
		RFR_Key.rK_Last = 0;
		RFR_Key.rK_ChatCnt = 100;
	  }
}
 8005e82:	e02c      	b.n	8005ede <RKEY_Check+0x152>
			RFR_Key.rK_Back = RFR_Key.rK_Data;
 8005e84:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <RKEY_Check+0x164>)
 8005e86:	881a      	ldrh	r2, [r3, #0]
 8005e88:	4b19      	ldr	r3, [pc, #100]	; (8005ef0 <RKEY_Check+0x164>)
 8005e8a:	809a      	strh	r2, [r3, #4]
			RFR_Key.rK_ChatCnt = 100;
 8005e8c:	4b18      	ldr	r3, [pc, #96]	; (8005ef0 <RKEY_Check+0x164>)
 8005e8e:	2264      	movs	r2, #100	; 0x64
 8005e90:	80da      	strh	r2, [r3, #6]
			uKeyStatusFlag &= ~fRK_Ok;
 8005e92:	4b18      	ldr	r3, [pc, #96]	; (8005ef4 <RKEY_Check+0x168>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e9a:	4a16      	ldr	r2, [pc, #88]	; (8005ef4 <RKEY_Check+0x168>)
 8005e9c:	6013      	str	r3, [r2, #0]
			uKeyStatusFlag &= ~fRK_Repeat;
 8005e9e:	4b15      	ldr	r3, [pc, #84]	; (8005ef4 <RKEY_Check+0x168>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ea6:	4a13      	ldr	r2, [pc, #76]	; (8005ef4 <RKEY_Check+0x168>)
 8005ea8:	6013      	str	r3, [r2, #0]
}
 8005eaa:	e018      	b.n	8005ede <RKEY_Check+0x152>
		uKeyStatusFlag &= ~fRK_Ok;
 8005eac:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <RKEY_Check+0x168>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb4:	4a0f      	ldr	r2, [pc, #60]	; (8005ef4 <RKEY_Check+0x168>)
 8005eb6:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~fRK_Repeat;
 8005eb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ef4 <RKEY_Check+0x168>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ec0:	4a0c      	ldr	r2, [pc, #48]	; (8005ef4 <RKEY_Check+0x168>)
 8005ec2:	6013      	str	r3, [r2, #0]
		RFR_Key.rK_Data = 0;
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <RKEY_Check+0x164>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	801a      	strh	r2, [r3, #0]
		RFR_Key.rK_Back = 0;
 8005eca:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <RKEY_Check+0x164>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	809a      	strh	r2, [r3, #4]
		RFR_Key.rK_Last = 0;
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <RKEY_Check+0x164>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	805a      	strh	r2, [r3, #2]
		RFR_Key.rK_ChatCnt = 100;
 8005ed6:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <RKEY_Check+0x164>)
 8005ed8:	2264      	movs	r2, #100	; 0x64
 8005eda:	80da      	strh	r2, [r3, #6]
}
 8005edc:	e7ff      	b.n	8005ede <RKEY_Check+0x152>
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40011000 	.word	0x40011000
 8005eec:	40011400 	.word	0x40011400
 8005ef0:	20000ce8 	.word	0x20000ce8
 8005ef4:	20000cfc 	.word	0x20000cfc
 8005ef8:	20000d08 	.word	0x20000d08
 8005efc:	08012bb0 	.word	0x08012bb0

08005f00 <isAutoCondition>:
	..
	b[7]	: 주행 Line 감지 정보( 1 : 주행Line 감지)
	..
#endif
uint8_t isAutoCondition()
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  //if((uSysStatusFlag & f_AutoRun) && (uSysStatusFlag & f_smartConnected) && (uSysStatusFlag  & f_TraceLine) && (smt_Command & 0x0080))
  if(uSysStatusFlag & f_AutoRun)
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <isAutoCondition+0x20>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <isAutoCondition+0x14>
	return 1;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <isAutoCondition+0x16>
  else		
	return 0;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000cf8 	.word	0x20000cf8

08005f24 <SMART_check>:

void SMART_check()
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
  uint16_t S_Comm;
  
  if(isAutoCondition())
 8005f2a:	f7ff ffe9 	bl	8005f00 <isAutoCondition>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d010      	beq.n	8005f56 <SMART_check+0x32>
  {
	S_Comm = smt_Command & 0x000F;
 8005f34:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <SMART_check+0x3c>)
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	80fb      	strh	r3, [r7, #6]
	if(S_Comm != 0 && Comm_IdentChk(S_Comm) )	/* For/Back , Left/Right 동시 Comm. Check */
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <SMART_check+0x32>
 8005f44:	88fb      	ldrh	r3, [r7, #6]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fe71 	bl	8005c2e <Comm_IdentChk>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <SMART_check+0x32>
	{
		Comm_Action();
 8005f52:	f7ff fc87 	bl	8005864 <Comm_Action>
	}

  }

}
 8005f56:	bf00      	nop
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000d36 	.word	0x20000d36

08005f64 <LKAUTO_CHKSeq>:
//
#if 1
void LKAUTO_CHKSeq()
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  switch(LKAUTOSeq)
 8005f68:	4b72      	ldr	r3, [pc, #456]	; (8006134 <LKAUTO_CHKSeq+0x1d0>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	2b07      	cmp	r3, #7
 8005f70:	f200 80ce 	bhi.w	8006110 <LKAUTO_CHKSeq+0x1ac>
 8005f74:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <LKAUTO_CHKSeq+0x18>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005f9d 	.word	0x08005f9d
 8005f80:	08005fc1 	.word	0x08005fc1
 8005f84:	0800602f 	.word	0x0800602f
 8005f88:	080060a7 	.word	0x080060a7
 8005f8c:	080060c5 	.word	0x080060c5
 8005f90:	080060e3 	.word	0x080060e3
 8005f94:	08006101 	.word	0x08006101
 8005f98:	08006111 	.word	0x08006111
  {
  	case 1:		/* 조건 Check 수위 有, 자율 Line 신호 有 */ 
		if((uSysStatusFlag & f_ALLWLEmpty) == 0)
 8005f9c:	4b66      	ldr	r3, [pc, #408]	; (8006138 <LKAUTO_CHKSeq+0x1d4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f040 80b5 	bne.w	8006114 <LKAUTO_CHKSeq+0x1b0>
		{	/* 수위 有 */
			if(uSysStatusFlag & f_TraceLine)
 8005faa:	4b63      	ldr	r3, [pc, #396]	; (8006138 <LKAUTO_CHKSeq+0x1d4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 80ae 	beq.w	8006114 <LKAUTO_CHKSeq+0x1b0>
			{	/* 자율 Line 신호 有*/
				LKAUTOSeq = 2;
 8005fb8:	4b5e      	ldr	r3, [pc, #376]	; (8006134 <LKAUTO_CHKSeq+0x1d0>)
 8005fba:	2202      	movs	r2, #2
 8005fbc:	701a      	strb	r2, [r3, #0]
				//printf("\n SEQ_2");
			}
		}
		break;
 8005fbe:	e0a9      	b.n	8006114 <LKAUTO_CHKSeq+0x1b0>
		//
	case 2:
		if(uSysStatusFlag & f_LKATKInitStatus)
 8005fc0:	4b5d      	ldr	r3, [pc, #372]	; (8006138 <LKAUTO_CHKSeq+0x1d4>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d018      	beq.n	8005ffe <LKAUTO_CHKSeq+0x9a>
		{ /* Init E_OPT_Autospeed Port High Status */
			if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 0)
 8005fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fd0:	485a      	ldr	r0, [pc, #360]	; (800613c <LKAUTO_CHKSeq+0x1d8>)
 8005fd2:	f004 fe8b 	bl	800acec <HAL_GPIO_ReadPin>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f040 809d 	bne.w	8006118 <LKAUTO_CHKSeq+0x1b4>
			{
				HAL_Delay(100);
 8005fde:	2064      	movs	r0, #100	; 0x64
 8005fe0:	f002 faa6 	bl	8008530 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 0)
 8005fe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fe8:	4854      	ldr	r0, [pc, #336]	; (800613c <LKAUTO_CHKSeq+0x1d8>)
 8005fea:	f004 fe7f 	bl	800acec <HAL_GPIO_ReadPin>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f040 8091 	bne.w	8006118 <LKAUTO_CHKSeq+0x1b4>
					LKAUTOSeq = 3;
 8005ff6:	4b4f      	ldr	r3, [pc, #316]	; (8006134 <LKAUTO_CHKSeq+0x1d0>)
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	701a      	strb	r2, [r3, #0]
				//
				//printf("\n SEQ_3");
				//printf(" -- INIT_REVERSE[%0d]",LKAUTOSeq);
			}
		}
		break;
 8005ffc:	e08c      	b.n	8006118 <LKAUTO_CHKSeq+0x1b4>
			if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 8005ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006002:	484e      	ldr	r0, [pc, #312]	; (800613c <LKAUTO_CHKSeq+0x1d8>)
 8006004:	f004 fe72 	bl	800acec <HAL_GPIO_ReadPin>
 8006008:	4603      	mov	r3, r0
 800600a:	2b01      	cmp	r3, #1
 800600c:	f040 8084 	bne.w	8006118 <LKAUTO_CHKSeq+0x1b4>
				HAL_Delay(100);
 8006010:	2064      	movs	r0, #100	; 0x64
 8006012:	f002 fa8d 	bl	8008530 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 8006016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800601a:	4848      	ldr	r0, [pc, #288]	; (800613c <LKAUTO_CHKSeq+0x1d8>)
 800601c:	f004 fe66 	bl	800acec <HAL_GPIO_ReadPin>
 8006020:	4603      	mov	r3, r0
 8006022:	2b01      	cmp	r3, #1
 8006024:	d178      	bne.n	8006118 <LKAUTO_CHKSeq+0x1b4>
					LKAUTOSeq = 3;
 8006026:	4b43      	ldr	r3, [pc, #268]	; (8006134 <LKAUTO_CHKSeq+0x1d0>)
 8006028:	2203      	movs	r2, #3
 800602a:	701a      	strb	r2, [r3, #0]
		break;
 800602c:	e074      	b.n	8006118 <LKAUTO_CHKSeq+0x1b4>
		//
	case 3:
		if(uSysStatusFlag & f_LKATKInitStatus)
 800602e:	4b42      	ldr	r3, [pc, #264]	; (8006138 <LKAUTO_CHKSeq+0x1d4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d01a      	beq.n	8006070 <LKAUTO_CHKSeq+0x10c>
		{
			if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 800603a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800603e:	483f      	ldr	r0, [pc, #252]	; (800613c <LKAUTO_CHKSeq+0x1d8>)
 8006040:	f004 fe54 	bl	800acec <HAL_GPIO_ReadPin>
 8006044:	4603      	mov	r3, r0
 8006046:	2b01      	cmp	r3, #1
 8006048:	d168      	bne.n	800611c <LKAUTO_CHKSeq+0x1b8>
			{
				HAL_Delay(100);
 800604a:	2064      	movs	r0, #100	; 0x64
 800604c:	f002 fa70 	bl	8008530 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 8006050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006054:	4839      	ldr	r0, [pc, #228]	; (800613c <LKAUTO_CHKSeq+0x1d8>)
 8006056:	f004 fe49 	bl	800acec <HAL_GPIO_ReadPin>
 800605a:	4603      	mov	r3, r0
 800605c:	2b01      	cmp	r3, #1
 800605e:	d15d      	bne.n	800611c <LKAUTO_CHKSeq+0x1b8>
				{
					LKAUTOSeq = 4;		/* SEQ. Start */
 8006060:	4b34      	ldr	r3, [pc, #208]	; (8006134 <LKAUTO_CHKSeq+0x1d0>)
 8006062:	2204      	movs	r2, #4
 8006064:	701a      	strb	r2, [r3, #0]
					LKSeqDlyTime = 2000;
 8006066:	4b36      	ldr	r3, [pc, #216]	; (8006140 <LKAUTO_CHKSeq+0x1dc>)
 8006068:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800606c:	801a      	strh	r2, [r3, #0]
					//printf("\n SEQ_4");
					//printf(" -- INIT_ORIGIN[%0d]",LKAUTOSeq);
				}
			}
		}
		break;
 800606e:	e055      	b.n	800611c <LKAUTO_CHKSeq+0x1b8>
			if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 0)
 8006070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006074:	4831      	ldr	r0, [pc, #196]	; (800613c <LKAUTO_CHKSeq+0x1d8>)
 8006076:	f004 fe39 	bl	800acec <HAL_GPIO_ReadPin>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d14d      	bne.n	800611c <LKAUTO_CHKSeq+0x1b8>
				HAL_Delay(100);
 8006080:	2064      	movs	r0, #100	; 0x64
 8006082:	f002 fa55 	bl	8008530 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 0)
 8006086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800608a:	482c      	ldr	r0, [pc, #176]	; (800613c <LKAUTO_CHKSeq+0x1d8>)
 800608c:	f004 fe2e 	bl	800acec <HAL_GPIO_ReadPin>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d142      	bne.n	800611c <LKAUTO_CHKSeq+0x1b8>
					LKAUTOSeq = 4;		/* SEQ. Start */	
 8006096:	4b27      	ldr	r3, [pc, #156]	; (8006134 <LKAUTO_CHKSeq+0x1d0>)
 8006098:	2204      	movs	r2, #4
 800609a:	701a      	strb	r2, [r3, #0]
					LKSeqDlyTime = 2000;
 800609c:	4b28      	ldr	r3, [pc, #160]	; (8006140 <LKAUTO_CHKSeq+0x1dc>)
 800609e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80060a2:	801a      	strh	r2, [r3, #0]
		break;
 80060a4:	e03a      	b.n	800611c <LKAUTO_CHKSeq+0x1b8>
		//
	case 4:		/* Delay 2 Sec. */	
		if(LKSeqDlyTime == 0)
 80060a6:	4b26      	ldr	r3, [pc, #152]	; (8006140 <LKAUTO_CHKSeq+0x1dc>)
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d138      	bne.n	8006120 <LKAUTO_CHKSeq+0x1bc>
		{
			Drive_REQ(KEY_FANONUP);
 80060ae:	2040      	movs	r0, #64	; 0x40
 80060b0:	f7ff f91e 	bl	80052f0 <Drive_REQ>
			LKAUTOSeq = 5;
 80060b4:	4b1f      	ldr	r3, [pc, #124]	; (8006134 <LKAUTO_CHKSeq+0x1d0>)
 80060b6:	2205      	movs	r2, #5
 80060b8:	701a      	strb	r2, [r3, #0]
			LKSeqDlyTime = 3000;
 80060ba:	4b21      	ldr	r3, [pc, #132]	; (8006140 <LKAUTO_CHKSeq+0x1dc>)
 80060bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80060c0:	801a      	strh	r2, [r3, #0]
			//printf("\n SEQ_FAN ONUP[%0d]",LKAUTOSeq);
		}
		break;
 80060c2:	e02d      	b.n	8006120 <LKAUTO_CHKSeq+0x1bc>
		//
	case 5:
		if(LKSeqDlyTime == 0)
 80060c4:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <LKAUTO_CHKSeq+0x1dc>)
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d12b      	bne.n	8006124 <LKAUTO_CHKSeq+0x1c0>
		{
			Drive_REQ(KEY_PUMP);
 80060cc:	2010      	movs	r0, #16
 80060ce:	f7ff f90f 	bl	80052f0 <Drive_REQ>
			LKAUTOSeq = 6;
 80060d2:	4b18      	ldr	r3, [pc, #96]	; (8006134 <LKAUTO_CHKSeq+0x1d0>)
 80060d4:	2206      	movs	r2, #6
 80060d6:	701a      	strb	r2, [r3, #0]
			LKSeqDlyTime = 3000;
 80060d8:	4b19      	ldr	r3, [pc, #100]	; (8006140 <LKAUTO_CHKSeq+0x1dc>)
 80060da:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80060de:	801a      	strh	r2, [r3, #0]
			//printf("\n SEQ_PUMP[%0d]",LKAUTOSeq);
		}
		break;
 80060e0:	e020      	b.n	8006124 <LKAUTO_CHKSeq+0x1c0>
		//
	case 6:
		if(LKSeqDlyTime == 0)
 80060e2:	4b17      	ldr	r3, [pc, #92]	; (8006140 <LKAUTO_CHKSeq+0x1dc>)
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d11e      	bne.n	8006128 <LKAUTO_CHKSeq+0x1c4>
		{
			Drive_REQ(KEY_AUTORUN);
 80060ea:	2020      	movs	r0, #32
 80060ec:	f7ff f900 	bl	80052f0 <Drive_REQ>
			LKAUTOSeq = 7;
 80060f0:	4b10      	ldr	r3, [pc, #64]	; (8006134 <LKAUTO_CHKSeq+0x1d0>)
 80060f2:	2207      	movs	r2, #7
 80060f4:	701a      	strb	r2, [r3, #0]
			LKSeqDlyTime = 3000;
 80060f6:	4b12      	ldr	r3, [pc, #72]	; (8006140 <LKAUTO_CHKSeq+0x1dc>)
 80060f8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80060fc:	801a      	strh	r2, [r3, #0]
			//printf("\n SEQ_AUTORUN[%0d]",LKAUTOSeq);
		}
		break;
 80060fe:	e013      	b.n	8006128 <LKAUTO_CHKSeq+0x1c4>
		//
	case 7:
		if(LKSeqDlyTime == 0)
 8006100:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <LKAUTO_CHKSeq+0x1dc>)
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d111      	bne.n	800612c <LKAUTO_CHKSeq+0x1c8>
		{
			LKAUTOSeq = 8;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <LKAUTO_CHKSeq+0x1d0>)
 800610a:	2208      	movs	r2, #8
 800610c:	701a      	strb	r2, [r3, #0]
			//printf("\n SEQ_END AUTO RUN[%0d]",LKAUTOSeq);
		}
		break;
 800610e:	e00d      	b.n	800612c <LKAUTO_CHKSeq+0x1c8>
		//
	case 8:
		break;
		//
	default:
		break;
 8006110:	bf00      	nop
 8006112:	e00c      	b.n	800612e <LKAUTO_CHKSeq+0x1ca>
		break;
 8006114:	bf00      	nop
 8006116:	e00a      	b.n	800612e <LKAUTO_CHKSeq+0x1ca>
		break;
 8006118:	bf00      	nop
 800611a:	e008      	b.n	800612e <LKAUTO_CHKSeq+0x1ca>
		break;
 800611c:	bf00      	nop
 800611e:	e006      	b.n	800612e <LKAUTO_CHKSeq+0x1ca>
		break;
 8006120:	bf00      	nop
 8006122:	e004      	b.n	800612e <LKAUTO_CHKSeq+0x1ca>
		break;
 8006124:	bf00      	nop
 8006126:	e002      	b.n	800612e <LKAUTO_CHKSeq+0x1ca>
		break;
 8006128:	bf00      	nop
 800612a:	e000      	b.n	800612e <LKAUTO_CHKSeq+0x1ca>
		break;
 800612c:	bf00      	nop
  }
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000d59 	.word	0x20000d59
 8006138:	20000cf8 	.word	0x20000cf8
 800613c:	40011800 	.word	0x40011800
 8006140:	20000d5a 	.word	0x20000d5a

08006144 <RFR_MainCheck>:
#endif
//
void RFR_MainCheck()
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
#if 1
  if(uSysStatusFlag & f_AutoRun)
 8006148:	4b54      	ldr	r3, [pc, #336]	; (800629c <RFR_MainCheck+0x158>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00c      	beq.n	800616e <RFR_MainCheck+0x2a>
  {	/* 자율 주행시 MN check 안함 */
	uKeyStatusFlag |= frk_Emergency;
 8006154:	4b52      	ldr	r3, [pc, #328]	; (80062a0 <RFR_MainCheck+0x15c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f043 0310 	orr.w	r3, r3, #16
 800615c:	4a50      	ldr	r2, [pc, #320]	; (80062a0 <RFR_MainCheck+0x15c>)
 800615e:	6013      	str	r3, [r2, #0]
	uSysStatusFlag &= ~f_RFR_Emergency;
 8006160:	4b4e      	ldr	r3, [pc, #312]	; (800629c <RFR_MainCheck+0x158>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006168:	4a4c      	ldr	r2, [pc, #304]	; (800629c <RFR_MainCheck+0x158>)
 800616a:	6013      	str	r3, [r2, #0]
			uKeyStatusFlag &= ~fRK_Ok;
			uKeyStatusFlag &= ~fRK_Repeat;
		}
  	}
  }
}
 800616c:	e094      	b.n	8006298 <RFR_MainCheck+0x154>
	if(HAL_GPIO_ReadPin(GPIOD,IR_Main) == 1)
 800616e:	2110      	movs	r1, #16
 8006170:	484c      	ldr	r0, [pc, #304]	; (80062a4 <RFR_MainCheck+0x160>)
 8006172:	f004 fdbb 	bl	800acec <HAL_GPIO_ReadPin>
 8006176:	4603      	mov	r3, r0
 8006178:	2b01      	cmp	r3, #1
 800617a:	d120      	bne.n	80061be <RFR_MainCheck+0x7a>
		u16_RFMNChkCnt = 2000;	  /* 200ms */
 800617c:	4b4a      	ldr	r3, [pc, #296]	; (80062a8 <RFR_MainCheck+0x164>)
 800617e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006182:	801a      	strh	r2, [r3, #0]
	 	uKeyStatusFlag |= frk_Emergency;
 8006184:	4b46      	ldr	r3, [pc, #280]	; (80062a0 <RFR_MainCheck+0x15c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f043 0310 	orr.w	r3, r3, #16
 800618c:	4a44      	ldr	r2, [pc, #272]	; (80062a0 <RFR_MainCheck+0x15c>)
 800618e:	6013      	str	r3, [r2, #0]
		uSysStatusFlag &= ~f_RFR_Emergency;
 8006190:	4b42      	ldr	r3, [pc, #264]	; (800629c <RFR_MainCheck+0x158>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006198:	4a40      	ldr	r2, [pc, #256]	; (800629c <RFR_MainCheck+0x158>)
 800619a:	6013      	str	r3, [r2, #0]
		if(LKAUTOSeq >= 4)
 800619c:	4b43      	ldr	r3, [pc, #268]	; (80062ac <RFR_MainCheck+0x168>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d908      	bls.n	80061b6 <RFR_MainCheck+0x72>
			all_MotorStop();
 80061a4:	f000 fdb0 	bl	8006d08 <all_MotorStop>
			if(u16_DebugFlag == 1)
 80061a8:	4b41      	ldr	r3, [pc, #260]	; (80062b0 <RFR_MainCheck+0x16c>)
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d102      	bne.n	80061b6 <RFR_MainCheck+0x72>
				cliPrintf("\n LK_AUTO_SEQ STOP.");
 80061b0:	4840      	ldr	r0, [pc, #256]	; (80062b4 <RFR_MainCheck+0x170>)
 80061b2:	f7fd fd4f 	bl	8003c54 <cliPrintf>
		LKAUTOSeq = 0; // 경운수정 24/2/1
 80061b6:	4b3d      	ldr	r3, [pc, #244]	; (80062ac <RFR_MainCheck+0x168>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]
}
 80061bc:	e06c      	b.n	8006298 <RFR_MainCheck+0x154>
		if(u16_RFMNChkCnt == 0)
 80061be:	4b3a      	ldr	r3, [pc, #232]	; (80062a8 <RFR_MainCheck+0x164>)
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d168      	bne.n	8006298 <RFR_MainCheck+0x154>
			if((uSysStatusFlag & f_RFR_Emergency) == 0)
 80061c6:	4b35      	ldr	r3, [pc, #212]	; (800629c <RFR_MainCheck+0x158>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d150      	bne.n	8006274 <RFR_MainCheck+0x130>
				uKeyStatusFlag &= ~frk_Emergency;
 80061d2:	4b33      	ldr	r3, [pc, #204]	; (80062a0 <RFR_MainCheck+0x15c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f023 0310 	bic.w	r3, r3, #16
 80061da:	4a31      	ldr	r2, [pc, #196]	; (80062a0 <RFR_MainCheck+0x15c>)
 80061dc:	6013      	str	r3, [r2, #0]
				uSysStatusFlag |= f_RFR_Emergency;
 80061de:	4b2f      	ldr	r3, [pc, #188]	; (800629c <RFR_MainCheck+0x158>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061e6:	4a2d      	ldr	r2, [pc, #180]	; (800629c <RFR_MainCheck+0x158>)
 80061e8:	6013      	str	r3, [r2, #0]
				if(LKAUTOSeq == 0)
 80061ea:	4b30      	ldr	r3, [pc, #192]	; (80062ac <RFR_MainCheck+0x168>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d140      	bne.n	8006274 <RFR_MainCheck+0x130>
					all_MotorStop();
 80061f2:	f000 fd89 	bl	8006d08 <all_MotorStop>
					if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 80061f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061fa:	482f      	ldr	r0, [pc, #188]	; (80062b8 <RFR_MainCheck+0x174>)
 80061fc:	f004 fd76 	bl	800acec <HAL_GPIO_ReadPin>
 8006200:	4603      	mov	r3, r0
 8006202:	2b01      	cmp	r3, #1
 8006204:	d11b      	bne.n	800623e <RFR_MainCheck+0xfa>
						HAL_Delay(100);
 8006206:	2064      	movs	r0, #100	; 0x64
 8006208:	f002 f992 	bl	8008530 <HAL_Delay>
						if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 800620c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006210:	4829      	ldr	r0, [pc, #164]	; (80062b8 <RFR_MainCheck+0x174>)
 8006212:	f004 fd6b 	bl	800acec <HAL_GPIO_ReadPin>
 8006216:	4603      	mov	r3, r0
 8006218:	2b01      	cmp	r3, #1
 800621a:	d12b      	bne.n	8006274 <RFR_MainCheck+0x130>
							uSysStatusFlag |= f_LKATKInitStatus;
 800621c:	4b1f      	ldr	r3, [pc, #124]	; (800629c <RFR_MainCheck+0x158>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006224:	4a1d      	ldr	r2, [pc, #116]	; (800629c <RFR_MainCheck+0x158>)
 8006226:	6013      	str	r3, [r2, #0]
							LKAUTOSeq = 1;
 8006228:	4b20      	ldr	r3, [pc, #128]	; (80062ac <RFR_MainCheck+0x168>)
 800622a:	2201      	movs	r2, #1
 800622c:	701a      	strb	r2, [r3, #0]
							if(u16_DebugFlag == 1)
 800622e:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <RFR_MainCheck+0x16c>)
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d11e      	bne.n	8006274 <RFR_MainCheck+0x130>
								cliPrintf("\n SEQ_1");
 8006236:	4821      	ldr	r0, [pc, #132]	; (80062bc <RFR_MainCheck+0x178>)
 8006238:	f7fd fd0c 	bl	8003c54 <cliPrintf>
 800623c:	e01a      	b.n	8006274 <RFR_MainCheck+0x130>
						HAL_Delay(100);
 800623e:	2064      	movs	r0, #100	; 0x64
 8006240:	f002 f976 	bl	8008530 <HAL_Delay>
						if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 0)
 8006244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006248:	481b      	ldr	r0, [pc, #108]	; (80062b8 <RFR_MainCheck+0x174>)
 800624a:	f004 fd4f 	bl	800acec <HAL_GPIO_ReadPin>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10f      	bne.n	8006274 <RFR_MainCheck+0x130>
							uSysStatusFlag &= ~f_LKATKInitStatus;
 8006254:	4b11      	ldr	r3, [pc, #68]	; (800629c <RFR_MainCheck+0x158>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800625c:	4a0f      	ldr	r2, [pc, #60]	; (800629c <RFR_MainCheck+0x158>)
 800625e:	6013      	str	r3, [r2, #0]
							LKAUTOSeq = 1;
 8006260:	4b12      	ldr	r3, [pc, #72]	; (80062ac <RFR_MainCheck+0x168>)
 8006262:	2201      	movs	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
							if(u16_DebugFlag == 1)
 8006266:	4b12      	ldr	r3, [pc, #72]	; (80062b0 <RFR_MainCheck+0x16c>)
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d102      	bne.n	8006274 <RFR_MainCheck+0x130>
								cliPrintf("\n SEQ_1");
 800626e:	4813      	ldr	r0, [pc, #76]	; (80062bc <RFR_MainCheck+0x178>)
 8006270:	f7fd fcf0 	bl	8003c54 <cliPrintf>
			uKeyStatusFlag	&= ~frk_AutoDrv;
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <RFR_MainCheck+0x15c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800627c:	4a08      	ldr	r2, [pc, #32]	; (80062a0 <RFR_MainCheck+0x15c>)
 800627e:	6013      	str	r3, [r2, #0]
			uKeyStatusFlag &= ~fRK_Ok;
 8006280:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <RFR_MainCheck+0x15c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006288:	4a05      	ldr	r2, [pc, #20]	; (80062a0 <RFR_MainCheck+0x15c>)
 800628a:	6013      	str	r3, [r2, #0]
			uKeyStatusFlag &= ~fRK_Repeat;
 800628c:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <RFR_MainCheck+0x15c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006294:	4a02      	ldr	r2, [pc, #8]	; (80062a0 <RFR_MainCheck+0x15c>)
 8006296:	6013      	str	r3, [r2, #0]
}
 8006298:	bf00      	nop
 800629a:	bd80      	pop	{r7, pc}
 800629c:	20000cf8 	.word	0x20000cf8
 80062a0:	20000cfc 	.word	0x20000cfc
 80062a4:	40011400 	.word	0x40011400
 80062a8:	20000d3c 	.word	0x20000d3c
 80062ac:	20000d59 	.word	0x20000d59
 80062b0:	20000d08 	.word	0x20000d08
 80062b4:	08012bc0 	.word	0x08012bc0
 80062b8:	40011800 	.word	0x40011800
 80062bc:	08012bd4 	.word	0x08012bd4

080062c0 <User_Interface>:

//
void User_Interface()
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  Port_ReadACT();
 80062c4:	f001 faf4 	bl	80078b0 <Port_ReadACT>
  //
  LKEY_Check();		/* Low BAT. 상태에서도 Local Key 는 동작 한다. */
 80062c8:	f7ff fcd4 	bl	8005c74 <LKEY_Check>
  #if 0
  RFR_MainCheck();
  RKEY_Check();
  #endif 
  
  if((uSysStatusFlag & f_LowBat) == 0)
 80062cc:	4b11      	ldr	r3, [pc, #68]	; (8006314 <User_Interface+0x54>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d11a      	bne.n	800630e <User_Interface+0x4e>
  {
	if((uKeyStatusFlag & fLK_Ok) == 0)	/* Local Key 가 릴리지 되고 */
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <User_Interface+0x58>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d114      	bne.n	800630e <User_Interface+0x4e>
	{
		if(RK_PermitTime == 0)			/* 3초 이후부터 RFR을 입력 받는다.*/ 
 80062e4:	4b0d      	ldr	r3, [pc, #52]	; (800631c <User_Interface+0x5c>)
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d110      	bne.n	800630e <User_Interface+0x4e>
		{
			#if 1 
			RFR_MainCheck();
 80062ec:	f7ff ff2a 	bl	8006144 <RFR_MainCheck>
			if((uSysStatusFlag & f_RFR_Emergency) == 0)
 80062f0:	4b08      	ldr	r3, [pc, #32]	; (8006314 <User_Interface+0x54>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <User_Interface+0x46>
			{
				RKEY_Check();
 80062fc:	f7ff fd46 	bl	8005d8c <RKEY_Check>
				SMART_check();
 8006300:	f7ff fe10 	bl	8005f24 <SMART_check>
			}
			#endif 
		}
	}
  }
}
 8006304:	e003      	b.n	800630e <User_Interface+0x4e>
				LKAUTO_CHKSeq();
 8006306:	f7ff fe2d 	bl	8005f64 <LKAUTO_CHKSeq>
				SMART_check();
 800630a:	f7ff fe0b 	bl	8005f24 <SMART_check>
}
 800630e:	bf00      	nop
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20000cf8 	.word	0x20000cf8
 8006318:	20000cfc 	.word	0x20000cfc
 800631c:	20000d30 	.word	0x20000d30

08006320 <is_DriveKey>:
// KEY_FORWARD 	PE3
// KEY_REVERSE		PE4
// RFR_FORWARD		PC12
// RFR_BACKWORD	PD0
uint8_t is_DriveKey()
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  if(((Local_Key.lK_Last & KEY_FORWARD) == KEY_FORWARD) || ((Local_Key.lK_Last & KEY_BACKWORD) == KEY_BACKWORD))
 8006324:	4b1b      	ldr	r3, [pc, #108]	; (8006394 <is_DriveKey+0x74>)
 8006326:	885b      	ldrh	r3, [r3, #2]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d105      	bne.n	800633c <is_DriveKey+0x1c>
 8006330:	4b18      	ldr	r3, [pc, #96]	; (8006394 <is_DriveKey+0x74>)
 8006332:	885b      	ldrh	r3, [r3, #2]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <is_DriveKey+0x20>
	return 1;
 800633c:	2301      	movs	r3, #1
 800633e:	e024      	b.n	800638a <is_DriveKey+0x6a>
  else
  {
    if(((RFR_Key.rK_Last & RFR_FORWARD) == RFR_FORWARD) || ((RFR_Key.rK_Last & RFR_BACKWORD) == RFR_BACKWORD))
 8006340:	4b15      	ldr	r3, [pc, #84]	; (8006398 <is_DriveKey+0x78>)
 8006342:	885b      	ldrh	r3, [r3, #2]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <is_DriveKey+0x38>
 800634c:	4b12      	ldr	r3, [pc, #72]	; (8006398 <is_DriveKey+0x78>)
 800634e:	885b      	ldrh	r3, [r3, #2]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <is_DriveKey+0x3c>
      return 1;
 8006358:	2301      	movs	r3, #1
 800635a:	e016      	b.n	800638a <is_DriveKey+0x6a>
    else
    {
      if(uSysStatusFlag & f_AutoRun)
 800635c:	4b0f      	ldr	r3, [pc, #60]	; (800639c <is_DriveKey+0x7c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00f      	beq.n	8006388 <is_DriveKey+0x68>
      {
        if(((smt_Command & KEY_FORWARD)  == KEY_FORWARD) || ((smt_Command & KEY_BACKWORD)  == KEY_BACKWORD))
 8006368:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <is_DriveKey+0x80>)
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <is_DriveKey+0x60>
 8006374:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <is_DriveKey+0x80>)
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <is_DriveKey+0x64>
          return 1;
 8006380:	2301      	movs	r3, #1
 8006382:	e002      	b.n	800638a <is_DriveKey+0x6a>
        else
          return 0;
 8006384:	2300      	movs	r3, #0
 8006386:	e000      	b.n	800638a <is_DriveKey+0x6a>
      }
      else
        return 0;
 8006388:	2300      	movs	r3, #0
    }
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000cdc 	.word	0x20000cdc
 8006398:	20000ce8 	.word	0x20000ce8
 800639c:	20000cf8 	.word	0x20000cf8
 80063a0:	20000d36 	.word	0x20000d36

080063a4 <DM_Stop>:
//
void DM_Stop()
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  if(DMotorSeq != DMOTOR_STOP)
 80063a8:	4b08      	ldr	r3, [pc, #32]	; (80063cc <DM_Stop+0x28>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <DM_Stop+0x1e>
  {
    DMotorSeq = DMOTOR_STOP;
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <DM_Stop+0x28>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
    DMotorTKPWM = 0;
 80063b6:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <DM_Stop+0x2c>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
    DMotorWaitime = 10;
 80063bc:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <DM_Stop+0x30>)
 80063be:	220a      	movs	r2, #10
 80063c0:	801a      	strh	r2, [r3, #0]
  }
}
 80063c2:	bf00      	nop
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	20000d1c 	.word	0x20000d1c
 80063d0:	20000d28 	.word	0x20000d28
 80063d4:	20000d20 	.word	0x20000d20

080063d8 <DRV_Control>:

void DRV_Control()
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_DMotorACT) && (is_DriveKey() == 0))
 80063dc:	4b99      	ldr	r3, [pc, #612]	; (8006644 <DRV_Control+0x26c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d006      	beq.n	80063f6 <DRV_Control+0x1e>
 80063e8:	f7ff ff9a 	bl	8006320 <is_DriveKey>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <DRV_Control+0x1e>
  {
  	DM_Stop();
 80063f2:	f7ff ffd7 	bl	80063a4 <DM_Stop>
  }
  switch(DMotorSeq)
 80063f6:	4b94      	ldr	r3, [pc, #592]	; (8006648 <DRV_Control+0x270>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	f200 815f 	bhi.w	80066be <DRV_Control+0x2e6>
 8006400:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <DRV_Control+0x30>)
 8006402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006406:	bf00      	nop
 8006408:	08006611 	.word	0x08006611
 800640c:	0800641d 	.word	0x0800641d
 8006410:	0800645b 	.word	0x0800645b
 8006414:	0800648b 	.word	0x0800648b
 8006418:	080065ab 	.word	0x080065ab
  {
	case DMOTOR_START:
		if(DMotorWaitime == 0)
 800641c:	4b8b      	ldr	r3, [pc, #556]	; (800664c <DRV_Control+0x274>)
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 814e 	bne.w	80066c2 <DRV_Control+0x2ea>
		{
			if(uSysStatusFlag & f_DMForward)
 8006426:	4b87      	ldr	r3, [pc, #540]	; (8006644 <DRV_Control+0x26c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d006      	beq.n	8006440 <DRV_Control+0x68>
      {
        HAL_GPIO_WritePin(GPIOE, E_drvM_CWCCW, GPIO_PIN_SET);
 8006432:	2201      	movs	r2, #1
 8006434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006438:	4885      	ldr	r0, [pc, #532]	; (8006650 <DRV_Control+0x278>)
 800643a:	f004 fc6e 	bl	800ad1a <HAL_GPIO_WritePin>
 800643e:	e005      	b.n	800644c <DRV_Control+0x74>
      }
			else
      {
        HAL_GPIO_WritePin(GPIOE, E_drvM_CWCCW, GPIO_PIN_RESET);
 8006440:	2200      	movs	r2, #0
 8006442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006446:	4882      	ldr	r0, [pc, #520]	; (8006650 <DRV_Control+0x278>)
 8006448:	f004 fc67 	bl	800ad1a <HAL_GPIO_WritePin>
      }
			DMotorWaitime = 2;
 800644c:	4b7f      	ldr	r3, [pc, #508]	; (800664c <DRV_Control+0x274>)
 800644e:	2202      	movs	r2, #2
 8006450:	801a      	strh	r2, [r3, #0]
			DMotorSeq = DMOTOR_BRKOFF;
 8006452:	4b7d      	ldr	r3, [pc, #500]	; (8006648 <DRV_Control+0x270>)
 8006454:	2202      	movs	r2, #2
 8006456:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006458:	e133      	b.n	80066c2 <DRV_Control+0x2ea>
		//
	case DMOTOR_BRKOFF:		/* Brake Switch ON=+24V,OFF=OPEN */
		if(DMotorWaitime == 0)
 800645a:	4b7c      	ldr	r3, [pc, #496]	; (800664c <DRV_Control+0x274>)
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 8131 	bne.w	80066c6 <DRV_Control+0x2ee>
		{
      HAL_GPIO_WritePin(GPIOE, E_drvM_BREAK, GPIO_PIN_RESET);
 8006464:	2200      	movs	r2, #0
 8006466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800646a:	4879      	ldr	r0, [pc, #484]	; (8006650 <DRV_Control+0x278>)
 800646c:	f004 fc55 	bl	800ad1a <HAL_GPIO_WritePin>
			uSysStatusFlag &= ~f_DMBreak;
 8006470:	4b74      	ldr	r3, [pc, #464]	; (8006644 <DRV_Control+0x26c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f023 0304 	bic.w	r3, r3, #4
 8006478:	4a72      	ldr	r2, [pc, #456]	; (8006644 <DRV_Control+0x26c>)
 800647a:	6013      	str	r3, [r2, #0]
			DMotorWaitime = 2;
 800647c:	4b73      	ldr	r3, [pc, #460]	; (800664c <DRV_Control+0x274>)
 800647e:	2202      	movs	r2, #2
 8006480:	801a      	strh	r2, [r3, #0]
			DMotorSeq = DMOTOR_ACCEL;
 8006482:	4b71      	ldr	r3, [pc, #452]	; (8006648 <DRV_Control+0x270>)
 8006484:	2203      	movs	r2, #3
 8006486:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006488:	e11d      	b.n	80066c6 <DRV_Control+0x2ee>
		
	case DMOTOR_ACCEL:
		if(DMotorWaitime == 0)
 800648a:	4b70      	ldr	r3, [pc, #448]	; (800664c <DRV_Control+0x274>)
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 811b 	bne.w	80066ca <DRV_Control+0x2f2>
		{
			DMotorTKPWM = DRV_ADC[DRV_SPDTBNo][DRV_Speed]+load_value.IDLE_SPD;
 8006494:	4b6f      	ldr	r3, [pc, #444]	; (8006654 <DRV_Control+0x27c>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	4619      	mov	r1, r3
 800649a:	4b6f      	ldr	r3, [pc, #444]	; (8006658 <DRV_Control+0x280>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	4a6e      	ldr	r2, [pc, #440]	; (800665c <DRV_Control+0x284>)
 80064a2:	460b      	mov	r3, r1
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	440b      	add	r3, r1
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	4413      	add	r3, r2
 80064ac:	4403      	add	r3, r0
 80064ae:	781a      	ldrb	r2, [r3, #0]
 80064b0:	4b6b      	ldr	r3, [pc, #428]	; (8006660 <DRV_Control+0x288>)
 80064b2:	791b      	ldrb	r3, [r3, #4]
 80064b4:	4413      	add	r3, r2
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	4b6a      	ldr	r3, [pc, #424]	; (8006664 <DRV_Control+0x28c>)
 80064ba:	701a      	strb	r2, [r3, #0]
			//
			if((uSysStatusFlag & f_LimitCenter) == 0)
 80064bc:	4b61      	ldr	r3, [pc, #388]	; (8006644 <DRV_Control+0x26c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d117      	bne.n	80064f8 <DRV_Control+0x120>
			{
				if(DRV_Speed >= 4)
 80064c8:	4b63      	ldr	r3, [pc, #396]	; (8006658 <DRV_Control+0x280>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d913      	bls.n	80064f8 <DRV_Control+0x120>
					DMotorTKPWM = DRV_ADC[DRV_SPDTBNo][DRV_Speed-1]+load_value.IDLE_SPD;			// 센터가 아닐때 속도 낮추는부분		
 80064d0:	4b60      	ldr	r3, [pc, #384]	; (8006654 <DRV_Control+0x27c>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	4b60      	ldr	r3, [pc, #384]	; (8006658 <DRV_Control+0x280>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	1e5a      	subs	r2, r3, #1
 80064dc:	495f      	ldr	r1, [pc, #380]	; (800665c <DRV_Control+0x284>)
 80064de:	4603      	mov	r3, r0
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	4403      	add	r3, r0
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	440b      	add	r3, r1
 80064e8:	4413      	add	r3, r2
 80064ea:	781a      	ldrb	r2, [r3, #0]
 80064ec:	4b5c      	ldr	r3, [pc, #368]	; (8006660 <DRV_Control+0x288>)
 80064ee:	791b      	ldrb	r3, [r3, #4]
 80064f0:	4413      	add	r3, r2
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	4b5b      	ldr	r3, [pc, #364]	; (8006664 <DRV_Control+0x28c>)
 80064f6:	701a      	strb	r2, [r3, #0]
			}
			if((uSysStatusFlag & f_DMForward) == 0)		/* Backward */
 80064f8:	4b52      	ldr	r3, [pc, #328]	; (8006644 <DRV_Control+0x26c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d11a      	bne.n	800653a <DRV_Control+0x162>
			{
				if(DRV_Speed >= 3)						/* 3,4,5, 단 스피드는 3단으로한다 */
 8006504:	4b54      	ldr	r3, [pc, #336]	; (8006658 <DRV_Control+0x280>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d902      	bls.n	8006512 <DRV_Control+0x13a>
					DRV_Speed = 3;
 800650c:	4b52      	ldr	r3, [pc, #328]	; (8006658 <DRV_Control+0x280>)
 800650e:	2203      	movs	r2, #3
 8006510:	701a      	strb	r2, [r3, #0]
				DMotorTKPWM = DRV_ADC[DRV_SPDTBNo][DRV_Speed]+load_value.IDLE_SPD; 
 8006512:	4b50      	ldr	r3, [pc, #320]	; (8006654 <DRV_Control+0x27c>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	4619      	mov	r1, r3
 8006518:	4b4f      	ldr	r3, [pc, #316]	; (8006658 <DRV_Control+0x280>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	4a4f      	ldr	r2, [pc, #316]	; (800665c <DRV_Control+0x284>)
 8006520:	460b      	mov	r3, r1
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	440b      	add	r3, r1
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	4413      	add	r3, r2
 800652a:	4403      	add	r3, r0
 800652c:	781a      	ldrb	r2, [r3, #0]
 800652e:	4b4c      	ldr	r3, [pc, #304]	; (8006660 <DRV_Control+0x288>)
 8006530:	791b      	ldrb	r3, [r3, #4]
 8006532:	4413      	add	r3, r2
 8006534:	b2da      	uxtb	r2, r3
 8006536:	4b4b      	ldr	r3, [pc, #300]	; (8006664 <DRV_Control+0x28c>)
 8006538:	701a      	strb	r2, [r3, #0]
			}
#if _SMT_DMSpeed			
			if(isAutoCondition())
 800653a:	f7ff fce1 	bl	8005f00 <isAutoCondition>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d022      	beq.n	800658a <DRV_Control+0x1b2>
			{
        if ( smt_DRVSpeed == 3) //3일때 고속
 8006544:	4b48      	ldr	r3, [pc, #288]	; (8006668 <DRV_Control+0x290>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b03      	cmp	r3, #3
 800654a:	d10f      	bne.n	800656c <DRV_Control+0x194>
        {
          if ( DRV_SPDTBNo == 1) // DMCS type
 800654c:	4b41      	ldr	r3, [pc, #260]	; (8006654 <DRV_Control+0x27c>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d106      	bne.n	8006562 <DRV_Control+0x18a>
          {
            DMotorTKPWM = load_value.ATD_HIGH_SPD+12;
 8006554:	4b42      	ldr	r3, [pc, #264]	; (8006660 <DRV_Control+0x288>)
 8006556:	799b      	ldrb	r3, [r3, #6]
 8006558:	330c      	adds	r3, #12
 800655a:	b2da      	uxtb	r2, r3
 800655c:	4b41      	ldr	r3, [pc, #260]	; (8006664 <DRV_Control+0x28c>)
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	e013      	b.n	800658a <DRV_Control+0x1b2>
          }
          else  // Curtis type
          {
            DMotorTKPWM = load_value.ATD_HIGH_SPD;
 8006562:	4b3f      	ldr	r3, [pc, #252]	; (8006660 <DRV_Control+0x288>)
 8006564:	799a      	ldrb	r2, [r3, #6]
 8006566:	4b3f      	ldr	r3, [pc, #252]	; (8006664 <DRV_Control+0x28c>)
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	e00e      	b.n	800658a <DRV_Control+0x1b2>
          }
        }
        else // 2일때 저속  
        {
          if ( DRV_SPDTBNo == 1) // DMCS type
 800656c:	4b39      	ldr	r3, [pc, #228]	; (8006654 <DRV_Control+0x27c>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d106      	bne.n	8006582 <DRV_Control+0x1aa>
          {
            DMotorTKPWM = load_value.ATD_LOW_SPD+12;
 8006574:	4b3a      	ldr	r3, [pc, #232]	; (8006660 <DRV_Control+0x288>)
 8006576:	795b      	ldrb	r3, [r3, #5]
 8006578:	330c      	adds	r3, #12
 800657a:	b2da      	uxtb	r2, r3
 800657c:	4b39      	ldr	r3, [pc, #228]	; (8006664 <DRV_Control+0x28c>)
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	e003      	b.n	800658a <DRV_Control+0x1b2>
          }
          else  // Curtis type
          {
            DMotorTKPWM = load_value.ATD_LOW_SPD;
 8006582:	4b37      	ldr	r3, [pc, #220]	; (8006660 <DRV_Control+0x288>)
 8006584:	795a      	ldrb	r2, [r3, #5]
 8006586:	4b37      	ldr	r3, [pc, #220]	; (8006664 <DRV_Control+0x28c>)
 8006588:	701a      	strb	r2, [r3, #0]
          
        }
				 
			}
      #endif
			if(uKeyStatusFlag & fLK_Ok)	/* 달려있는 키로 구동할 경우 */
 800658a:	4b38      	ldr	r3, [pc, #224]	; (800666c <DRV_Control+0x294>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <DRV_Control+0x1c4>
			{
				DMotorTKPWM = 105;	
 8006596:	4b33      	ldr	r3, [pc, #204]	; (8006664 <DRV_Control+0x28c>)
 8006598:	2269      	movs	r2, #105	; 0x69
 800659a:	701a      	strb	r2, [r3, #0]
			}
			DMotorWaitime = 2;
 800659c:	4b2b      	ldr	r3, [pc, #172]	; (800664c <DRV_Control+0x274>)
 800659e:	2202      	movs	r2, #2
 80065a0:	801a      	strh	r2, [r3, #0]
			DMotorSeq = DMOTOR_ACCELACT;
 80065a2:	4b29      	ldr	r3, [pc, #164]	; (8006648 <DRV_Control+0x270>)
 80065a4:	2204      	movs	r2, #4
 80065a6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80065a8:	e08f      	b.n	80066ca <DRV_Control+0x2f2>
		//
	case DMOTOR_ACCELACT:
		if(DMotorWaitime == 0)
 80065aa:	4b28      	ldr	r3, [pc, #160]	; (800664c <DRV_Control+0x274>)
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 808d 	bne.w	80066ce <DRV_Control+0x2f6>
		{
			if(DMotorTKPWM == DRV_PWMDuty)
 80065b4:	4b2b      	ldr	r3, [pc, #172]	; (8006664 <DRV_Control+0x28c>)
 80065b6:	781a      	ldrb	r2, [r3, #0]
 80065b8:	4b2d      	ldr	r3, [pc, #180]	; (8006670 <DRV_Control+0x298>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d103      	bne.n	80065c8 <DRV_Control+0x1f0>
			{
				DMotorSeq = DMOTOR_ACCEL;		/* RFR �� ���? �ӵ� ���� ó���� �ؾ� �ȴ�. */
 80065c0:	4b21      	ldr	r3, [pc, #132]	; (8006648 <DRV_Control+0x270>)
 80065c2:	2203      	movs	r2, #3
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	e018      	b.n	80065fa <DRV_Control+0x222>
			}
			else if(DMotorTKPWM > DRV_PWMDuty)
 80065c8:	4b26      	ldr	r3, [pc, #152]	; (8006664 <DRV_Control+0x28c>)
 80065ca:	781a      	ldrb	r2, [r3, #0]
 80065cc:	4b28      	ldr	r3, [pc, #160]	; (8006670 <DRV_Control+0x298>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d906      	bls.n	80065e2 <DRV_Control+0x20a>
			{
				++DRV_PWMDuty;
 80065d4:	4b26      	ldr	r3, [pc, #152]	; (8006670 <DRV_Control+0x298>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	3301      	adds	r3, #1
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	4b24      	ldr	r3, [pc, #144]	; (8006670 <DRV_Control+0x298>)
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	e00b      	b.n	80065fa <DRV_Control+0x222>

			}
			else if(DMotorTKPWM < DRV_PWMDuty)
 80065e2:	4b20      	ldr	r3, [pc, #128]	; (8006664 <DRV_Control+0x28c>)
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	4b22      	ldr	r3, [pc, #136]	; (8006670 <DRV_Control+0x298>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d205      	bcs.n	80065fa <DRV_Control+0x222>
			{
				--DRV_PWMDuty;
 80065ee:	4b20      	ldr	r3, [pc, #128]	; (8006670 <DRV_Control+0x298>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	4b1e      	ldr	r3, [pc, #120]	; (8006670 <DRV_Control+0x298>)
 80065f8:	701a      	strb	r2, [r3, #0]
			}

			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DRV_PWMDuty);
 80065fa:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <DRV_Control+0x298>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2208      	movs	r2, #8
 8006600:	2100      	movs	r1, #0
 8006602:	481c      	ldr	r0, [pc, #112]	; (8006674 <DRV_Control+0x29c>)
 8006604:	f003 fb95 	bl	8009d32 <HAL_DAC_SetValue>
      DMotorWaitime = 3;
 8006608:	4b10      	ldr	r3, [pc, #64]	; (800664c <DRV_Control+0x274>)
 800660a:	2203      	movs	r2, #3
 800660c:	801a      	strh	r2, [r3, #0]
		}
		break;
 800660e:	e05e      	b.n	80066ce <DRV_Control+0x2f6>
		//
	case DMOTOR_STOP:		/* Stop Seq.*/
		if(DMotorWaitime == 0)
 8006610:	4b0e      	ldr	r3, [pc, #56]	; (800664c <DRV_Control+0x274>)
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d15c      	bne.n	80066d2 <DRV_Control+0x2fa>
		{
			if(DRV_PWMDuty > 0)
 8006618:	4b15      	ldr	r3, [pc, #84]	; (8006670 <DRV_Control+0x298>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d02b      	beq.n	8006678 <DRV_Control+0x2a0>
			{
				--DRV_PWMDuty;
 8006620:	4b13      	ldr	r3, [pc, #76]	; (8006670 <DRV_Control+0x298>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	3b01      	subs	r3, #1
 8006626:	b2da      	uxtb	r2, r3
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <DRV_Control+0x298>)
 800662a:	701a      	strb	r2, [r3, #0]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DRV_PWMDuty);
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <DRV_Control+0x298>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2208      	movs	r2, #8
 8006632:	2100      	movs	r1, #0
 8006634:	480f      	ldr	r0, [pc, #60]	; (8006674 <DRV_Control+0x29c>)
 8006636:	f003 fb7c 	bl	8009d32 <HAL_DAC_SetValue>
				DMotorWaitime = 10;
 800663a:	4b04      	ldr	r3, [pc, #16]	; (800664c <DRV_Control+0x274>)
 800663c:	220a      	movs	r2, #10
 800663e:	801a      	strh	r2, [r3, #0]
				uSysStatusFlag |= f_DMBreak;
				uSysStatusFlag &= ~f_DMotorACT;
				DMotorSeq = DMOTOR_END;
			}
		}
		break;
 8006640:	e047      	b.n	80066d2 <DRV_Control+0x2fa>
 8006642:	bf00      	nop
 8006644:	20000cf8 	.word	0x20000cf8
 8006648:	20000d1c 	.word	0x20000d1c
 800664c:	20000d20 	.word	0x20000d20
 8006650:	40011800 	.word	0x40011800
 8006654:	20000d5d 	.word	0x20000d5d
 8006658:	20000038 	.word	0x20000038
 800665c:	08012dfc 	.word	0x08012dfc
 8006660:	20000dd4 	.word	0x20000dd4
 8006664:	20000d28 	.word	0x20000d28
 8006668:	20000039 	.word	0x20000039
 800666c:	20000cfc 	.word	0x20000cfc
 8006670:	20000d2b 	.word	0x20000d2b
 8006674:	200002dc 	.word	0x200002dc
				DRV_PWMDuty = 0;
 8006678:	4b17      	ldr	r3, [pc, #92]	; (80066d8 <DRV_Control+0x300>)
 800667a:	2200      	movs	r2, #0
 800667c:	701a      	strb	r2, [r3, #0]
				DMotorTKPWM = 0;
 800667e:	4b17      	ldr	r3, [pc, #92]	; (80066dc <DRV_Control+0x304>)
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DRV_PWMDuty);
 8006684:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <DRV_Control+0x300>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2208      	movs	r2, #8
 800668a:	2100      	movs	r1, #0
 800668c:	4814      	ldr	r0, [pc, #80]	; (80066e0 <DRV_Control+0x308>)
 800668e:	f003 fb50 	bl	8009d32 <HAL_DAC_SetValue>
        HAL_GPIO_WritePin(GPIOE, E_drvM_BREAK, GPIO_PIN_SET);
 8006692:	2201      	movs	r2, #1
 8006694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006698:	4812      	ldr	r0, [pc, #72]	; (80066e4 <DRV_Control+0x30c>)
 800669a:	f004 fb3e 	bl	800ad1a <HAL_GPIO_WritePin>
				uSysStatusFlag |= f_DMBreak;
 800669e:	4b12      	ldr	r3, [pc, #72]	; (80066e8 <DRV_Control+0x310>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f043 0304 	orr.w	r3, r3, #4
 80066a6:	4a10      	ldr	r2, [pc, #64]	; (80066e8 <DRV_Control+0x310>)
 80066a8:	6013      	str	r3, [r2, #0]
				uSysStatusFlag &= ~f_DMotorACT;
 80066aa:	4b0f      	ldr	r3, [pc, #60]	; (80066e8 <DRV_Control+0x310>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f023 0301 	bic.w	r3, r3, #1
 80066b2:	4a0d      	ldr	r2, [pc, #52]	; (80066e8 <DRV_Control+0x310>)
 80066b4:	6013      	str	r3, [r2, #0]
				DMotorSeq = DMOTOR_END;
 80066b6:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <DRV_Control+0x314>)
 80066b8:	2205      	movs	r2, #5
 80066ba:	701a      	strb	r2, [r3, #0]
		break;
 80066bc:	e009      	b.n	80066d2 <DRV_Control+0x2fa>
		//
	case DMOTOR_END:		
	default:		
		
		break;
 80066be:	bf00      	nop
 80066c0:	e008      	b.n	80066d4 <DRV_Control+0x2fc>
		break;
 80066c2:	bf00      	nop
 80066c4:	e006      	b.n	80066d4 <DRV_Control+0x2fc>
		break;
 80066c6:	bf00      	nop
 80066c8:	e004      	b.n	80066d4 <DRV_Control+0x2fc>
		break;
 80066ca:	bf00      	nop
 80066cc:	e002      	b.n	80066d4 <DRV_Control+0x2fc>
		break;
 80066ce:	bf00      	nop
 80066d0:	e000      	b.n	80066d4 <DRV_Control+0x2fc>
		break;
 80066d2:	bf00      	nop
  }
}
 80066d4:	bf00      	nop
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20000d2b 	.word	0x20000d2b
 80066dc:	20000d28 	.word	0x20000d28
 80066e0:	200002dc 	.word	0x200002dc
 80066e4:	40011800 	.word	0x40011800
 80066e8:	20000cf8 	.word	0x20000cf8
 80066ec:	20000d1c 	.word	0x20000d1c

080066f0 <is_StrringKey>:
//
uint8_t is_StrringKey()
{
 80066f0:	b480      	push	{r7}
 80066f2:	af00      	add	r7, sp, #0
  if(((Local_Key.lK_Last & KEY_LEFT) == KEY_LEFT) || ((Local_Key.lK_Last & KEY_RIGHT) == KEY_RIGHT))
 80066f4:	4b1b      	ldr	r3, [pc, #108]	; (8006764 <is_StrringKey+0x74>)
 80066f6:	885b      	ldrh	r3, [r3, #2]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d105      	bne.n	800670c <is_StrringKey+0x1c>
 8006700:	4b18      	ldr	r3, [pc, #96]	; (8006764 <is_StrringKey+0x74>)
 8006702:	885b      	ldrh	r3, [r3, #2]
 8006704:	f003 0308 	and.w	r3, r3, #8
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <is_StrringKey+0x20>
	return 1;
 800670c:	2301      	movs	r3, #1
 800670e:	e024      	b.n	800675a <is_StrringKey+0x6a>
  else
  {
    if(((RFR_Key.rK_Last & RFR_LEFT) == RFR_LEFT) || ((RFR_Key.rK_Last & RFR_RIGHT) == RFR_RIGHT))
 8006710:	4b15      	ldr	r3, [pc, #84]	; (8006768 <is_StrringKey+0x78>)
 8006712:	885b      	ldrh	r3, [r3, #2]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b00      	cmp	r3, #0
 800671a:	d105      	bne.n	8006728 <is_StrringKey+0x38>
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <is_StrringKey+0x78>)
 800671e:	885b      	ldrh	r3, [r3, #2]
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <is_StrringKey+0x3c>
      return 1;
 8006728:	2301      	movs	r3, #1
 800672a:	e016      	b.n	800675a <is_StrringKey+0x6a>
    else
    {
      if(uSysStatusFlag & f_AutoRun)
 800672c:	4b0f      	ldr	r3, [pc, #60]	; (800676c <is_StrringKey+0x7c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00f      	beq.n	8006758 <is_StrringKey+0x68>
      {
        if(((smt_Command & KEY_LEFT)  == KEY_LEFT) || ((smt_Command & KEY_RIGHT)  == KEY_RIGHT))
 8006738:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <is_StrringKey+0x80>)
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d105      	bne.n	8006750 <is_StrringKey+0x60>
 8006744:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <is_StrringKey+0x80>)
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <is_StrringKey+0x64>
          return 1;
 8006750:	2301      	movs	r3, #1
 8006752:	e002      	b.n	800675a <is_StrringKey+0x6a>
        else
          return 0;
 8006754:	2300      	movs	r3, #0
 8006756:	e000      	b.n	800675a <is_StrringKey+0x6a>
      }
      else
        return 0;
 8006758:	2300      	movs	r3, #0
    }
  }
}
 800675a:	4618      	mov	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000cdc 	.word	0x20000cdc
 8006768:	20000ce8 	.word	0x20000ce8
 800676c:	20000cf8 	.word	0x20000cf8
 8006770:	20000d36 	.word	0x20000d36

08006774 <SM_Stop>:
//
void SM_Stop()
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  if(SMotorSeq != SMOTOR_STOP)
 8006778:	4b08      	ldr	r3, [pc, #32]	; (800679c <SM_Stop+0x28>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <SM_Stop+0x1e>
  {
    SMotorSeq = SMOTOR_STOP;
 8006780:	4b06      	ldr	r3, [pc, #24]	; (800679c <SM_Stop+0x28>)
 8006782:	2200      	movs	r2, #0
 8006784:	701a      	strb	r2, [r3, #0]
    SMotorTKPWM = 0;
 8006786:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <SM_Stop+0x2c>)
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]
    SMotorWaitime = 10;
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <SM_Stop+0x30>)
 800678e:	220a      	movs	r2, #10
 8006790:	801a      	strh	r2, [r3, #0]
  }
}
 8006792:	bf00      	nop
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000d1d 	.word	0x20000d1d
 80067a0:	20000d29 	.word	0x20000d29
 80067a4:	20000d22 	.word	0x20000d22

080067a8 <STR_Control>:
#define YES_PUMP 1
// SMotorSeq
void STR_Control()
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_SMotorACT) && (is_StrringKey() == 0))
 80067ac:	4b4f      	ldr	r3, [pc, #316]	; (80068ec <STR_Control+0x144>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d006      	beq.n	80067c6 <STR_Control+0x1e>
 80067b8:	f7ff ff9a 	bl	80066f0 <is_StrringKey>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <STR_Control+0x1e>
  {
	  SM_Stop();  
 80067c2:	f7ff ffd7 	bl	8006774 <SM_Stop>
  }
  
  switch(SMotorSeq)
 80067c6:	4b4a      	ldr	r3, [pc, #296]	; (80068f0 <STR_Control+0x148>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	f200 8082 	bhi.w	80068d4 <STR_Control+0x12c>
 80067d0:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <STR_Control+0x30>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	0800689f 	.word	0x0800689f
 80067dc:	080067ed 	.word	0x080067ed
 80067e0:	080068d5 	.word	0x080068d5
 80067e4:	08006845 	.word	0x08006845
 80067e8:	08006879 	.word	0x08006879
  {
    case SMOTOR_START:
    {
      Port_ReadACT();
 80067ec:	f001 f860 	bl	80078b0 <Port_ReadACT>
      if(SMotorWaitime == 0)
 80067f0:	4b40      	ldr	r3, [pc, #256]	; (80068f4 <STR_Control+0x14c>)
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d16f      	bne.n	80068d8 <STR_Control+0x130>
      {
        if(uSysStatusFlag & f_SMLeft)
 80067f8:	4b3c      	ldr	r3, [pc, #240]	; (80068ec <STR_Control+0x144>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0310 	and.w	r3, r3, #16
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00c      	beq.n	800681e <STR_Control+0x76>
        {
          HAL_GPIO_WritePin(GPIOE, E_strM_CWCCW, GPIO_PIN_SET);
 8006804:	2201      	movs	r2, #1
 8006806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800680a:	483b      	ldr	r0, [pc, #236]	; (80068f8 <STR_Control+0x150>)
 800680c:	f004 fa85 	bl	800ad1a <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOE, E_strM_BREAK, GPIO_PIN_SET);
 8006810:	2201      	movs	r2, #1
 8006812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006816:	4838      	ldr	r0, [pc, #224]	; (80068f8 <STR_Control+0x150>)
 8006818:	f004 fa7f 	bl	800ad1a <HAL_GPIO_WritePin>
 800681c:	e00b      	b.n	8006836 <STR_Control+0x8e>
        }
        else
        {
          HAL_GPIO_WritePin(GPIOE, E_strM_CWCCW, GPIO_PIN_RESET);
 800681e:	2200      	movs	r2, #0
 8006820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006824:	4834      	ldr	r0, [pc, #208]	; (80068f8 <STR_Control+0x150>)
 8006826:	f004 fa78 	bl	800ad1a <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOE, E_strM_BREAK, GPIO_PIN_RESET);
 800682a:	2200      	movs	r2, #0
 800682c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006830:	4831      	ldr	r0, [pc, #196]	; (80068f8 <STR_Control+0x150>)
 8006832:	f004 fa72 	bl	800ad1a <HAL_GPIO_WritePin>
        }
        SMotorWaitime = 0;
 8006836:	4b2f      	ldr	r3, [pc, #188]	; (80068f4 <STR_Control+0x14c>)
 8006838:	2200      	movs	r2, #0
 800683a:	801a      	strh	r2, [r3, #0]
        SMotorSeq = SMOTOR_ACCEL;
 800683c:	4b2c      	ldr	r3, [pc, #176]	; (80068f0 <STR_Control+0x148>)
 800683e:	2203      	movs	r2, #3
 8006840:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8006842:	e049      	b.n	80068d8 <STR_Control+0x130>
    case SMOTOR_ACCEL:
    {
      if(SMotorWaitime == 0)
 8006844:	4b2b      	ldr	r3, [pc, #172]	; (80068f4 <STR_Control+0x14c>)
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d147      	bne.n	80068dc <STR_Control+0x134>
      {
        if(isAutoCondition())
 800684c:	f7ff fb58 	bl	8005f00 <isAutoCondition>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <STR_Control+0xb6>
          SMotorTKPWM = STR_ADC[2];
 8006856:	22fa      	movs	r2, #250	; 0xfa
 8006858:	4b28      	ldr	r3, [pc, #160]	; (80068fc <STR_Control+0x154>)
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	e002      	b.n	8006864 <STR_Control+0xbc>
        else
          SMotorTKPWM = 200;
 800685e:	4b27      	ldr	r3, [pc, #156]	; (80068fc <STR_Control+0x154>)
 8006860:	22c8      	movs	r2, #200	; 0xc8
 8006862:	701a      	strb	r2, [r3, #0]
          
        SMotorWaitime = 0;
 8006864:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <STR_Control+0x14c>)
 8006866:	2200      	movs	r2, #0
 8006868:	801a      	strh	r2, [r3, #0]
        SMotorSeq++;
 800686a:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <STR_Control+0x148>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	3301      	adds	r3, #1
 8006870:	b2da      	uxtb	r2, r3
 8006872:	4b1f      	ldr	r3, [pc, #124]	; (80068f0 <STR_Control+0x148>)
 8006874:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8006876:	e031      	b.n	80068dc <STR_Control+0x134>
      //
    case SMOTOR_ACCELACT:
    {
      if(SMotorWaitime == 0)
 8006878:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <STR_Control+0x14c>)
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d12f      	bne.n	80068e0 <STR_Control+0x138>
      {
        STR_PWMDuty = SMotorTKPWM;			
 8006880:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <STR_Control+0x154>)
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	4b1e      	ldr	r3, [pc, #120]	; (8006900 <STR_Control+0x158>)
 8006886:	701a      	strb	r2, [r3, #0]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, STR_PWMDuty);
 8006888:	4b1d      	ldr	r3, [pc, #116]	; (8006900 <STR_Control+0x158>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2208      	movs	r2, #8
 800688e:	2110      	movs	r1, #16
 8006890:	481c      	ldr	r0, [pc, #112]	; (8006904 <STR_Control+0x15c>)
 8006892:	f003 fa4e 	bl	8009d32 <HAL_DAC_SetValue>
        SMotorSeq = SMOTOR_END;
 8006896:	4b16      	ldr	r3, [pc, #88]	; (80068f0 <STR_Control+0x148>)
 8006898:	2205      	movs	r2, #5
 800689a:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 800689c:	e020      	b.n	80068e0 <STR_Control+0x138>
    case SMOTOR_STOP:		/* Stop Seq.*/
    {
      if(SMotorWaitime == 0)
 800689e:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <STR_Control+0x14c>)
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d11e      	bne.n	80068e4 <STR_Control+0x13c>
      {
        SMotorTKPWM = 0;
 80068a6:	4b15      	ldr	r3, [pc, #84]	; (80068fc <STR_Control+0x154>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
        STR_PWMDuty = 0;
 80068ac:	4b14      	ldr	r3, [pc, #80]	; (8006900 <STR_Control+0x158>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	701a      	strb	r2, [r3, #0]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, STR_PWMDuty);
 80068b2:	4b13      	ldr	r3, [pc, #76]	; (8006900 <STR_Control+0x158>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2208      	movs	r2, #8
 80068b8:	2110      	movs	r1, #16
 80068ba:	4812      	ldr	r0, [pc, #72]	; (8006904 <STR_Control+0x15c>)
 80068bc:	f003 fa39 	bl	8009d32 <HAL_DAC_SetValue>
        uSysStatusFlag &= ~f_SMotorACT;
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <STR_Control+0x144>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f023 0308 	bic.w	r3, r3, #8
 80068c8:	4a08      	ldr	r2, [pc, #32]	; (80068ec <STR_Control+0x144>)
 80068ca:	6013      	str	r3, [r2, #0]
        SMotorSeq = SMOTOR_END;
 80068cc:	4b08      	ldr	r3, [pc, #32]	; (80068f0 <STR_Control+0x148>)
 80068ce:	2205      	movs	r2, #5
 80068d0:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 80068d2:	e007      	b.n	80068e4 <STR_Control+0x13c>
      //
    case SMOTOR_END:		
    default:		
      break;
 80068d4:	bf00      	nop
 80068d6:	e006      	b.n	80068e6 <STR_Control+0x13e>
    break;
 80068d8:	bf00      	nop
 80068da:	e004      	b.n	80068e6 <STR_Control+0x13e>
    break;
 80068dc:	bf00      	nop
 80068de:	e002      	b.n	80068e6 <STR_Control+0x13e>
    break;
 80068e0:	bf00      	nop
 80068e2:	e000      	b.n	80068e6 <STR_Control+0x13e>
    break;
 80068e4:	bf00      	nop
  }
}
 80068e6:	bf00      	nop
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000cf8 	.word	0x20000cf8
 80068f0:	20000d1d 	.word	0x20000d1d
 80068f4:	20000d22 	.word	0x20000d22
 80068f8:	40011800 	.word	0x40011800
 80068fc:	20000d29 	.word	0x20000d29
 8006900:	20000d2c 	.word	0x20000d2c
 8006904:	200002dc 	.word	0x200002dc

08006908 <PUMP_Control>:
//
//
//#define YES_PUMP 0
void PUMP_Control()
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  if(PumpWaittime == 0)
 800690c:	4b98      	ldr	r3, [pc, #608]	; (8006b70 <PUMP_Control+0x268>)
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f040 8127 	bne.w	8006b64 <PUMP_Control+0x25c>
  {
    switch(PumpSeq)
 8006916:	4b97      	ldr	r3, [pc, #604]	; (8006b74 <PUMP_Control+0x26c>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	3b01      	subs	r3, #1
 800691c:	2b0f      	cmp	r3, #15
 800691e:	f200 8123 	bhi.w	8006b68 <PUMP_Control+0x260>
 8006922:	a201      	add	r2, pc, #4	; (adr r2, 8006928 <PUMP_Control+0x20>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	08006969 	.word	0x08006969
 800692c:	080069a7 	.word	0x080069a7
 8006930:	080069e7 	.word	0x080069e7
 8006934:	08006a01 	.word	0x08006a01
 8006938:	08006a1b 	.word	0x08006a1b
 800693c:	08006a35 	.word	0x08006a35
 8006940:	08006a4f 	.word	0x08006a4f
 8006944:	08006a69 	.word	0x08006a69
 8006948:	08006a9d 	.word	0x08006a9d
 800694c:	08006ab7 	.word	0x08006ab7
 8006950:	08006ad1 	.word	0x08006ad1
 8006954:	08006aeb 	.word	0x08006aeb
 8006958:	08006b05 	.word	0x08006b05
 800695c:	08006b1f 	.word	0x08006b1f
 8006960:	08006b69 	.word	0x08006b69
 8006964:	0800698d 	.word	0x0800698d
    {
      
      case PUMP_START:
      {
        if( load_value.Spray_type == 1)
 8006968:	4b83      	ldr	r3, [pc, #524]	; (8006b78 <PUMP_Control+0x270>)
 800696a:	79db      	ldrb	r3, [r3, #7]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d109      	bne.n	8006984 <PUMP_Control+0x7c>
        {
          HAL_GPIO_WritePin(GPIOB, B_PMPDN, GPIO_PIN_SET);
 8006970:	2201      	movs	r2, #1
 8006972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006976:	4881      	ldr	r0, [pc, #516]	; (8006b7c <PUMP_Control+0x274>)
 8006978:	f004 f9cf 	bl	800ad1a <HAL_GPIO_WritePin>
          PumpWaittime = 2000;			
 800697c:	4b7c      	ldr	r3, [pc, #496]	; (8006b70 <PUMP_Control+0x268>)
 800697e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006982:	801a      	strh	r2, [r3, #0]
        }
        PumpSeq = PUMP_SOL_ON;
 8006984:	4b7b      	ldr	r3, [pc, #492]	; (8006b74 <PUMP_Control+0x26c>)
 8006986:	2210      	movs	r2, #16
 8006988:	701a      	strb	r2, [r3, #0]
      }
      break;
 800698a:	e0ee      	b.n	8006b6a <PUMP_Control+0x262>
      case PUMP_SOL_ON:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPON, GPIO_PIN_SET);
 800698c:	2201      	movs	r2, #1
 800698e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006992:	487a      	ldr	r0, [pc, #488]	; (8006b7c <PUMP_Control+0x274>)
 8006994:	f004 f9c1 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;			
 8006998:	4b75      	ldr	r3, [pc, #468]	; (8006b70 <PUMP_Control+0x268>)
 800699a:	22c8      	movs	r2, #200	; 0xc8
 800699c:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_SRTH;
 800699e:	4b75      	ldr	r3, [pc, #468]	; (8006b74 <PUMP_Control+0x26c>)
 80069a0:	2202      	movs	r2, #2
 80069a2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80069a4:	e0e1      	b.n	8006b6a <PUMP_Control+0x262>

      case PUMP_SRTH:
      {
        #ifdef YES_PUMP 
        HAL_GPIO_WritePin(GPIOB, B_PMPON, GPIO_PIN_RESET);
 80069a6:	2200      	movs	r2, #0
 80069a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069ac:	4873      	ldr	r0, [pc, #460]	; (8006b7c <PUMP_Control+0x274>)
 80069ae:	f004 f9b4 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif 
        #if _PUMP_P			
        cliPrintf(" ON_H"); 
        #endif			
        PumpWaittime = 200;
 80069b2:	4b6f      	ldr	r3, [pc, #444]	; (8006b70 <PUMP_Control+0x268>)
 80069b4:	22c8      	movs	r2, #200	; 0xc8
 80069b6:	801a      	strh	r2, [r3, #0]
        if(uSysStatusFlag & f_Pump1st)
 80069b8:	4b71      	ldr	r3, [pc, #452]	; (8006b80 <PUMP_Control+0x278>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <PUMP_Control+0xd0>
        {
          uSysStatusFlag &= ~f_Pump1st;			
 80069c4:	4b6e      	ldr	r3, [pc, #440]	; (8006b80 <PUMP_Control+0x278>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80069cc:	4a6c      	ldr	r2, [pc, #432]	; (8006b80 <PUMP_Control+0x278>)
 80069ce:	6013      	str	r3, [r2, #0]
          PumpSeq = PUMP_UP1L;
 80069d0:	4b68      	ldr	r3, [pc, #416]	; (8006b74 <PUMP_Control+0x26c>)
 80069d2:	2203      	movs	r2, #3
 80069d4:	701a      	strb	r2, [r3, #0]
        {
          PumpWaittime = 10;
          PumpSeq = PUMP_Stay;
        }
      }
      break;
 80069d6:	e0c8      	b.n	8006b6a <PUMP_Control+0x262>
          PumpWaittime = 10;
 80069d8:	4b65      	ldr	r3, [pc, #404]	; (8006b70 <PUMP_Control+0x268>)
 80069da:	220a      	movs	r2, #10
 80069dc:	801a      	strh	r2, [r3, #0]
          PumpSeq = PUMP_Stay;
 80069de:	4b65      	ldr	r3, [pc, #404]	; (8006b74 <PUMP_Control+0x26c>)
 80069e0:	220f      	movs	r2, #15
 80069e2:	701a      	strb	r2, [r3, #0]
      break;
 80069e4:	e0c1      	b.n	8006b6a <PUMP_Control+0x262>
    
      case PUMP_UP1L:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_SET);
 80069e6:	2201      	movs	r2, #1
 80069e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069ec:	4863      	ldr	r0, [pc, #396]	; (8006b7c <PUMP_Control+0x274>)
 80069ee:	f004 f994 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 80069f2:	4b5f      	ldr	r3, [pc, #380]	; (8006b70 <PUMP_Control+0x268>)
 80069f4:	2250      	movs	r2, #80	; 0x50
 80069f6:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP1H;
 80069f8:	4b5e      	ldr	r3, [pc, #376]	; (8006b74 <PUMP_Control+0x26c>)
 80069fa:	2204      	movs	r2, #4
 80069fc:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UL1"); 
        #endif			
      } 		
      break;
 80069fe:	e0b4      	b.n	8006b6a <PUMP_Control+0x262>

      case PUMP_UP1H:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8006a00:	2200      	movs	r2, #0
 8006a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a06:	485d      	ldr	r0, [pc, #372]	; (8006b7c <PUMP_Control+0x274>)
 8006a08:	f004 f987 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;
 8006a0c:	4b58      	ldr	r3, [pc, #352]	; (8006b70 <PUMP_Control+0x268>)
 8006a0e:	22c8      	movs	r2, #200	; 0xc8
 8006a10:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP2L;
 8006a12:	4b58      	ldr	r3, [pc, #352]	; (8006b74 <PUMP_Control+0x26c>)
 8006a14:	2205      	movs	r2, #5
 8006a16:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UH1"); 
        #endif
      } 		
      break;
 8006a18:	e0a7      	b.n	8006b6a <PUMP_Control+0x262>

      case PUMP_UP2L: 		
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_SET);
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a20:	4856      	ldr	r0, [pc, #344]	; (8006b7c <PUMP_Control+0x274>)
 8006a22:	f004 f97a 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 8006a26:	4b52      	ldr	r3, [pc, #328]	; (8006b70 <PUMP_Control+0x268>)
 8006a28:	2250      	movs	r2, #80	; 0x50
 8006a2a:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP2H;
 8006a2c:	4b51      	ldr	r3, [pc, #324]	; (8006b74 <PUMP_Control+0x26c>)
 8006a2e:	2206      	movs	r2, #6
 8006a30:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UL2"); 
        #endif
      }
      break;
 8006a32:	e09a      	b.n	8006b6a <PUMP_Control+0x262>

      case PUMP_UP2H: 		
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8006a34:	2200      	movs	r2, #0
 8006a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a3a:	4850      	ldr	r0, [pc, #320]	; (8006b7c <PUMP_Control+0x274>)
 8006a3c:	f004 f96d 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;
 8006a40:	4b4b      	ldr	r3, [pc, #300]	; (8006b70 <PUMP_Control+0x268>)
 8006a42:	22c8      	movs	r2, #200	; 0xc8
 8006a44:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP3L;
 8006a46:	4b4b      	ldr	r3, [pc, #300]	; (8006b74 <PUMP_Control+0x26c>)
 8006a48:	2207      	movs	r2, #7
 8006a4a:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UH2"); 
        #endif
      }
      break;
 8006a4c:	e08d      	b.n	8006b6a <PUMP_Control+0x262>

      case PUMP_UP3L:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_SET);
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a54:	4849      	ldr	r0, [pc, #292]	; (8006b7c <PUMP_Control+0x274>)
 8006a56:	f004 f960 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 8006a5a:	4b45      	ldr	r3, [pc, #276]	; (8006b70 <PUMP_Control+0x268>)
 8006a5c:	2250      	movs	r2, #80	; 0x50
 8006a5e:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP3H;
 8006a60:	4b44      	ldr	r3, [pc, #272]	; (8006b74 <PUMP_Control+0x26c>)
 8006a62:	2208      	movs	r2, #8
 8006a64:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UL3"); 
        #endif
      } 		
              
        break;
 8006a66:	e080      	b.n	8006b6a <PUMP_Control+0x262>
        //
      case PUMP_UP3H:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a6e:	4843      	ldr	r0, [pc, #268]	; (8006b7c <PUMP_Control+0x274>)
 8006a70:	f004 f953 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;
 8006a74:	4b3e      	ldr	r3, [pc, #248]	; (8006b70 <PUMP_Control+0x268>)
 8006a76:	22c8      	movs	r2, #200	; 0xc8
 8006a78:	801a      	strh	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UH3"); 
        #endif	
        if(uSysStatusFlag & f_OPT_Pumpspeed)
 8006a7a:	4b41      	ldr	r3, [pc, #260]	; (8006b80 <PUMP_Control+0x278>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <PUMP_Control+0x186>
        {
          PumpSeq = PUMP_UP4L;				/* High �л緮 5�� */
 8006a86:	4b3b      	ldr	r3, [pc, #236]	; (8006b74 <PUMP_Control+0x26c>)
 8006a88:	2209      	movs	r2, #9
 8006a8a:	701a      	strb	r2, [r3, #0]
          PumpSeq = PUMP_Stay;
          cliPrintf(" - PUP END_3 Level"); 
        }
        #endif 
      } 		
      break;
 8006a8c:	e06d      	b.n	8006b6a <PUMP_Control+0x262>
          PumpSeq = PUMP_Stay;
 8006a8e:	4b39      	ldr	r3, [pc, #228]	; (8006b74 <PUMP_Control+0x26c>)
 8006a90:	220f      	movs	r2, #15
 8006a92:	701a      	strb	r2, [r3, #0]
          cliPrintf(" - PUP END_3 Level"); 
 8006a94:	483b      	ldr	r0, [pc, #236]	; (8006b84 <PUMP_Control+0x27c>)
 8006a96:	f7fd f8dd 	bl	8003c54 <cliPrintf>
      break;
 8006a9a:	e066      	b.n	8006b6a <PUMP_Control+0x262>
        
      case PUMP_UP4L: 		
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_SET);
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006aa2:	4836      	ldr	r0, [pc, #216]	; (8006b7c <PUMP_Control+0x274>)
 8006aa4:	f004 f939 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 8006aa8:	4b31      	ldr	r3, [pc, #196]	; (8006b70 <PUMP_Control+0x268>)
 8006aaa:	2250      	movs	r2, #80	; 0x50
 8006aac:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP4H;
 8006aae:	4b31      	ldr	r3, [pc, #196]	; (8006b74 <PUMP_Control+0x26c>)
 8006ab0:	220a      	movs	r2, #10
 8006ab2:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UL4"); 
        #endif
      }
      break;
 8006ab4:	e059      	b.n	8006b6a <PUMP_Control+0x262>

      case PUMP_UP4H: 
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006abc:	482f      	ldr	r0, [pc, #188]	; (8006b7c <PUMP_Control+0x274>)
 8006abe:	f004 f92c 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;
 8006ac2:	4b2b      	ldr	r3, [pc, #172]	; (8006b70 <PUMP_Control+0x268>)
 8006ac4:	22c8      	movs	r2, #200	; 0xc8
 8006ac6:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP5L;
 8006ac8:	4b2a      	ldr	r3, [pc, #168]	; (8006b74 <PUMP_Control+0x26c>)
 8006aca:	220b      	movs	r2, #11
 8006acc:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UH4"); 
        #endif
      }		
      break;
 8006ace:	e04c      	b.n	8006b6a <PUMP_Control+0x262>

      case PUMP_UP5L:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_SET);
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ad6:	4829      	ldr	r0, [pc, #164]	; (8006b7c <PUMP_Control+0x274>)
 8006ad8:	f004 f91f 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 8006adc:	4b24      	ldr	r3, [pc, #144]	; (8006b70 <PUMP_Control+0x268>)
 8006ade:	2250      	movs	r2, #80	; 0x50
 8006ae0:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP5H;
 8006ae2:	4b24      	ldr	r3, [pc, #144]	; (8006b74 <PUMP_Control+0x26c>)
 8006ae4:	220c      	movs	r2, #12
 8006ae6:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UL5"); 
        #endif
      } 		
      break;
 8006ae8:	e03f      	b.n	8006b6a <PUMP_Control+0x262>

      case PUMP_UP5H: 		
      {
        #ifdef YES_PUMP
    	  HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8006aea:	2200      	movs	r2, #0
 8006aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006af0:	4822      	ldr	r0, [pc, #136]	; (8006b7c <PUMP_Control+0x274>)
 8006af2:	f004 f912 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;
 8006af6:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <PUMP_Control+0x268>)
 8006af8:	22c8      	movs	r2, #200	; 0xc8
 8006afa:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_Stay;
 8006afc:	4b1d      	ldr	r3, [pc, #116]	; (8006b74 <PUMP_Control+0x26c>)
 8006afe:	220f      	movs	r2, #15
 8006b00:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UH5 - PUP END"); 
        #endif
      }
      break;
 8006b02:	e032      	b.n	8006b6a <PUMP_Control+0x262>
      break;

      case PUMP_STOP:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPOFF, GPIO_PIN_SET);
 8006b04:	2201      	movs	r2, #1
 8006b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b0a:	481c      	ldr	r0, [pc, #112]	; (8006b7c <PUMP_Control+0x274>)
 8006b0c:	f004 f905 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 8006b10:	4b17      	ldr	r3, [pc, #92]	; (8006b70 <PUMP_Control+0x268>)
 8006b12:	2250      	movs	r2, #80	; 0x50
 8006b14:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_STOP1H;
 8006b16:	4b17      	ldr	r3, [pc, #92]	; (8006b74 <PUMP_Control+0x26c>)
 8006b18:	220e      	movs	r2, #14
 8006b1a:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P
        cliPrintf("\n PUMP STOP_L");
        #endif			
      }
      break;
 8006b1c:	e025      	b.n	8006b6a <PUMP_Control+0x262>

      case PUMP_STOP1H:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPOFF, GPIO_PIN_RESET);
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b24:	4815      	ldr	r0, [pc, #84]	; (8006b7c <PUMP_Control+0x274>)
 8006b26:	f004 f8f8 	bl	800ad1a <HAL_GPIO_WritePin>
        #endif

        if( load_value.Spray_type == 1)
 8006b2a:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <PUMP_Control+0x270>)
 8006b2c:	79db      	ldrb	r3, [r3, #7]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d105      	bne.n	8006b3e <PUMP_Control+0x236>
        {
          HAL_GPIO_WritePin(GPIOB, B_PMPDN, GPIO_PIN_RESET);
 8006b32:	2200      	movs	r2, #0
 8006b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b38:	4810      	ldr	r0, [pc, #64]	; (8006b7c <PUMP_Control+0x274>)
 8006b3a:	f004 f8ee 	bl	800ad1a <HAL_GPIO_WritePin>
        }
        PumpWaittime = 10;
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	; (8006b70 <PUMP_Control+0x268>)
 8006b40:	220a      	movs	r2, #10
 8006b42:	801a      	strh	r2, [r3, #0]
        uSysStatusFlag &= ~f_PumpACT;
 8006b44:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <PUMP_Control+0x278>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f023 0320 	bic.w	r3, r3, #32
 8006b4c:	4a0c      	ldr	r2, [pc, #48]	; (8006b80 <PUMP_Control+0x278>)
 8006b4e:	6013      	str	r3, [r2, #0]
        uSysStatusFlag &= ~f_PumpOn;		
 8006b50:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <PUMP_Control+0x278>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b58:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <PUMP_Control+0x278>)
 8006b5a:	6013      	str	r3, [r2, #0]
        PumpSeq	 = PUMP_Stay;
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <PUMP_Control+0x26c>)
 8006b5e:	220f      	movs	r2, #15
 8006b60:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P
        cliPrintf(" PUMP STOP_H, STOP SEQ END,f_PumpACT[%0d]",uSysStatusFlag & f_PumpACT);
        #endif
      }
      break;
 8006b62:	e002      	b.n	8006b6a <PUMP_Control+0x262>

      default:
      break;

    }
  }
 8006b64:	bf00      	nop
 8006b66:	e000      	b.n	8006b6a <PUMP_Control+0x262>
      break;
 8006b68:	bf00      	nop
}
 8006b6a:	bf00      	nop
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000d24 	.word	0x20000d24
 8006b74:	20000d1e 	.word	0x20000d1e
 8006b78:	20000dd4 	.word	0x20000dd4
 8006b7c:	40010c00 	.word	0x40010c00
 8006b80:	20000cf8 	.word	0x20000cf8
 8006b84:	08012bdc 	.word	0x08012bdc

08006b88 <FAN_Control>:

void FAN_Control()
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  if(FanWaittime == 0)
 8006b8c:	4b42      	ldr	r3, [pc, #264]	; (8006c98 <FAN_Control+0x110>)
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d179      	bne.n	8006c88 <FAN_Control+0x100>
  {
    switch(FanSeq)
 8006b94:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <FAN_Control+0x114>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d877      	bhi.n	8006c8e <FAN_Control+0x106>
 8006b9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <FAN_Control+0x1c>)
 8006ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba4:	08006bb9 	.word	0x08006bb9
 8006ba8:	08006bd5 	.word	0x08006bd5
 8006bac:	08006c8d 	.word	0x08006c8d
 8006bb0:	08006c8f 	.word	0x08006c8f
 8006bb4:	08006c39 	.word	0x08006c39
    {
      case FAN_START:
      {
        //FAN_Speed = 1;
        FanTKPWM = FAN_PWM[FAN_Speed];
 8006bb8:	4b39      	ldr	r3, [pc, #228]	; (8006ca0 <FAN_Control+0x118>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4b39      	ldr	r3, [pc, #228]	; (8006ca4 <FAN_Control+0x11c>)
 8006bc0:	5c9a      	ldrb	r2, [r3, r2]
 8006bc2:	4b39      	ldr	r3, [pc, #228]	; (8006ca8 <FAN_Control+0x120>)
 8006bc4:	701a      	strb	r2, [r3, #0]
        FanSeq = FAN_SPEED;
 8006bc6:	4b35      	ldr	r3, [pc, #212]	; (8006c9c <FAN_Control+0x114>)
 8006bc8:	2202      	movs	r2, #2
 8006bca:	701a      	strb	r2, [r3, #0]
        FanWaittime = 10;
 8006bcc:	4b32      	ldr	r3, [pc, #200]	; (8006c98 <FAN_Control+0x110>)
 8006bce:	220a      	movs	r2, #10
 8006bd0:	801a      	strh	r2, [r3, #0]
        #if _FAN_P
        cliPrintf("\n FAN_START SPD[%0d] TKT_PWM[%0d],Real_PWM[%0d]",FAN_Speed,FanTKPWM,FAN_PWMDuty);
        #endif
      } 
      break;
 8006bd2:	e05c      	b.n	8006c8e <FAN_Control+0x106>

      case FAN_SPEED:
      {
        if(FanTKPWM > FAN_PWMDuty)
 8006bd4:	4b34      	ldr	r3, [pc, #208]	; (8006ca8 <FAN_Control+0x120>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	4b34      	ldr	r3, [pc, #208]	; (8006cac <FAN_Control+0x124>)
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d906      	bls.n	8006bf0 <FAN_Control+0x68>
        {
          ++FAN_PWMDuty;
 8006be2:	4b32      	ldr	r3, [pc, #200]	; (8006cac <FAN_Control+0x124>)
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	3301      	adds	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	4b30      	ldr	r3, [pc, #192]	; (8006cac <FAN_Control+0x124>)
 8006bec:	801a      	strh	r2, [r3, #0]
 8006bee:	e015      	b.n	8006c1c <FAN_Control+0x94>
          #if _FAN_P
          cliPrintf("\n FAN_DUTY UP TKT_PWM[%0d],Real_PWM[%0d]",FanTKPWM,FAN_PWMDuty);
          #endif
        }
        else if(FanTKPWM < FAN_PWMDuty)
 8006bf0:	4b2d      	ldr	r3, [pc, #180]	; (8006ca8 <FAN_Control+0x120>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	4b2d      	ldr	r3, [pc, #180]	; (8006cac <FAN_Control+0x124>)
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d206      	bcs.n	8006c0c <FAN_Control+0x84>
        {
          --FAN_PWMDuty;
 8006bfe:	4b2b      	ldr	r3, [pc, #172]	; (8006cac <FAN_Control+0x124>)
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	4b29      	ldr	r3, [pc, #164]	; (8006cac <FAN_Control+0x124>)
 8006c08:	801a      	strh	r2, [r3, #0]
 8006c0a:	e007      	b.n	8006c1c <FAN_Control+0x94>
          cliPrintf("\n FAN_DUTY DOWN TKT_PWM[%0d],Real_PWM[%0d]",FanTKPWM,FAN_PWMDuty);
          #endif
        }
        else
        {
          FanSeq = FAN_Stay;
 8006c0c:	4b23      	ldr	r3, [pc, #140]	; (8006c9c <FAN_Control+0x114>)
 8006c0e:	2203      	movs	r2, #3
 8006c10:	701a      	strb	r2, [r3, #0]
          FAN_PWMDuty = FanTKPWM;
 8006c12:	4b25      	ldr	r3, [pc, #148]	; (8006ca8 <FAN_Control+0x120>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	4b24      	ldr	r3, [pc, #144]	; (8006cac <FAN_Control+0x124>)
 8006c1a:	801a      	strh	r2, [r3, #0]
          #if _FAN_P
          cliPrintf("\n FAN_DUTY SAME TKT_PWM[%0d],Real_PWM[%0d]",FanTKPWM,FAN_PWMDuty);
          #endif
          
        }
        TIM4->CCR4 = (FAN_PWMDuty*10);
 8006c1c:	4b23      	ldr	r3, [pc, #140]	; (8006cac <FAN_Control+0x124>)
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4b20      	ldr	r3, [pc, #128]	; (8006cb0 <FAN_Control+0x128>)
 8006c2e:	641a      	str	r2, [r3, #64]	; 0x40
        FanWaittime = 10;
 8006c30:	4b19      	ldr	r3, [pc, #100]	; (8006c98 <FAN_Control+0x110>)
 8006c32:	220a      	movs	r2, #10
 8006c34:	801a      	strh	r2, [r3, #0]
      }
      break;
 8006c36:	e02a      	b.n	8006c8e <FAN_Control+0x106>
      case FAN_Stay:
      break;

      case FAN_STOP:
      {
        if(FAN_PWMDuty)
 8006c38:	4b1c      	ldr	r3, [pc, #112]	; (8006cac <FAN_Control+0x124>)
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d006      	beq.n	8006c4e <FAN_Control+0xc6>
        {
          --FAN_PWMDuty;
 8006c40:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <FAN_Control+0x124>)
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	4b18      	ldr	r3, [pc, #96]	; (8006cac <FAN_Control+0x124>)
 8006c4a:	801a      	strh	r2, [r3, #0]
 8006c4c:	e00e      	b.n	8006c6c <FAN_Control+0xe4>
        }
        else
        {
          FanTKPWM = 0;		
 8006c4e:	4b16      	ldr	r3, [pc, #88]	; (8006ca8 <FAN_Control+0x120>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
          FAN_PWMDuty = 0;
 8006c54:	4b15      	ldr	r3, [pc, #84]	; (8006cac <FAN_Control+0x124>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	801a      	strh	r2, [r3, #0]
          uSysStatusFlag &= ~f_FanACT;
 8006c5a:	4b16      	ldr	r3, [pc, #88]	; (8006cb4 <FAN_Control+0x12c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c62:	4a14      	ldr	r2, [pc, #80]	; (8006cb4 <FAN_Control+0x12c>)
 8006c64:	6013      	str	r3, [r2, #0]
          FanSeq = FAN_Stay;
 8006c66:	4b0d      	ldr	r3, [pc, #52]	; (8006c9c <FAN_Control+0x114>)
 8006c68:	2203      	movs	r2, #3
 8006c6a:	701a      	strb	r2, [r3, #0]
        }
        TIM4->CCR4 = (FAN_PWMDuty*10);
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <FAN_Control+0x124>)
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <FAN_Control+0x128>)
 8006c7e:	641a      	str	r2, [r3, #64]	; 0x40
        FanWaittime = 10;
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <FAN_Control+0x110>)
 8006c82:	220a      	movs	r2, #10
 8006c84:	801a      	strh	r2, [r3, #0]
      }
      break;
 8006c86:	e002      	b.n	8006c8e <FAN_Control+0x106>

    }
  }
 8006c88:	bf00      	nop
 8006c8a:	e000      	b.n	8006c8e <FAN_Control+0x106>
      break;
 8006c8c:	bf00      	nop
}
 8006c8e:	bf00      	nop
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	20000d26 	.word	0x20000d26
 8006c9c:	20000d1f 	.word	0x20000d1f
 8006ca0:	20000d32 	.word	0x20000d32
 8006ca4:	08012e0c 	.word	0x08012e0c
 8006ca8:	20000d2a 	.word	0x20000d2a
 8006cac:	20000d2e 	.word	0x20000d2e
 8006cb0:	40000800 	.word	0x40000800
 8006cb4:	20000cf8 	.word	0x20000cf8

08006cb8 <pn_PumpOn>:
//
void pn_PumpOn()
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  else
  {
  	cliPrintf("\n ALL_Water_Tank_Empty");
  }
#endif
  if(NotEmpty_WL())
 8006cbc:	f001 fac0 	bl	8008240 <NotEmpty_WL>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d017      	beq.n	8006cf6 <pn_PumpOn+0x3e>
  {
    if((uSysStatusFlag & f_PumpACT) == 0)
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <pn_PumpOn+0x44>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d111      	bne.n	8006cf6 <pn_PumpOn+0x3e>
    {
      PumpSeq = PUMP_START;
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <pn_PumpOn+0x48>)
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	701a      	strb	r2, [r3, #0]
      uSysStatusFlag |= f_PumpACT;
 8006cd8:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <pn_PumpOn+0x44>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f043 0320 	orr.w	r3, r3, #32
 8006ce0:	4a06      	ldr	r2, [pc, #24]	; (8006cfc <pn_PumpOn+0x44>)
 8006ce2:	6013      	str	r3, [r2, #0]
      uSysStatusFlag |= f_PumpOn;
 8006ce4:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <pn_PumpOn+0x44>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cec:	4a03      	ldr	r2, [pc, #12]	; (8006cfc <pn_PumpOn+0x44>)
 8006cee:	6013      	str	r3, [r2, #0]
      PumpWaittime = 10;
 8006cf0:	4b04      	ldr	r3, [pc, #16]	; (8006d04 <pn_PumpOn+0x4c>)
 8006cf2:	220a      	movs	r2, #10
 8006cf4:	801a      	strh	r2, [r3, #0]
  #if _PUMP_P
      cliPrintf("\n PUMP START-");
  #endif		
    }
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000cf8 	.word	0x20000cf8
 8006d00:	20000d1e 	.word	0x20000d1e
 8006d04:	20000d24 	.word	0x20000d24

08006d08 <all_MotorStop>:
//
void all_MotorStop()
{	
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
  if(u16_DebugFlag == 1)
 8006d0c:	4b7a      	ldr	r3, [pc, #488]	; (8006ef8 <all_MotorStop+0x1f0>)
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d152      	bne.n	8006dba <all_MotorStop+0xb2>
  {
    cliPrintf("\n all_MotorStop");
 8006d14:	4879      	ldr	r0, [pc, #484]	; (8006efc <all_MotorStop+0x1f4>)
 8006d16:	f7fc ff9d 	bl	8003c54 <cliPrintf>
    if(uSysStatusFlag & f_LowBat)			cliPrintf(" -- LOW BATTERY");
 8006d1a:	4b79      	ldr	r3, [pc, #484]	; (8006f00 <all_MotorStop+0x1f8>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <all_MotorStop+0x24>
 8006d26:	4877      	ldr	r0, [pc, #476]	; (8006f04 <all_MotorStop+0x1fc>)
 8006d28:	f7fc ff94 	bl	8003c54 <cliPrintf>
    if(uSysStatusFlag & f_Crash)			cliPrintf(" -- CRASH");
 8006d2c:	4b74      	ldr	r3, [pc, #464]	; (8006f00 <all_MotorStop+0x1f8>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <all_MotorStop+0x36>
 8006d38:	4873      	ldr	r0, [pc, #460]	; (8006f08 <all_MotorStop+0x200>)
 8006d3a:	f7fc ff8b 	bl	8003c54 <cliPrintf>
    if(uSysStatusFlag & f_RFR_Emergency)	cliPrintf(" -- RFR_Emergency");
 8006d3e:	4b70      	ldr	r3, [pc, #448]	; (8006f00 <all_MotorStop+0x1f8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <all_MotorStop+0x48>
 8006d4a:	4870      	ldr	r0, [pc, #448]	; (8006f0c <all_MotorStop+0x204>)
 8006d4c:	f7fc ff82 	bl	8003c54 <cliPrintf>
    if(uSysStatusFlag & f_ADRVnoWaterStop)	  cliPrintf(" -- NO Water During Auto Drive");
 8006d50:	4b6b      	ldr	r3, [pc, #428]	; (8006f00 <all_MotorStop+0x1f8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <all_MotorStop+0x5a>
 8006d5c:	486c      	ldr	r0, [pc, #432]	; (8006f10 <all_MotorStop+0x208>)
 8006d5e:	f7fc ff79 	bl	8003c54 <cliPrintf>
    if(uSysStatusFlag & f_ADRVnoCANData)
 8006d62:	4b67      	ldr	r3, [pc, #412]	; (8006f00 <all_MotorStop+0x1f8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <all_MotorStop+0x7c>
    {
      if(f_commCAN)
 8006d6e:	4b69      	ldr	r3, [pc, #420]	; (8006f14 <all_MotorStop+0x20c>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <all_MotorStop+0x76>
      {
        cliPrintf(" -- NO CAN Comm.");
 8006d76:	4868      	ldr	r0, [pc, #416]	; (8006f18 <all_MotorStop+0x210>)
 8006d78:	f7fc ff6c 	bl	8003c54 <cliPrintf>
 8006d7c:	e002      	b.n	8006d84 <all_MotorStop+0x7c>
      }
      else
      {
        cliPrintf(" -- NO UART Comm.");
 8006d7e:	4867      	ldr	r0, [pc, #412]	; (8006f1c <all_MotorStop+0x214>)
 8006d80:	f7fc ff68 	bl	8003c54 <cliPrintf>
      }
    }
    if(uCommStatusFlag & f_U2DEErr)		cliPrintf(" -- SMT DE Error");
 8006d84:	4b66      	ldr	r3, [pc, #408]	; (8006f20 <all_MotorStop+0x218>)
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <all_MotorStop+0x8e>
 8006d90:	4864      	ldr	r0, [pc, #400]	; (8006f24 <all_MotorStop+0x21c>)
 8006d92:	f7fc ff5f 	bl	8003c54 <cliPrintf>
    if(uCommStatusFlag & f_U2CSumErr)		cliPrintf(" -- SMT Csum Error");
 8006d96:	4b62      	ldr	r3, [pc, #392]	; (8006f20 <all_MotorStop+0x218>)
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <all_MotorStop+0xa0>
 8006da2:	4861      	ldr	r0, [pc, #388]	; (8006f28 <all_MotorStop+0x220>)
 8006da4:	f7fc ff56 	bl	8003c54 <cliPrintf>
    if(uCommStatusFlag & f_U2INTNon)		cliPrintf(" -- SMT INT None");
 8006da8:	4b5d      	ldr	r3, [pc, #372]	; (8006f20 <all_MotorStop+0x218>)
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <all_MotorStop+0xb2>
 8006db4:	485d      	ldr	r0, [pc, #372]	; (8006f2c <all_MotorStop+0x224>)
 8006db6:	f7fc ff4d 	bl	8003c54 <cliPrintf>
    
  }
  
  
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 8006dba:	2300      	movs	r3, #0
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	485b      	ldr	r0, [pc, #364]	; (8006f30 <all_MotorStop+0x228>)
 8006dc2:	f002 ffb6 	bl	8009d32 <HAL_DAC_SetValue>
  if(DRV_PWMDuty)
 8006dc6:	4b5b      	ldr	r3, [pc, #364]	; (8006f34 <all_MotorStop+0x22c>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d020      	beq.n	8006e10 <all_MotorStop+0x108>
  {
    if(uSysStatusFlag & f_Crash)
 8006dce:	4b4c      	ldr	r3, [pc, #304]	; (8006f00 <all_MotorStop+0x1f8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d006      	beq.n	8006de8 <all_MotorStop+0xe0>
    {
      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2208      	movs	r2, #8
 8006dde:	2100      	movs	r1, #0
 8006de0:	4853      	ldr	r0, [pc, #332]	; (8006f30 <all_MotorStop+0x228>)
 8006de2:	f002 ffa6 	bl	8009d32 <HAL_DAC_SetValue>
 8006de6:	e013      	b.n	8006e10 <all_MotorStop+0x108>
    }
    else
    {
      do
      {
        --DRV_PWMDuty;
 8006de8:	4b52      	ldr	r3, [pc, #328]	; (8006f34 <all_MotorStop+0x22c>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	4b50      	ldr	r3, [pc, #320]	; (8006f34 <all_MotorStop+0x22c>)
 8006df2:	701a      	strb	r2, [r3, #0]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DRV_PWMDuty);
 8006df4:	4b4f      	ldr	r3, [pc, #316]	; (8006f34 <all_MotorStop+0x22c>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2208      	movs	r2, #8
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	484c      	ldr	r0, [pc, #304]	; (8006f30 <all_MotorStop+0x228>)
 8006dfe:	f002 ff98 	bl	8009d32 <HAL_DAC_SetValue>
        HAL_Delay(10);
 8006e02:	200a      	movs	r0, #10
 8006e04:	f001 fb94 	bl	8008530 <HAL_Delay>
      }while(DRV_PWMDuty);	
 8006e08:	4b4a      	ldr	r3, [pc, #296]	; (8006f34 <all_MotorStop+0x22c>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1eb      	bne.n	8006de8 <all_MotorStop+0xe0>
    }
  }
  
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 8006e10:	2300      	movs	r3, #0
 8006e12:	2208      	movs	r2, #8
 8006e14:	2100      	movs	r1, #0
 8006e16:	4846      	ldr	r0, [pc, #280]	; (8006f30 <all_MotorStop+0x228>)
 8006e18:	f002 ff8b 	bl	8009d32 <HAL_DAC_SetValue>
  HAL_GPIO_WritePin(GPIOE, E_drvM_BREAK, GPIO_PIN_RESET);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e22:	4845      	ldr	r0, [pc, #276]	; (8006f38 <all_MotorStop+0x230>)
 8006e24:	f003 ff79 	bl	800ad1a <HAL_GPIO_WritePin>
  uSysStatusFlag |= f_DMBreak;
 8006e28:	4b35      	ldr	r3, [pc, #212]	; (8006f00 <all_MotorStop+0x1f8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f043 0304 	orr.w	r3, r3, #4
 8006e30:	4a33      	ldr	r2, [pc, #204]	; (8006f00 <all_MotorStop+0x1f8>)
 8006e32:	6013      	str	r3, [r2, #0]

  DRV_PWMDuty = 0;
 8006e34:	4b3f      	ldr	r3, [pc, #252]	; (8006f34 <all_MotorStop+0x22c>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	701a      	strb	r2, [r3, #0]
  STR_PWMDuty = 0;
 8006e3a:	4b40      	ldr	r3, [pc, #256]	; (8006f3c <all_MotorStop+0x234>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
  DMotorTKPWM = 0;  	
 8006e40:	4b3f      	ldr	r3, [pc, #252]	; (8006f40 <all_MotorStop+0x238>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
  SMotorTKPWM = 0;
 8006e46:	4b3f      	ldr	r3, [pc, #252]	; (8006f44 <all_MotorStop+0x23c>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	701a      	strb	r2, [r3, #0]
  DMotorSeq = DMOTOR_STOP;
 8006e4c:	4b3e      	ldr	r3, [pc, #248]	; (8006f48 <all_MotorStop+0x240>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	701a      	strb	r2, [r3, #0]
  SMotorSeq = SMOTOR_STOP;
 8006e52:	4b3e      	ldr	r3, [pc, #248]	; (8006f4c <all_MotorStop+0x244>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]

  if(LKAUTOSeq)
 8006e58:	4b3d      	ldr	r3, [pc, #244]	; (8006f50 <all_MotorStop+0x248>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <all_MotorStop+0x15e>
  {
    LKAUTOSeq = 0;  	
 8006e60:	4b3b      	ldr	r3, [pc, #236]	; (8006f50 <all_MotorStop+0x248>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	701a      	strb	r2, [r3, #0]
  }

  if(uSysStatusFlag & f_PumpACT)
 8006e66:	4b26      	ldr	r3, [pc, #152]	; (8006f00 <all_MotorStop+0x1f8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <all_MotorStop+0x176>
  {
	  PumpSeq = PUMP_STOP;
 8006e72:	4b38      	ldr	r3, [pc, #224]	; (8006f54 <all_MotorStop+0x24c>)
 8006e74:	220d      	movs	r2, #13
 8006e76:	701a      	strb	r2, [r3, #0]
  	PumpWaittime  = 10;
 8006e78:	4b37      	ldr	r3, [pc, #220]	; (8006f58 <all_MotorStop+0x250>)
 8006e7a:	220a      	movs	r2, #10
 8006e7c:	801a      	strh	r2, [r3, #0]
  }
  
  if(uSysStatusFlag & f_FanACT)
 8006e7e:	4b20      	ldr	r3, [pc, #128]	; (8006f00 <all_MotorStop+0x1f8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d013      	beq.n	8006eb2 <all_MotorStop+0x1aa>
  {
	  if(FanSeq != FAN_STOP)
 8006e8a:	4b34      	ldr	r3, [pc, #208]	; (8006f5c <all_MotorStop+0x254>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b05      	cmp	r3, #5
 8006e90:	d00f      	beq.n	8006eb2 <all_MotorStop+0x1aa>
	  {
      FanTKPWM = 0; 	  
 8006e92:	4b33      	ldr	r3, [pc, #204]	; (8006f60 <all_MotorStop+0x258>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	701a      	strb	r2, [r3, #0]
      FAN_PWMDuty = 0;
 8006e98:	4b32      	ldr	r3, [pc, #200]	; (8006f64 <all_MotorStop+0x25c>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	801a      	strh	r2, [r3, #0]
      TIM4->CCR4 = FAN_PWMDuty;
 8006e9e:	4b31      	ldr	r3, [pc, #196]	; (8006f64 <all_MotorStop+0x25c>)
 8006ea0:	881a      	ldrh	r2, [r3, #0]
 8006ea2:	4b31      	ldr	r3, [pc, #196]	; (8006f68 <all_MotorStop+0x260>)
 8006ea4:	641a      	str	r2, [r3, #64]	; 0x40
      FanSeq = FAN_STOP;
 8006ea6:	4b2d      	ldr	r3, [pc, #180]	; (8006f5c <all_MotorStop+0x254>)
 8006ea8:	2205      	movs	r2, #5
 8006eaa:	701a      	strb	r2, [r3, #0]
      FanWaittime = 10;
 8006eac:	4b2f      	ldr	r3, [pc, #188]	; (8006f6c <all_MotorStop+0x264>)
 8006eae:	220a      	movs	r2, #10
 8006eb0:	801a      	strh	r2, [r3, #0]
	  }
  }

  uSysStatusFlag &= ~f_DMotorACT;
 8006eb2:	4b13      	ldr	r3, [pc, #76]	; (8006f00 <all_MotorStop+0x1f8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f023 0301 	bic.w	r3, r3, #1
 8006eba:	4a11      	ldr	r2, [pc, #68]	; (8006f00 <all_MotorStop+0x1f8>)
 8006ebc:	6013      	str	r3, [r2, #0]
  uSysStatusFlag &= ~f_SMotorACT;
 8006ebe:	4b10      	ldr	r3, [pc, #64]	; (8006f00 <all_MotorStop+0x1f8>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f023 0308 	bic.w	r3, r3, #8
 8006ec6:	4a0e      	ldr	r2, [pc, #56]	; (8006f00 <all_MotorStop+0x1f8>)
 8006ec8:	6013      	str	r3, [r2, #0]
  if(uSysStatusFlag & f_AutoRun)
 8006eca:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <all_MotorStop+0x1f8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00c      	beq.n	8006ef0 <all_MotorStop+0x1e8>
  {
	  uSysStatusFlag &= ~f_AutoRun;
 8006ed6:	4b0a      	ldr	r3, [pc, #40]	; (8006f00 <all_MotorStop+0x1f8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ede:	4a08      	ldr	r2, [pc, #32]	; (8006f00 <all_MotorStop+0x1f8>)
 8006ee0:	6013      	str	r3, [r2, #0]
    if(u16_DebugFlag == 1)
 8006ee2:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <all_MotorStop+0x1f0>)
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d102      	bne.n	8006ef0 <all_MotorStop+0x1e8>
	    cliPrintf("\n Auto Reset");
 8006eea:	4821      	ldr	r0, [pc, #132]	; (8006f70 <all_MotorStop+0x268>)
 8006eec:	f7fc feb2 	bl	8003c54 <cliPrintf>
  }
  Bcon_Control();
 8006ef0:	f000 fd9c 	bl	8007a2c <Bcon_Control>
}
 8006ef4:	bf00      	nop
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20000d08 	.word	0x20000d08
 8006efc:	08012bf0 	.word	0x08012bf0
 8006f00:	20000cf8 	.word	0x20000cf8
 8006f04:	08012c00 	.word	0x08012c00
 8006f08:	08012c10 	.word	0x08012c10
 8006f0c:	08012c1c 	.word	0x08012c1c
 8006f10:	08012c30 	.word	0x08012c30
 8006f14:	20000cf2 	.word	0x20000cf2
 8006f18:	08012c50 	.word	0x08012c50
 8006f1c:	08012c64 	.word	0x08012c64
 8006f20:	20000d00 	.word	0x20000d00
 8006f24:	08012c78 	.word	0x08012c78
 8006f28:	08012c8c 	.word	0x08012c8c
 8006f2c:	08012ca0 	.word	0x08012ca0
 8006f30:	200002dc 	.word	0x200002dc
 8006f34:	20000d2b 	.word	0x20000d2b
 8006f38:	40011800 	.word	0x40011800
 8006f3c:	20000d2c 	.word	0x20000d2c
 8006f40:	20000d28 	.word	0x20000d28
 8006f44:	20000d29 	.word	0x20000d29
 8006f48:	20000d1c 	.word	0x20000d1c
 8006f4c:	20000d1d 	.word	0x20000d1d
 8006f50:	20000d59 	.word	0x20000d59
 8006f54:	20000d1e 	.word	0x20000d1e
 8006f58:	20000d24 	.word	0x20000d24
 8006f5c:	20000d1f 	.word	0x20000d1f
 8006f60:	20000d2a 	.word	0x20000d2a
 8006f64:	20000d2e 	.word	0x20000d2e
 8006f68:	40000800 	.word	0x40000800
 8006f6c:	20000d26 	.word	0x20000d26
 8006f70:	08012cb4 	.word	0x08012cb4

08006f74 <str_MotorLimitStop>:
void str_MotorLimitStop()
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
  SMotorTKPWM = 0;
 8006f78:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <str_MotorLimitStop+0x34>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
  STR_PWMDuty = 0;
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <str_MotorLimitStop+0x38>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	701a      	strb	r2, [r3, #0]
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, STR_PWMDuty);
 8006f84:	4b09      	ldr	r3, [pc, #36]	; (8006fac <str_MotorLimitStop+0x38>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2208      	movs	r2, #8
 8006f8a:	2110      	movs	r1, #16
 8006f8c:	4808      	ldr	r0, [pc, #32]	; (8006fb0 <str_MotorLimitStop+0x3c>)
 8006f8e:	f002 fed0 	bl	8009d32 <HAL_DAC_SetValue>
  uSysStatusFlag &= ~f_SMotorACT;
 8006f92:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <str_MotorLimitStop+0x40>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f023 0308 	bic.w	r3, r3, #8
 8006f9a:	4a06      	ldr	r2, [pc, #24]	; (8006fb4 <str_MotorLimitStop+0x40>)
 8006f9c:	6013      	str	r3, [r2, #0]
  SMotorSeq = SMOTOR_STOP;
 8006f9e:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <str_MotorLimitStop+0x44>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]

}
 8006fa4:	bf00      	nop
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20000d29 	.word	0x20000d29
 8006fac:	20000d2c 	.word	0x20000d2c
 8006fb0:	200002dc 	.word	0x200002dc
 8006fb4:	20000cf8 	.word	0x20000cf8
 8006fb8:	20000d1d 	.word	0x20000d1d

08006fbc <Init_DrvPortSet>:
//
void Init_DrvPortSet()
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, E_drvM_BREAK, GPIO_PIN_SET);
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fc6:	4814      	ldr	r0, [pc, #80]	; (8007018 <Init_DrvPortSet+0x5c>)
 8006fc8:	f003 fea7 	bl	800ad1a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, E_drvM_CWCCW, GPIO_PIN_SET);
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fd2:	4811      	ldr	r0, [pc, #68]	; (8007018 <Init_DrvPortSet+0x5c>)
 8006fd4:	f003 fea1 	bl	800ad1a <HAL_GPIO_WritePin>
  uSysStatusFlag |= f_DMBreak;
 8006fd8:	4b10      	ldr	r3, [pc, #64]	; (800701c <Init_DrvPortSet+0x60>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f043 0304 	orr.w	r3, r3, #4
 8006fe0:	4a0e      	ldr	r2, [pc, #56]	; (800701c <Init_DrvPortSet+0x60>)
 8006fe2:	6013      	str	r3, [r2, #0]
  uSysStatusFlag |= f_DMForward;
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	; (800701c <Init_DrvPortSet+0x60>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f043 0302 	orr.w	r3, r3, #2
 8006fec:	4a0b      	ldr	r2, [pc, #44]	; (800701c <Init_DrvPortSet+0x60>)
 8006fee:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOE, E_strM_CWCCW, GPIO_PIN_RESET);
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ff6:	4808      	ldr	r0, [pc, #32]	; (8007018 <Init_DrvPortSet+0x5c>)
 8006ff8:	f003 fe8f 	bl	800ad1a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, E_strM_BREAK, GPIO_PIN_RESET);
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007002:	4805      	ldr	r0, [pc, #20]	; (8007018 <Init_DrvPortSet+0x5c>)
 8007004:	f003 fe89 	bl	800ad1a <HAL_GPIO_WritePin>
  uSysStatusFlag |= f_SMLeft;
 8007008:	4b04      	ldr	r3, [pc, #16]	; (800701c <Init_DrvPortSet+0x60>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f043 0310 	orr.w	r3, r3, #16
 8007010:	4a02      	ldr	r2, [pc, #8]	; (800701c <Init_DrvPortSet+0x60>)
 8007012:	6013      	str	r3, [r2, #0]
}
 8007014:	bf00      	nop
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40011800 	.word	0x40011800
 800701c:	20000cf8 	.word	0x20000cf8

08007020 <Motor_Control>:
//

void Motor_Control()
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  
  if(uSysStatusFlag & f_DMotorACT)	DRV_Control();
 8007024:	4b13      	ldr	r3, [pc, #76]	; (8007074 <Motor_Control+0x54>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <Motor_Control+0x14>
 8007030:	f7ff f9d2 	bl	80063d8 <DRV_Control>
  if((uSysStatusFlag & f_Crash) == 0)	
 8007034:	4b0f      	ldr	r3, [pc, #60]	; (8007074 <Motor_Control+0x54>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d117      	bne.n	8007070 <Motor_Control+0x50>
  {
    if(uSysStatusFlag & f_SMotorACT)	STR_Control();
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <Motor_Control+0x54>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <Motor_Control+0x30>
 800704c:	f7ff fbac 	bl	80067a8 <STR_Control>
    if(uSysStatusFlag & f_PumpACT)		PUMP_Control();
 8007050:	4b08      	ldr	r3, [pc, #32]	; (8007074 <Motor_Control+0x54>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <Motor_Control+0x40>
 800705c:	f7ff fc54 	bl	8006908 <PUMP_Control>
    if(uSysStatusFlag & f_FanACT)		FAN_Control();
 8007060:	4b04      	ldr	r3, [pc, #16]	; (8007074 <Motor_Control+0x54>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <Motor_Control+0x50>
 800706c:	f7ff fd8c 	bl	8006b88 <FAN_Control>
  }
}
 8007070:	bf00      	nop
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20000cf8 	.word	0x20000cf8

08007078 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8007084:	2301      	movs	r3, #1
 8007086:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	60da      	str	r2, [r3, #12]

  return ret;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr

080070ac <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80070b8:	2301      	movs	r3, #1
 80070ba:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80070bc:	2300      	movs	r3, #0
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	e026      	b.n	8007110 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d009      	beq.n	80070de <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	441a      	add	r2, r3
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	440b      	add	r3, r1
 80070da:	7812      	ldrb	r2, [r2, #0]
 80070dc:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d00c      	beq.n	8007104 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	3301      	adds	r3, #1
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	6892      	ldr	r2, [r2, #8]
 80070f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80070f8:	fb01 f202 	mul.w	r2, r1, r2
 80070fc:	1a9a      	subs	r2, r3, r2
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	605a      	str	r2, [r3, #4]
 8007102:	e002      	b.n	800710a <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8007104:	2300      	movs	r3, #0
 8007106:	75fb      	strb	r3, [r7, #23]
      break;
 8007108:	e006      	b.n	8007118 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3301      	adds	r3, #1
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d8d4      	bhi.n	80070c2 <qbufferRead+0x16>
    }
  }

  return ret;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
}
 800711a:	4618      	mov	r0, r3
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6892      	ldr	r2, [r2, #8]
 800713a:	fbb3 f1f2 	udiv	r1, r3, r2
 800713e:	fb01 f202 	mul.w	r2, r1, r2
 8007142:	1a9b      	subs	r3, r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  return ret;
 8007146:	68fb      	ldr	r3, [r7, #12]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr
	...

08007154 <init_set_read>:


*/

void init_set_read()
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af02      	add	r7, sp, #8
	at24_HAL_ReadBytes(&hi2c1, 0xA0, 0, info, 9);
 800715a:	2309      	movs	r3, #9
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	4b42      	ldr	r3, [pc, #264]	; (8007268 <init_set_read+0x114>)
 8007160:	2200      	movs	r2, #0
 8007162:	21a0      	movs	r1, #160	; 0xa0
 8007164:	4841      	ldr	r0, [pc, #260]	; (800726c <init_set_read+0x118>)
 8007166:	f7fb fc57 	bl	8002a18 <at24_HAL_ReadBytes>
	
	load_value.Motor_type   = (uint8_t)info[0];
 800716a:	4b3f      	ldr	r3, [pc, #252]	; (8007268 <init_set_read+0x114>)
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	4b40      	ldr	r3, [pc, #256]	; (8007270 <init_set_read+0x11c>)
 8007170:	701a      	strb	r2, [r3, #0]
	load_value.Sensor_type  = (uint8_t)info[1];
 8007172:	4b3d      	ldr	r3, [pc, #244]	; (8007268 <init_set_read+0x114>)
 8007174:	785a      	ldrb	r2, [r3, #1]
 8007176:	4b3e      	ldr	r3, [pc, #248]	; (8007270 <init_set_read+0x11c>)
 8007178:	705a      	strb	r2, [r3, #1]
	load_value.Remote_type  = (uint8_t)info[2];
 800717a:	4b3b      	ldr	r3, [pc, #236]	; (8007268 <init_set_read+0x114>)
 800717c:	789a      	ldrb	r2, [r3, #2]
 800717e:	4b3c      	ldr	r3, [pc, #240]	; (8007270 <init_set_read+0x11c>)
 8007180:	709a      	strb	r2, [r3, #2]
	load_value.Battery_type = (uint8_t)info[3];
 8007182:	4b39      	ldr	r3, [pc, #228]	; (8007268 <init_set_read+0x114>)
 8007184:	78da      	ldrb	r2, [r3, #3]
 8007186:	4b3a      	ldr	r3, [pc, #232]	; (8007270 <init_set_read+0x11c>)
 8007188:	70da      	strb	r2, [r3, #3]
	load_value.IDLE_SPD     = (uint8_t)info[4];
 800718a:	4b37      	ldr	r3, [pc, #220]	; (8007268 <init_set_read+0x114>)
 800718c:	791a      	ldrb	r2, [r3, #4]
 800718e:	4b38      	ldr	r3, [pc, #224]	; (8007270 <init_set_read+0x11c>)
 8007190:	711a      	strb	r2, [r3, #4]
	load_value.ATD_LOW_SPD  = (uint8_t)info[5];
 8007192:	4b35      	ldr	r3, [pc, #212]	; (8007268 <init_set_read+0x114>)
 8007194:	795a      	ldrb	r2, [r3, #5]
 8007196:	4b36      	ldr	r3, [pc, #216]	; (8007270 <init_set_read+0x11c>)
 8007198:	715a      	strb	r2, [r3, #5]
	load_value.ATD_HIGH_SPD = (uint8_t)info[6];
 800719a:	4b33      	ldr	r3, [pc, #204]	; (8007268 <init_set_read+0x114>)
 800719c:	799a      	ldrb	r2, [r3, #6]
 800719e:	4b34      	ldr	r3, [pc, #208]	; (8007270 <init_set_read+0x11c>)
 80071a0:	719a      	strb	r2, [r3, #6]
	load_value.Spray_type   = (uint8_t)info[7];
 80071a2:	4b31      	ldr	r3, [pc, #196]	; (8007268 <init_set_read+0x114>)
 80071a4:	79da      	ldrb	r2, [r3, #7]
 80071a6:	4b32      	ldr	r3, [pc, #200]	; (8007270 <init_set_read+0x11c>)
 80071a8:	71da      	strb	r2, [r3, #7]
	load_value.rtk_type     = (uint8_t)info[8];
 80071aa:	4b2f      	ldr	r3, [pc, #188]	; (8007268 <init_set_read+0x114>)
 80071ac:	7a1a      	ldrb	r2, [r3, #8]
 80071ae:	4b30      	ldr	r3, [pc, #192]	; (8007270 <init_set_read+0x11c>)
 80071b0:	721a      	strb	r2, [r3, #8]
	
	if (load_value.rtk_type == 255 )
 80071b2:	4b2f      	ldr	r3, [pc, #188]	; (8007270 <init_set_read+0x11c>)
 80071b4:	7a1b      	ldrb	r3, [r3, #8]
 80071b6:	2bff      	cmp	r3, #255	; 0xff
 80071b8:	d152      	bne.n	8007260 <init_set_read+0x10c>
	{
		info[0] = 2; // DMCS  
 80071ba:	4b2b      	ldr	r3, [pc, #172]	; (8007268 <init_set_read+0x114>)
 80071bc:	2202      	movs	r2, #2
 80071be:	701a      	strb	r2, [r3, #0]
		info[1] = 2; // NPN  확인필요
 80071c0:	4b29      	ldr	r3, [pc, #164]	; (8007268 <init_set_read+0x114>)
 80071c2:	2202      	movs	r2, #2
 80071c4:	705a      	strb	r2, [r3, #1]
		info[2] = 1; // 1이 RF Master 
 80071c6:	4b28      	ldr	r3, [pc, #160]	; (8007268 <init_set_read+0x114>)
 80071c8:	2201      	movs	r2, #1
 80071ca:	709a      	strb	r2, [r3, #2]
		info[3] = 2; // 롱기스트
 80071cc:	4b26      	ldr	r3, [pc, #152]	; (8007268 <init_set_read+0x114>)
 80071ce:	2202      	movs	r2, #2
 80071d0:	70da      	strb	r2, [r3, #3]
		info[4] = 15;     
 80071d2:	4b25      	ldr	r3, [pc, #148]	; (8007268 <init_set_read+0x114>)
 80071d4:	220f      	movs	r2, #15
 80071d6:	711a      	strb	r2, [r3, #4]
		info[5] = 103;  
 80071d8:	4b23      	ldr	r3, [pc, #140]	; (8007268 <init_set_read+0x114>)
 80071da:	2267      	movs	r2, #103	; 0x67
 80071dc:	715a      	strb	r2, [r3, #5]
		info[6] = 115; 
 80071de:	4b22      	ldr	r3, [pc, #136]	; (8007268 <init_set_read+0x114>)
 80071e0:	2273      	movs	r2, #115	; 0x73
 80071e2:	719a      	strb	r2, [r3, #6]
		info[7] = 1; // 1이 분무기타입 
 80071e4:	4b20      	ldr	r3, [pc, #128]	; (8007268 <init_set_read+0x114>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	71da      	strb	r2, [r3, #7]
		info[8] = 1; // 1이 RTK type
 80071ea:	4b1f      	ldr	r3, [pc, #124]	; (8007268 <init_set_read+0x114>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	721a      	strb	r2, [r3, #8]

		at24_HAL_WriteBytes(&hi2c1, 0xA0, 0, &info, 9);	
 80071f0:	2309      	movs	r3, #9
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	4b1c      	ldr	r3, [pc, #112]	; (8007268 <init_set_read+0x114>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	21a0      	movs	r1, #160	; 0xa0
 80071fa:	481c      	ldr	r0, [pc, #112]	; (800726c <init_set_read+0x118>)
 80071fc:	f7fb fb95 	bl	800292a <at24_HAL_WriteBytes>
		HAL_Delay(1000);
 8007200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007204:	f001 f994 	bl	8008530 <HAL_Delay>
		at24_HAL_ReadBytes(&hi2c1, 0xA0, 0, info, 9);
 8007208:	2309      	movs	r3, #9
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	4b16      	ldr	r3, [pc, #88]	; (8007268 <init_set_read+0x114>)
 800720e:	2200      	movs	r2, #0
 8007210:	21a0      	movs	r1, #160	; 0xa0
 8007212:	4816      	ldr	r0, [pc, #88]	; (800726c <init_set_read+0x118>)
 8007214:	f7fb fc00 	bl	8002a18 <at24_HAL_ReadBytes>
		load_value.Motor_type   = (uint8_t)info[0];
 8007218:	4b13      	ldr	r3, [pc, #76]	; (8007268 <init_set_read+0x114>)
 800721a:	781a      	ldrb	r2, [r3, #0]
 800721c:	4b14      	ldr	r3, [pc, #80]	; (8007270 <init_set_read+0x11c>)
 800721e:	701a      	strb	r2, [r3, #0]
		load_value.Sensor_type  = (uint8_t)info[1];
 8007220:	4b11      	ldr	r3, [pc, #68]	; (8007268 <init_set_read+0x114>)
 8007222:	785a      	ldrb	r2, [r3, #1]
 8007224:	4b12      	ldr	r3, [pc, #72]	; (8007270 <init_set_read+0x11c>)
 8007226:	705a      	strb	r2, [r3, #1]
		load_value.Remote_type  = (uint8_t)info[2];
 8007228:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <init_set_read+0x114>)
 800722a:	789a      	ldrb	r2, [r3, #2]
 800722c:	4b10      	ldr	r3, [pc, #64]	; (8007270 <init_set_read+0x11c>)
 800722e:	709a      	strb	r2, [r3, #2]
		load_value.Battery_type = (uint8_t)info[3];
 8007230:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <init_set_read+0x114>)
 8007232:	78da      	ldrb	r2, [r3, #3]
 8007234:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <init_set_read+0x11c>)
 8007236:	70da      	strb	r2, [r3, #3]
		load_value.IDLE_SPD     = (uint8_t)info[4];
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <init_set_read+0x114>)
 800723a:	791a      	ldrb	r2, [r3, #4]
 800723c:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <init_set_read+0x11c>)
 800723e:	711a      	strb	r2, [r3, #4]
		load_value.ATD_LOW_SPD  = (uint8_t)info[5];
 8007240:	4b09      	ldr	r3, [pc, #36]	; (8007268 <init_set_read+0x114>)
 8007242:	795a      	ldrb	r2, [r3, #5]
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <init_set_read+0x11c>)
 8007246:	715a      	strb	r2, [r3, #5]
		load_value.ATD_HIGH_SPD = (uint8_t)info[6];
 8007248:	4b07      	ldr	r3, [pc, #28]	; (8007268 <init_set_read+0x114>)
 800724a:	799a      	ldrb	r2, [r3, #6]
 800724c:	4b08      	ldr	r3, [pc, #32]	; (8007270 <init_set_read+0x11c>)
 800724e:	719a      	strb	r2, [r3, #6]
		load_value.Spray_type   = (uint8_t)info[7];
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <init_set_read+0x114>)
 8007252:	79da      	ldrb	r2, [r3, #7]
 8007254:	4b06      	ldr	r3, [pc, #24]	; (8007270 <init_set_read+0x11c>)
 8007256:	71da      	strb	r2, [r3, #7]
		load_value.rtk_type     = (uint8_t)info[8];
 8007258:	4b03      	ldr	r3, [pc, #12]	; (8007268 <init_set_read+0x114>)
 800725a:	7a1a      	ldrb	r2, [r3, #8]
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <init_set_read+0x11c>)
 800725e:	721a      	strb	r2, [r3, #8]
	}
	
}
 8007260:	bf00      	nop
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	2000003c 	.word	0x2000003c
 800726c:	200002f0 	.word	0x200002f0
 8007270:	20000dd4 	.word	0x20000dd4

08007274 <init_set_save>:

void init_set_save()
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af02      	add	r7, sp, #8
	
	info[0] = (char)load_value.Motor_type;   
 800727a:	4b17      	ldr	r3, [pc, #92]	; (80072d8 <init_set_save+0x64>)
 800727c:	781a      	ldrb	r2, [r3, #0]
 800727e:	4b17      	ldr	r3, [pc, #92]	; (80072dc <init_set_save+0x68>)
 8007280:	701a      	strb	r2, [r3, #0]
	info[1] = (char)load_value.Sensor_type;  
 8007282:	4b15      	ldr	r3, [pc, #84]	; (80072d8 <init_set_save+0x64>)
 8007284:	785a      	ldrb	r2, [r3, #1]
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <init_set_save+0x68>)
 8007288:	705a      	strb	r2, [r3, #1]
	info[2] = (char)load_value.Remote_type; 
 800728a:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <init_set_save+0x64>)
 800728c:	789a      	ldrb	r2, [r3, #2]
 800728e:	4b13      	ldr	r3, [pc, #76]	; (80072dc <init_set_save+0x68>)
 8007290:	709a      	strb	r2, [r3, #2]
	info[3] = (char)load_value.Battery_type;
 8007292:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <init_set_save+0x64>)
 8007294:	78da      	ldrb	r2, [r3, #3]
 8007296:	4b11      	ldr	r3, [pc, #68]	; (80072dc <init_set_save+0x68>)
 8007298:	70da      	strb	r2, [r3, #3]
	info[4] = (char)load_value.IDLE_SPD;     
 800729a:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <init_set_save+0x64>)
 800729c:	791a      	ldrb	r2, [r3, #4]
 800729e:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <init_set_save+0x68>)
 80072a0:	711a      	strb	r2, [r3, #4]
	info[5] = (char)load_value.ATD_LOW_SPD;  
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <init_set_save+0x64>)
 80072a4:	795a      	ldrb	r2, [r3, #5]
 80072a6:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <init_set_save+0x68>)
 80072a8:	715a      	strb	r2, [r3, #5]
	info[6] = (char)load_value.ATD_HIGH_SPD;
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <init_set_save+0x64>)
 80072ac:	799a      	ldrb	r2, [r3, #6]
 80072ae:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <init_set_save+0x68>)
 80072b0:	719a      	strb	r2, [r3, #6]
	info[7] = (char)load_value.Spray_type; 
 80072b2:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <init_set_save+0x64>)
 80072b4:	79da      	ldrb	r2, [r3, #7]
 80072b6:	4b09      	ldr	r3, [pc, #36]	; (80072dc <init_set_save+0x68>)
 80072b8:	71da      	strb	r2, [r3, #7]
	info[8] = (char)load_value.rtk_type; 
 80072ba:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <init_set_save+0x64>)
 80072bc:	7a1a      	ldrb	r2, [r3, #8]
 80072be:	4b07      	ldr	r3, [pc, #28]	; (80072dc <init_set_save+0x68>)
 80072c0:	721a      	strb	r2, [r3, #8]
	
	at24_HAL_WriteBytes(&hi2c1, 0xA0, 0, &info, 9);
 80072c2:	2309      	movs	r3, #9
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	4b05      	ldr	r3, [pc, #20]	; (80072dc <init_set_save+0x68>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	21a0      	movs	r1, #160	; 0xa0
 80072cc:	4804      	ldr	r0, [pc, #16]	; (80072e0 <init_set_save+0x6c>)
 80072ce:	f7fb fb2c 	bl	800292a <at24_HAL_WriteBytes>
}
 80072d2:	bf00      	nop
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20000dd4 	.word	0x20000dd4
 80072dc:	2000003c 	.word	0x2000003c
 80072e0:	200002f0 	.word	0x200002f0

080072e4 <can1_Trans8b>:




void can1_Trans8b(uint8_t Command) 
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	4603      	mov	r3, r0
 80072ec:	71fb      	strb	r3, [r7, #7]
  //uint8_t ii;
  #if 1 
  ++u32can_TrnCnt;
 80072ee:	4b4e      	ldr	r3, [pc, #312]	; (8007428 <can1_Trans8b+0x144>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3301      	adds	r3, #1
 80072f4:	4a4c      	ldr	r2, [pc, #304]	; (8007428 <can1_Trans8b+0x144>)
 80072f6:	6013      	str	r3, [r2, #0]
  switch(Command)
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d065      	beq.n	80073ca <can1_Trans8b+0xe6>
 80072fe:	2b03      	cmp	r3, #3
 8007300:	f300 808d 	bgt.w	800741e <can1_Trans8b+0x13a>
 8007304:	2b01      	cmp	r3, #1
 8007306:	d002      	beq.n	800730e <can1_Trans8b+0x2a>
 8007308:	2b02      	cmp	r3, #2
 800730a:	d041      	beq.n	8007390 <can1_Trans8b+0xac>
		txHeader.StdId = 0x501;
		HAL_CAN_AddTxMessage(&hcan, &txHeader, &TxMessage.Data, &TxMailbox);
	}

	default:
		break;
 800730c:	e087      	b.n	800741e <can1_Trans8b+0x13a>
		TxMessage.Data[0] = (uint8_t)(uSysStatusFlag & 0x000000FF); 
 800730e:	4b47      	ldr	r3, [pc, #284]	; (800742c <can1_Trans8b+0x148>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	4b46      	ldr	r3, [pc, #280]	; (8007430 <can1_Trans8b+0x14c>)
 8007316:	72da      	strb	r2, [r3, #11]
		TxMessage.Data[1] = (uint8_t)(uSysStatusFlag >> 8 & 0x000000FF);
 8007318:	4b44      	ldr	r3, [pc, #272]	; (800742c <can1_Trans8b+0x148>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	0a1b      	lsrs	r3, r3, #8
 800731e:	b2da      	uxtb	r2, r3
 8007320:	4b43      	ldr	r3, [pc, #268]	; (8007430 <can1_Trans8b+0x14c>)
 8007322:	731a      	strb	r2, [r3, #12]
		TxMessage.Data[0] &= ~0x40;
 8007324:	4b42      	ldr	r3, [pc, #264]	; (8007430 <can1_Trans8b+0x14c>)
 8007326:	7adb      	ldrb	r3, [r3, #11]
 8007328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800732c:	b2da      	uxtb	r2, r3
 800732e:	4b40      	ldr	r3, [pc, #256]	; (8007430 <can1_Trans8b+0x14c>)
 8007330:	72da      	strb	r2, [r3, #11]
		txHeader.StdId = 0x737;
 8007332:	4b40      	ldr	r3, [pc, #256]	; (8007434 <can1_Trans8b+0x150>)
 8007334:	f240 7237 	movw	r2, #1847	; 0x737
 8007338:	601a      	str	r2, [r3, #0]
		if(uSysStatusFlag & f_RFR_Emergency)
 800733a:	4b3c      	ldr	r3, [pc, #240]	; (800742c <can1_Trans8b+0x148>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <can1_Trans8b+0x78>
			if(LKAUTOSeq >= 6)
 8007346:	4b3c      	ldr	r3, [pc, #240]	; (8007438 <can1_Trans8b+0x154>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b05      	cmp	r3, #5
 800734c:	d906      	bls.n	800735c <can1_Trans8b+0x78>
				TxMessage.Data[1] &= 0xBF;			/* 1011 1111 RFR_Emergency �� �����ؼ� ����. */				
 800734e:	4b38      	ldr	r3, [pc, #224]	; (8007430 <can1_Trans8b+0x14c>)
 8007350:	7b1b      	ldrb	r3, [r3, #12]
 8007352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007356:	b2da      	uxtb	r2, r3
 8007358:	4b35      	ldr	r3, [pc, #212]	; (8007430 <can1_Trans8b+0x14c>)
 800735a:	731a      	strb	r2, [r3, #12]
		if(can_DbgCommand == 1)
 800735c:	4b37      	ldr	r3, [pc, #220]	; (800743c <can1_Trans8b+0x158>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d10e      	bne.n	8007382 <can1_Trans8b+0x9e>
			printf("\n TRS_ID[%0x] DLC[%0d] DT0[%0x] DT1[%0x]",TxMessage.StdId,TxMessage.DLC,TxMessage.Data[0],TxMessage.Data[1]);
 8007364:	4b32      	ldr	r3, [pc, #200]	; (8007430 <can1_Trans8b+0x14c>)
 8007366:	6819      	ldr	r1, [r3, #0]
 8007368:	4b31      	ldr	r3, [pc, #196]	; (8007430 <can1_Trans8b+0x14c>)
 800736a:	7a9b      	ldrb	r3, [r3, #10]
 800736c:	461a      	mov	r2, r3
 800736e:	4b30      	ldr	r3, [pc, #192]	; (8007430 <can1_Trans8b+0x14c>)
 8007370:	7adb      	ldrb	r3, [r3, #11]
 8007372:	4618      	mov	r0, r3
 8007374:	4b2e      	ldr	r3, [pc, #184]	; (8007430 <can1_Trans8b+0x14c>)
 8007376:	7b1b      	ldrb	r3, [r3, #12]
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	4603      	mov	r3, r0
 800737c:	4830      	ldr	r0, [pc, #192]	; (8007440 <can1_Trans8b+0x15c>)
 800737e:	f007 fa6b 	bl	800e858 <iprintf>
	    HAL_CAN_AddTxMessage(&hcan, &txHeader, &TxMessage.Data, &TxMailbox);
 8007382:	4b30      	ldr	r3, [pc, #192]	; (8007444 <can1_Trans8b+0x160>)
 8007384:	4a30      	ldr	r2, [pc, #192]	; (8007448 <can1_Trans8b+0x164>)
 8007386:	492b      	ldr	r1, [pc, #172]	; (8007434 <can1_Trans8b+0x150>)
 8007388:	4830      	ldr	r0, [pc, #192]	; (800744c <can1_Trans8b+0x168>)
 800738a:	f001 feda 	bl	8009142 <HAL_CAN_AddTxMessage>
	break;
 800738e:	e047      	b.n	8007420 <can1_Trans8b+0x13c>
		TxMessage.Data[0] = (uint8_t)(uSysStatusFlag & 0x000000FF); 
 8007390:	4b26      	ldr	r3, [pc, #152]	; (800742c <can1_Trans8b+0x148>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	b2da      	uxtb	r2, r3
 8007396:	4b26      	ldr	r3, [pc, #152]	; (8007430 <can1_Trans8b+0x14c>)
 8007398:	72da      	strb	r2, [r3, #11]
		TxMessage.Data[0] |= 0x40;
 800739a:	4b25      	ldr	r3, [pc, #148]	; (8007430 <can1_Trans8b+0x14c>)
 800739c:	7adb      	ldrb	r3, [r3, #11]
 800739e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	4b22      	ldr	r3, [pc, #136]	; (8007430 <can1_Trans8b+0x14c>)
 80073a6:	72da      	strb	r2, [r3, #11]
		TxMessage.Data[1] = (uint8_t)(uSysStatusFlag >> 8 & 0x000000FF);
 80073a8:	4b20      	ldr	r3, [pc, #128]	; (800742c <can1_Trans8b+0x148>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	0a1b      	lsrs	r3, r3, #8
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	4b1f      	ldr	r3, [pc, #124]	; (8007430 <can1_Trans8b+0x14c>)
 80073b2:	731a      	strb	r2, [r3, #12]
		txHeader.StdId = 0x737;
 80073b4:	4b1f      	ldr	r3, [pc, #124]	; (8007434 <can1_Trans8b+0x150>)
 80073b6:	f240 7237 	movw	r2, #1847	; 0x737
 80073ba:	601a      	str	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan, &txHeader, &TxMessage.Data, &TxMailbox);
 80073bc:	4b21      	ldr	r3, [pc, #132]	; (8007444 <can1_Trans8b+0x160>)
 80073be:	4a22      	ldr	r2, [pc, #136]	; (8007448 <can1_Trans8b+0x164>)
 80073c0:	491c      	ldr	r1, [pc, #112]	; (8007434 <can1_Trans8b+0x150>)
 80073c2:	4822      	ldr	r0, [pc, #136]	; (800744c <can1_Trans8b+0x168>)
 80073c4:	f001 febd 	bl	8009142 <HAL_CAN_AddTxMessage>
	break;
 80073c8:	e02a      	b.n	8007420 <can1_Trans8b+0x13c>
		TxMessage.Data[0] = CAN_RxData_Error[0];
 80073ca:	4b21      	ldr	r3, [pc, #132]	; (8007450 <can1_Trans8b+0x16c>)
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	4b18      	ldr	r3, [pc, #96]	; (8007430 <can1_Trans8b+0x14c>)
 80073d0:	72da      	strb	r2, [r3, #11]
		TxMessage.Data[1] = CAN_RxData_Error[1];
 80073d2:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <can1_Trans8b+0x16c>)
 80073d4:	785a      	ldrb	r2, [r3, #1]
 80073d6:	4b16      	ldr	r3, [pc, #88]	; (8007430 <can1_Trans8b+0x14c>)
 80073d8:	731a      	strb	r2, [r3, #12]
		TxMessage.Data[2] = CAN_RxData_Error[2];	
 80073da:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <can1_Trans8b+0x16c>)
 80073dc:	789a      	ldrb	r2, [r3, #2]
 80073de:	4b14      	ldr	r3, [pc, #80]	; (8007430 <can1_Trans8b+0x14c>)
 80073e0:	735a      	strb	r2, [r3, #13]
		TxMessage.Data[3] = CAN_RxData_Error[3];
 80073e2:	4b1b      	ldr	r3, [pc, #108]	; (8007450 <can1_Trans8b+0x16c>)
 80073e4:	78da      	ldrb	r2, [r3, #3]
 80073e6:	4b12      	ldr	r3, [pc, #72]	; (8007430 <can1_Trans8b+0x14c>)
 80073e8:	739a      	strb	r2, [r3, #14]
		TxMessage.Data[4] = CAN_RxData_Error[4];	
 80073ea:	4b19      	ldr	r3, [pc, #100]	; (8007450 <can1_Trans8b+0x16c>)
 80073ec:	791a      	ldrb	r2, [r3, #4]
 80073ee:	4b10      	ldr	r3, [pc, #64]	; (8007430 <can1_Trans8b+0x14c>)
 80073f0:	73da      	strb	r2, [r3, #15]
		TxMessage.Data[5] = CAN_RxData_Error[5];
 80073f2:	4b17      	ldr	r3, [pc, #92]	; (8007450 <can1_Trans8b+0x16c>)
 80073f4:	795a      	ldrb	r2, [r3, #5]
 80073f6:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <can1_Trans8b+0x14c>)
 80073f8:	741a      	strb	r2, [r3, #16]
		TxMessage.Data[6] = CAN_RxData_Error[6];	
 80073fa:	4b15      	ldr	r3, [pc, #84]	; (8007450 <can1_Trans8b+0x16c>)
 80073fc:	799a      	ldrb	r2, [r3, #6]
 80073fe:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <can1_Trans8b+0x14c>)
 8007400:	745a      	strb	r2, [r3, #17]
		TxMessage.Data[7] = CAN_RxData_Error[7];
 8007402:	4b13      	ldr	r3, [pc, #76]	; (8007450 <can1_Trans8b+0x16c>)
 8007404:	79da      	ldrb	r2, [r3, #7]
 8007406:	4b0a      	ldr	r3, [pc, #40]	; (8007430 <can1_Trans8b+0x14c>)
 8007408:	749a      	strb	r2, [r3, #18]
		txHeader.StdId = 0x501;
 800740a:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <can1_Trans8b+0x150>)
 800740c:	f240 5201 	movw	r2, #1281	; 0x501
 8007410:	601a      	str	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan, &txHeader, &TxMessage.Data, &TxMailbox);
 8007412:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <can1_Trans8b+0x160>)
 8007414:	4a0c      	ldr	r2, [pc, #48]	; (8007448 <can1_Trans8b+0x164>)
 8007416:	4907      	ldr	r1, [pc, #28]	; (8007434 <can1_Trans8b+0x150>)
 8007418:	480c      	ldr	r0, [pc, #48]	; (800744c <can1_Trans8b+0x168>)
 800741a:	f001 fe92 	bl	8009142 <HAL_CAN_AddTxMessage>
		break;
 800741e:	bf00      	nop
	
  }
  #endif
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20000d18 	.word	0x20000d18
 800742c:	20000cf8 	.word	0x20000cf8
 8007430:	20000d70 	.word	0x20000d70
 8007434:	20000d8c 	.word	0x20000d8c
 8007438:	20000d59 	.word	0x20000d59
 800743c:	20000d41 	.word	0x20000d41
 8007440:	08012cc4 	.word	0x08012cc4
 8007444:	20000d84 	.word	0x20000d84
 8007448:	20000d7b 	.word	0x20000d7b
 800744c:	200002b4 	.word	0x200002b4
 8007450:	20000d68 	.word	0x20000d68

08007454 <Event_30ms>:
uint8_t NotEmpty_WL();
uint8_t count;
uint8_t center_start = 0;

void Event_30ms()
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  uTimerFlag &= ~TIM_30ms;
 8007458:	4b19      	ldr	r3, [pc, #100]	; (80074c0 <Event_30ms+0x6c>)
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	f023 0304 	bic.w	r3, r3, #4
 8007460:	b29a      	uxth	r2, r3
 8007462:	4b17      	ldr	r3, [pc, #92]	; (80074c0 <Event_30ms+0x6c>)
 8007464:	801a      	strh	r2, [r3, #0]
  get_adc_value();
 8007466:	f7fb fb5d 	bl	8002b24 <get_adc_value>
  if(RK_PermitTime)	--RK_PermitTime;
 800746a:	4b16      	ldr	r3, [pc, #88]	; (80074c4 <Event_30ms+0x70>)
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d005      	beq.n	800747e <Event_30ms+0x2a>
 8007472:	4b14      	ldr	r3, [pc, #80]	; (80074c4 <Event_30ms+0x70>)
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <Event_30ms+0x70>)
 800747c:	801a      	strh	r2, [r3, #0]
  if(f_commCAN)
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <Event_30ms+0x74>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d017      	beq.n	80074b6 <Event_30ms+0x62>
  {
	if ( center_start == 0 )
 8007486:	4b11      	ldr	r3, [pc, #68]	; (80074cc <Event_30ms+0x78>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d103      	bne.n	8007496 <Event_30ms+0x42>
	{
		can1_Trans8b(0x01);	//  CAN
 800748e:	2001      	movs	r0, #1
 8007490:	f7ff ff28 	bl	80072e4 <can1_Trans8b>
 8007494:	e00f      	b.n	80074b6 <Event_30ms+0x62>
	}
	else 
	{
		can1_Trans8b(0x02);
 8007496:	2002      	movs	r0, #2
 8007498:	f7ff ff24 	bl	80072e4 <can1_Trans8b>
		count++;
 800749c:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <Event_30ms+0x7c>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	3301      	adds	r3, #1
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <Event_30ms+0x7c>)
 80074a6:	701a      	strb	r2, [r3, #0]
		if ( count  > 3)
 80074a8:	4b09      	ldr	r3, [pc, #36]	; (80074d0 <Event_30ms+0x7c>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d902      	bls.n	80074b6 <Event_30ms+0x62>
		{
			center_start =0;
 80074b0:	4b06      	ldr	r3, [pc, #24]	; (80074cc <Event_30ms+0x78>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	701a      	strb	r2, [r3, #0]
		}
	}
  }
  Bcon_Control();
 80074b6:	f000 fab9 	bl	8007a2c <Bcon_Control>
}
 80074ba:	bf00      	nop
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000cf4 	.word	0x20000cf4
 80074c4:	20000d30 	.word	0x20000d30
 80074c8:	20000cf2 	.word	0x20000cf2
 80074cc:	20000dde 	.word	0x20000dde
 80074d0:	20000ddd 	.word	0x20000ddd

080074d4 <Event_10ms>:

void Event_10ms()
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
  uTimerFlag &= ~TIM_10ms;  
 80074d8:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <Event_10ms+0x1c>)
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	f023 0302 	bic.w	r3, r3, #2
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	4b03      	ldr	r3, [pc, #12]	; (80074f0 <Event_10ms+0x1c>)
 80074e4:	801a      	strh	r2, [r3, #0]
}
 80074e6:	bf00      	nop
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bc80      	pop	{r7}
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	20000cf4 	.word	0x20000cf4

080074f4 <Event_200ms>:

void Event_200ms()
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
	uTimerFlag &= ~TIM_200ms;
 80074f8:	4b07      	ldr	r3, [pc, #28]	; (8007518 <Event_200ms+0x24>)
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	f023 0320 	bic.w	r3, r3, #32
 8007500:	b29a      	uxth	r2, r3
 8007502:	4b05      	ldr	r3, [pc, #20]	; (8007518 <Event_200ms+0x24>)
 8007504:	801a      	strh	r2, [r3, #0]
	G_LED_Toggle(); 	  	/* Green led로 FIX */
 8007506:	f000 f8cd 	bl	80076a4 <G_LED_Toggle>
	WL_Check();
 800750a:	f000 fcaf 	bl	8007e6c <WL_Check>
	Battery_Check();
 800750e:	f000 f92f 	bl	8007770 <Battery_Check>
		break;
	default:
		break;
	}
  #endif 
}
 8007512:	bf00      	nop
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20000cf4 	.word	0x20000cf4

0800751c <Event_500ms>:
//
void Event_500ms()
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
  uTimerFlag &= ~TIM_500ms;
 8007520:	4b0e      	ldr	r3, [pc, #56]	; (800755c <Event_500ms+0x40>)
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007528:	b29a      	uxth	r2, r3
 800752a:	4b0c      	ldr	r3, [pc, #48]	; (800755c <Event_500ms+0x40>)
 800752c:	801a      	strh	r2, [r3, #0]
  uTimerFlag ^= TIM_1SecMaker;
 800752e:	4b0b      	ldr	r3, [pc, #44]	; (800755c <Event_500ms+0x40>)
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8007536:	b29a      	uxth	r2, r3
 8007538:	4b08      	ldr	r3, [pc, #32]	; (800755c <Event_500ms+0x40>)
 800753a:	801a      	strh	r2, [r3, #0]
  if(uTimerFlag & TIM_1SecMaker)
 800753c:	4b07      	ldr	r3, [pc, #28]	; (800755c <Event_500ms+0x40>)
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007544:	2b00      	cmp	r3, #0
 8007546:	d004      	beq.n	8007552 <Event_500ms+0x36>
  {
	//uTimerFlag |= TIM_1Sec;	
	++u32_SysRunTime;
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <Event_500ms+0x44>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	4a04      	ldr	r2, [pc, #16]	; (8007560 <Event_500ms+0x44>)
 8007550:	6013      	str	r3, [r2, #0]
  }
}
 8007552:	bf00      	nop
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000cf4 	.word	0x20000cf4
 8007560:	20000d04 	.word	0x20000d04

08007564 <Timer_Event>:
void Timer_Event()
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
    if(uTimerFlag & TIM_10ms)	Event_10ms();
 8007568:	4b10      	ldr	r3, [pc, #64]	; (80075ac <Timer_Event+0x48>)
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <Timer_Event+0x14>
 8007574:	f7ff ffae 	bl	80074d4 <Event_10ms>
    if(uTimerFlag & TIM_30ms)	Event_30ms();		
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <Timer_Event+0x48>)
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <Timer_Event+0x24>
 8007584:	f7ff ff66 	bl	8007454 <Event_30ms>
    if(uTimerFlag & TIM_200ms)	Event_200ms();
 8007588:	4b08      	ldr	r3, [pc, #32]	; (80075ac <Timer_Event+0x48>)
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <Timer_Event+0x34>
 8007594:	f7ff ffae 	bl	80074f4 <Event_200ms>
    if(uTimerFlag & TIM_500ms)	Event_500ms();	
 8007598:	4b04      	ldr	r3, [pc, #16]	; (80075ac <Timer_Event+0x48>)
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <Timer_Event+0x44>
 80075a4:	f7ff ffba 	bl	800751c <Event_500ms>
}
 80075a8:	bf00      	nop
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000cf4 	.word	0x20000cf4

080075b0 <bsp_can_init>:

void bsp_can_init()
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	af00      	add	r7, sp, #0
    TxMessage.Data[0] = 0x11; 
 80075b4:	4b1f      	ldr	r3, [pc, #124]	; (8007634 <bsp_can_init+0x84>)
 80075b6:	2211      	movs	r2, #17
 80075b8:	72da      	strb	r2, [r3, #11]
    TxMessage.Data[1] = 0;
 80075ba:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <bsp_can_init+0x84>)
 80075bc:	2200      	movs	r2, #0
 80075be:	731a      	strb	r2, [r3, #12]
    TxMessage.Data[2] = 0;
 80075c0:	4b1c      	ldr	r3, [pc, #112]	; (8007634 <bsp_can_init+0x84>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	735a      	strb	r2, [r3, #13]
    TxMessage.Data[3] = 0x44;
 80075c6:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <bsp_can_init+0x84>)
 80075c8:	2244      	movs	r2, #68	; 0x44
 80075ca:	739a      	strb	r2, [r3, #14]
    txHeader.DLC = 8;
 80075cc:	4b1a      	ldr	r3, [pc, #104]	; (8007638 <bsp_can_init+0x88>)
 80075ce:	2208      	movs	r2, #8
 80075d0:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 80075d2:	4b19      	ldr	r3, [pc, #100]	; (8007638 <bsp_can_init+0x88>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 80075d8:	4b17      	ldr	r3, [pc, #92]	; (8007638 <bsp_can_init+0x88>)
 80075da:	2200      	movs	r2, #0
 80075dc:	60da      	str	r2, [r3, #12]
    txHeader.StdId = 0x737;
 80075de:	4b16      	ldr	r3, [pc, #88]	; (8007638 <bsp_can_init+0x88>)
 80075e0:	f240 7237 	movw	r2, #1847	; 0x737
 80075e4:	601a      	str	r2, [r3, #0]
    
    txHeader.TransmitGlobalTime = DISABLE;
 80075e6:	4b14      	ldr	r3, [pc, #80]	; (8007638 <bsp_can_init+0x88>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	751a      	strb	r2, [r3, #20]

    
	
  	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0; //set fifo assignment
 80075ec:	4b13      	ldr	r3, [pc, #76]	; (800763c <bsp_can_init+0x8c>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh=0x737; //the ID that the filter looks for (switch this for the other microcontroller)
 80075f2:	4b12      	ldr	r3, [pc, #72]	; (800763c <bsp_can_init+0x8c>)
 80075f4:	f240 7237 	movw	r2, #1847	; 0x737
 80075f8:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow=0;
 80075fa:	4b10      	ldr	r3, [pc, #64]	; (800763c <bsp_can_init+0x8c>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh=0;
 8007600:	4b0e      	ldr	r3, [pc, #56]	; (800763c <bsp_can_init+0x8c>)
 8007602:	2200      	movs	r2, #0
 8007604:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow=0;
 8007606:	4b0d      	ldr	r3, [pc, #52]	; (800763c <bsp_can_init+0x8c>)
 8007608:	2200      	movs	r2, #0
 800760a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 800760c:	4b0b      	ldr	r3, [pc, #44]	; (800763c <bsp_can_init+0x8c>)
 800760e:	2201      	movs	r2, #1
 8007610:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation=ENABLE;
 8007612:	4b0a      	ldr	r3, [pc, #40]	; (800763c <bsp_can_init+0x8c>)
 8007614:	2201      	movs	r2, #1
 8007616:	621a      	str	r2, [r3, #32]
	
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configure CAN filter
 8007618:	4908      	ldr	r1, [pc, #32]	; (800763c <bsp_can_init+0x8c>)
 800761a:	4809      	ldr	r0, [pc, #36]	; (8007640 <bsp_can_init+0x90>)
 800761c:	f001 fc84 	bl	8008f28 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan); //start CAN
 8007620:	4807      	ldr	r0, [pc, #28]	; (8007640 <bsp_can_init+0x90>)
 8007622:	f001 fd4a 	bl	80090ba <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8007626:	2102      	movs	r1, #2
 8007628:	4805      	ldr	r0, [pc, #20]	; (8007640 <bsp_can_init+0x90>)
 800762a:	f001 ff7a 	bl	8009522 <HAL_CAN_ActivateNotification>

}
 800762e:	bf00      	nop
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000d70 	.word	0x20000d70
 8007638:	20000d8c 	.word	0x20000d8c
 800763c:	20000da4 	.word	0x20000da4
 8007640:	200002b4 	.word	0x200002b4

08007644 <R_LED_On>:

extern LocalKeyType Local_Key;


void R_LED_On(void)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOE, E_LED_R, GPIO_PIN_RESET);
 8007648:	2200      	movs	r2, #0
 800764a:	2101      	movs	r1, #1
 800764c:	4802      	ldr	r0, [pc, #8]	; (8007658 <R_LED_On+0x14>)
 800764e:	f003 fb64 	bl	800ad1a <HAL_GPIO_WritePin>
}
 8007652:	bf00      	nop
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	40011800 	.word	0x40011800

0800765c <R_LED_Off>:
void R_LED_Off(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOE, E_LED_R, GPIO_PIN_SET);
 8007660:	2201      	movs	r2, #1
 8007662:	2101      	movs	r1, #1
 8007664:	4802      	ldr	r0, [pc, #8]	; (8007670 <R_LED_Off+0x14>)
 8007666:	f003 fb58 	bl	800ad1a <HAL_GPIO_WritePin>
}
 800766a:	bf00      	nop
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	40011800 	.word	0x40011800

08007674 <G_LED_On>:
void R_LED_Toggle(void)
{
	HAL_GPIO_TogglePin(GPIOE, E_LED_R);
}
void G_LED_On(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOE, E_LED_G, GPIO_PIN_RESET);
 8007678:	2200      	movs	r2, #0
 800767a:	2102      	movs	r1, #2
 800767c:	4802      	ldr	r0, [pc, #8]	; (8007688 <G_LED_On+0x14>)
 800767e:	f003 fb4c 	bl	800ad1a <HAL_GPIO_WritePin>
}
 8007682:	bf00      	nop
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	40011800 	.word	0x40011800

0800768c <G_LED_Off>:
void G_LED_Off(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, E_LED_G, GPIO_PIN_SET);
 8007690:	2201      	movs	r2, #1
 8007692:	2102      	movs	r1, #2
 8007694:	4802      	ldr	r0, [pc, #8]	; (80076a0 <G_LED_Off+0x14>)
 8007696:	f003 fb40 	bl	800ad1a <HAL_GPIO_WritePin>
}
 800769a:	bf00      	nop
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40011800 	.word	0x40011800

080076a4 <G_LED_Toggle>:
void G_LED_Toggle(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOE, E_LED_G);
 80076a8:	2102      	movs	r1, #2
 80076aa:	4802      	ldr	r0, [pc, #8]	; (80076b4 <G_LED_Toggle+0x10>)
 80076ac:	f003 fb4d 	bl	800ad4a <HAL_GPIO_TogglePin>
}
 80076b0:	bf00      	nop
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40011800 	.word	0x40011800

080076b8 <B_LED_Off>:
void B_LED_On(void)
{
	HAL_GPIO_WritePin(GPIOB, B_LED_Y, GPIO_PIN_RESET);
}
void B_LED_Off(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, B_LED_Y, GPIO_PIN_SET);
 80076bc:	2201      	movs	r2, #1
 80076be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076c2:	4802      	ldr	r0, [pc, #8]	; (80076cc <B_LED_Off+0x14>)
 80076c4:	f003 fb29 	bl	800ad1a <HAL_GPIO_WritePin>
}
 80076c8:	bf00      	nop
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	40010c00 	.word	0x40010c00

080076d0 <bcon_On>:
void B_LED_Toggle(void)
{
	HAL_GPIO_TogglePin(GPIOB, B_LED_Y);
}
void bcon_On(uint8_t bcon_no)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4603      	mov	r3, r0
 80076d8:	71fb      	strb	r3, [r7, #7]
  if((bcon_no & 0x01) == 0x01)
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <bcon_On+0x20>
	HAL_GPIO_WritePin(GPIOC, C_BEACON_R, GPIO_PIN_SET);
 80076e4:	2201      	movs	r2, #1
 80076e6:	2120      	movs	r1, #32
 80076e8:	481e      	ldr	r0, [pc, #120]	; (8007764 <bcon_On+0x94>)
 80076ea:	f003 fb16 	bl	800ad1a <HAL_GPIO_WritePin>
 80076ee:	e004      	b.n	80076fa <bcon_On+0x2a>
  else
	HAL_GPIO_WritePin(GPIOC, C_BEACON_R, GPIO_PIN_RESET);
 80076f0:	2200      	movs	r2, #0
 80076f2:	2120      	movs	r1, #32
 80076f4:	481b      	ldr	r0, [pc, #108]	; (8007764 <bcon_On+0x94>)
 80076f6:	f003 fb10 	bl	800ad1a <HAL_GPIO_WritePin>
  if((bcon_no & 0x02) == 0x02)
 80076fa:	79fb      	ldrb	r3, [r7, #7]
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <bcon_On+0x40>
	HAL_GPIO_WritePin(GPIOB, B_BEACON_G, GPIO_PIN_SET);
 8007704:	2201      	movs	r2, #1
 8007706:	2101      	movs	r1, #1
 8007708:	4817      	ldr	r0, [pc, #92]	; (8007768 <bcon_On+0x98>)
 800770a:	f003 fb06 	bl	800ad1a <HAL_GPIO_WritePin>
 800770e:	e004      	b.n	800771a <bcon_On+0x4a>
  else
	HAL_GPIO_WritePin(GPIOB, B_BEACON_G, GPIO_PIN_RESET);
 8007710:	2200      	movs	r2, #0
 8007712:	2101      	movs	r1, #1
 8007714:	4814      	ldr	r0, [pc, #80]	; (8007768 <bcon_On+0x98>)
 8007716:	f003 fb00 	bl	800ad1a <HAL_GPIO_WritePin>
  if((bcon_no & 0x04) == 0x04)
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	d005      	beq.n	8007730 <bcon_On+0x60>
	HAL_GPIO_WritePin(GPIOB, B_BEACON_B, GPIO_PIN_SET);
 8007724:	2201      	movs	r2, #1
 8007726:	2102      	movs	r1, #2
 8007728:	480f      	ldr	r0, [pc, #60]	; (8007768 <bcon_On+0x98>)
 800772a:	f003 faf6 	bl	800ad1a <HAL_GPIO_WritePin>
 800772e:	e004      	b.n	800773a <bcon_On+0x6a>
  else
	HAL_GPIO_WritePin(GPIOB, B_BEACON_B, GPIO_PIN_RESET);
 8007730:	2200      	movs	r2, #0
 8007732:	2102      	movs	r1, #2
 8007734:	480c      	ldr	r0, [pc, #48]	; (8007768 <bcon_On+0x98>)
 8007736:	f003 faf0 	bl	800ad1a <HAL_GPIO_WritePin>
  if((bcon_no & 0x08) == 0x08)
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <bcon_On+0x80>
	HAL_GPIO_WritePin(GPIOA, A_BUZZER, GPIO_PIN_SET);
 8007744:	2201      	movs	r2, #1
 8007746:	2140      	movs	r1, #64	; 0x40
 8007748:	4808      	ldr	r0, [pc, #32]	; (800776c <bcon_On+0x9c>)
 800774a:	f003 fae6 	bl	800ad1a <HAL_GPIO_WritePin>
  else
	HAL_GPIO_WritePin(GPIOA, A_BUZZER, GPIO_PIN_RESET);
}
 800774e:	e004      	b.n	800775a <bcon_On+0x8a>
	HAL_GPIO_WritePin(GPIOA, A_BUZZER, GPIO_PIN_RESET);
 8007750:	2200      	movs	r2, #0
 8007752:	2140      	movs	r1, #64	; 0x40
 8007754:	4805      	ldr	r0, [pc, #20]	; (800776c <bcon_On+0x9c>)
 8007756:	f003 fae0 	bl	800ad1a <HAL_GPIO_WritePin>
}
 800775a:	bf00      	nop
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	40011000 	.word	0x40011000
 8007768:	40010c00 	.word	0x40010c00
 800776c:	40010800 	.word	0x40010800

08007770 <Battery_Check>:
	HAL_GPIO_WritePin(GPIOA, A_BUZZER, GPIO_PIN_RESET);
}

//
void Battery_Check()
{
 8007770:	b590      	push	{r4, r7, lr}
 8007772:	b083      	sub	sp, #12
 8007774:	af02      	add	r7, sp, #8
  if(u16_DebugFlag == 2)
 8007776:	4b40      	ldr	r3, [pc, #256]	; (8007878 <Battery_Check+0x108>)
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	2b02      	cmp	r3, #2
 800777c:	d11e      	bne.n	80077bc <Battery_Check+0x4c>
  {
    cliPrintf("\n Battery : ADC[%0d] Voltage[%.1f]",ADC_Battery,V_Battery);
 800777e:	4b3f      	ldr	r3, [pc, #252]	; (800787c <Battery_Check+0x10c>)
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	461c      	mov	r4, r3
 8007784:	4b3e      	ldr	r3, [pc, #248]	; (8007880 <Battery_Check+0x110>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f7f8 fec3 	bl	8000514 <__aeabi_f2d>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	4621      	mov	r1, r4
 8007794:	483b      	ldr	r0, [pc, #236]	; (8007884 <Battery_Check+0x114>)
 8007796:	f7fc fa5d 	bl	8003c54 <cliPrintf>
    cliPrintf("\n RFR_Volume : ADC[%0d] Voltage[%.1f] DRV_SPD[%0d]",ADC_RFRVolume,V_RFRVolume,DRV_Speed);
 800779a:	4b3b      	ldr	r3, [pc, #236]	; (8007888 <Battery_Check+0x118>)
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	461c      	mov	r4, r3
 80077a0:	4b3a      	ldr	r3, [pc, #232]	; (800788c <Battery_Check+0x11c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7f8 feb5 	bl	8000514 <__aeabi_f2d>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4938      	ldr	r1, [pc, #224]	; (8007890 <Battery_Check+0x120>)
 80077b0:	7809      	ldrb	r1, [r1, #0]
 80077b2:	9100      	str	r1, [sp, #0]
 80077b4:	4621      	mov	r1, r4
 80077b6:	4837      	ldr	r0, [pc, #220]	; (8007894 <Battery_Check+0x124>)
 80077b8:	f7fc fa4c 	bl	8003c54 <cliPrintf>
  }
  if(V_Battery < DisCharge_bat_limit)
 80077bc:	4b30      	ldr	r3, [pc, #192]	; (8007880 <Battery_Check+0x110>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a35      	ldr	r2, [pc, #212]	; (8007898 <Battery_Check+0x128>)
 80077c2:	6812      	ldr	r2, [r2, #0]
 80077c4:	4611      	mov	r1, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7f9 fcc8 	bl	800115c <__aeabi_fcmplt>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d031      	beq.n	8007836 <Battery_Check+0xc6>
  {							/* All 모터 Stop이 되면, 다시 전원이 상승해 해제 된다. */
	++LowBat_Cnt;
 80077d2:	4b32      	ldr	r3, [pc, #200]	; (800789c <Battery_Check+0x12c>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	3301      	adds	r3, #1
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	4b30      	ldr	r3, [pc, #192]	; (800789c <Battery_Check+0x12c>)
 80077dc:	701a      	strb	r2, [r3, #0]
	if(LowBat_Cnt >= 5)
 80077de:	4b2f      	ldr	r3, [pc, #188]	; (800789c <Battery_Check+0x12c>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d943      	bls.n	800786e <Battery_Check+0xfe>
	{
		LowBat_Cnt = 5;
 80077e6:	4b2d      	ldr	r3, [pc, #180]	; (800789c <Battery_Check+0x12c>)
 80077e8:	2205      	movs	r2, #5
 80077ea:	701a      	strb	r2, [r3, #0]
#if _LOWBAT_MASK  		
		if((uSysStatusFlag & f_LowBat) == 0)
 80077ec:	4b2c      	ldr	r3, [pc, #176]	; (80078a0 <Battery_Check+0x130>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d13a      	bne.n	800786e <Battery_Check+0xfe>
		{
			uSysStatusFlag |= f_LowBat;
 80077f8:	4b29      	ldr	r3, [pc, #164]	; (80078a0 <Battery_Check+0x130>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007800:	4a27      	ldr	r2, [pc, #156]	; (80078a0 <Battery_Check+0x130>)
 8007802:	6013      	str	r3, [r2, #0]
			if(LKAUTOSeq)
 8007804:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <Battery_Check+0x134>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <Battery_Check+0xa2>
			{
				LKAUTOSeq = 0;
 800780c:	4b25      	ldr	r3, [pc, #148]	; (80078a4 <Battery_Check+0x134>)
 800780e:	2200      	movs	r2, #0
 8007810:	701a      	strb	r2, [r3, #0]
			} 
			all_MotorStop();			
 8007812:	f7ff fa79 	bl	8006d08 <all_MotorStop>
			if(u16_DebugFlag == 2)
 8007816:	4b18      	ldr	r3, [pc, #96]	; (8007878 <Battery_Check+0x108>)
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	2b02      	cmp	r3, #2
 800781c:	d127      	bne.n	800786e <Battery_Check+0xfe>
			{
				cliPrintf("  ! LOW V. ![%0x]",uSysStatusFlag & f_LowBat);
 800781e:	4b20      	ldr	r3, [pc, #128]	; (80078a0 <Battery_Check+0x130>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007826:	4619      	mov	r1, r3
 8007828:	481f      	ldr	r0, [pc, #124]	; (80078a8 <Battery_Check+0x138>)
 800782a:	f7fc fa13 	bl	8003c54 <cliPrintf>
				u16_DebugFlag = 0;
 800782e:	4b12      	ldr	r3, [pc, #72]	; (8007878 <Battery_Check+0x108>)
 8007830:	2200      	movs	r2, #0
 8007832:	801a      	strh	r2, [r3, #0]
  }
/* RFR Volume Check */
#if 0
  cliPrintf("\n RFR_Volume : ADC[%0d] Voltage[%.1f] DRV_SPD[%0d]",ADC_RFRVolume,V_RFRVolume,DRV_Speed);
#endif
}
 8007834:	e01b      	b.n	800786e <Battery_Check+0xfe>
	if(uSysStatusFlag & f_LowBat)
 8007836:	4b1a      	ldr	r3, [pc, #104]	; (80078a0 <Battery_Check+0x130>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d012      	beq.n	8007868 <Battery_Check+0xf8>
		if(V_Battery > Idle_bat_limit)
 8007842:	4b0f      	ldr	r3, [pc, #60]	; (8007880 <Battery_Check+0x110>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a19      	ldr	r2, [pc, #100]	; (80078ac <Battery_Check+0x13c>)
 8007848:	6812      	ldr	r2, [r2, #0]
 800784a:	4611      	mov	r1, r2
 800784c:	4618      	mov	r0, r3
 800784e:	f7f9 fca3 	bl	8001198 <__aeabi_fcmpgt>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d100      	bne.n	800785a <Battery_Check+0xea>
}
 8007858:	e009      	b.n	800786e <Battery_Check+0xfe>
			uSysStatusFlag &= ~f_LowBat;
 800785a:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <Battery_Check+0x130>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007862:	4a0f      	ldr	r2, [pc, #60]	; (80078a0 <Battery_Check+0x130>)
 8007864:	6013      	str	r3, [r2, #0]
}
 8007866:	e002      	b.n	800786e <Battery_Check+0xfe>
		LowBat_Cnt = 0;
 8007868:	4b0c      	ldr	r3, [pc, #48]	; (800789c <Battery_Check+0x12c>)
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]
}
 800786e:	bf00      	nop
 8007870:	3704      	adds	r7, #4
 8007872:	46bd      	mov	sp, r7
 8007874:	bd90      	pop	{r4, r7, pc}
 8007876:	bf00      	nop
 8007878:	20000d08 	.word	0x20000d08
 800787c:	20000d0e 	.word	0x20000d0e
 8007880:	20000034 	.word	0x20000034
 8007884:	08012cf0 	.word	0x08012cf0
 8007888:	20000d10 	.word	0x20000d10
 800788c:	20000d14 	.word	0x20000d14
 8007890:	20000038 	.word	0x20000038
 8007894:	08012d14 	.word	0x08012d14
 8007898:	20000dd0 	.word	0x20000dd0
 800789c:	20000d38 	.word	0x20000d38
 80078a0:	20000cf8 	.word	0x20000cf8
 80078a4:	20000d59 	.word	0x20000d59
 80078a8:	08012d48 	.word	0x08012d48
 80078ac:	20000dcc 	.word	0x20000dcc

080078b0 <Port_ReadACT>:
uint32_t PC_Data;
uint32_t Temp_Data;


void Port_ReadACT() // limit SW ?
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0

	#if 1 
	if(load_value.Sensor_type == 1)
 80078b4:	4b56      	ldr	r3, [pc, #344]	; (8007a10 <Port_ReadACT+0x160>)
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d106      	bne.n	80078ca <Port_ReadACT+0x1a>
	{
		PC_Data = GPIOC->IDR & 0x001F ;	  
 80078bc:	4b55      	ldr	r3, [pc, #340]	; (8007a14 <Port_ReadACT+0x164>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f003 031f 	and.w	r3, r3, #31
 80078c4:	4a54      	ldr	r2, [pc, #336]	; (8007a18 <Port_ReadACT+0x168>)
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	e00b      	b.n	80078e2 <Port_ReadACT+0x32>
	}	
	else 
	{
		Temp_Data = GPIOC->IDR & 0x001F ;	  
 80078ca:	4b52      	ldr	r3, [pc, #328]	; (8007a14 <Port_ReadACT+0x164>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 031f 	and.w	r3, r3, #31
 80078d2:	4a52      	ldr	r2, [pc, #328]	; (8007a1c <Port_ReadACT+0x16c>)
 80078d4:	6013      	str	r3, [r2, #0]
		PC_Data = Temp_Data^0x001B; 
 80078d6:	4b51      	ldr	r3, [pc, #324]	; (8007a1c <Port_ReadACT+0x16c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f083 031b 	eor.w	r3, r3, #27
 80078de:	4a4e      	ldr	r2, [pc, #312]	; (8007a18 <Port_ReadACT+0x168>)
 80078e0:	6013      	str	r3, [r2, #0]
	}	

	#endif 

	if(PC_Data & 0x0001)
 80078e2:	4b4d      	ldr	r3, [pc, #308]	; (8007a18 <Port_ReadACT+0x168>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d013      	beq.n	8007916 <Port_ReadACT+0x66>
	{
		if((uSysStatusFlag & f_LimitRight) == 0)
 80078ee:	4b4c      	ldr	r3, [pc, #304]	; (8007a20 <Port_ReadACT+0x170>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10d      	bne.n	8007916 <Port_ReadACT+0x66>
		{
			str_MotorLimitStop();
 80078fa:	f7ff fb3b 	bl	8006f74 <str_MotorLimitStop>
			uSysStatusFlag &= ~f_LimitLeft;
 80078fe:	4b48      	ldr	r3, [pc, #288]	; (8007a20 <Port_ReadACT+0x170>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007906:	4a46      	ldr	r2, [pc, #280]	; (8007a20 <Port_ReadACT+0x170>)
 8007908:	6013      	str	r3, [r2, #0]
			uSysStatusFlag |= f_LimitRight;
 800790a:	4b45      	ldr	r3, [pc, #276]	; (8007a20 <Port_ReadACT+0x170>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007912:	4a43      	ldr	r2, [pc, #268]	; (8007a20 <Port_ReadACT+0x170>)
 8007914:	6013      	str	r3, [r2, #0]
		}
	}
	//
	if(PC_Data & 0x0002)
 8007916:	4b40      	ldr	r3, [pc, #256]	; (8007a18 <Port_ReadACT+0x168>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d013      	beq.n	800794a <Port_ReadACT+0x9a>
	{
		if((uSysStatusFlag & f_LimitLeft) == 0)
 8007922:	4b3f      	ldr	r3, [pc, #252]	; (8007a20 <Port_ReadACT+0x170>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10d      	bne.n	800794a <Port_ReadACT+0x9a>
		{
			str_MotorLimitStop();
 800792e:	f7ff fb21 	bl	8006f74 <str_MotorLimitStop>
			uSysStatusFlag &= ~f_LimitRight;
 8007932:	4b3b      	ldr	r3, [pc, #236]	; (8007a20 <Port_ReadACT+0x170>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800793a:	4a39      	ldr	r2, [pc, #228]	; (8007a20 <Port_ReadACT+0x170>)
 800793c:	6013      	str	r3, [r2, #0]
			uSysStatusFlag |= f_LimitLeft;
 800793e:	4b38      	ldr	r3, [pc, #224]	; (8007a20 <Port_ReadACT+0x170>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007946:	4a36      	ldr	r2, [pc, #216]	; (8007a20 <Port_ReadACT+0x170>)
 8007948:	6013      	str	r3, [r2, #0]
		}
	}

	if((PC_Data & 0x0003) == 0)
 800794a:	4b33      	ldr	r3, [pc, #204]	; (8007a18 <Port_ReadACT+0x168>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10b      	bne.n	800796e <Port_ReadACT+0xbe>
	{
		uSysStatusFlag &= ~f_LimitRight;
 8007956:	4b32      	ldr	r3, [pc, #200]	; (8007a20 <Port_ReadACT+0x170>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800795e:	4a30      	ldr	r2, [pc, #192]	; (8007a20 <Port_ReadACT+0x170>)
 8007960:	6013      	str	r3, [r2, #0]
		uSysStatusFlag &= ~f_LimitLeft;
 8007962:	4b2f      	ldr	r3, [pc, #188]	; (8007a20 <Port_ReadACT+0x170>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800796a:	4a2d      	ldr	r2, [pc, #180]	; (8007a20 <Port_ReadACT+0x170>)
 800796c:	6013      	str	r3, [r2, #0]
	}

	if(PC_Data & 0x0010)	/* Center Check  CENTER는 기구 형상이 반대임 */
 800796e:	4b2a      	ldr	r3, [pc, #168]	; (8007a18 <Port_ReadACT+0x168>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0310 	and.w	r3, r3, #16
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00c      	beq.n	8007994 <Port_ReadACT+0xe4>
	{
		if(uSysStatusFlag & f_LimitCenter) 
 800797a:	4b29      	ldr	r3, [pc, #164]	; (8007a20 <Port_ReadACT+0x170>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007982:	2b00      	cmp	r3, #0
 8007984:	d012      	beq.n	80079ac <Port_ReadACT+0xfc>
		{
			uSysStatusFlag &= ~f_LimitCenter;
 8007986:	4b26      	ldr	r3, [pc, #152]	; (8007a20 <Port_ReadACT+0x170>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800798e:	4a24      	ldr	r2, [pc, #144]	; (8007a20 <Port_ReadACT+0x170>)
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	e00b      	b.n	80079ac <Port_ReadACT+0xfc>
		}
	}
	else
	{
		if((uSysStatusFlag & f_LimitCenter) == 0)
 8007994:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <Port_ReadACT+0x170>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799c:	2b00      	cmp	r3, #0
 800799e:	d105      	bne.n	80079ac <Port_ReadACT+0xfc>
		{
			uSysStatusFlag |= f_LimitCenter;
 80079a0:	4b1f      	ldr	r3, [pc, #124]	; (8007a20 <Port_ReadACT+0x170>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a8:	4a1d      	ldr	r2, [pc, #116]	; (8007a20 <Port_ReadACT+0x170>)
 80079aa:	6013      	str	r3, [r2, #0]
		}
	}

	if(PC_Data & 0x0004)				/* 0000 0100*/ //범퍼 	
 80079ac:	4b1a      	ldr	r3, [pc, #104]	; (8007a18 <Port_ReadACT+0x168>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d01f      	beq.n	80079f8 <Port_ReadACT+0x148>
	{
		if((uSysStatusFlag & f_Crash) == 0)
 80079b8:	4b19      	ldr	r3, [pc, #100]	; (8007a20 <Port_ReadACT+0x170>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d122      	bne.n	8007a0a <Port_ReadACT+0x15a>
		{
			--crash_Cnt;			/* 22012	2 */
 80079c4:	4b17      	ldr	r3, [pc, #92]	; (8007a24 <Port_ReadACT+0x174>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	4b15      	ldr	r3, [pc, #84]	; (8007a24 <Port_ReadACT+0x174>)
 80079ce:	701a      	strb	r2, [r3, #0]
			if(crash_Cnt == 0)
 80079d0:	4b14      	ldr	r3, [pc, #80]	; (8007a24 <Port_ReadACT+0x174>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d118      	bne.n	8007a0a <Port_ReadACT+0x15a>
			{
				uSysStatusFlag |= f_Crash;
 80079d8:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <Port_ReadACT+0x170>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80079e0:	4a0f      	ldr	r2, [pc, #60]	; (8007a20 <Port_ReadACT+0x170>)
 80079e2:	6013      	str	r3, [r2, #0]
				if(LKAUTOSeq) 
 80079e4:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <Port_ReadACT+0x178>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <Port_ReadACT+0x142>
					LKAUTOSeq = 0;
 80079ec:	4b0e      	ldr	r3, [pc, #56]	; (8007a28 <Port_ReadACT+0x178>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	701a      	strb	r2, [r3, #0]
				
				all_MotorStop();
 80079f2:	f7ff f989 	bl	8006d08 <all_MotorStop>
	else
	{
		uSysStatusFlag &= ~f_Crash;
		crash_Cnt = 50;				/* 220122 */
	}
}
 80079f6:	e008      	b.n	8007a0a <Port_ReadACT+0x15a>
		uSysStatusFlag &= ~f_Crash;
 80079f8:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <Port_ReadACT+0x170>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a00:	4a07      	ldr	r2, [pc, #28]	; (8007a20 <Port_ReadACT+0x170>)
 8007a02:	6013      	str	r3, [r2, #0]
		crash_Cnt = 50;				/* 220122 */
 8007a04:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <Port_ReadACT+0x174>)
 8007a06:	2232      	movs	r2, #50	; 0x32
 8007a08:	701a      	strb	r2, [r3, #0]
}
 8007a0a:	bf00      	nop
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000dd4 	.word	0x20000dd4
 8007a14:	40011000 	.word	0x40011000
 8007a18:	20000de0 	.word	0x20000de0
 8007a1c:	20000de4 	.word	0x20000de4
 8007a20:	20000cf8 	.word	0x20000cf8
 8007a24:	20000d58 	.word	0x20000d58
 8007a28:	20000d59 	.word	0x20000d59

08007a2c <Bcon_Control>:
uint32_t Bcon_dly;
uint8_t toggle_flag = 0;


void Bcon_Control()
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  if(uSysStatusFlag & f_LowBat)
 8007a30:	4b9a      	ldr	r3, [pc, #616]	; (8007c9c <Bcon_Control+0x270>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <Bcon_Control+0x18>
  {
	  bcon_Req = bcon_R | bcon_B | bcon_BZ;
 8007a3c:	4b98      	ldr	r3, [pc, #608]	; (8007ca0 <Bcon_Control+0x274>)
 8007a3e:	220b      	movs	r2, #11
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	e126      	b.n	8007c92 <Bcon_Control+0x266>
  }
  else if(uSysStatusFlag & f_RFR_Emergency)
 8007a44:	4b95      	ldr	r3, [pc, #596]	; (8007c9c <Bcon_Control+0x270>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d026      	beq.n	8007a9e <Bcon_Control+0x72>
  {
    if(LKAUTOSeq  >= 4)
 8007a50:	4b94      	ldr	r3, [pc, #592]	; (8007ca4 <Bcon_Control+0x278>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b03      	cmp	r3, #3
 8007a56:	d91e      	bls.n	8007a96 <Bcon_Control+0x6a>
    {
      bcon_Req = bcon_R;
 8007a58:	4b91      	ldr	r3, [pc, #580]	; (8007ca0 <Bcon_Control+0x274>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	701a      	strb	r2, [r3, #0]
      if(LKAUTOSeq >= 7)
 8007a5e:	4b91      	ldr	r3, [pc, #580]	; (8007ca4 <Bcon_Control+0x278>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b06      	cmp	r3, #6
 8007a64:	d902      	bls.n	8007a6c <Bcon_Control+0x40>
      {
        bcon_Req = bcon_G;
 8007a66:	4b8e      	ldr	r3, [pc, #568]	; (8007ca0 <Bcon_Control+0x274>)
 8007a68:	2204      	movs	r2, #4
 8007a6a:	701a      	strb	r2, [r3, #0]
      }
      if(uSysStatusFlag & f_ALLWLEmpty)
 8007a6c:	4b8b      	ldr	r3, [pc, #556]	; (8007c9c <Bcon_Control+0x270>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 810c 	beq.w	8007c92 <Bcon_Control+0x266>
        {
        bcon_Req = bcon_B | bcon_G;						/* Cyan */
 8007a7a:	4b89      	ldr	r3, [pc, #548]	; (8007ca0 <Bcon_Control+0x274>)
 8007a7c:	2206      	movs	r2, #6
 8007a7e:	701a      	strb	r2, [r3, #0]
        if(uSysStatusFlag & f_WTEmptBuzReq)
 8007a80:	4b86      	ldr	r3, [pc, #536]	; (8007c9c <Bcon_Control+0x270>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 8102 	beq.w	8007c92 <Bcon_Control+0x266>
          bcon_Req = bcon_B | bcon_G | bcon_BZ;		/* Cyan + Buzzer */	
 8007a8e:	4b84      	ldr	r3, [pc, #528]	; (8007ca0 <Bcon_Control+0x274>)
 8007a90:	220e      	movs	r2, #14
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	e0fd      	b.n	8007c92 <Bcon_Control+0x266>
        }		
    }
	else
		bcon_Req = bcon_R | bcon_BZ;
 8007a96:	4b82      	ldr	r3, [pc, #520]	; (8007ca0 <Bcon_Control+0x274>)
 8007a98:	2209      	movs	r2, #9
 8007a9a:	701a      	strb	r2, [r3, #0]
 8007a9c:	e0f9      	b.n	8007c92 <Bcon_Control+0x266>
  }
  else if(uSysStatusFlag & f_Crash)
 8007a9e:	4b7f      	ldr	r3, [pc, #508]	; (8007c9c <Bcon_Control+0x270>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <Bcon_Control+0x86>
  {
	bcon_Req = bcon_B | bcon_BZ;
 8007aaa:	4b7d      	ldr	r3, [pc, #500]	; (8007ca0 <Bcon_Control+0x274>)
 8007aac:	220a      	movs	r2, #10
 8007aae:	701a      	strb	r2, [r3, #0]
 8007ab0:	e0ef      	b.n	8007c92 <Bcon_Control+0x266>
  }
  else if(uSysStatusFlag & f_ALLWLEmpty)
 8007ab2:	4b7a      	ldr	r3, [pc, #488]	; (8007c9c <Bcon_Control+0x270>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d07a      	beq.n	8007bb4 <Bcon_Control+0x188>
  {
	
	if(uSysStatusFlag & f_WTEmptBuzReq)
 8007abe:	4b77      	ldr	r3, [pc, #476]	; (8007c9c <Bcon_Control+0x270>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <Bcon_Control+0xa4>
	{
		bcon_Req = bcon_B | bcon_G | bcon_BZ;		/* Cyan + Buzzer */	
 8007aca:	4b75      	ldr	r3, [pc, #468]	; (8007ca0 <Bcon_Control+0x274>)
 8007acc:	220e      	movs	r2, #14
 8007ace:	701a      	strb	r2, [r3, #0]
	}
	if ( load_value.rtk_type == 1) 
 8007ad0:	4b75      	ldr	r3, [pc, #468]	; (8007ca8 <Bcon_Control+0x27c>)
 8007ad2:	7a1b      	ldrb	r3, [r3, #8]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d169      	bne.n	8007bac <Bcon_Control+0x180>
	{
		if ( RTK_state == 1 ) /* 물없고 RTK OK */ 
 8007ad8:	4b74      	ldr	r3, [pc, #464]	; (8007cac <Bcon_Control+0x280>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d127      	bne.n	8007b30 <Bcon_Control+0x104>
		{
			if ( !Bcon_dly )
 8007ae0:	4b73      	ldr	r3, [pc, #460]	; (8007cb0 <Bcon_Control+0x284>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10b      	bne.n	8007b00 <Bcon_Control+0xd4>
			{
				uSysStatusFlag &= ~a_NotCondition;
 8007ae8:	4b6c      	ldr	r3, [pc, #432]	; (8007c9c <Bcon_Control+0x270>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007af0:	4a6a      	ldr	r2, [pc, #424]	; (8007c9c <Bcon_Control+0x270>)
 8007af2:	6013      	str	r3, [r2, #0]
				uSysStatusFlag &= ~a_Auto_Ready;
 8007af4:	4b69      	ldr	r3, [pc, #420]	; (8007c9c <Bcon_Control+0x270>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007afc:	4a67      	ldr	r2, [pc, #412]	; (8007c9c <Bcon_Control+0x270>)
 8007afe:	6013      	str	r3, [r2, #0]
			}
			if (uSysStatusFlag & a_NotCondition )
 8007b00:	4b66      	ldr	r3, [pc, #408]	; (8007c9c <Bcon_Control+0x270>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <Bcon_Control+0xe8>
			{
				bcon_Req = bcon_R| bcon_G | bcon_BZ;
 8007b0c:	4b64      	ldr	r3, [pc, #400]	; (8007ca0 <Bcon_Control+0x274>)
 8007b0e:	220d      	movs	r2, #13
 8007b10:	701a      	strb	r2, [r3, #0]
 8007b12:	e0be      	b.n	8007c92 <Bcon_Control+0x266>
			}
			else if( uSysStatusFlag & a_Auto_Ready)
 8007b14:	4b61      	ldr	r3, [pc, #388]	; (8007c9c <Bcon_Control+0x270>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <Bcon_Control+0xfc>
			{
				bcon_Req = bcon_G | bcon_BZ;
 8007b20:	4b5f      	ldr	r3, [pc, #380]	; (8007ca0 <Bcon_Control+0x274>)
 8007b22:	220c      	movs	r2, #12
 8007b24:	701a      	strb	r2, [r3, #0]
 8007b26:	e0b4      	b.n	8007c92 <Bcon_Control+0x266>
			}
			
			else 
			{
				bcon_Req = bcon_B | bcon_G;
 8007b28:	4b5d      	ldr	r3, [pc, #372]	; (8007ca0 <Bcon_Control+0x274>)
 8007b2a:	2206      	movs	r2, #6
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	e0b0      	b.n	8007c92 <Bcon_Control+0x266>
			
		}
		else /* 물없고 RTK NONE */ 
		{

			if ( not_ready_flag & F_DRV_REQ)
 8007b30:	4b60      	ldr	r3, [pc, #384]	; (8007cb4 <Bcon_Control+0x288>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	f003 030f 	and.w	r3, r3, #15
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d015      	beq.n	8007b68 <Bcon_Control+0x13c>
			{
				
				bcon_Req = bcon_R| bcon_G | bcon_BZ;
 8007b3c:	4b58      	ldr	r3, [pc, #352]	; (8007ca0 <Bcon_Control+0x274>)
 8007b3e:	220d      	movs	r2, #13
 8007b40:	701a      	strb	r2, [r3, #0]
				if (!Bcon_dly)
 8007b42:	4b5b      	ldr	r3, [pc, #364]	; (8007cb0 <Bcon_Control+0x284>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f040 80a3 	bne.w	8007c92 <Bcon_Control+0x266>
				{
					not_ready_flag &= ~F_DRV_REQ;
 8007b4c:	4b59      	ldr	r3, [pc, #356]	; (8007cb4 <Bcon_Control+0x288>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	f023 030f 	bic.w	r3, r3, #15
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	4b57      	ldr	r3, [pc, #348]	; (8007cb4 <Bcon_Control+0x288>)
 8007b58:	701a      	strb	r2, [r3, #0]
					uSysStatusFlag &= ~a_NotCondition;
 8007b5a:	4b50      	ldr	r3, [pc, #320]	; (8007c9c <Bcon_Control+0x270>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007b62:	4a4e      	ldr	r2, [pc, #312]	; (8007c9c <Bcon_Control+0x270>)
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	e094      	b.n	8007c92 <Bcon_Control+0x266>
				}
			}
			else
			{	
				if ( !Bcon_dly  )
 8007b68:	4b51      	ldr	r3, [pc, #324]	; (8007cb0 <Bcon_Control+0x284>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f040 8090 	bne.w	8007c92 <Bcon_Control+0x266>
				{
					
					if ( toggle_flag == 0)
 8007b72:	4b51      	ldr	r3, [pc, #324]	; (8007cb8 <Bcon_Control+0x28c>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10d      	bne.n	8007b96 <Bcon_Control+0x16a>
					{
						bcon_Req = bcon_B | bcon_G;						/* 물없을때, 일반상태 */ 
 8007b7a:	4b49      	ldr	r3, [pc, #292]	; (8007ca0 <Bcon_Control+0x274>)
 8007b7c:	2206      	movs	r2, #6
 8007b7e:	701a      	strb	r2, [r3, #0]
						Bcon_dly = 1000;
 8007b80:	4b4b      	ldr	r3, [pc, #300]	; (8007cb0 <Bcon_Control+0x284>)
 8007b82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b86:	601a      	str	r2, [r3, #0]
						toggle_flag++;
 8007b88:	4b4b      	ldr	r3, [pc, #300]	; (8007cb8 <Bcon_Control+0x28c>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	4b49      	ldr	r3, [pc, #292]	; (8007cb8 <Bcon_Control+0x28c>)
 8007b92:	701a      	strb	r2, [r3, #0]
 8007b94:	e07d      	b.n	8007c92 <Bcon_Control+0x266>
					}
					else
					{
						bcon_Req = bcon_R| bcon_G; // 노랑 
 8007b96:	4b42      	ldr	r3, [pc, #264]	; (8007ca0 <Bcon_Control+0x274>)
 8007b98:	2205      	movs	r2, #5
 8007b9a:	701a      	strb	r2, [r3, #0]
						Bcon_dly = 1000;
 8007b9c:	4b44      	ldr	r3, [pc, #272]	; (8007cb0 <Bcon_Control+0x284>)
 8007b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ba2:	601a      	str	r2, [r3, #0]
						toggle_flag = 0;
 8007ba4:	4b44      	ldr	r3, [pc, #272]	; (8007cb8 <Bcon_Control+0x28c>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	e072      	b.n	8007c92 <Bcon_Control+0x266>
			
		}
	}
	else 
	{
		bcon_Req = bcon_B | bcon_G;
 8007bac:	4b3c      	ldr	r3, [pc, #240]	; (8007ca0 <Bcon_Control+0x274>)
 8007bae:	2206      	movs	r2, #6
 8007bb0:	701a      	strb	r2, [r3, #0]
 8007bb2:	e06e      	b.n	8007c92 <Bcon_Control+0x266>
	}
  }
  else
  {	/* Normal Status */
	if ( load_value.rtk_type == 1)
 8007bb4:	4b3c      	ldr	r3, [pc, #240]	; (8007ca8 <Bcon_Control+0x27c>)
 8007bb6:	7a1b      	ldrb	r3, [r3, #8]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d167      	bne.n	8007c8c <Bcon_Control+0x260>
	{
		if ( RTK_state == 1 ) /* 물있고 RTK OK */ 
 8007bbc:	4b3b      	ldr	r3, [pc, #236]	; (8007cac <Bcon_Control+0x280>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d127      	bne.n	8007c14 <Bcon_Control+0x1e8>
		{
			if ( !Bcon_dly )
 8007bc4:	4b3a      	ldr	r3, [pc, #232]	; (8007cb0 <Bcon_Control+0x284>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10b      	bne.n	8007be4 <Bcon_Control+0x1b8>
			{
				uSysStatusFlag &= ~a_NotCondition;
 8007bcc:	4b33      	ldr	r3, [pc, #204]	; (8007c9c <Bcon_Control+0x270>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007bd4:	4a31      	ldr	r2, [pc, #196]	; (8007c9c <Bcon_Control+0x270>)
 8007bd6:	6013      	str	r3, [r2, #0]
				uSysStatusFlag &= ~a_Auto_Ready;
 8007bd8:	4b30      	ldr	r3, [pc, #192]	; (8007c9c <Bcon_Control+0x270>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007be0:	4a2e      	ldr	r2, [pc, #184]	; (8007c9c <Bcon_Control+0x270>)
 8007be2:	6013      	str	r3, [r2, #0]
			}
			if (uSysStatusFlag & a_NotCondition )
 8007be4:	4b2d      	ldr	r3, [pc, #180]	; (8007c9c <Bcon_Control+0x270>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <Bcon_Control+0x1cc>
			{
				bcon_Req = bcon_R| bcon_G | bcon_BZ;
 8007bf0:	4b2b      	ldr	r3, [pc, #172]	; (8007ca0 <Bcon_Control+0x274>)
 8007bf2:	220d      	movs	r2, #13
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	e04c      	b.n	8007c92 <Bcon_Control+0x266>
			}
			else if( uSysStatusFlag & a_Auto_Ready)
 8007bf8:	4b28      	ldr	r3, [pc, #160]	; (8007c9c <Bcon_Control+0x270>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <Bcon_Control+0x1e0>
			{
				bcon_Req = bcon_G | bcon_BZ;
 8007c04:	4b26      	ldr	r3, [pc, #152]	; (8007ca0 <Bcon_Control+0x274>)
 8007c06:	220c      	movs	r2, #12
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e042      	b.n	8007c92 <Bcon_Control+0x266>
			}
			else 
			{
				bcon_Req = bcon_G;
 8007c0c:	4b24      	ldr	r3, [pc, #144]	; (8007ca0 <Bcon_Control+0x274>)
 8007c0e:	2204      	movs	r2, #4
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	e03e      	b.n	8007c92 <Bcon_Control+0x266>

			// 여기서 자율항상 시작 물있고 다 정상일때.
		}
		else /* 물있고 RTK NONE */ 
		{
			if ( not_ready_flag & F_DRV_REQ)
 8007c14:	4b27      	ldr	r3, [pc, #156]	; (8007cb4 <Bcon_Control+0x288>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	f003 030f 	and.w	r3, r3, #15
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d014      	beq.n	8007c4a <Bcon_Control+0x21e>
			{
				
				bcon_Req = bcon_R| bcon_G | bcon_BZ;
 8007c20:	4b1f      	ldr	r3, [pc, #124]	; (8007ca0 <Bcon_Control+0x274>)
 8007c22:	220d      	movs	r2, #13
 8007c24:	701a      	strb	r2, [r3, #0]
				if (!Bcon_dly)
 8007c26:	4b22      	ldr	r3, [pc, #136]	; (8007cb0 <Bcon_Control+0x284>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d131      	bne.n	8007c92 <Bcon_Control+0x266>
				{
					not_ready_flag &= ~F_DRV_REQ;
 8007c2e:	4b21      	ldr	r3, [pc, #132]	; (8007cb4 <Bcon_Control+0x288>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f023 030f 	bic.w	r3, r3, #15
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	4b1e      	ldr	r3, [pc, #120]	; (8007cb4 <Bcon_Control+0x288>)
 8007c3a:	701a      	strb	r2, [r3, #0]
					uSysStatusFlag &= ~a_NotCondition;
 8007c3c:	4b17      	ldr	r3, [pc, #92]	; (8007c9c <Bcon_Control+0x270>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007c44:	4a15      	ldr	r2, [pc, #84]	; (8007c9c <Bcon_Control+0x270>)
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	e023      	b.n	8007c92 <Bcon_Control+0x266>
				}
			}
			else 
			{
				if ( !Bcon_dly )
 8007c4a:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <Bcon_Control+0x284>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d11f      	bne.n	8007c92 <Bcon_Control+0x266>
				{
					if ( toggle_flag == 0)
 8007c52:	4b19      	ldr	r3, [pc, #100]	; (8007cb8 <Bcon_Control+0x28c>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10d      	bne.n	8007c76 <Bcon_Control+0x24a>
					{
						bcon_Req = bcon_G;						/* 물없을때, 일반상태 */ 
 8007c5a:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <Bcon_Control+0x274>)
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	701a      	strb	r2, [r3, #0]
						Bcon_dly = 1000;
 8007c60:	4b13      	ldr	r3, [pc, #76]	; (8007cb0 <Bcon_Control+0x284>)
 8007c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c66:	601a      	str	r2, [r3, #0]
						toggle_flag++;
 8007c68:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <Bcon_Control+0x28c>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <Bcon_Control+0x28c>)
 8007c72:	701a      	strb	r2, [r3, #0]
 8007c74:	e00d      	b.n	8007c92 <Bcon_Control+0x266>
					}
					else
					{
						bcon_Req = bcon_R| bcon_G; // 노랑 
 8007c76:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <Bcon_Control+0x274>)
 8007c78:	2205      	movs	r2, #5
 8007c7a:	701a      	strb	r2, [r3, #0]
						Bcon_dly = 1000;
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <Bcon_Control+0x284>)
 8007c7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c82:	601a      	str	r2, [r3, #0]
						toggle_flag = 0;
 8007c84:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <Bcon_Control+0x28c>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	e002      	b.n	8007c92 <Bcon_Control+0x266>
			}
		}
	}
    else
	{
		bcon_Req = bcon_G;	
 8007c8c:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <Bcon_Control+0x274>)
 8007c8e:	2204      	movs	r2, #4
 8007c90:	701a      	strb	r2, [r3, #0]
	}
  }
  Bcon_Out(); 
 8007c92:	f000 f813 	bl	8007cbc <Bcon_Out>
}
 8007c96:	bf00      	nop
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000cf8 	.word	0x20000cf8
 8007ca0:	20000d33 	.word	0x20000d33
 8007ca4:	20000d59 	.word	0x20000d59
 8007ca8:	20000dd4 	.word	0x20000dd4
 8007cac:	20000d88 	.word	0x20000d88
 8007cb0:	20000de8 	.word	0x20000de8
 8007cb4:	20000d5c 	.word	0x20000d5c
 8007cb8:	20000dec 	.word	0x20000dec

08007cbc <Bcon_Out>:
//
void Bcon_Out()
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  if(bcon_Req != bcon_Out)
 8007cc0:	4b08      	ldr	r3, [pc, #32]	; (8007ce4 <Bcon_Out+0x28>)
 8007cc2:	781a      	ldrb	r2, [r3, #0]
 8007cc4:	4b08      	ldr	r3, [pc, #32]	; (8007ce8 <Bcon_Out+0x2c>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d008      	beq.n	8007cde <Bcon_Out+0x22>
  {
	bcon_On(bcon_Req);
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <Bcon_Out+0x28>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff fcfd 	bl	80076d0 <bcon_On>
	bcon_Out = bcon_Req;
 8007cd6:	4b03      	ldr	r3, [pc, #12]	; (8007ce4 <Bcon_Out+0x28>)
 8007cd8:	781a      	ldrb	r2, [r3, #0]
 8007cda:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <Bcon_Out+0x2c>)
 8007cdc:	701a      	strb	r2, [r3, #0]
  }
}
 8007cde:	bf00      	nop
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000d33 	.word	0x20000d33
 8007ce8:	20000d34 	.word	0x20000d34

08007cec <Real_AutoRunning>:
//
#if 1	
// 분사중이고, 자율주행중 수위 가 없으면, 
uint8_t Real_AutoRunning()
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_AutoRun) == 0)
 8007cf0:	4b12      	ldr	r3, [pc, #72]	; (8007d3c <Real_AutoRunning+0x50>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <Real_AutoRunning+0x14>
  {
  	return 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e018      	b.n	8007d32 <Real_AutoRunning+0x46>
  }
  if((uSysStatusFlag & f_TraceLine) == 0)
 8007d00:	4b0e      	ldr	r3, [pc, #56]	; (8007d3c <Real_AutoRunning+0x50>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <Real_AutoRunning+0x24>
  {
  	return 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e010      	b.n	8007d32 <Real_AutoRunning+0x46>
  }
  if((smt_Command & 0x0001) == 0)
 8007d10:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <Real_AutoRunning+0x54>)
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <Real_AutoRunning+0x34>
  {
  	return 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	e008      	b.n	8007d32 <Real_AutoRunning+0x46>
  }
  if((uSysStatusFlag & f_DMotorACT) == 0)
 8007d20:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <Real_AutoRunning+0x50>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <Real_AutoRunning+0x44>
  {
  	return 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e000      	b.n	8007d32 <Real_AutoRunning+0x46>
  }
  return 1;
 8007d30:	2301      	movs	r3, #1
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bc80      	pop	{r7}
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	20000cf8 	.word	0x20000cf8
 8007d40:	20000d36 	.word	0x20000d36

08007d44 <WLS_Check1>:
#endif

//
void WLS_Check1()
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
#if _WLS_MASK  		
  if(HAL_GPIO_ReadPin(GPIOC,C_WLS_IN1) == 0)	/* 견인 물통 */
 8007d48:	2140      	movs	r1, #64	; 0x40
 8007d4a:	481d      	ldr	r0, [pc, #116]	; (8007dc0 <WLS_Check1+0x7c>)
 8007d4c:	f002 ffce 	bl	800acec <HAL_GPIO_ReadPin>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d11c      	bne.n	8007d90 <WLS_Check1+0x4c>
  {
	++WLEmptyCnt1;
 8007d56:	4b1b      	ldr	r3, [pc, #108]	; (8007dc4 <WLS_Check1+0x80>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <WLS_Check1+0x80>)
 8007d60:	701a      	strb	r2, [r3, #0]
	if(WLEmptyCnt1 >= 20)  /* 200m x 20 = 4000ms */
 8007d62:	4b18      	ldr	r3, [pc, #96]	; (8007dc4 <WLS_Check1+0x80>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b13      	cmp	r3, #19
 8007d68:	d928      	bls.n	8007dbc <WLS_Check1+0x78>
	{
		if((uSysStatusFlag & f_WLEmpty1) == 0)
 8007d6a:	4b17      	ldr	r3, [pc, #92]	; (8007dc8 <WLS_Check1+0x84>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d105      	bne.n	8007d82 <WLS_Check1+0x3e>
		{
			uSysStatusFlag |= f_WLEmpty1;
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <WLS_Check1+0x84>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d7e:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <WLS_Check1+0x84>)
 8007d80:	6013      	str	r3, [r2, #0]
#if _WLS_CHK
			cliPrintf("\n WL_TOW_EMPTY");
#endif
		}
		WLEmptyCnt1 = 20;
 8007d82:	4b10      	ldr	r3, [pc, #64]	; (8007dc4 <WLS_Check1+0x80>)
 8007d84:	2214      	movs	r2, #20
 8007d86:	701a      	strb	r2, [r3, #0]
		WLFullCnt1 = 0;
 8007d88:	4b10      	ldr	r3, [pc, #64]	; (8007dcc <WLS_Check1+0x88>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
#else
  uSysStatusFlag &= ~f_WLEmpty1;
  WLEmptyCnt1 = 0;
  WLFullCnt1 = 20;
#endif
}
 8007d8e:	e015      	b.n	8007dbc <WLS_Check1+0x78>
	++WLFullCnt1;
 8007d90:	4b0e      	ldr	r3, [pc, #56]	; (8007dcc <WLS_Check1+0x88>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <WLS_Check1+0x88>)
 8007d9a:	701a      	strb	r2, [r3, #0]
	if(WLFullCnt1 >= 20)
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <WLS_Check1+0x88>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b13      	cmp	r3, #19
 8007da2:	d90b      	bls.n	8007dbc <WLS_Check1+0x78>
		uSysStatusFlag &= ~f_WLEmpty1;
 8007da4:	4b08      	ldr	r3, [pc, #32]	; (8007dc8 <WLS_Check1+0x84>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dac:	4a06      	ldr	r2, [pc, #24]	; (8007dc8 <WLS_Check1+0x84>)
 8007dae:	6013      	str	r3, [r2, #0]
		WLEmptyCnt1 = 0;
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <WLS_Check1+0x80>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
		WLFullCnt1 = 20;
 8007db6:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <WLS_Check1+0x88>)
 8007db8:	2214      	movs	r2, #20
 8007dba:	701a      	strb	r2, [r3, #0]
}
 8007dbc:	bf00      	nop
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40011000 	.word	0x40011000
 8007dc4:	20000d42 	.word	0x20000d42
 8007dc8:	20000cf8 	.word	0x20000cf8
 8007dcc:	20000d44 	.word	0x20000d44

08007dd0 <WLS_Check2>:
//
void WLS_Check2()
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
#if _WLS_MASK  		
  if(HAL_GPIO_ReadPin(GPIOC,C_WLS_IN2) == 0)	/* 본체 물통 */
 8007dd4:	2180      	movs	r1, #128	; 0x80
 8007dd6:	481d      	ldr	r0, [pc, #116]	; (8007e4c <WLS_Check2+0x7c>)
 8007dd8:	f002 ff88 	bl	800acec <HAL_GPIO_ReadPin>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d11c      	bne.n	8007e1c <WLS_Check2+0x4c>
  {
	++WLEmptyCnt2;
 8007de2:	4b1b      	ldr	r3, [pc, #108]	; (8007e50 <WLS_Check2+0x80>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	3301      	adds	r3, #1
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	4b19      	ldr	r3, [pc, #100]	; (8007e50 <WLS_Check2+0x80>)
 8007dec:	701a      	strb	r2, [r3, #0]
	if(WLEmptyCnt2 >= 20)  /* 200m x 20 = 4000ms */
 8007dee:	4b18      	ldr	r3, [pc, #96]	; (8007e50 <WLS_Check2+0x80>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b13      	cmp	r3, #19
 8007df4:	d928      	bls.n	8007e48 <WLS_Check2+0x78>
	{
		if((uSysStatusFlag & f_WLEmpty2) == 0)
 8007df6:	4b17      	ldr	r3, [pc, #92]	; (8007e54 <WLS_Check2+0x84>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d105      	bne.n	8007e0e <WLS_Check2+0x3e>
		{
			uSysStatusFlag |= f_WLEmpty2;
 8007e02:	4b14      	ldr	r3, [pc, #80]	; (8007e54 <WLS_Check2+0x84>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e0a:	4a12      	ldr	r2, [pc, #72]	; (8007e54 <WLS_Check2+0x84>)
 8007e0c:	6013      	str	r3, [r2, #0]
#if _WLS_CHK
			cliPrintf("\n WL_BB_EMPTY");
#endif
		}
		WLEmptyCnt2 = 20;
 8007e0e:	4b10      	ldr	r3, [pc, #64]	; (8007e50 <WLS_Check2+0x80>)
 8007e10:	2214      	movs	r2, #20
 8007e12:	701a      	strb	r2, [r3, #0]
		WLFullCnt2 = 0;
 8007e14:	4b10      	ldr	r3, [pc, #64]	; (8007e58 <WLS_Check2+0x88>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	701a      	strb	r2, [r3, #0]
#else
  uSysStatusFlag &= ~f_WLEmpty2;
  WLEmptyCnt2 = 0;
  WLFullCnt2 = 20;
#endif
}
 8007e1a:	e015      	b.n	8007e48 <WLS_Check2+0x78>
	++WLFullCnt2;
 8007e1c:	4b0e      	ldr	r3, [pc, #56]	; (8007e58 <WLS_Check2+0x88>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	3301      	adds	r3, #1
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <WLS_Check2+0x88>)
 8007e26:	701a      	strb	r2, [r3, #0]
	if(WLFullCnt2 >= 20)
 8007e28:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <WLS_Check2+0x88>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b13      	cmp	r3, #19
 8007e2e:	d90b      	bls.n	8007e48 <WLS_Check2+0x78>
		uSysStatusFlag &= ~f_WLEmpty2;
 8007e30:	4b08      	ldr	r3, [pc, #32]	; (8007e54 <WLS_Check2+0x84>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007e38:	4a06      	ldr	r2, [pc, #24]	; (8007e54 <WLS_Check2+0x84>)
 8007e3a:	6013      	str	r3, [r2, #0]
		WLEmptyCnt2 = 0;
 8007e3c:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <WLS_Check2+0x80>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	701a      	strb	r2, [r3, #0]
		WLFullCnt2 = 20;
 8007e42:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <WLS_Check2+0x88>)
 8007e44:	2214      	movs	r2, #20
 8007e46:	701a      	strb	r2, [r3, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40011000 	.word	0x40011000
 8007e50:	20000d43 	.word	0x20000d43
 8007e54:	20000cf8 	.word	0x20000cf8
 8007e58:	20000d45 	.word	0x20000d45

08007e5c <WL_CheckInit>:
//
void WL_CheckInit()
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  WLS_Check2(); 		/* 본체 */
 8007e60:	f7ff ffb6 	bl	8007dd0 <WLS_Check2>
  WLS_Check1();		  /* 견인 */
 8007e64:	f7ff ff6e 	bl	8007d44 <WLS_Check1>
}
 8007e68:	bf00      	nop
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <WL_Check>:

//#define E_SOLv_1			GPIO_Pin_12		// Sol. Velve 
void WL_Check()
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  WLS_Check2();   /* 본체 */
 8007e70:	f7ff ffae 	bl	8007dd0 <WLS_Check2>
  WLS_Check1();   /* 견인 */
 8007e74:	f7ff ff66 	bl	8007d44 <WLS_Check1>
  //
  if(NotEmpty_WL())
 8007e78:	f000 f9e2 	bl	8008240 <NotEmpty_WL>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d01f      	beq.n	8007ec2 <WL_Check+0x56>
  { /* Sol V. Control */
	if((uSysStatusFlag & f_WLEmpty1) == 0)			/* 견인 물통 Full */
 8007e82:	4b36      	ldr	r3, [pc, #216]	; (8007f5c <WL_Check+0xf0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <WL_Check+0x30>
	{
		HAL_GPIO_WritePin(GPIOE, E_SOLv_1, GPIO_PIN_RESET);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e94:	4832      	ldr	r0, [pc, #200]	; (8007f60 <WL_Check+0xf4>)
 8007e96:	f002 ff40 	bl	800ad1a <HAL_GPIO_WritePin>
 8007e9a:	e005      	b.n	8007ea8 <WL_Check+0x3c>
    //GPIO_ResetBits(GPIOE,E_SOLv_1);				/* 견인쪽 (세워진 방향)*/
		//GPIO_ResetBits(GPIOE,E_SOLv_2);			
	}
	else
	{
    HAL_GPIO_WritePin(GPIOE, E_SOLv_1, GPIO_PIN_SET);
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007ea2:	482f      	ldr	r0, [pc, #188]	; (8007f60 <WL_Check+0xf4>)
 8007ea4:	f002 ff39 	bl	800ad1a <HAL_GPIO_WritePin>
		//GPIO_SetBits(GPIOE,E_SOLv_1);				/* 본체쪽 (눕혀진 방향)*/
		//GPIO_SetBits(GPIOE,E_SOLv_2);	
	}
	//	
	uSysStatusFlag &= ~f_ALLWLEmpty;
 8007ea8:	4b2c      	ldr	r3, [pc, #176]	; (8007f5c <WL_Check+0xf0>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eb0:	4a2a      	ldr	r2, [pc, #168]	; (8007f5c <WL_Check+0xf0>)
 8007eb2:	6013      	str	r3, [r2, #0]
	uSysStatusFlag &= ~f_WTEmptBuzReq;
 8007eb4:	4b29      	ldr	r3, [pc, #164]	; (8007f5c <WL_Check+0xf0>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ebc:	4a27      	ldr	r2, [pc, #156]	; (8007f5c <WL_Check+0xf0>)
 8007ebe:	6013      	str	r3, [r2, #0]
			FanSeq = FAN_STOP;
			FanWaittime = 2000;		/* Pump Off 후 4초 뒤 Fan Off 한다. */
		}
	}
  }
}
 8007ec0:	e04a      	b.n	8007f58 <WL_Check+0xec>
	uSysStatusFlag |= f_ALLWLEmpty;
 8007ec2:	4b26      	ldr	r3, [pc, #152]	; (8007f5c <WL_Check+0xf0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007eca:	4a24      	ldr	r2, [pc, #144]	; (8007f5c <WL_Check+0xf0>)
 8007ecc:	6013      	str	r3, [r2, #0]
	if(uSysStatusFlag & f_PumpACT)
 8007ece:	4b23      	ldr	r3, [pc, #140]	; (8007f5c <WL_Check+0xf0>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d027      	beq.n	8007f2a <WL_Check+0xbe>
		if(Real_AutoRunning())		/* 분사중이고 자율주행 중이면 All Motor Stop */ 	
 8007eda:	f7ff ff07 	bl	8007cec <Real_AutoRunning>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d015      	beq.n	8007f10 <WL_Check+0xa4>
			uSysStatusFlag |= f_ADRVnoWaterStop;
 8007ee4:	4b1d      	ldr	r3, [pc, #116]	; (8007f5c <WL_Check+0xf0>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eec:	4a1b      	ldr	r2, [pc, #108]	; (8007f5c <WL_Check+0xf0>)
 8007eee:	6013      	str	r3, [r2, #0]
			uSysStatusFlag |= f_WTEmptBuzReq;
 8007ef0:	4b1a      	ldr	r3, [pc, #104]	; (8007f5c <WL_Check+0xf0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ef8:	4a18      	ldr	r2, [pc, #96]	; (8007f5c <WL_Check+0xf0>)
 8007efa:	6013      	str	r3, [r2, #0]
			if(LKAUTOSeq) 
 8007efc:	4b19      	ldr	r3, [pc, #100]	; (8007f64 <WL_Check+0xf8>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <WL_Check+0x9e>
				LKAUTOSeq = 0;
 8007f04:	4b17      	ldr	r3, [pc, #92]	; (8007f64 <WL_Check+0xf8>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
			all_MotorStop();
 8007f0a:	f7fe fefd 	bl	8006d08 <all_MotorStop>
 8007f0e:	e012      	b.n	8007f36 <WL_Check+0xca>
			uSysStatusFlag &= ~f_ADRVnoWaterStop;		
 8007f10:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <WL_Check+0xf0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f18:	4a10      	ldr	r2, [pc, #64]	; (8007f5c <WL_Check+0xf0>)
 8007f1a:	6013      	str	r3, [r2, #0]
			PumpSeq = PUMP_STOP;
 8007f1c:	4b12      	ldr	r3, [pc, #72]	; (8007f68 <WL_Check+0xfc>)
 8007f1e:	220d      	movs	r2, #13
 8007f20:	701a      	strb	r2, [r3, #0]
			PumpWaittime = 10;
 8007f22:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <WL_Check+0x100>)
 8007f24:	220a      	movs	r2, #10
 8007f26:	801a      	strh	r2, [r3, #0]
 8007f28:	e005      	b.n	8007f36 <WL_Check+0xca>
		uSysStatusFlag &= ~f_ADRVnoWaterStop;		
 8007f2a:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <WL_Check+0xf0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f32:	4a0a      	ldr	r2, [pc, #40]	; (8007f5c <WL_Check+0xf0>)
 8007f34:	6013      	str	r3, [r2, #0]
	if(uSysStatusFlag & f_FanACT)
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <WL_Check+0xf0>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <WL_Check+0xec>
		if(FanSeq != FAN_STOP)
 8007f42:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <WL_Check+0x104>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	d006      	beq.n	8007f58 <WL_Check+0xec>
			FanSeq = FAN_STOP;
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <WL_Check+0x104>)
 8007f4c:	2205      	movs	r2, #5
 8007f4e:	701a      	strb	r2, [r3, #0]
			FanWaittime = 2000;		/* Pump Off 후 4초 뒤 Fan Off 한다. */
 8007f50:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <WL_Check+0x108>)
 8007f52:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007f56:	801a      	strh	r2, [r3, #0]
}
 8007f58:	bf00      	nop
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20000cf8 	.word	0x20000cf8
 8007f60:	40011800 	.word	0x40011800
 8007f64:	20000d59 	.word	0x20000d59
 8007f68:	20000d1e 	.word	0x20000d1e
 8007f6c:	20000d24 	.word	0x20000d24
 8007f70:	20000d1f 	.word	0x20000d1f
 8007f74:	20000d26 	.word	0x20000d26

08007f78 <Option_Check>:

//
void Option_Check()
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Pumpspeed) == 1)
 8007f7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007f80:	483b      	ldr	r0, [pc, #236]	; (8008070 <Option_Check+0xf8>)
 8007f82:	f002 feb3 	bl	800acec <HAL_GPIO_ReadPin>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d119      	bne.n	8007fc0 <Option_Check+0x48>
  { /* 접점위치, 1이 눌러진 상태 */
#if 0  
	cliPrintf("\n Pump_Speed");
#endif
	++u8_pumpspdCnt;
 8007f8c:	4b39      	ldr	r3, [pc, #228]	; (8008074 <Option_Check+0xfc>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	3301      	adds	r3, #1
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	4b37      	ldr	r3, [pc, #220]	; (8008074 <Option_Check+0xfc>)
 8007f96:	701a      	strb	r2, [r3, #0]
	if(u8_pumpspdCnt >= 40)
 8007f98:	4b36      	ldr	r3, [pc, #216]	; (8008074 <Option_Check+0xfc>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b27      	cmp	r3, #39	; 0x27
 8007f9e:	d929      	bls.n	8007ff4 <Option_Check+0x7c>
	{
		if((uSysStatusFlag & f_OPT_Pumpspeed) == 0)
 8007fa0:	4b35      	ldr	r3, [pc, #212]	; (8008078 <Option_Check+0x100>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d105      	bne.n	8007fb8 <Option_Check+0x40>
			uSysStatusFlag |= f_OPT_Pumpspeed;		/* Pump 5 */
 8007fac:	4b32      	ldr	r3, [pc, #200]	; (8008078 <Option_Check+0x100>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fb4:	4a30      	ldr	r2, [pc, #192]	; (8008078 <Option_Check+0x100>)
 8007fb6:	6013      	str	r3, [r2, #0]
		
		u8_pumpspdCnt = 40;
 8007fb8:	4b2e      	ldr	r3, [pc, #184]	; (8008074 <Option_Check+0xfc>)
 8007fba:	2228      	movs	r2, #40	; 0x28
 8007fbc:	701a      	strb	r2, [r3, #0]
 8007fbe:	e019      	b.n	8007ff4 <Option_Check+0x7c>
		
	}
  }
  else
  {
	if(u8_pumpspdCnt)
 8007fc0:	4b2c      	ldr	r3, [pc, #176]	; (8008074 <Option_Check+0xfc>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <Option_Check+0x5c>
		--u8_pumpspdCnt;
 8007fc8:	4b2a      	ldr	r3, [pc, #168]	; (8008074 <Option_Check+0xfc>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	4b28      	ldr	r3, [pc, #160]	; (8008074 <Option_Check+0xfc>)
 8007fd2:	701a      	strb	r2, [r3, #0]
	//
	if(u8_pumpspdCnt == 0)
 8007fd4:	4b27      	ldr	r3, [pc, #156]	; (8008074 <Option_Check+0xfc>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10b      	bne.n	8007ff4 <Option_Check+0x7c>
	{
		if((uSysStatusFlag & f_OPT_Pumpspeed) == f_OPT_Pumpspeed)
 8007fdc:	4b26      	ldr	r3, [pc, #152]	; (8008078 <Option_Check+0x100>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <Option_Check+0x7c>
			uSysStatusFlag &= ~f_OPT_Pumpspeed; 
 8007fe8:	4b23      	ldr	r3, [pc, #140]	; (8008078 <Option_Check+0x100>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff0:	4a21      	ldr	r2, [pc, #132]	; (8008078 <Option_Check+0x100>)
 8007ff2:	6013      	str	r3, [r2, #0]
		//cliPrintf("\n PUMP PRESS LOW-3   ");
		
	}
  }
  //
  if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 8007ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ff8:	481d      	ldr	r0, [pc, #116]	; (8008070 <Option_Check+0xf8>)
 8007ffa:	f002 fe77 	bl	800acec <HAL_GPIO_ReadPin>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b01      	cmp	r3, #1
 8008002:	d119      	bne.n	8008038 <Option_Check+0xc0>
  { /* 접점위치 */
	++u8_AutospdCnt;
 8008004:	4b1d      	ldr	r3, [pc, #116]	; (800807c <Option_Check+0x104>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	3301      	adds	r3, #1
 800800a:	b2da      	uxtb	r2, r3
 800800c:	4b1b      	ldr	r3, [pc, #108]	; (800807c <Option_Check+0x104>)
 800800e:	701a      	strb	r2, [r3, #0]
	if(u8_AutospdCnt >= 40)
 8008010:	4b1a      	ldr	r3, [pc, #104]	; (800807c <Option_Check+0x104>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b27      	cmp	r3, #39	; 0x27
 8008016:	d929      	bls.n	800806c <Option_Check+0xf4>
	{
		if((uSysStatusFlag & f_OPT_AutodrvSPD) == 0)
 8008018:	4b17      	ldr	r3, [pc, #92]	; (8008078 <Option_Check+0x100>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d105      	bne.n	8008030 <Option_Check+0xb8>
			uSysStatusFlag |= f_OPT_AutodrvSPD;
 8008024:	4b14      	ldr	r3, [pc, #80]	; (8008078 <Option_Check+0x100>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800802c:	4a12      	ldr	r2, [pc, #72]	; (8008078 <Option_Check+0x100>)
 800802e:	6013      	str	r3, [r2, #0]
  
		u8_AutospdCnt = 40;
 8008030:	4b12      	ldr	r3, [pc, #72]	; (800807c <Option_Check+0x104>)
 8008032:	2228      	movs	r2, #40	; 0x28
 8008034:	701a      	strb	r2, [r3, #0]
			uSysStatusFlag &= ~f_OPT_AutodrvSPD; 
		
		//cliPrintf("LOW_SPLAY_SPEED");
	}
  }
}
 8008036:	e019      	b.n	800806c <Option_Check+0xf4>
	if(u8_AutospdCnt)
 8008038:	4b10      	ldr	r3, [pc, #64]	; (800807c <Option_Check+0x104>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <Option_Check+0xd4>
		--u8_AutospdCnt;
 8008040:	4b0e      	ldr	r3, [pc, #56]	; (800807c <Option_Check+0x104>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	3b01      	subs	r3, #1
 8008046:	b2da      	uxtb	r2, r3
 8008048:	4b0c      	ldr	r3, [pc, #48]	; (800807c <Option_Check+0x104>)
 800804a:	701a      	strb	r2, [r3, #0]
	if(u8_AutospdCnt == 0)
 800804c:	4b0b      	ldr	r3, [pc, #44]	; (800807c <Option_Check+0x104>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10b      	bne.n	800806c <Option_Check+0xf4>
		if((uSysStatusFlag & f_OPT_AutodrvSPD) == f_OPT_AutodrvSPD)
 8008054:	4b08      	ldr	r3, [pc, #32]	; (8008078 <Option_Check+0x100>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <Option_Check+0xf4>
			uSysStatusFlag &= ~f_OPT_AutodrvSPD; 
 8008060:	4b05      	ldr	r3, [pc, #20]	; (8008078 <Option_Check+0x100>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008068:	4a03      	ldr	r2, [pc, #12]	; (8008078 <Option_Check+0x100>)
 800806a:	6013      	str	r3, [r2, #0]
}
 800806c:	bf00      	nop
 800806e:	bd80      	pop	{r7, pc}
 8008070:	40011800 	.word	0x40011800
 8008074:	20000d46 	.word	0x20000d46
 8008078:	20000cf8 	.word	0x20000cf8
 800807c:	20000d47 	.word	0x20000d47

08008080 <INIT_Check>:
//
void INIT_Check()
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
  uint8_t	iii,jjj;

  for(iii = 0; iii < 30; iii++)
 8008086:	2300      	movs	r3, #0
 8008088:	71fb      	strb	r3, [r7, #7]
 800808a:	e004      	b.n	8008096 <INIT_Check+0x16>
	Option_Check();
 800808c:	f7ff ff74 	bl	8007f78 <Option_Check>
  for(iii = 0; iii < 30; iii++)
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	3301      	adds	r3, #1
 8008094:	71fb      	strb	r3, [r7, #7]
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	2b1d      	cmp	r3, #29
 800809a:	d9f7      	bls.n	800808c <INIT_Check+0xc>

  if(u16_DebugFlag == 1)
 800809c:	4b5b      	ldr	r3, [pc, #364]	; (800820c <INIT_Check+0x18c>)
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d127      	bne.n	80080f4 <INIT_Check+0x74>
  {
    if(uSysStatusFlag & f_OPT_AutodrvSPD)
 80080a4:	4b5a      	ldr	r3, [pc, #360]	; (8008210 <INIT_Check+0x190>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <INIT_Check+0x38>
    cliPrintf("\n AUTO DRV SPEED : HIGH(3)");
 80080b0:	4858      	ldr	r0, [pc, #352]	; (8008214 <INIT_Check+0x194>)
 80080b2:	f7fb fdcf 	bl	8003c54 <cliPrintf>
 80080b6:	e002      	b.n	80080be <INIT_Check+0x3e>
    else
    cliPrintf("\n AUTO DRV SPEED : LOW(2)");
 80080b8:	4857      	ldr	r0, [pc, #348]	; (8008218 <INIT_Check+0x198>)
 80080ba:	f7fb fdcb 	bl	8003c54 <cliPrintf>
    
    if(uSysStatusFlag & f_OPT_Pumpspeed)
 80080be:	4b54      	ldr	r3, [pc, #336]	; (8008210 <INIT_Check+0x190>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <INIT_Check+0x52>
      cliPrintf("   PUMP_HIGH(5_LEVEL)");
 80080ca:	4854      	ldr	r0, [pc, #336]	; (800821c <INIT_Check+0x19c>)
 80080cc:	f7fb fdc2 	bl	8003c54 <cliPrintf>
 80080d0:	e002      	b.n	80080d8 <INIT_Check+0x58>
    else
    cliPrintf("   PUMP_LOW(3_LEVEL)");
 80080d2:	4853      	ldr	r0, [pc, #332]	; (8008220 <INIT_Check+0x1a0>)
 80080d4:	f7fb fdbe 	bl	8003c54 <cliPrintf>
    //
    if(f_commCAN)
 80080d8:	4b52      	ldr	r3, [pc, #328]	; (8008224 <INIT_Check+0x1a4>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <INIT_Check+0x68>
      cliPrintf("  --> CAN");
 80080e0:	4851      	ldr	r0, [pc, #324]	; (8008228 <INIT_Check+0x1a8>)
 80080e2:	f7fb fdb7 	bl	8003c54 <cliPrintf>
 80080e6:	e002      	b.n	80080ee <INIT_Check+0x6e>
    else
    cliPrintf("  --> UART");
 80080e8:	4850      	ldr	r0, [pc, #320]	; (800822c <INIT_Check+0x1ac>)
 80080ea:	f7fb fdb3 	bl	8003c54 <cliPrintf>

  #if _PT_NPN
    cliPrintf("  NPN");	
 80080ee:	4850      	ldr	r0, [pc, #320]	; (8008230 <INIT_Check+0x1b0>)
 80080f0:	f7fb fdb0 	bl	8003c54 <cliPrintf>
    cliPrintf("  PNP");	
  #endif
  }
  
  
  for(iii = 0; iii < 5; iii++)
 80080f4:	2300      	movs	r3, #0
 80080f6:	71fb      	strb	r3, [r7, #7]
 80080f8:	e032      	b.n	8008160 <INIT_Check+0xe0>
  {
	bcon_Req = 0;
 80080fa:	4b4e      	ldr	r3, [pc, #312]	; (8008234 <INIT_Check+0x1b4>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	701a      	strb	r2, [r3, #0]
	Bcon_Out();
 8008100:	f7ff fddc 	bl	8007cbc <Bcon_Out>
	R_LED_Off();
 8008104:	f7ff faaa 	bl	800765c <R_LED_Off>
	G_LED_On();
 8008108:	f7ff fab4 	bl	8007674 <G_LED_On>
	for(jjj = 0; jjj < 5; jjj++)
 800810c:	2300      	movs	r3, #0
 800810e:	71bb      	strb	r3, [r7, #6]
 8008110:	e007      	b.n	8008122 <INIT_Check+0xa2>
	{
    	HAL_Delay(80);
 8008112:	2050      	movs	r0, #80	; 0x50
 8008114:	f000 fa0c 	bl	8008530 <HAL_Delay>
		WL_CheckInit(); 		/* */
 8008118:	f7ff fea0 	bl	8007e5c <WL_CheckInit>
	for(jjj = 0; jjj < 5; jjj++)
 800811c:	79bb      	ldrb	r3, [r7, #6]
 800811e:	3301      	adds	r3, #1
 8008120:	71bb      	strb	r3, [r7, #6]
 8008122:	79bb      	ldrb	r3, [r7, #6]
 8008124:	2b04      	cmp	r3, #4
 8008126:	d9f4      	bls.n	8008112 <INIT_Check+0x92>
	}
	Battery_Check();
 8008128:	f7ff fb22 	bl	8007770 <Battery_Check>
	bcon_Req = bcon_R;
 800812c:	4b41      	ldr	r3, [pc, #260]	; (8008234 <INIT_Check+0x1b4>)
 800812e:	2201      	movs	r2, #1
 8008130:	701a      	strb	r2, [r3, #0]
	Bcon_Out();
 8008132:	f7ff fdc3 	bl	8007cbc <Bcon_Out>
	R_LED_On();
 8008136:	f7ff fa85 	bl	8007644 <R_LED_On>
	G_LED_Off();
 800813a:	f7ff faa7 	bl	800768c <G_LED_Off>
	for(jjj = 0; jjj < 5; jjj++)
 800813e:	2300      	movs	r3, #0
 8008140:	71bb      	strb	r3, [r7, #6]
 8008142:	e007      	b.n	8008154 <INIT_Check+0xd4>
	{
		HAL_Delay(80);
 8008144:	2050      	movs	r0, #80	; 0x50
 8008146:	f000 f9f3 	bl	8008530 <HAL_Delay>
		WL_CheckInit(); 
 800814a:	f7ff fe87 	bl	8007e5c <WL_CheckInit>
	for(jjj = 0; jjj < 5; jjj++)
 800814e:	79bb      	ldrb	r3, [r7, #6]
 8008150:	3301      	adds	r3, #1
 8008152:	71bb      	strb	r3, [r7, #6]
 8008154:	79bb      	ldrb	r3, [r7, #6]
 8008156:	2b04      	cmp	r3, #4
 8008158:	d9f4      	bls.n	8008144 <INIT_Check+0xc4>
  for(iii = 0; iii < 5; iii++)
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	3301      	adds	r3, #1
 800815e:	71fb      	strb	r3, [r7, #7]
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b04      	cmp	r3, #4
 8008164:	d9c9      	bls.n	80080fa <INIT_Check+0x7a>
	}

  }
  
  // Init Sol_V 정열
  if((uSysStatusFlag & f_WLEmpty1) == 0)
 8008166:	4b2a      	ldr	r3, [pc, #168]	; (8008210 <INIT_Check+0x190>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d106      	bne.n	8008180 <INIT_Check+0x100>
  {	
    /* 견인 물통 Full */
	  HAL_GPIO_WritePin(GPIOE, E_SOLv_1, GPIO_PIN_RESET);
 8008172:	2200      	movs	r2, #0
 8008174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008178:	482f      	ldr	r0, [pc, #188]	; (8008238 <INIT_Check+0x1b8>)
 800817a:	f002 fdce 	bl	800ad1a <HAL_GPIO_WritePin>
 800817e:	e012      	b.n	80081a6 <INIT_Check+0x126>
  }
  else if((uSysStatusFlag & f_WLEmpty2) == 0)
 8008180:	4b23      	ldr	r3, [pc, #140]	; (8008210 <INIT_Check+0x190>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d106      	bne.n	800819a <INIT_Check+0x11a>
  {	
    /* 본체 물통 Full */	
	  HAL_GPIO_WritePin(GPIOE, E_SOLv_1, GPIO_PIN_SET);
 800818c:	2201      	movs	r2, #1
 800818e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008192:	4829      	ldr	r0, [pc, #164]	; (8008238 <INIT_Check+0x1b8>)
 8008194:	f002 fdc1 	bl	800ad1a <HAL_GPIO_WritePin>
 8008198:	e005      	b.n	80081a6 <INIT_Check+0x126>
  }
  else
  {	
    /* All WT Empty */
	  HAL_GPIO_WritePin(GPIOE, E_SOLv_1, GPIO_PIN_RESET);
 800819a:	2200      	movs	r2, #0
 800819c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081a0:	4825      	ldr	r0, [pc, #148]	; (8008238 <INIT_Check+0x1b8>)
 80081a2:	f002 fdba 	bl	800ad1a <HAL_GPIO_WritePin>
  }
  // Sys 안정화 Delay 5초 
  for(m8_Buff = 0; m8_Buff < 4; m8_Buff++)
 80081a6:	4b25      	ldr	r3, [pc, #148]	; (800823c <INIT_Check+0x1bc>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]
 80081ac:	e01d      	b.n	80081ea <INIT_Check+0x16a>
  {
    bcon_Req = 0;
 80081ae:	4b21      	ldr	r3, [pc, #132]	; (8008234 <INIT_Check+0x1b4>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
    Bcon_Out();
 80081b4:	f7ff fd82 	bl	8007cbc <Bcon_Out>
    R_LED_Off();
 80081b8:	f7ff fa50 	bl	800765c <R_LED_Off>
    G_LED_On();
 80081bc:	f7ff fa5a 	bl	8007674 <G_LED_On>
    HAL_Delay(250);
 80081c0:	20fa      	movs	r0, #250	; 0xfa
 80081c2:	f000 f9b5 	bl	8008530 <HAL_Delay>
        
    bcon_Req = bcon_R;
 80081c6:	4b1b      	ldr	r3, [pc, #108]	; (8008234 <INIT_Check+0x1b4>)
 80081c8:	2201      	movs	r2, #1
 80081ca:	701a      	strb	r2, [r3, #0]
    Bcon_Out();
 80081cc:	f7ff fd76 	bl	8007cbc <Bcon_Out>
    R_LED_On();
 80081d0:	f7ff fa38 	bl	8007644 <R_LED_On>
    G_LED_Off();
 80081d4:	f7ff fa5a 	bl	800768c <G_LED_Off>
    HAL_Delay(250);
 80081d8:	20fa      	movs	r0, #250	; 0xfa
 80081da:	f000 f9a9 	bl	8008530 <HAL_Delay>
  for(m8_Buff = 0; m8_Buff < 4; m8_Buff++)
 80081de:	4b17      	ldr	r3, [pc, #92]	; (800823c <INIT_Check+0x1bc>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	3301      	adds	r3, #1
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	4b15      	ldr	r3, [pc, #84]	; (800823c <INIT_Check+0x1bc>)
 80081e8:	701a      	strb	r2, [r3, #0]
 80081ea:	4b14      	ldr	r3, [pc, #80]	; (800823c <INIT_Check+0x1bc>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d9dd      	bls.n	80081ae <INIT_Check+0x12e>
  }
  //  
  bcon_Req = 0;
 80081f2:	4b10      	ldr	r3, [pc, #64]	; (8008234 <INIT_Check+0x1b4>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	701a      	strb	r2, [r3, #0]
  Bcon_Out();
 80081f8:	f7ff fd60 	bl	8007cbc <Bcon_Out>
  R_LED_Off();
 80081fc:	f7ff fa2e 	bl	800765c <R_LED_Off>
  G_LED_On();	/* Run Indicator */
 8008200:	f7ff fa38 	bl	8007674 <G_LED_On>
  
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	20000d08 	.word	0x20000d08
 8008210:	20000cf8 	.word	0x20000cf8
 8008214:	08012d5c 	.word	0x08012d5c
 8008218:	08012d78 	.word	0x08012d78
 800821c:	08012d94 	.word	0x08012d94
 8008220:	08012dac 	.word	0x08012dac
 8008224:	20000cf2 	.word	0x20000cf2
 8008228:	08012dc4 	.word	0x08012dc4
 800822c:	08012dd0 	.word	0x08012dd0
 8008230:	08012ddc 	.word	0x08012ddc
 8008234:	20000d33 	.word	0x20000d33
 8008238:	40011800 	.word	0x40011800
 800823c:	20000d49 	.word	0x20000d49

08008240 <NotEmpty_WL>:
//
/*
	본체와 견인물통이 한족이라도 물이 잇으면, 1을 리턴 함.
*/
uint8_t NotEmpty_WL()
{
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_WLEmpty1) && (uSysStatusFlag & f_WLEmpty2))
 8008244:	4b09      	ldr	r3, [pc, #36]	; (800826c <NotEmpty_WL+0x2c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d007      	beq.n	8008260 <NotEmpty_WL+0x20>
 8008250:	4b06      	ldr	r3, [pc, #24]	; (800826c <NotEmpty_WL+0x2c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <NotEmpty_WL+0x20>
	  return 0;
 800825c:	2300      	movs	r3, #0
 800825e:	e000      	b.n	8008262 <NotEmpty_WL+0x22>
  else
	  return 1;
 8008260:	2301      	movs	r3, #1
}
 8008262:	4618      	mov	r0, r3
 8008264:	46bd      	mov	sp, r7
 8008266:	bc80      	pop	{r7}
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	20000cf8 	.word	0x20000cf8

08008270 <Var_Init>:
//
void Var_Init()
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
  uSysStatusFlag = 0;
 8008274:	4b40      	ldr	r3, [pc, #256]	; (8008378 <Var_Init+0x108>)
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
  
  Local_Key.lK_ChatCnt = 0;
 800827a:	4b40      	ldr	r3, [pc, #256]	; (800837c <Var_Init+0x10c>)
 800827c:	2200      	movs	r2, #0
 800827e:	80da      	strh	r2, [r3, #6]
  RFR_Key.rK_ChatCnt = 0;
 8008280:	4b3f      	ldr	r3, [pc, #252]	; (8008380 <Var_Init+0x110>)
 8008282:	2200      	movs	r2, #0
 8008284:	80da      	strh	r2, [r3, #6]
  RK_PermitTime = 0;
 8008286:	4b3f      	ldr	r3, [pc, #252]	; (8008384 <Var_Init+0x114>)
 8008288:	2200      	movs	r2, #0
 800828a:	801a      	strh	r2, [r3, #0]
  	
  smt_Command = 0;
 800828c:	4b3e      	ldr	r3, [pc, #248]	; (8008388 <Var_Init+0x118>)
 800828e:	2200      	movs	r2, #0
 8008290:	801a      	strh	r2, [r3, #0]
  u16_DebugFlag = 0;
 8008292:	4b3e      	ldr	r3, [pc, #248]	; (800838c <Var_Init+0x11c>)
 8008294:	2200      	movs	r2, #0
 8008296:	801a      	strh	r2, [r3, #0]
  u8_TestFlag = 0;
 8008298:	4b3d      	ldr	r3, [pc, #244]	; (8008390 <Var_Init+0x120>)
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
  uTimerFlag = 0;
 800829e:	4b3d      	ldr	r3, [pc, #244]	; (8008394 <Var_Init+0x124>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	801a      	strh	r2, [r3, #0]
	  
  WLEmptyCnt1 = 0;		  /* 견인 Empty Count 4초 */
 80082a4:	4b3c      	ldr	r3, [pc, #240]	; (8008398 <Var_Init+0x128>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	701a      	strb	r2, [r3, #0]
  WLEmptyCnt2 = 0;		  /* 본체 Empty Count 4초 */
 80082aa:	4b3c      	ldr	r3, [pc, #240]	; (800839c <Var_Init+0x12c>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	701a      	strb	r2, [r3, #0]
  WLFullCnt1 = 0;		  /* 견인 Full Count  2초 */
 80082b0:	4b3b      	ldr	r3, [pc, #236]	; (80083a0 <Var_Init+0x130>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	701a      	strb	r2, [r3, #0]
  WLFullCnt2 = 0;		  /* 본체 Full Count  2초 */
 80082b6:	4b3b      	ldr	r3, [pc, #236]	; (80083a4 <Var_Init+0x134>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	701a      	strb	r2, [r3, #0]
  	
  ADC10_Cnt = 0;
 80082bc:	4b3a      	ldr	r3, [pc, #232]	; (80083a8 <Var_Init+0x138>)
 80082be:	2200      	movs	r2, #0
 80082c0:	701a      	strb	r2, [r3, #0]
  LowBat_Cnt = 0;
 80082c2:	4b3a      	ldr	r3, [pc, #232]	; (80083ac <Var_Init+0x13c>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	701a      	strb	r2, [r3, #0]
  	  
  DMotorSeq = DMOTOR_STOP;
 80082c8:	4b39      	ldr	r3, [pc, #228]	; (80083b0 <Var_Init+0x140>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	701a      	strb	r2, [r3, #0]
  SMotorSeq = SMOTOR_STOP;
 80082ce:	4b39      	ldr	r3, [pc, #228]	; (80083b4 <Var_Init+0x144>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	701a      	strb	r2, [r3, #0]
  FanSeq = FAN_STOP;
 80082d4:	4b38      	ldr	r3, [pc, #224]	; (80083b8 <Var_Init+0x148>)
 80082d6:	2205      	movs	r2, #5
 80082d8:	701a      	strb	r2, [r3, #0]
  PumpSeq = PUMP_STOP;
 80082da:	4b38      	ldr	r3, [pc, #224]	; (80083bc <Var_Init+0x14c>)
 80082dc:	220d      	movs	r2, #13
 80082de:	701a      	strb	r2, [r3, #0]
	  
  FAN_Speed = 1;
 80082e0:	4b37      	ldr	r3, [pc, #220]	; (80083c0 <Var_Init+0x150>)
 80082e2:	2201      	movs	r2, #1
 80082e4:	701a      	strb	r2, [r3, #0]
  DRV_Speed = 1;
 80082e6:	4b37      	ldr	r3, [pc, #220]	; (80083c4 <Var_Init+0x154>)
 80082e8:	2201      	movs	r2, #1
 80082ea:	701a      	strb	r2, [r3, #0]
  	  
  DMotorTKPWM = DRV_ADC[DRV_SPDTBNo][DRV_Speed];
 80082ec:	4b36      	ldr	r3, [pc, #216]	; (80083c8 <Var_Init+0x158>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	4619      	mov	r1, r3
 80082f2:	4b34      	ldr	r3, [pc, #208]	; (80083c4 <Var_Init+0x154>)
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	4618      	mov	r0, r3
 80082f8:	4a34      	ldr	r2, [pc, #208]	; (80083cc <Var_Init+0x15c>)
 80082fa:	460b      	mov	r3, r1
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	440b      	add	r3, r1
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	4413      	add	r3, r2
 8008304:	4403      	add	r3, r0
 8008306:	781a      	ldrb	r2, [r3, #0]
 8008308:	4b31      	ldr	r3, [pc, #196]	; (80083d0 <Var_Init+0x160>)
 800830a:	701a      	strb	r2, [r3, #0]
  SMotorTKPWM = STR_ADC[2];
 800830c:	4b31      	ldr	r3, [pc, #196]	; (80083d4 <Var_Init+0x164>)
 800830e:	789a      	ldrb	r2, [r3, #2]
 8008310:	4b31      	ldr	r3, [pc, #196]	; (80083d8 <Var_Init+0x168>)
 8008312:	701a      	strb	r2, [r3, #0]
  FanTKPWM = FAN_PWM[FAN_Speed];
 8008314:	4b2a      	ldr	r3, [pc, #168]	; (80083c0 <Var_Init+0x150>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	461a      	mov	r2, r3
 800831a:	4b30      	ldr	r3, [pc, #192]	; (80083dc <Var_Init+0x16c>)
 800831c:	5c9a      	ldrb	r2, [r3, r2]
 800831e:	4b30      	ldr	r3, [pc, #192]	; (80083e0 <Var_Init+0x170>)
 8008320:	701a      	strb	r2, [r3, #0]
  	
  u8_pumpspdCnt = 20;
 8008322:	4b30      	ldr	r3, [pc, #192]	; (80083e4 <Var_Init+0x174>)
 8008324:	2214      	movs	r2, #20
 8008326:	701a      	strb	r2, [r3, #0]
  u8_AutospdCnt = 20; 
 8008328:	4b2f      	ldr	r3, [pc, #188]	; (80083e8 <Var_Init+0x178>)
 800832a:	2214      	movs	r2, #20
 800832c:	701a      	strb	r2, [r3, #0]
  
  	
  u8_SMTDlmitErCnt = 0; 
 800832e:	4b2f      	ldr	r3, [pc, #188]	; (80083ec <Var_Init+0x17c>)
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]
  u8_SMTCsumErCnt = 0;
 8008334:	4b2e      	ldr	r3, [pc, #184]	; (80083f0 <Var_Init+0x180>)
 8008336:	2200      	movs	r2, #0
 8008338:	701a      	strb	r2, [r3, #0]
  u2_ErCnt = 0;
 800833a:	4b2e      	ldr	r3, [pc, #184]	; (80083f4 <Var_Init+0x184>)
 800833c:	2200      	movs	r2, #0
 800833e:	701a      	strb	r2, [r3, #0]
	
  u16_TestCnt = 0;
 8008340:	4b2d      	ldr	r3, [pc, #180]	; (80083f8 <Var_Init+0x188>)
 8008342:	2200      	movs	r2, #0
 8008344:	801a      	strh	r2, [r3, #0]
  smt_DbgCommand = 0;
 8008346:	4b2d      	ldr	r3, [pc, #180]	; (80083fc <Var_Init+0x18c>)
 8008348:	2200      	movs	r2, #0
 800834a:	701a      	strb	r2, [r3, #0]

  LKAUTOSeq = 0;
 800834c:	4b2c      	ldr	r3, [pc, #176]	; (8008400 <Var_Init+0x190>)
 800834e:	2200      	movs	r2, #0
 8008350:	701a      	strb	r2, [r3, #0]

  uSysStatusFlag |= f_Pump1st;
 8008352:	4b09      	ldr	r3, [pc, #36]	; (8008378 <Var_Init+0x108>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800835a:	4a07      	ldr	r2, [pc, #28]	; (8008378 <Var_Init+0x108>)
 800835c:	6013      	str	r3, [r2, #0]
  
  bcon_Req = 0;
 800835e:	4b29      	ldr	r3, [pc, #164]	; (8008404 <Var_Init+0x194>)
 8008360:	2200      	movs	r2, #0
 8008362:	701a      	strb	r2, [r3, #0]
  bcon_Out = 0;
 8008364:	4b28      	ldr	r3, [pc, #160]	; (8008408 <Var_Init+0x198>)
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
  bcon_Req = bcon_R;
 800836a:	4b26      	ldr	r3, [pc, #152]	; (8008404 <Var_Init+0x194>)
 800836c:	2201      	movs	r2, #1
 800836e:	701a      	strb	r2, [r3, #0]
  Bcon_Out();
 8008370:	f7ff fca4 	bl	8007cbc <Bcon_Out>
}
 8008374:	bf00      	nop
 8008376:	bd80      	pop	{r7, pc}
 8008378:	20000cf8 	.word	0x20000cf8
 800837c:	20000cdc 	.word	0x20000cdc
 8008380:	20000ce8 	.word	0x20000ce8
 8008384:	20000d30 	.word	0x20000d30
 8008388:	20000d36 	.word	0x20000d36
 800838c:	20000d08 	.word	0x20000d08
 8008390:	20000d0a 	.word	0x20000d0a
 8008394:	20000cf4 	.word	0x20000cf4
 8008398:	20000d42 	.word	0x20000d42
 800839c:	20000d43 	.word	0x20000d43
 80083a0:	20000d44 	.word	0x20000d44
 80083a4:	20000d45 	.word	0x20000d45
 80083a8:	20000d0d 	.word	0x20000d0d
 80083ac:	20000d38 	.word	0x20000d38
 80083b0:	20000d1c 	.word	0x20000d1c
 80083b4:	20000d1d 	.word	0x20000d1d
 80083b8:	20000d1f 	.word	0x20000d1f
 80083bc:	20000d1e 	.word	0x20000d1e
 80083c0:	20000d32 	.word	0x20000d32
 80083c4:	20000038 	.word	0x20000038
 80083c8:	20000d5d 	.word	0x20000d5d
 80083cc:	08012dfc 	.word	0x08012dfc
 80083d0:	20000d28 	.word	0x20000d28
 80083d4:	08012e08 	.word	0x08012e08
 80083d8:	20000d29 	.word	0x20000d29
 80083dc:	08012e0c 	.word	0x08012e0c
 80083e0:	20000d2a 	.word	0x20000d2a
 80083e4:	20000d46 	.word	0x20000d46
 80083e8:	20000d47 	.word	0x20000d47
 80083ec:	20000d0b 	.word	0x20000d0b
 80083f0:	20000d0c 	.word	0x20000d0c
 80083f4:	20000d48 	.word	0x20000d48
 80083f8:	20000d3e 	.word	0x20000d3e
 80083fc:	20000d40 	.word	0x20000d40
 8008400:	20000d59 	.word	0x20000d59
 8008404:	20000d33 	.word	0x20000d33
 8008408:	20000d34 	.word	0x20000d34

0800840c <init_set>:
void init_set()
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
	if ( load_value.Motor_type == 1)
 8008410:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <init_set+0x44>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d103      	bne.n	8008420 <init_set+0x14>
	{
		DRV_SPDTBNo = 0; // Curtis type
 8008418:	4b0e      	ldr	r3, [pc, #56]	; (8008454 <init_set+0x48>)
 800841a:	2200      	movs	r2, #0
 800841c:	701a      	strb	r2, [r3, #0]
 800841e:	e002      	b.n	8008426 <init_set+0x1a>
	}
	else 
	{
		DRV_SPDTBNo = 1; // DMCS type
 8008420:	4b0c      	ldr	r3, [pc, #48]	; (8008454 <init_set+0x48>)
 8008422:	2201      	movs	r2, #1
 8008424:	701a      	strb	r2, [r3, #0]
	}
	

	if ( load_value.Battery_type == 1 )
 8008426:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <init_set+0x44>)
 8008428:	78db      	ldrb	r3, [r3, #3]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d106      	bne.n	800843c <init_set+0x30>
	{
		
		Idle_bat_limit = 48;   // Atlas
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <init_set+0x4c>)
 8008430:	4a0a      	ldr	r2, [pc, #40]	; (800845c <init_set+0x50>)
 8008432:	601a      	str	r2, [r3, #0]
		DisCharge_bat_limit = 44.5; 
 8008434:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <init_set+0x54>)
 8008436:	4a0b      	ldr	r2, [pc, #44]	; (8008464 <init_set+0x58>)
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	e005      	b.n	8008448 <init_set+0x3c>
	}
	else  
	{
		Idle_bat_limit = 47;   // Longist
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <init_set+0x4c>)
 800843e:	4a0a      	ldr	r2, [pc, #40]	; (8008468 <init_set+0x5c>)
 8008440:	601a      	str	r2, [r3, #0]
		DisCharge_bat_limit = 44.5;
 8008442:	4b07      	ldr	r3, [pc, #28]	; (8008460 <init_set+0x54>)
 8008444:	4a07      	ldr	r2, [pc, #28]	; (8008464 <init_set+0x58>)
 8008446:	601a      	str	r2, [r3, #0]



	

}
 8008448:	bf00      	nop
 800844a:	46bd      	mov	sp, r7
 800844c:	bc80      	pop	{r7}
 800844e:	4770      	bx	lr
 8008450:	20000dd4 	.word	0x20000dd4
 8008454:	20000d5d 	.word	0x20000d5d
 8008458:	20000dcc 	.word	0x20000dcc
 800845c:	42400000 	.word	0x42400000
 8008460:	20000dd0 	.word	0x20000dd0
 8008464:	42320000 	.word	0x42320000
 8008468:	423c0000 	.word	0x423c0000

0800846c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008470:	4b08      	ldr	r3, [pc, #32]	; (8008494 <HAL_Init+0x28>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a07      	ldr	r2, [pc, #28]	; (8008494 <HAL_Init+0x28>)
 8008476:	f043 0310 	orr.w	r3, r3, #16
 800847a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800847c:	2003      	movs	r0, #3
 800847e:	f001 fb91 	bl	8009ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008482:	200f      	movs	r0, #15
 8008484:	f000 f808 	bl	8008498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008488:	f7f9 fa98 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	40022000 	.word	0x40022000

08008498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80084a0:	4b12      	ldr	r3, [pc, #72]	; (80084ec <HAL_InitTick+0x54>)
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	4b12      	ldr	r3, [pc, #72]	; (80084f0 <HAL_InitTick+0x58>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	4619      	mov	r1, r3
 80084aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80084b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 fbb7 	bl	8009c2a <HAL_SYSTICK_Config>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e00e      	b.n	80084e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b0f      	cmp	r3, #15
 80084ca:	d80a      	bhi.n	80084e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084cc:	2200      	movs	r2, #0
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	f001 fb71 	bl	8009bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084d8:	4a06      	ldr	r2, [pc, #24]	; (80084f4 <HAL_InitTick+0x5c>)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	e000      	b.n	80084e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	20000000 	.word	0x20000000
 80084f0:	2000004c 	.word	0x2000004c
 80084f4:	20000048 	.word	0x20000048

080084f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084f8:	b480      	push	{r7}
 80084fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084fc:	4b05      	ldr	r3, [pc, #20]	; (8008514 <HAL_IncTick+0x1c>)
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	4b05      	ldr	r3, [pc, #20]	; (8008518 <HAL_IncTick+0x20>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4413      	add	r3, r2
 8008508:	4a03      	ldr	r2, [pc, #12]	; (8008518 <HAL_IncTick+0x20>)
 800850a:	6013      	str	r3, [r2, #0]
}
 800850c:	bf00      	nop
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr
 8008514:	2000004c 	.word	0x2000004c
 8008518:	20000df0 	.word	0x20000df0

0800851c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800851c:	b480      	push	{r7}
 800851e:	af00      	add	r7, sp, #0
  return uwTick;
 8008520:	4b02      	ldr	r3, [pc, #8]	; (800852c <HAL_GetTick+0x10>)
 8008522:	681b      	ldr	r3, [r3, #0]
}
 8008524:	4618      	mov	r0, r3
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr
 800852c:	20000df0 	.word	0x20000df0

08008530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008538:	f7ff fff0 	bl	800851c <HAL_GetTick>
 800853c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008548:	d005      	beq.n	8008556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800854a:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <HAL_Delay+0x44>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4413      	add	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]
  }


  while ((HAL_GetTick() - tickstart) < wait)
 8008556:	bf00      	nop
 8008558:	f7ff ffe0 	bl	800851c <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	429a      	cmp	r2, r3
 8008566:	d8f7      	bhi.n	8008558 <HAL_Delay+0x28>
  {
  }
}
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	2000004c 	.word	0x2000004c

08008578 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e0ce      	b.n	8008738 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d109      	bne.n	80085bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7f8 fed0 	bl	800135c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fb11 	bl	8008be4 <ADC_ConversionStop_Disable>
 80085c2:	4603      	mov	r3, r0
 80085c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ca:	f003 0310 	and.w	r3, r3, #16
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f040 80a9 	bne.w	8008726 <HAL_ADC_Init+0x1ae>
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f040 80a5 	bne.w	8008726 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80085e4:	f023 0302 	bic.w	r3, r3, #2
 80085e8:	f043 0202 	orr.w	r2, r3, #2
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4951      	ldr	r1, [pc, #324]	; (8008740 <HAL_ADC_Init+0x1c8>)
 80085fa:	428b      	cmp	r3, r1
 80085fc:	d10a      	bne.n	8008614 <HAL_ADC_Init+0x9c>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008606:	d002      	beq.n	800860e <HAL_ADC_Init+0x96>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	e004      	b.n	8008618 <HAL_ADC_Init+0xa0>
 800860e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008612:	e001      	b.n	8008618 <HAL_ADC_Init+0xa0>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008618:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	7b1b      	ldrb	r3, [r3, #12]
 800861e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008620:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	4313      	orrs	r3, r2
 8008626:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008630:	d003      	beq.n	800863a <HAL_ADC_Init+0xc2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d102      	bne.n	8008640 <HAL_ADC_Init+0xc8>
 800863a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800863e:	e000      	b.n	8008642 <HAL_ADC_Init+0xca>
 8008640:	2300      	movs	r3, #0
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	4313      	orrs	r3, r2
 8008646:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	7d1b      	ldrb	r3, [r3, #20]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d119      	bne.n	8008684 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	7b1b      	ldrb	r3, [r3, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d109      	bne.n	800866c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	3b01      	subs	r3, #1
 800865e:	035a      	lsls	r2, r3, #13
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	4313      	orrs	r3, r2
 8008664:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008668:	613b      	str	r3, [r7, #16]
 800866a:	e00b      	b.n	8008684 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	f043 0220 	orr.w	r2, r3, #32
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	f043 0201 	orr.w	r2, r3, #1
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	430a      	orrs	r2, r1
 8008696:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689a      	ldr	r2, [r3, #8]
 800869e:	4b29      	ldr	r3, [pc, #164]	; (8008744 <HAL_ADC_Init+0x1cc>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6812      	ldr	r2, [r2, #0]
 80086a6:	68b9      	ldr	r1, [r7, #8]
 80086a8:	430b      	orrs	r3, r1
 80086aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b4:	d003      	beq.n	80086be <HAL_ADC_Init+0x146>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d104      	bne.n	80086c8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	051b      	lsls	r3, r3, #20
 80086c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	430a      	orrs	r2, r1
 80086da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689a      	ldr	r2, [r3, #8]
 80086e2:	4b19      	ldr	r3, [pc, #100]	; (8008748 <HAL_ADC_Init+0x1d0>)
 80086e4:	4013      	ands	r3, r2
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d10b      	bne.n	8008704 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	f023 0303 	bic.w	r3, r3, #3
 80086fa:	f043 0201 	orr.w	r2, r3, #1
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008702:	e018      	b.n	8008736 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008708:	f023 0312 	bic.w	r3, r3, #18
 800870c:	f043 0210 	orr.w	r2, r3, #16
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	f043 0201 	orr.w	r2, r3, #1
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008724:	e007      	b.n	8008736 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	f043 0210 	orr.w	r2, r3, #16
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008736:	7dfb      	ldrb	r3, [r7, #23]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3718      	adds	r7, #24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	40013c00 	.word	0x40013c00
 8008744:	ffe1f7fd 	.word	0xffe1f7fd
 8008748:	ff1f0efe 	.word	0xff1f0efe

0800874c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a64      	ldr	r2, [pc, #400]	; (80088f4 <HAL_ADC_Start_DMA+0x1a8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d004      	beq.n	8008770 <HAL_ADC_Start_DMA+0x24>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a63      	ldr	r2, [pc, #396]	; (80088f8 <HAL_ADC_Start_DMA+0x1ac>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d106      	bne.n	800877e <HAL_ADC_Start_DMA+0x32>
 8008770:	4b60      	ldr	r3, [pc, #384]	; (80088f4 <HAL_ADC_Start_DMA+0x1a8>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008778:	2b00      	cmp	r3, #0
 800877a:	f040 80b3 	bne.w	80088e4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008784:	2b01      	cmp	r3, #1
 8008786:	d101      	bne.n	800878c <HAL_ADC_Start_DMA+0x40>
 8008788:	2302      	movs	r3, #2
 800878a:	e0ae      	b.n	80088ea <HAL_ADC_Start_DMA+0x19e>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 f9cb 	bl	8008b30 <ADC_Enable>
 800879a:	4603      	mov	r3, r0
 800879c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f040 809a 	bne.w	80088da <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80087ae:	f023 0301 	bic.w	r3, r3, #1
 80087b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a4e      	ldr	r2, [pc, #312]	; (80088f8 <HAL_ADC_Start_DMA+0x1ac>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d105      	bne.n	80087d0 <HAL_ADC_Start_DMA+0x84>
 80087c4:	4b4b      	ldr	r3, [pc, #300]	; (80088f4 <HAL_ADC_Start_DMA+0x1a8>)
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d115      	bne.n	80087fc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d026      	beq.n	8008838 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80087f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80087fa:	e01d      	b.n	8008838 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008800:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a39      	ldr	r2, [pc, #228]	; (80088f4 <HAL_ADC_Start_DMA+0x1a8>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d004      	beq.n	800881c <HAL_ADC_Start_DMA+0xd0>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a38      	ldr	r2, [pc, #224]	; (80088f8 <HAL_ADC_Start_DMA+0x1ac>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d10d      	bne.n	8008838 <HAL_ADC_Start_DMA+0xec>
 800881c:	4b35      	ldr	r3, [pc, #212]	; (80088f4 <HAL_ADC_Start_DMA+0x1a8>)
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008824:	2b00      	cmp	r3, #0
 8008826:	d007      	beq.n	8008838 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008830:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d006      	beq.n	8008852 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	f023 0206 	bic.w	r2, r3, #6
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008850:	e002      	b.n	8008858 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	4a25      	ldr	r2, [pc, #148]	; (80088fc <HAL_ADC_Start_DMA+0x1b0>)
 8008866:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	4a24      	ldr	r2, [pc, #144]	; (8008900 <HAL_ADC_Start_DMA+0x1b4>)
 800886e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	4a23      	ldr	r2, [pc, #140]	; (8008904 <HAL_ADC_Start_DMA+0x1b8>)
 8008876:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f06f 0202 	mvn.w	r2, #2
 8008880:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	689a      	ldr	r2, [r3, #8]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008890:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a18      	ldr	r0, [r3, #32]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	334c      	adds	r3, #76	; 0x4c
 800889c:	4619      	mov	r1, r3
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f001 fbb5 	bl	800a010 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80088b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80088b4:	d108      	bne.n	80088c8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80088c4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80088c6:	e00f      	b.n	80088e8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80088d6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80088d8:	e006      	b.n	80088e8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80088e2:	e001      	b.n	80088e8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	40012400 	.word	0x40012400
 80088f8:	40012800 	.word	0x40012800
 80088fc:	08008c67 	.word	0x08008c67
 8008900:	08008ce3 	.word	0x08008ce3
 8008904:	08008cff 	.word	0x08008cff

08008908 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	bc80      	pop	{r7}
 8008918:	4770      	bx	lr

0800891a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008922:	bf00      	nop
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	bc80      	pop	{r7}
 800892a:	4770      	bx	lr

0800892c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	bc80      	pop	{r7}
 800893c:	4770      	bx	lr
	...

08008940 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008958:	2b01      	cmp	r3, #1
 800895a:	d101      	bne.n	8008960 <HAL_ADC_ConfigChannel+0x20>
 800895c:	2302      	movs	r3, #2
 800895e:	e0dc      	b.n	8008b1a <HAL_ADC_ConfigChannel+0x1da>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	2b06      	cmp	r3, #6
 800896e:	d81c      	bhi.n	80089aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	3b05      	subs	r3, #5
 8008982:	221f      	movs	r2, #31
 8008984:	fa02 f303 	lsl.w	r3, r2, r3
 8008988:	43db      	mvns	r3, r3
 800898a:	4019      	ands	r1, r3
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	6818      	ldr	r0, [r3, #0]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	3b05      	subs	r3, #5
 800899c:	fa00 f203 	lsl.w	r2, r0, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	635a      	str	r2, [r3, #52]	; 0x34
 80089a8:	e03c      	b.n	8008a24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2b0c      	cmp	r3, #12
 80089b0:	d81c      	bhi.n	80089ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	4613      	mov	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	3b23      	subs	r3, #35	; 0x23
 80089c4:	221f      	movs	r2, #31
 80089c6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ca:	43db      	mvns	r3, r3
 80089cc:	4019      	ands	r1, r3
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	4613      	mov	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	3b23      	subs	r3, #35	; 0x23
 80089de:	fa00 f203 	lsl.w	r2, r0, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	631a      	str	r2, [r3, #48]	; 0x30
 80089ea:	e01b      	b.n	8008a24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	3b41      	subs	r3, #65	; 0x41
 80089fe:	221f      	movs	r2, #31
 8008a00:	fa02 f303 	lsl.w	r3, r2, r3
 8008a04:	43db      	mvns	r3, r3
 8008a06:	4019      	ands	r1, r3
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	3b41      	subs	r3, #65	; 0x41
 8008a18:	fa00 f203 	lsl.w	r2, r0, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b09      	cmp	r3, #9
 8008a2a:	d91c      	bls.n	8008a66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68d9      	ldr	r1, [r3, #12]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	4613      	mov	r3, r2
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	4413      	add	r3, r2
 8008a3c:	3b1e      	subs	r3, #30
 8008a3e:	2207      	movs	r2, #7
 8008a40:	fa02 f303 	lsl.w	r3, r2, r3
 8008a44:	43db      	mvns	r3, r3
 8008a46:	4019      	ands	r1, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	6898      	ldr	r0, [r3, #8]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	4613      	mov	r3, r2
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	4413      	add	r3, r2
 8008a56:	3b1e      	subs	r3, #30
 8008a58:	fa00 f203 	lsl.w	r2, r0, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	60da      	str	r2, [r3, #12]
 8008a64:	e019      	b.n	8008a9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6919      	ldr	r1, [r3, #16]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	4613      	mov	r3, r2
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	4413      	add	r3, r2
 8008a76:	2207      	movs	r2, #7
 8008a78:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7c:	43db      	mvns	r3, r3
 8008a7e:	4019      	ands	r1, r3
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	6898      	ldr	r0, [r3, #8]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	005b      	lsls	r3, r3, #1
 8008a8c:	4413      	add	r3, r2
 8008a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b10      	cmp	r3, #16
 8008aa0:	d003      	beq.n	8008aaa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008aa6:	2b11      	cmp	r3, #17
 8008aa8:	d132      	bne.n	8008b10 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a1d      	ldr	r2, [pc, #116]	; (8008b24 <HAL_ADC_ConfigChannel+0x1e4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d125      	bne.n	8008b00 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d126      	bne.n	8008b10 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008ad0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b10      	cmp	r3, #16
 8008ad8:	d11a      	bne.n	8008b10 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008ada:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <HAL_ADC_ConfigChannel+0x1e8>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a13      	ldr	r2, [pc, #76]	; (8008b2c <HAL_ADC_ConfigChannel+0x1ec>)
 8008ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae4:	0c9a      	lsrs	r2, r3, #18
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008af0:	e002      	b.n	8008af8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1f9      	bne.n	8008af2 <HAL_ADC_ConfigChannel+0x1b2>
 8008afe:	e007      	b.n	8008b10 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	f043 0220 	orr.w	r2, r3, #32
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bc80      	pop	{r7}
 8008b22:	4770      	bx	lr
 8008b24:	40012400 	.word	0x40012400
 8008b28:	20000000 	.word	0x20000000
 8008b2c:	431bde83 	.word	0x431bde83

08008b30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d040      	beq.n	8008bd0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f042 0201 	orr.w	r2, r2, #1
 8008b5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008b5e:	4b1f      	ldr	r3, [pc, #124]	; (8008bdc <ADC_Enable+0xac>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1f      	ldr	r2, [pc, #124]	; (8008be0 <ADC_Enable+0xb0>)
 8008b64:	fba2 2303 	umull	r2, r3, r2, r3
 8008b68:	0c9b      	lsrs	r3, r3, #18
 8008b6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008b6c:	e002      	b.n	8008b74 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1f9      	bne.n	8008b6e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008b7a:	f7ff fccf 	bl	800851c <HAL_GetTick>
 8008b7e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008b80:	e01f      	b.n	8008bc2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008b82:	f7ff fccb 	bl	800851c <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d918      	bls.n	8008bc2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d011      	beq.n	8008bc2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba2:	f043 0210 	orr.w	r2, r3, #16
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bae:	f043 0201 	orr.w	r2, r3, #1
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e007      	b.n	8008bd2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d1d8      	bne.n	8008b82 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000000 	.word	0x20000000
 8008be0:	431bde83 	.word	0x431bde83

08008be4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d12e      	bne.n	8008c5c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 0201 	bic.w	r2, r2, #1
 8008c0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008c0e:	f7ff fc85 	bl	800851c <HAL_GetTick>
 8008c12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008c14:	e01b      	b.n	8008c4e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008c16:	f7ff fc81 	bl	800851c <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d914      	bls.n	8008c4e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d10d      	bne.n	8008c4e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	f043 0210 	orr.w	r2, r3, #16
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c42:	f043 0201 	orr.w	r2, r3, #1
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e007      	b.n	8008c5e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d0dc      	beq.n	8008c16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d127      	bne.n	8008cd0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008c96:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8008c9a:	d115      	bne.n	8008cc8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d111      	bne.n	8008cc8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d105      	bne.n	8008cc8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc0:	f043 0201 	orr.w	r2, r3, #1
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f7ff fe1d 	bl	8008908 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8008cce:	e004      	b.n	8008cda <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	4798      	blx	r3
}
 8008cda:	bf00      	nop
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f7ff fe12 	bl	800891a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008cf6:	bf00      	nop
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1c:	f043 0204 	orr.w	r2, r3, #4
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7ff fe01 	bl	800892c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008d2a:	bf00      	nop
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e0ed      	b.n	8008f20 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7f8 fba1 	bl	8001498 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f042 0201 	orr.w	r2, r2, #1
 8008d64:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d66:	f7ff fbd9 	bl	800851c <HAL_GetTick>
 8008d6a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008d6c:	e012      	b.n	8008d94 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008d6e:	f7ff fbd5 	bl	800851c <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b0a      	cmp	r3, #10
 8008d7a:	d90b      	bls.n	8008d94 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2205      	movs	r2, #5
 8008d8c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e0c5      	b.n	8008f20 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0e5      	beq.n	8008d6e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0202 	bic.w	r2, r2, #2
 8008db0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008db2:	f7ff fbb3 	bl	800851c <HAL_GetTick>
 8008db6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008db8:	e012      	b.n	8008de0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008dba:	f7ff fbaf 	bl	800851c <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	2b0a      	cmp	r3, #10
 8008dc6:	d90b      	bls.n	8008de0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2205      	movs	r2, #5
 8008dd8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e09f      	b.n	8008f20 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e5      	bne.n	8008dba <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	7e1b      	ldrb	r3, [r3, #24]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d108      	bne.n	8008e08 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e04:	601a      	str	r2, [r3, #0]
 8008e06:	e007      	b.n	8008e18 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	7e5b      	ldrb	r3, [r3, #25]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d108      	bne.n	8008e32 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	e007      	b.n	8008e42 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	7e9b      	ldrb	r3, [r3, #26]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d108      	bne.n	8008e5c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f042 0220 	orr.w	r2, r2, #32
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e007      	b.n	8008e6c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f022 0220 	bic.w	r2, r2, #32
 8008e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	7edb      	ldrb	r3, [r3, #27]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d108      	bne.n	8008e86 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0210 	bic.w	r2, r2, #16
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e007      	b.n	8008e96 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0210 	orr.w	r2, r2, #16
 8008e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	7f1b      	ldrb	r3, [r3, #28]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d108      	bne.n	8008eb0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f042 0208 	orr.w	r2, r2, #8
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	e007      	b.n	8008ec0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 0208 	bic.w	r2, r2, #8
 8008ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	7f5b      	ldrb	r3, [r3, #29]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d108      	bne.n	8008eda <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0204 	orr.w	r2, r2, #4
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	e007      	b.n	8008eea <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 0204 	bic.w	r2, r2, #4
 8008ee8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	689a      	ldr	r2, [r3, #8]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	ea42 0103 	orr.w	r1, r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	1e5a      	subs	r2, r3, #1
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f3e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008f40:	7cfb      	ldrb	r3, [r7, #19]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d003      	beq.n	8008f4e <HAL_CAN_ConfigFilter+0x26>
 8008f46:	7cfb      	ldrb	r3, [r7, #19]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	f040 80aa 	bne.w	80090a2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f54:	f043 0201 	orr.w	r2, r3, #1
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	f003 031f 	and.w	r3, r3, #31
 8008f66:	2201      	movs	r2, #1
 8008f68:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	43db      	mvns	r3, r3
 8008f78:	401a      	ands	r2, r3
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d123      	bne.n	8008fd0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	43db      	mvns	r3, r3
 8008f92:	401a      	ands	r2, r3
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008faa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	3248      	adds	r2, #72	; 0x48
 8008fb0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008fc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008fc6:	6979      	ldr	r1, [r7, #20]
 8008fc8:	3348      	adds	r3, #72	; 0x48
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	440b      	add	r3, r1
 8008fce:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d122      	bne.n	800901e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	431a      	orrs	r2, r3
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008ff8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	3248      	adds	r2, #72	; 0x48
 8008ffe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009012:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009014:	6979      	ldr	r1, [r7, #20]
 8009016:	3348      	adds	r3, #72	; 0x48
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	440b      	add	r3, r1
 800901c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d109      	bne.n	800903a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	43db      	mvns	r3, r3
 8009030:	401a      	ands	r2, r3
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009038:	e007      	b.n	800904a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	431a      	orrs	r2, r3
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	43db      	mvns	r3, r3
 800905c:	401a      	ands	r2, r3
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009064:	e007      	b.n	8009076 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	431a      	orrs	r2, r3
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d107      	bne.n	800908e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	431a      	orrs	r2, r3
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009094:	f023 0201 	bic.w	r2, r3, #1
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	e006      	b.n	80090b0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
  }
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	371c      	adds	r7, #28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bc80      	pop	{r7}
 80090b8:	4770      	bx	lr

080090ba <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d12e      	bne.n	800912c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2202      	movs	r2, #2
 80090d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f022 0201 	bic.w	r2, r2, #1
 80090e4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090e6:	f7ff fa19 	bl	800851c <HAL_GetTick>
 80090ea:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80090ec:	e012      	b.n	8009114 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80090ee:	f7ff fa15 	bl	800851c <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	2b0a      	cmp	r3, #10
 80090fa:	d90b      	bls.n	8009114 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2205      	movs	r2, #5
 800910c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e012      	b.n	800913a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e5      	bne.n	80090ee <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	e006      	b.n	800913a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
  }
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8009142:	b480      	push	{r7}
 8009144:	b089      	sub	sp, #36	; 0x24
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
 800914e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009156:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009160:	7ffb      	ldrb	r3, [r7, #31]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d003      	beq.n	800916e <HAL_CAN_AddTxMessage+0x2c>
 8009166:	7ffb      	ldrb	r3, [r7, #31]
 8009168:	2b02      	cmp	r3, #2
 800916a:	f040 80ad 	bne.w	80092c8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800917e:	2b00      	cmp	r3, #0
 8009180:	d105      	bne.n	800918e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 8095 	beq.w	80092b8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	0e1b      	lsrs	r3, r3, #24
 8009192:	f003 0303 	and.w	r3, r3, #3
 8009196:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009198:	2201      	movs	r2, #1
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	409a      	lsls	r2, r3
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10d      	bne.n	80091c6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80091b4:	68f9      	ldr	r1, [r7, #12]
 80091b6:	6809      	ldr	r1, [r1, #0]
 80091b8:	431a      	orrs	r2, r3
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	3318      	adds	r3, #24
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	440b      	add	r3, r1
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e00f      	b.n	80091e6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80091d0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80091d6:	68f9      	ldr	r1, [r7, #12]
 80091d8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80091da:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	3318      	adds	r3, #24
 80091e0:	011b      	lsls	r3, r3, #4
 80091e2:	440b      	add	r3, r1
 80091e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6819      	ldr	r1, [r3, #0]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	691a      	ldr	r2, [r3, #16]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	3318      	adds	r3, #24
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	440b      	add	r3, r1
 80091f6:	3304      	adds	r3, #4
 80091f8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	7d1b      	ldrb	r3, [r3, #20]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d111      	bne.n	8009226 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	3318      	adds	r3, #24
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	4413      	add	r3, r2
 800920e:	3304      	adds	r3, #4
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	6811      	ldr	r1, [r2, #0]
 8009216:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	3318      	adds	r3, #24
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	440b      	add	r3, r1
 8009222:	3304      	adds	r3, #4
 8009224:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3307      	adds	r3, #7
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	061a      	lsls	r2, r3, #24
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	3306      	adds	r3, #6
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	041b      	lsls	r3, r3, #16
 8009236:	431a      	orrs	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3305      	adds	r3, #5
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	021b      	lsls	r3, r3, #8
 8009240:	4313      	orrs	r3, r2
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	3204      	adds	r2, #4
 8009246:	7812      	ldrb	r2, [r2, #0]
 8009248:	4610      	mov	r0, r2
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	6811      	ldr	r1, [r2, #0]
 800924e:	ea43 0200 	orr.w	r2, r3, r0
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	440b      	add	r3, r1
 8009258:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800925c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3303      	adds	r3, #3
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	061a      	lsls	r2, r3, #24
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3302      	adds	r3, #2
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	041b      	lsls	r3, r3, #16
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	3301      	adds	r3, #1
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	021b      	lsls	r3, r3, #8
 8009278:	4313      	orrs	r3, r2
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	7812      	ldrb	r2, [r2, #0]
 800927e:	4610      	mov	r0, r2
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	6811      	ldr	r1, [r2, #0]
 8009284:	ea43 0200 	orr.w	r2, r3, r0
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	440b      	add	r3, r1
 800928e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009292:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	3318      	adds	r3, #24
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	4413      	add	r3, r2
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	6811      	ldr	r1, [r2, #0]
 80092a6:	f043 0201 	orr.w	r2, r3, #1
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	3318      	adds	r3, #24
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	440b      	add	r3, r1
 80092b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	e00e      	b.n	80092d6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e006      	b.n	80092d6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
  }
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3724      	adds	r7, #36	; 0x24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bc80      	pop	{r7}
 80092de:	4770      	bx	lr

080092e0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
 80092ec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092f4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d003      	beq.n	8009304 <HAL_CAN_GetRxMessage+0x24>
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	f040 8103 	bne.w	800950a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10e      	bne.n	8009328 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f003 0303 	and.w	r3, r3, #3
 8009314:	2b00      	cmp	r3, #0
 8009316:	d116      	bne.n	8009346 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e0f7      	b.n	8009518 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f003 0303 	and.w	r3, r3, #3
 8009332:	2b00      	cmp	r3, #0
 8009334:	d107      	bne.n	8009346 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e0e8      	b.n	8009518 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	331b      	adds	r3, #27
 800934e:	011b      	lsls	r3, r3, #4
 8009350:	4413      	add	r3, r2
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0204 	and.w	r2, r3, #4
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10c      	bne.n	800937e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	331b      	adds	r3, #27
 800936c:	011b      	lsls	r3, r3, #4
 800936e:	4413      	add	r3, r2
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	0d5b      	lsrs	r3, r3, #21
 8009374:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	e00b      	b.n	8009396 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	331b      	adds	r3, #27
 8009386:	011b      	lsls	r3, r3, #4
 8009388:	4413      	add	r3, r2
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	08db      	lsrs	r3, r3, #3
 800938e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	331b      	adds	r3, #27
 800939e:	011b      	lsls	r3, r3, #4
 80093a0:	4413      	add	r3, r2
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0202 	and.w	r2, r3, #2
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	331b      	adds	r3, #27
 80093b4:	011b      	lsls	r3, r3, #4
 80093b6:	4413      	add	r3, r2
 80093b8:	3304      	adds	r3, #4
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0308 	and.w	r3, r3, #8
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d003      	beq.n	80093cc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2208      	movs	r2, #8
 80093c8:	611a      	str	r2, [r3, #16]
 80093ca:	e00b      	b.n	80093e4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	331b      	adds	r3, #27
 80093d4:	011b      	lsls	r3, r3, #4
 80093d6:	4413      	add	r3, r2
 80093d8:	3304      	adds	r3, #4
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 020f 	and.w	r2, r3, #15
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	331b      	adds	r3, #27
 80093ec:	011b      	lsls	r3, r3, #4
 80093ee:	4413      	add	r3, r2
 80093f0:	3304      	adds	r3, #4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	0a1b      	lsrs	r3, r3, #8
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	331b      	adds	r3, #27
 8009404:	011b      	lsls	r3, r3, #4
 8009406:	4413      	add	r3, r2
 8009408:	3304      	adds	r3, #4
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	0c1b      	lsrs	r3, r3, #16
 800940e:	b29a      	uxth	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	011b      	lsls	r3, r3, #4
 800941c:	4413      	add	r3, r2
 800941e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	b2da      	uxtb	r2, r3
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	011b      	lsls	r3, r3, #4
 8009432:	4413      	add	r3, r2
 8009434:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	0a1a      	lsrs	r2, r3, #8
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	3301      	adds	r3, #1
 8009440:	b2d2      	uxtb	r2, r2
 8009442:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	011b      	lsls	r3, r3, #4
 800944c:	4413      	add	r3, r2
 800944e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	0c1a      	lsrs	r2, r3, #16
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	3302      	adds	r3, #2
 800945a:	b2d2      	uxtb	r2, r2
 800945c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	4413      	add	r3, r2
 8009468:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	0e1a      	lsrs	r2, r3, #24
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	3303      	adds	r3, #3
 8009474:	b2d2      	uxtb	r2, r2
 8009476:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	4413      	add	r3, r2
 8009482:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	3304      	adds	r3, #4
 800948c:	b2d2      	uxtb	r2, r2
 800948e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	011b      	lsls	r3, r3, #4
 8009498:	4413      	add	r3, r2
 800949a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	0a1a      	lsrs	r2, r3, #8
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	3305      	adds	r3, #5
 80094a6:	b2d2      	uxtb	r2, r2
 80094a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	011b      	lsls	r3, r3, #4
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	0c1a      	lsrs	r2, r3, #16
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	3306      	adds	r3, #6
 80094c0:	b2d2      	uxtb	r2, r2
 80094c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	011b      	lsls	r3, r3, #4
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	0e1a      	lsrs	r2, r3, #24
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	3307      	adds	r3, #7
 80094da:	b2d2      	uxtb	r2, r2
 80094dc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d108      	bne.n	80094f6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f042 0220 	orr.w	r2, r2, #32
 80094f2:	60da      	str	r2, [r3, #12]
 80094f4:	e007      	b.n	8009506 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	691a      	ldr	r2, [r3, #16]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f042 0220 	orr.w	r2, r2, #32
 8009504:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	e006      	b.n	8009518 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
  }
}
 8009518:	4618      	mov	r0, r3
 800951a:	371c      	adds	r7, #28
 800951c:	46bd      	mov	sp, r7
 800951e:	bc80      	pop	{r7}
 8009520:	4770      	bx	lr

08009522 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009522:	b480      	push	{r7}
 8009524:	b085      	sub	sp, #20
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009532:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d002      	beq.n	8009540 <HAL_CAN_ActivateNotification+0x1e>
 800953a:	7bfb      	ldrb	r3, [r7, #15]
 800953c:	2b02      	cmp	r3, #2
 800953e:	d109      	bne.n	8009554 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6959      	ldr	r1, [r3, #20]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	430a      	orrs	r2, r1
 800954e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	e006      	b.n	8009562 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
  }
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	bc80      	pop	{r7}
 800956a:	4770      	bx	lr

0800956c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08a      	sub	sp, #40	; 0x28
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009574:	2300      	movs	r3, #0
 8009576:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d07c      	beq.n	80096ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d023      	beq.n	8009604 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2201      	movs	r2, #1
 80095c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d003      	beq.n	80095d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f983 	bl	80098da <HAL_CAN_TxMailbox0CompleteCallback>
 80095d4:	e016      	b.n	8009604 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	f003 0304 	and.w	r3, r3, #4
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d004      	beq.n	80095ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80095e6:	627b      	str	r3, [r7, #36]	; 0x24
 80095e8:	e00c      	b.n	8009604 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80095fa:	627b      	str	r3, [r7, #36]	; 0x24
 80095fc:	e002      	b.n	8009604 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f986 	bl	8009910 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800960a:	2b00      	cmp	r3, #0
 800960c:	d024      	beq.n	8009658 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009616:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800961e:	2b00      	cmp	r3, #0
 8009620:	d003      	beq.n	800962a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f962 	bl	80098ec <HAL_CAN_TxMailbox1CompleteCallback>
 8009628:	e016      	b.n	8009658 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800963a:	627b      	str	r3, [r7, #36]	; 0x24
 800963c:	e00c      	b.n	8009658 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009644:	2b00      	cmp	r3, #0
 8009646:	d004      	beq.n	8009652 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800964e:	627b      	str	r3, [r7, #36]	; 0x24
 8009650:	e002      	b.n	8009658 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f965 	bl	8009922 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d024      	beq.n	80096ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800966a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f941 	bl	80098fe <HAL_CAN_TxMailbox2CompleteCallback>
 800967c:	e016      	b.n	80096ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d004      	beq.n	8009692 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
 8009690:	e00c      	b.n	80096ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d004      	beq.n	80096a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096a2:	627b      	str	r3, [r7, #36]	; 0x24
 80096a4:	e002      	b.n	80096ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f944 	bl	8009934 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	f003 0308 	and.w	r3, r3, #8
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00c      	beq.n	80096d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f003 0310 	and.w	r3, r3, #16
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d007      	beq.n	80096d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2210      	movs	r2, #16
 80096ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	f003 0304 	and.w	r3, r3, #4
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00b      	beq.n	80096f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f003 0308 	and.w	r3, r3, #8
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d006      	beq.n	80096f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2208      	movs	r2, #8
 80096ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f933 	bl	8009958 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d009      	beq.n	8009710 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	f003 0303 	and.w	r3, r3, #3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f91b 	bl	8009946 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00c      	beq.n	8009734 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f003 0310 	and.w	r3, r3, #16
 8009720:	2b00      	cmp	r3, #0
 8009722:	d007      	beq.n	8009734 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800972a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2210      	movs	r2, #16
 8009732:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	f003 0320 	and.w	r3, r3, #32
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00b      	beq.n	8009756 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f003 0308 	and.w	r3, r3, #8
 8009744:	2b00      	cmp	r3, #0
 8009746:	d006      	beq.n	8009756 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2208      	movs	r2, #8
 800974e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f913 	bl	800997c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	f003 0310 	and.w	r3, r3, #16
 800975c:	2b00      	cmp	r3, #0
 800975e:	d009      	beq.n	8009774 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	f003 0303 	and.w	r3, r3, #3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f8fb 	bl	800996a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00b      	beq.n	8009796 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	f003 0310 	and.w	r3, r3, #16
 8009784:	2b00      	cmp	r3, #0
 8009786:	d006      	beq.n	8009796 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2210      	movs	r2, #16
 800978e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f8fc 	bl	800998e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00b      	beq.n	80097b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	f003 0308 	and.w	r3, r3, #8
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d006      	beq.n	80097b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2208      	movs	r2, #8
 80097b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f8f4 	bl	80099a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d07b      	beq.n	80098ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d072      	beq.n	80098b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d008      	beq.n	80097e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	f043 0301 	orr.w	r3, r3, #1
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d008      	beq.n	8009804 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	f043 0302 	orr.w	r3, r3, #2
 8009802:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800980a:	2b00      	cmp	r3, #0
 800980c:	d008      	beq.n	8009820 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009814:	2b00      	cmp	r3, #0
 8009816:	d003      	beq.n	8009820 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	f043 0304 	orr.w	r3, r3, #4
 800981e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009826:	2b00      	cmp	r3, #0
 8009828:	d043      	beq.n	80098b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009830:	2b00      	cmp	r3, #0
 8009832:	d03e      	beq.n	80098b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800983a:	2b60      	cmp	r3, #96	; 0x60
 800983c:	d02b      	beq.n	8009896 <HAL_CAN_IRQHandler+0x32a>
 800983e:	2b60      	cmp	r3, #96	; 0x60
 8009840:	d82e      	bhi.n	80098a0 <HAL_CAN_IRQHandler+0x334>
 8009842:	2b50      	cmp	r3, #80	; 0x50
 8009844:	d022      	beq.n	800988c <HAL_CAN_IRQHandler+0x320>
 8009846:	2b50      	cmp	r3, #80	; 0x50
 8009848:	d82a      	bhi.n	80098a0 <HAL_CAN_IRQHandler+0x334>
 800984a:	2b40      	cmp	r3, #64	; 0x40
 800984c:	d019      	beq.n	8009882 <HAL_CAN_IRQHandler+0x316>
 800984e:	2b40      	cmp	r3, #64	; 0x40
 8009850:	d826      	bhi.n	80098a0 <HAL_CAN_IRQHandler+0x334>
 8009852:	2b30      	cmp	r3, #48	; 0x30
 8009854:	d010      	beq.n	8009878 <HAL_CAN_IRQHandler+0x30c>
 8009856:	2b30      	cmp	r3, #48	; 0x30
 8009858:	d822      	bhi.n	80098a0 <HAL_CAN_IRQHandler+0x334>
 800985a:	2b10      	cmp	r3, #16
 800985c:	d002      	beq.n	8009864 <HAL_CAN_IRQHandler+0x2f8>
 800985e:	2b20      	cmp	r3, #32
 8009860:	d005      	beq.n	800986e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009862:	e01d      	b.n	80098a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	f043 0308 	orr.w	r3, r3, #8
 800986a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800986c:	e019      	b.n	80098a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	f043 0310 	orr.w	r3, r3, #16
 8009874:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009876:	e014      	b.n	80098a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	f043 0320 	orr.w	r3, r3, #32
 800987e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009880:	e00f      	b.n	80098a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800988a:	e00a      	b.n	80098a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009892:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009894:	e005      	b.n	80098a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800989e:	e000      	b.n	80098a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80098a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	699a      	ldr	r2, [r3, #24]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80098b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2204      	movs	r2, #4
 80098b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d008      	beq.n	80098d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	431a      	orrs	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f870 	bl	80099b2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80098d2:	bf00      	nop
 80098d4:	3728      	adds	r7, #40	; 0x28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80098da:	b480      	push	{r7}
 80098dc:	b083      	sub	sp, #12
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80098e2:	bf00      	nop
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bc80      	pop	{r7}
 80098ea:	4770      	bx	lr

080098ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bc80      	pop	{r7}
 80098fc:	4770      	bx	lr

080098fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	bc80      	pop	{r7}
 800990e:	4770      	bx	lr

08009910 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	bc80      	pop	{r7}
 8009920:	4770      	bx	lr

08009922 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800992a:	bf00      	nop
 800992c:	370c      	adds	r7, #12
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr

08009934 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	bc80      	pop	{r7}
 8009944:	4770      	bx	lr

08009946 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009946:	b480      	push	{r7}
 8009948:	b083      	sub	sp, #12
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800994e:	bf00      	nop
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	bc80      	pop	{r7}
 8009956:	4770      	bx	lr

08009958 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	bc80      	pop	{r7}
 8009968:	4770      	bx	lr

0800996a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	bc80      	pop	{r7}
 800997a:	4770      	bx	lr

0800997c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	bc80      	pop	{r7}
 800998c:	4770      	bx	lr

0800998e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009996:	bf00      	nop
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	bc80      	pop	{r7}
 800999e:	4770      	bx	lr

080099a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bc80      	pop	{r7}
 80099b0:	4770      	bx	lr

080099b2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80099ba:	bf00      	nop
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	bc80      	pop	{r7}
 80099c2:	4770      	bx	lr

080099c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <__NVIC_SetPriorityGrouping+0x44>)
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80099e0:	4013      	ands	r3, r2
 80099e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80099ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80099f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80099f6:	4a04      	ldr	r2, [pc, #16]	; (8009a08 <__NVIC_SetPriorityGrouping+0x44>)
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	60d3      	str	r3, [r2, #12]
}
 80099fc:	bf00      	nop
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bc80      	pop	{r7}
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	e000ed00 	.word	0xe000ed00

08009a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a10:	4b04      	ldr	r3, [pc, #16]	; (8009a24 <__NVIC_GetPriorityGrouping+0x18>)
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	0a1b      	lsrs	r3, r3, #8
 8009a16:	f003 0307 	and.w	r3, r3, #7
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bc80      	pop	{r7}
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	e000ed00 	.word	0xe000ed00

08009a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	db0b      	blt.n	8009a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a3a:	79fb      	ldrb	r3, [r7, #7]
 8009a3c:	f003 021f 	and.w	r2, r3, #31
 8009a40:	4906      	ldr	r1, [pc, #24]	; (8009a5c <__NVIC_EnableIRQ+0x34>)
 8009a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a46:	095b      	lsrs	r3, r3, #5
 8009a48:	2001      	movs	r0, #1
 8009a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8009a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009a52:	bf00      	nop
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bc80      	pop	{r7}
 8009a5a:	4770      	bx	lr
 8009a5c:	e000e100 	.word	0xe000e100

08009a60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	db12      	blt.n	8009a98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	f003 021f 	and.w	r2, r3, #31
 8009a78:	490a      	ldr	r1, [pc, #40]	; (8009aa4 <__NVIC_DisableIRQ+0x44>)
 8009a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a7e:	095b      	lsrs	r3, r3, #5
 8009a80:	2001      	movs	r0, #1
 8009a82:	fa00 f202 	lsl.w	r2, r0, r2
 8009a86:	3320      	adds	r3, #32
 8009a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009a8c:	f3bf 8f4f 	dsb	sy
}
 8009a90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009a92:	f3bf 8f6f 	isb	sy
}
 8009a96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bc80      	pop	{r7}
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	e000e100 	.word	0xe000e100

08009aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	6039      	str	r1, [r7, #0]
 8009ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	db0a      	blt.n	8009ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	490c      	ldr	r1, [pc, #48]	; (8009af4 <__NVIC_SetPriority+0x4c>)
 8009ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ac6:	0112      	lsls	r2, r2, #4
 8009ac8:	b2d2      	uxtb	r2, r2
 8009aca:	440b      	add	r3, r1
 8009acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009ad0:	e00a      	b.n	8009ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	4908      	ldr	r1, [pc, #32]	; (8009af8 <__NVIC_SetPriority+0x50>)
 8009ad8:	79fb      	ldrb	r3, [r7, #7]
 8009ada:	f003 030f 	and.w	r3, r3, #15
 8009ade:	3b04      	subs	r3, #4
 8009ae0:	0112      	lsls	r2, r2, #4
 8009ae2:	b2d2      	uxtb	r2, r2
 8009ae4:	440b      	add	r3, r1
 8009ae6:	761a      	strb	r2, [r3, #24]
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	e000e100 	.word	0xe000e100
 8009af8:	e000ed00 	.word	0xe000ed00

08009afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b089      	sub	sp, #36	; 0x24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	f1c3 0307 	rsb	r3, r3, #7
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	bf28      	it	cs
 8009b1a:	2304      	movcs	r3, #4
 8009b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	3304      	adds	r3, #4
 8009b22:	2b06      	cmp	r3, #6
 8009b24:	d902      	bls.n	8009b2c <NVIC_EncodePriority+0x30>
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	3b03      	subs	r3, #3
 8009b2a:	e000      	b.n	8009b2e <NVIC_EncodePriority+0x32>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b30:	f04f 32ff 	mov.w	r2, #4294967295
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3a:	43da      	mvns	r2, r3
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	401a      	ands	r2, r3
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b44:	f04f 31ff 	mov.w	r1, #4294967295
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4e:	43d9      	mvns	r1, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b54:	4313      	orrs	r3, r2
         );
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3724      	adds	r7, #36	; 0x24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bc80      	pop	{r7}
 8009b5e:	4770      	bx	lr

08009b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b70:	d301      	bcc.n	8009b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b72:	2301      	movs	r3, #1
 8009b74:	e00f      	b.n	8009b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b76:	4a0a      	ldr	r2, [pc, #40]	; (8009ba0 <SysTick_Config+0x40>)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b7e:	210f      	movs	r1, #15
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	f7ff ff90 	bl	8009aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b88:	4b05      	ldr	r3, [pc, #20]	; (8009ba0 <SysTick_Config+0x40>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b8e:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <SysTick_Config+0x40>)
 8009b90:	2207      	movs	r2, #7
 8009b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	e000e010 	.word	0xe000e010

08009ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff ff09 	bl	80099c4 <__NVIC_SetPriorityGrouping>
}
 8009bb2:	bf00      	nop
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b086      	sub	sp, #24
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	607a      	str	r2, [r7, #4]
 8009bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009bcc:	f7ff ff1e 	bl	8009a0c <__NVIC_GetPriorityGrouping>
 8009bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	6978      	ldr	r0, [r7, #20]
 8009bd8:	f7ff ff90 	bl	8009afc <NVIC_EncodePriority>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009be2:	4611      	mov	r1, r2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7ff ff5f 	bl	8009aa8 <__NVIC_SetPriority>
}
 8009bea:	bf00      	nop
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7ff ff11 	bl	8009a28 <__NVIC_EnableIRQ>
}
 8009c06:	bf00      	nop
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	4603      	mov	r3, r0
 8009c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff ff1f 	bl	8009a60 <__NVIC_DisableIRQ>
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7ff ff94 	bl	8009b60 <SysTick_Config>
 8009c38:	4603      	mov	r3, r0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e014      	b.n	8009c7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	791b      	ldrb	r3, [r3, #4]
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d105      	bne.n	8009c6a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7f7 fcb7 	bl	80015d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e046      	b.n	8009d28 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	795b      	ldrb	r3, [r3, #5]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d101      	bne.n	8009ca6 <HAL_DAC_Start+0x20>
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	e040      	b.n	8009d28 <HAL_DAC_Start+0xa2>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6819      	ldr	r1, [r3, #0]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	f003 0310 	and.w	r3, r3, #16
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	409a      	lsls	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	430a      	orrs	r2, r1
 8009cc8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10f      	bne.n	8009cf0 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009cda:	2b3c      	cmp	r3, #60	; 0x3c
 8009cdc:	d11d      	bne.n	8009d1a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f042 0201 	orr.w	r2, r2, #1
 8009cec:	605a      	str	r2, [r3, #4]
 8009cee:	e014      	b.n	8009d1a <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	f003 0310 	and.w	r3, r3, #16
 8009d00:	213c      	movs	r1, #60	; 0x3c
 8009d02:	fa01 f303 	lsl.w	r3, r1, r3
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d107      	bne.n	8009d1a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f042 0202 	orr.w	r2, r2, #2
 8009d18:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bc80      	pop	{r7}
 8009d30:	4770      	bx	lr

08009d32 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b087      	sub	sp, #28
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	60b9      	str	r1, [r7, #8]
 8009d3c:	607a      	str	r2, [r7, #4]
 8009d3e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8009d40:	2300      	movs	r3, #0
 8009d42:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d101      	bne.n	8009d4e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e015      	b.n	8009d7a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d105      	bne.n	8009d66 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4413      	add	r3, r2
 8009d60:	3308      	adds	r3, #8
 8009d62:	617b      	str	r3, [r7, #20]
 8009d64:	e004      	b.n	8009d70 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	3314      	adds	r3, #20
 8009d6e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	461a      	mov	r2, r3
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bc80      	pop	{r7}
 8009d82:	4770      	bx	lr

08009d84 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b089      	sub	sp, #36	; 0x24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <HAL_DAC_ConfigChannel+0x1c>
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e042      	b.n	8009e2a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	795b      	ldrb	r3, [r3, #5]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_DAC_ConfigChannel+0x2c>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e03c      	b.n	8009e2a <HAL_DAC_ConfigChannel+0xa6>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2201      	movs	r2, #1
 8009db4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2202      	movs	r2, #2
 8009dba:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f003 0310 	and.w	r3, r3, #16
 8009dca:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009dce:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8009dd2:	43db      	mvns	r3, r3
 8009dd4:	69ba      	ldr	r2, [r7, #24]
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f003 0310 	and.w	r3, r3, #16
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	fa02 f303 	lsl.w	r3, r2, r3
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6819      	ldr	r1, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f003 0310 	and.w	r3, r3, #16
 8009e0c:	22c0      	movs	r2, #192	; 0xc0
 8009e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e12:	43da      	mvns	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	400a      	ands	r2, r1
 8009e1a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8009e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3724      	adds	r7, #36	; 0x24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bc80      	pop	{r7}
 8009e32:	4770      	bx	lr

08009e34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e059      	b.n	8009efe <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	4b2d      	ldr	r3, [pc, #180]	; (8009f08 <HAL_DMA_Init+0xd4>)
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d80f      	bhi.n	8009e76 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	4b2b      	ldr	r3, [pc, #172]	; (8009f0c <HAL_DMA_Init+0xd8>)
 8009e5e:	4413      	add	r3, r2
 8009e60:	4a2b      	ldr	r2, [pc, #172]	; (8009f10 <HAL_DMA_Init+0xdc>)
 8009e62:	fba2 2303 	umull	r2, r3, r2, r3
 8009e66:	091b      	lsrs	r3, r3, #4
 8009e68:	009a      	lsls	r2, r3, #2
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a28      	ldr	r2, [pc, #160]	; (8009f14 <HAL_DMA_Init+0xe0>)
 8009e72:	63da      	str	r2, [r3, #60]	; 0x3c
 8009e74:	e00e      	b.n	8009e94 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	4b26      	ldr	r3, [pc, #152]	; (8009f18 <HAL_DMA_Init+0xe4>)
 8009e7e:	4413      	add	r3, r2
 8009e80:	4a23      	ldr	r2, [pc, #140]	; (8009f10 <HAL_DMA_Init+0xdc>)
 8009e82:	fba2 2303 	umull	r2, r3, r2, r3
 8009e86:	091b      	lsrs	r3, r3, #4
 8009e88:	009a      	lsls	r2, r3, #2
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a22      	ldr	r2, [pc, #136]	; (8009f1c <HAL_DMA_Init+0xe8>)
 8009e92:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2202      	movs	r2, #2
 8009e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009eaa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009eae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8009eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bc80      	pop	{r7}
 8009f06:	4770      	bx	lr
 8009f08:	40020407 	.word	0x40020407
 8009f0c:	bffdfff8 	.word	0xbffdfff8
 8009f10:	cccccccd 	.word	0xcccccccd
 8009f14:	40020000 	.word	0x40020000
 8009f18:	bffdfbf8 	.word	0xbffdfbf8
 8009f1c:	40020400 	.word	0x40020400

08009f20 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e05c      	b.n	8009fec <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0201 	bic.w	r2, r2, #1
 8009f40:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2200      	movs	r2, #0
 8009f58:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	60da      	str	r2, [r3, #12]

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	4b23      	ldr	r3, [pc, #140]	; (8009ff8 <HAL_DMA_DeInit+0xd8>)
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d80f      	bhi.n	8009f8e <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	4b21      	ldr	r3, [pc, #132]	; (8009ffc <HAL_DMA_DeInit+0xdc>)
 8009f76:	4413      	add	r3, r2
 8009f78:	4a21      	ldr	r2, [pc, #132]	; (800a000 <HAL_DMA_DeInit+0xe0>)
 8009f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f7e:	091b      	lsrs	r3, r3, #4
 8009f80:	009a      	lsls	r2, r3, #2
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a1e      	ldr	r2, [pc, #120]	; (800a004 <HAL_DMA_DeInit+0xe4>)
 8009f8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8009f8c:	e00e      	b.n	8009fac <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	461a      	mov	r2, r3
 8009f94:	4b1c      	ldr	r3, [pc, #112]	; (800a008 <HAL_DMA_DeInit+0xe8>)
 8009f96:	4413      	add	r3, r2
 8009f98:	4a19      	ldr	r2, [pc, #100]	; (800a000 <HAL_DMA_DeInit+0xe0>)
 8009f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9e:	091b      	lsrs	r3, r3, #4
 8009fa0:	009a      	lsls	r2, r3, #2
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a18      	ldr	r2, [pc, #96]	; (800a00c <HAL_DMA_DeInit+0xec>)
 8009faa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8009fba:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bc80      	pop	{r7}
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	40020407 	.word	0x40020407
 8009ffc:	bffdfff8 	.word	0xbffdfff8
 800a000:	cccccccd 	.word	0xcccccccd
 800a004:	40020000 	.word	0x40020000
 800a008:	bffdfbf8 	.word	0xbffdfbf8
 800a00c:	40020400 	.word	0x40020400

0800a010 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
 800a01c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d101      	bne.n	800a030 <HAL_DMA_Start_IT+0x20>
 800a02c:	2302      	movs	r3, #2
 800a02e:	e04b      	b.n	800a0c8 <HAL_DMA_Start_IT+0xb8>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b01      	cmp	r3, #1
 800a042:	d13a      	bne.n	800a0ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2202      	movs	r2, #2
 800a048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f022 0201 	bic.w	r2, r2, #1
 800a060:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	68b9      	ldr	r1, [r7, #8]
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 fbb1 	bl	800a7d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	2b00      	cmp	r3, #0
 800a074:	d008      	beq.n	800a088 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f042 020e 	orr.w	r2, r2, #14
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	e00f      	b.n	800a0a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f022 0204 	bic.w	r2, r2, #4
 800a096:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f042 020a 	orr.w	r2, r2, #10
 800a0a6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f042 0201 	orr.w	r2, r2, #1
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	e005      	b.n	800a0c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800a0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3718      	adds	r7, #24
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d008      	beq.n	800a0fa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2204      	movs	r2, #4
 800a0ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e020      	b.n	800a13c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f022 020e 	bic.w	r2, r2, #14
 800a108:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f022 0201 	bic.w	r2, r2, #1
 800a118:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a122:	2101      	movs	r1, #1
 800a124:	fa01 f202 	lsl.w	r2, r1, r2
 800a128:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	bc80      	pop	{r7}
 800a144:	4770      	bx	lr
	...

0800a148 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d005      	beq.n	800a16c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2204      	movs	r2, #4
 800a164:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	73fb      	strb	r3, [r7, #15]
 800a16a:	e0d6      	b.n	800a31a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f022 020e 	bic.w	r2, r2, #14
 800a17a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 0201 	bic.w	r2, r2, #1
 800a18a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	461a      	mov	r2, r3
 800a192:	4b64      	ldr	r3, [pc, #400]	; (800a324 <HAL_DMA_Abort_IT+0x1dc>)
 800a194:	429a      	cmp	r2, r3
 800a196:	d958      	bls.n	800a24a <HAL_DMA_Abort_IT+0x102>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a62      	ldr	r2, [pc, #392]	; (800a328 <HAL_DMA_Abort_IT+0x1e0>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d04f      	beq.n	800a242 <HAL_DMA_Abort_IT+0xfa>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a61      	ldr	r2, [pc, #388]	; (800a32c <HAL_DMA_Abort_IT+0x1e4>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d048      	beq.n	800a23e <HAL_DMA_Abort_IT+0xf6>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a5f      	ldr	r2, [pc, #380]	; (800a330 <HAL_DMA_Abort_IT+0x1e8>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d040      	beq.n	800a238 <HAL_DMA_Abort_IT+0xf0>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a5e      	ldr	r2, [pc, #376]	; (800a334 <HAL_DMA_Abort_IT+0x1ec>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d038      	beq.n	800a232 <HAL_DMA_Abort_IT+0xea>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a5c      	ldr	r2, [pc, #368]	; (800a338 <HAL_DMA_Abort_IT+0x1f0>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d030      	beq.n	800a22c <HAL_DMA_Abort_IT+0xe4>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a5b      	ldr	r2, [pc, #364]	; (800a33c <HAL_DMA_Abort_IT+0x1f4>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d028      	beq.n	800a226 <HAL_DMA_Abort_IT+0xde>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a52      	ldr	r2, [pc, #328]	; (800a324 <HAL_DMA_Abort_IT+0x1dc>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d020      	beq.n	800a220 <HAL_DMA_Abort_IT+0xd8>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a57      	ldr	r2, [pc, #348]	; (800a340 <HAL_DMA_Abort_IT+0x1f8>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d019      	beq.n	800a21c <HAL_DMA_Abort_IT+0xd4>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a55      	ldr	r2, [pc, #340]	; (800a344 <HAL_DMA_Abort_IT+0x1fc>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d012      	beq.n	800a218 <HAL_DMA_Abort_IT+0xd0>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a54      	ldr	r2, [pc, #336]	; (800a348 <HAL_DMA_Abort_IT+0x200>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00a      	beq.n	800a212 <HAL_DMA_Abort_IT+0xca>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a52      	ldr	r2, [pc, #328]	; (800a34c <HAL_DMA_Abort_IT+0x204>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d102      	bne.n	800a20c <HAL_DMA_Abort_IT+0xc4>
 800a206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a20a:	e01b      	b.n	800a244 <HAL_DMA_Abort_IT+0xfc>
 800a20c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a210:	e018      	b.n	800a244 <HAL_DMA_Abort_IT+0xfc>
 800a212:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a216:	e015      	b.n	800a244 <HAL_DMA_Abort_IT+0xfc>
 800a218:	2310      	movs	r3, #16
 800a21a:	e013      	b.n	800a244 <HAL_DMA_Abort_IT+0xfc>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e011      	b.n	800a244 <HAL_DMA_Abort_IT+0xfc>
 800a220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a224:	e00e      	b.n	800a244 <HAL_DMA_Abort_IT+0xfc>
 800a226:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a22a:	e00b      	b.n	800a244 <HAL_DMA_Abort_IT+0xfc>
 800a22c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a230:	e008      	b.n	800a244 <HAL_DMA_Abort_IT+0xfc>
 800a232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a236:	e005      	b.n	800a244 <HAL_DMA_Abort_IT+0xfc>
 800a238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a23c:	e002      	b.n	800a244 <HAL_DMA_Abort_IT+0xfc>
 800a23e:	2310      	movs	r3, #16
 800a240:	e000      	b.n	800a244 <HAL_DMA_Abort_IT+0xfc>
 800a242:	2301      	movs	r3, #1
 800a244:	4a42      	ldr	r2, [pc, #264]	; (800a350 <HAL_DMA_Abort_IT+0x208>)
 800a246:	6053      	str	r3, [r2, #4]
 800a248:	e057      	b.n	800a2fa <HAL_DMA_Abort_IT+0x1b2>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a36      	ldr	r2, [pc, #216]	; (800a328 <HAL_DMA_Abort_IT+0x1e0>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d04f      	beq.n	800a2f4 <HAL_DMA_Abort_IT+0x1ac>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a34      	ldr	r2, [pc, #208]	; (800a32c <HAL_DMA_Abort_IT+0x1e4>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d048      	beq.n	800a2f0 <HAL_DMA_Abort_IT+0x1a8>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a33      	ldr	r2, [pc, #204]	; (800a330 <HAL_DMA_Abort_IT+0x1e8>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d040      	beq.n	800a2ea <HAL_DMA_Abort_IT+0x1a2>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a31      	ldr	r2, [pc, #196]	; (800a334 <HAL_DMA_Abort_IT+0x1ec>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d038      	beq.n	800a2e4 <HAL_DMA_Abort_IT+0x19c>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a30      	ldr	r2, [pc, #192]	; (800a338 <HAL_DMA_Abort_IT+0x1f0>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d030      	beq.n	800a2de <HAL_DMA_Abort_IT+0x196>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a2e      	ldr	r2, [pc, #184]	; (800a33c <HAL_DMA_Abort_IT+0x1f4>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d028      	beq.n	800a2d8 <HAL_DMA_Abort_IT+0x190>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a26      	ldr	r2, [pc, #152]	; (800a324 <HAL_DMA_Abort_IT+0x1dc>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d020      	beq.n	800a2d2 <HAL_DMA_Abort_IT+0x18a>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a2a      	ldr	r2, [pc, #168]	; (800a340 <HAL_DMA_Abort_IT+0x1f8>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d019      	beq.n	800a2ce <HAL_DMA_Abort_IT+0x186>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a29      	ldr	r2, [pc, #164]	; (800a344 <HAL_DMA_Abort_IT+0x1fc>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d012      	beq.n	800a2ca <HAL_DMA_Abort_IT+0x182>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a27      	ldr	r2, [pc, #156]	; (800a348 <HAL_DMA_Abort_IT+0x200>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d00a      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0x17c>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a26      	ldr	r2, [pc, #152]	; (800a34c <HAL_DMA_Abort_IT+0x204>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d102      	bne.n	800a2be <HAL_DMA_Abort_IT+0x176>
 800a2b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2bc:	e01b      	b.n	800a2f6 <HAL_DMA_Abort_IT+0x1ae>
 800a2be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a2c2:	e018      	b.n	800a2f6 <HAL_DMA_Abort_IT+0x1ae>
 800a2c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2c8:	e015      	b.n	800a2f6 <HAL_DMA_Abort_IT+0x1ae>
 800a2ca:	2310      	movs	r3, #16
 800a2cc:	e013      	b.n	800a2f6 <HAL_DMA_Abort_IT+0x1ae>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e011      	b.n	800a2f6 <HAL_DMA_Abort_IT+0x1ae>
 800a2d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2d6:	e00e      	b.n	800a2f6 <HAL_DMA_Abort_IT+0x1ae>
 800a2d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a2dc:	e00b      	b.n	800a2f6 <HAL_DMA_Abort_IT+0x1ae>
 800a2de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a2e2:	e008      	b.n	800a2f6 <HAL_DMA_Abort_IT+0x1ae>
 800a2e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2e8:	e005      	b.n	800a2f6 <HAL_DMA_Abort_IT+0x1ae>
 800a2ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2ee:	e002      	b.n	800a2f6 <HAL_DMA_Abort_IT+0x1ae>
 800a2f0:	2310      	movs	r3, #16
 800a2f2:	e000      	b.n	800a2f6 <HAL_DMA_Abort_IT+0x1ae>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4a17      	ldr	r2, [pc, #92]	; (800a354 <HAL_DMA_Abort_IT+0x20c>)
 800a2f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	4798      	blx	r3
    } 
  }
  return status;
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	40020080 	.word	0x40020080
 800a328:	40020008 	.word	0x40020008
 800a32c:	4002001c 	.word	0x4002001c
 800a330:	40020030 	.word	0x40020030
 800a334:	40020044 	.word	0x40020044
 800a338:	40020058 	.word	0x40020058
 800a33c:	4002006c 	.word	0x4002006c
 800a340:	40020408 	.word	0x40020408
 800a344:	4002041c 	.word	0x4002041c
 800a348:	40020430 	.word	0x40020430
 800a34c:	40020444 	.word	0x40020444
 800a350:	40020400 	.word	0x40020400
 800a354:	40020000 	.word	0x40020000

0800a358 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a374:	2204      	movs	r2, #4
 800a376:	409a      	lsls	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	4013      	ands	r3, r2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 80f1 	beq.w	800a564 <HAL_DMA_IRQHandler+0x20c>
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f003 0304 	and.w	r3, r3, #4
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 80eb 	beq.w	800a564 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0320 	and.w	r3, r3, #32
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d107      	bne.n	800a3ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f022 0204 	bic.w	r2, r2, #4
 800a3aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	4b5f      	ldr	r3, [pc, #380]	; (800a530 <HAL_DMA_IRQHandler+0x1d8>)
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d958      	bls.n	800a46a <HAL_DMA_IRQHandler+0x112>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a5d      	ldr	r2, [pc, #372]	; (800a534 <HAL_DMA_IRQHandler+0x1dc>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d04f      	beq.n	800a462 <HAL_DMA_IRQHandler+0x10a>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a5c      	ldr	r2, [pc, #368]	; (800a538 <HAL_DMA_IRQHandler+0x1e0>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d048      	beq.n	800a45e <HAL_DMA_IRQHandler+0x106>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a5a      	ldr	r2, [pc, #360]	; (800a53c <HAL_DMA_IRQHandler+0x1e4>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d040      	beq.n	800a458 <HAL_DMA_IRQHandler+0x100>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a59      	ldr	r2, [pc, #356]	; (800a540 <HAL_DMA_IRQHandler+0x1e8>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d038      	beq.n	800a452 <HAL_DMA_IRQHandler+0xfa>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a57      	ldr	r2, [pc, #348]	; (800a544 <HAL_DMA_IRQHandler+0x1ec>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d030      	beq.n	800a44c <HAL_DMA_IRQHandler+0xf4>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a56      	ldr	r2, [pc, #344]	; (800a548 <HAL_DMA_IRQHandler+0x1f0>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d028      	beq.n	800a446 <HAL_DMA_IRQHandler+0xee>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a4d      	ldr	r2, [pc, #308]	; (800a530 <HAL_DMA_IRQHandler+0x1d8>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d020      	beq.n	800a440 <HAL_DMA_IRQHandler+0xe8>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a52      	ldr	r2, [pc, #328]	; (800a54c <HAL_DMA_IRQHandler+0x1f4>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d019      	beq.n	800a43c <HAL_DMA_IRQHandler+0xe4>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a50      	ldr	r2, [pc, #320]	; (800a550 <HAL_DMA_IRQHandler+0x1f8>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d012      	beq.n	800a438 <HAL_DMA_IRQHandler+0xe0>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a4f      	ldr	r2, [pc, #316]	; (800a554 <HAL_DMA_IRQHandler+0x1fc>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d00a      	beq.n	800a432 <HAL_DMA_IRQHandler+0xda>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a4d      	ldr	r2, [pc, #308]	; (800a558 <HAL_DMA_IRQHandler+0x200>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d102      	bne.n	800a42c <HAL_DMA_IRQHandler+0xd4>
 800a426:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a42a:	e01b      	b.n	800a464 <HAL_DMA_IRQHandler+0x10c>
 800a42c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a430:	e018      	b.n	800a464 <HAL_DMA_IRQHandler+0x10c>
 800a432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a436:	e015      	b.n	800a464 <HAL_DMA_IRQHandler+0x10c>
 800a438:	2340      	movs	r3, #64	; 0x40
 800a43a:	e013      	b.n	800a464 <HAL_DMA_IRQHandler+0x10c>
 800a43c:	2304      	movs	r3, #4
 800a43e:	e011      	b.n	800a464 <HAL_DMA_IRQHandler+0x10c>
 800a440:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a444:	e00e      	b.n	800a464 <HAL_DMA_IRQHandler+0x10c>
 800a446:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a44a:	e00b      	b.n	800a464 <HAL_DMA_IRQHandler+0x10c>
 800a44c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a450:	e008      	b.n	800a464 <HAL_DMA_IRQHandler+0x10c>
 800a452:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a456:	e005      	b.n	800a464 <HAL_DMA_IRQHandler+0x10c>
 800a458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a45c:	e002      	b.n	800a464 <HAL_DMA_IRQHandler+0x10c>
 800a45e:	2340      	movs	r3, #64	; 0x40
 800a460:	e000      	b.n	800a464 <HAL_DMA_IRQHandler+0x10c>
 800a462:	2304      	movs	r3, #4
 800a464:	4a3d      	ldr	r2, [pc, #244]	; (800a55c <HAL_DMA_IRQHandler+0x204>)
 800a466:	6053      	str	r3, [r2, #4]
 800a468:	e057      	b.n	800a51a <HAL_DMA_IRQHandler+0x1c2>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a31      	ldr	r2, [pc, #196]	; (800a534 <HAL_DMA_IRQHandler+0x1dc>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d04f      	beq.n	800a514 <HAL_DMA_IRQHandler+0x1bc>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a2f      	ldr	r2, [pc, #188]	; (800a538 <HAL_DMA_IRQHandler+0x1e0>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d048      	beq.n	800a510 <HAL_DMA_IRQHandler+0x1b8>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a2e      	ldr	r2, [pc, #184]	; (800a53c <HAL_DMA_IRQHandler+0x1e4>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d040      	beq.n	800a50a <HAL_DMA_IRQHandler+0x1b2>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a2c      	ldr	r2, [pc, #176]	; (800a540 <HAL_DMA_IRQHandler+0x1e8>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d038      	beq.n	800a504 <HAL_DMA_IRQHandler+0x1ac>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a2b      	ldr	r2, [pc, #172]	; (800a544 <HAL_DMA_IRQHandler+0x1ec>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d030      	beq.n	800a4fe <HAL_DMA_IRQHandler+0x1a6>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a29      	ldr	r2, [pc, #164]	; (800a548 <HAL_DMA_IRQHandler+0x1f0>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d028      	beq.n	800a4f8 <HAL_DMA_IRQHandler+0x1a0>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a21      	ldr	r2, [pc, #132]	; (800a530 <HAL_DMA_IRQHandler+0x1d8>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d020      	beq.n	800a4f2 <HAL_DMA_IRQHandler+0x19a>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a25      	ldr	r2, [pc, #148]	; (800a54c <HAL_DMA_IRQHandler+0x1f4>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d019      	beq.n	800a4ee <HAL_DMA_IRQHandler+0x196>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a24      	ldr	r2, [pc, #144]	; (800a550 <HAL_DMA_IRQHandler+0x1f8>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d012      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x192>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a22      	ldr	r2, [pc, #136]	; (800a554 <HAL_DMA_IRQHandler+0x1fc>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d00a      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x18c>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a21      	ldr	r2, [pc, #132]	; (800a558 <HAL_DMA_IRQHandler+0x200>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d102      	bne.n	800a4de <HAL_DMA_IRQHandler+0x186>
 800a4d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4dc:	e01b      	b.n	800a516 <HAL_DMA_IRQHandler+0x1be>
 800a4de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a4e2:	e018      	b.n	800a516 <HAL_DMA_IRQHandler+0x1be>
 800a4e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4e8:	e015      	b.n	800a516 <HAL_DMA_IRQHandler+0x1be>
 800a4ea:	2340      	movs	r3, #64	; 0x40
 800a4ec:	e013      	b.n	800a516 <HAL_DMA_IRQHandler+0x1be>
 800a4ee:	2304      	movs	r3, #4
 800a4f0:	e011      	b.n	800a516 <HAL_DMA_IRQHandler+0x1be>
 800a4f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a4f6:	e00e      	b.n	800a516 <HAL_DMA_IRQHandler+0x1be>
 800a4f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a4fc:	e00b      	b.n	800a516 <HAL_DMA_IRQHandler+0x1be>
 800a4fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a502:	e008      	b.n	800a516 <HAL_DMA_IRQHandler+0x1be>
 800a504:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a508:	e005      	b.n	800a516 <HAL_DMA_IRQHandler+0x1be>
 800a50a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a50e:	e002      	b.n	800a516 <HAL_DMA_IRQHandler+0x1be>
 800a510:	2340      	movs	r3, #64	; 0x40
 800a512:	e000      	b.n	800a516 <HAL_DMA_IRQHandler+0x1be>
 800a514:	2304      	movs	r3, #4
 800a516:	4a12      	ldr	r2, [pc, #72]	; (800a560 <HAL_DMA_IRQHandler+0x208>)
 800a518:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f000 8136 	beq.w	800a790 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800a52c:	e130      	b.n	800a790 <HAL_DMA_IRQHandler+0x438>
 800a52e:	bf00      	nop
 800a530:	40020080 	.word	0x40020080
 800a534:	40020008 	.word	0x40020008
 800a538:	4002001c 	.word	0x4002001c
 800a53c:	40020030 	.word	0x40020030
 800a540:	40020044 	.word	0x40020044
 800a544:	40020058 	.word	0x40020058
 800a548:	4002006c 	.word	0x4002006c
 800a54c:	40020408 	.word	0x40020408
 800a550:	4002041c 	.word	0x4002041c
 800a554:	40020430 	.word	0x40020430
 800a558:	40020444 	.word	0x40020444
 800a55c:	40020400 	.word	0x40020400
 800a560:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	2202      	movs	r2, #2
 800a56a:	409a      	lsls	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4013      	ands	r3, r2
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 80dd 	beq.w	800a730 <HAL_DMA_IRQHandler+0x3d8>
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 80d7 	beq.w	800a730 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0320 	and.w	r3, r3, #32
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10b      	bne.n	800a5a8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f022 020a 	bic.w	r2, r2, #10
 800a59e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	4b7b      	ldr	r3, [pc, #492]	; (800a79c <HAL_DMA_IRQHandler+0x444>)
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d958      	bls.n	800a666 <HAL_DMA_IRQHandler+0x30e>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a79      	ldr	r2, [pc, #484]	; (800a7a0 <HAL_DMA_IRQHandler+0x448>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d04f      	beq.n	800a65e <HAL_DMA_IRQHandler+0x306>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a78      	ldr	r2, [pc, #480]	; (800a7a4 <HAL_DMA_IRQHandler+0x44c>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d048      	beq.n	800a65a <HAL_DMA_IRQHandler+0x302>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a76      	ldr	r2, [pc, #472]	; (800a7a8 <HAL_DMA_IRQHandler+0x450>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d040      	beq.n	800a654 <HAL_DMA_IRQHandler+0x2fc>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a75      	ldr	r2, [pc, #468]	; (800a7ac <HAL_DMA_IRQHandler+0x454>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d038      	beq.n	800a64e <HAL_DMA_IRQHandler+0x2f6>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a73      	ldr	r2, [pc, #460]	; (800a7b0 <HAL_DMA_IRQHandler+0x458>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d030      	beq.n	800a648 <HAL_DMA_IRQHandler+0x2f0>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a72      	ldr	r2, [pc, #456]	; (800a7b4 <HAL_DMA_IRQHandler+0x45c>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d028      	beq.n	800a642 <HAL_DMA_IRQHandler+0x2ea>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a69      	ldr	r2, [pc, #420]	; (800a79c <HAL_DMA_IRQHandler+0x444>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d020      	beq.n	800a63c <HAL_DMA_IRQHandler+0x2e4>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a6e      	ldr	r2, [pc, #440]	; (800a7b8 <HAL_DMA_IRQHandler+0x460>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d019      	beq.n	800a638 <HAL_DMA_IRQHandler+0x2e0>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a6c      	ldr	r2, [pc, #432]	; (800a7bc <HAL_DMA_IRQHandler+0x464>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d012      	beq.n	800a634 <HAL_DMA_IRQHandler+0x2dc>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a6b      	ldr	r2, [pc, #428]	; (800a7c0 <HAL_DMA_IRQHandler+0x468>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d00a      	beq.n	800a62e <HAL_DMA_IRQHandler+0x2d6>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a69      	ldr	r2, [pc, #420]	; (800a7c4 <HAL_DMA_IRQHandler+0x46c>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d102      	bne.n	800a628 <HAL_DMA_IRQHandler+0x2d0>
 800a622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a626:	e01b      	b.n	800a660 <HAL_DMA_IRQHandler+0x308>
 800a628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a62c:	e018      	b.n	800a660 <HAL_DMA_IRQHandler+0x308>
 800a62e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a632:	e015      	b.n	800a660 <HAL_DMA_IRQHandler+0x308>
 800a634:	2320      	movs	r3, #32
 800a636:	e013      	b.n	800a660 <HAL_DMA_IRQHandler+0x308>
 800a638:	2302      	movs	r3, #2
 800a63a:	e011      	b.n	800a660 <HAL_DMA_IRQHandler+0x308>
 800a63c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a640:	e00e      	b.n	800a660 <HAL_DMA_IRQHandler+0x308>
 800a642:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a646:	e00b      	b.n	800a660 <HAL_DMA_IRQHandler+0x308>
 800a648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a64c:	e008      	b.n	800a660 <HAL_DMA_IRQHandler+0x308>
 800a64e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a652:	e005      	b.n	800a660 <HAL_DMA_IRQHandler+0x308>
 800a654:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a658:	e002      	b.n	800a660 <HAL_DMA_IRQHandler+0x308>
 800a65a:	2320      	movs	r3, #32
 800a65c:	e000      	b.n	800a660 <HAL_DMA_IRQHandler+0x308>
 800a65e:	2302      	movs	r3, #2
 800a660:	4a59      	ldr	r2, [pc, #356]	; (800a7c8 <HAL_DMA_IRQHandler+0x470>)
 800a662:	6053      	str	r3, [r2, #4]
 800a664:	e057      	b.n	800a716 <HAL_DMA_IRQHandler+0x3be>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a4d      	ldr	r2, [pc, #308]	; (800a7a0 <HAL_DMA_IRQHandler+0x448>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d04f      	beq.n	800a710 <HAL_DMA_IRQHandler+0x3b8>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a4b      	ldr	r2, [pc, #300]	; (800a7a4 <HAL_DMA_IRQHandler+0x44c>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d048      	beq.n	800a70c <HAL_DMA_IRQHandler+0x3b4>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a4a      	ldr	r2, [pc, #296]	; (800a7a8 <HAL_DMA_IRQHandler+0x450>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d040      	beq.n	800a706 <HAL_DMA_IRQHandler+0x3ae>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a48      	ldr	r2, [pc, #288]	; (800a7ac <HAL_DMA_IRQHandler+0x454>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d038      	beq.n	800a700 <HAL_DMA_IRQHandler+0x3a8>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a47      	ldr	r2, [pc, #284]	; (800a7b0 <HAL_DMA_IRQHandler+0x458>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d030      	beq.n	800a6fa <HAL_DMA_IRQHandler+0x3a2>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a45      	ldr	r2, [pc, #276]	; (800a7b4 <HAL_DMA_IRQHandler+0x45c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d028      	beq.n	800a6f4 <HAL_DMA_IRQHandler+0x39c>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a3d      	ldr	r2, [pc, #244]	; (800a79c <HAL_DMA_IRQHandler+0x444>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d020      	beq.n	800a6ee <HAL_DMA_IRQHandler+0x396>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a41      	ldr	r2, [pc, #260]	; (800a7b8 <HAL_DMA_IRQHandler+0x460>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d019      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x392>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a40      	ldr	r2, [pc, #256]	; (800a7bc <HAL_DMA_IRQHandler+0x464>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d012      	beq.n	800a6e6 <HAL_DMA_IRQHandler+0x38e>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a3e      	ldr	r2, [pc, #248]	; (800a7c0 <HAL_DMA_IRQHandler+0x468>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d00a      	beq.n	800a6e0 <HAL_DMA_IRQHandler+0x388>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a3d      	ldr	r2, [pc, #244]	; (800a7c4 <HAL_DMA_IRQHandler+0x46c>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d102      	bne.n	800a6da <HAL_DMA_IRQHandler+0x382>
 800a6d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6d8:	e01b      	b.n	800a712 <HAL_DMA_IRQHandler+0x3ba>
 800a6da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a6de:	e018      	b.n	800a712 <HAL_DMA_IRQHandler+0x3ba>
 800a6e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6e4:	e015      	b.n	800a712 <HAL_DMA_IRQHandler+0x3ba>
 800a6e6:	2320      	movs	r3, #32
 800a6e8:	e013      	b.n	800a712 <HAL_DMA_IRQHandler+0x3ba>
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	e011      	b.n	800a712 <HAL_DMA_IRQHandler+0x3ba>
 800a6ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6f2:	e00e      	b.n	800a712 <HAL_DMA_IRQHandler+0x3ba>
 800a6f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6f8:	e00b      	b.n	800a712 <HAL_DMA_IRQHandler+0x3ba>
 800a6fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a6fe:	e008      	b.n	800a712 <HAL_DMA_IRQHandler+0x3ba>
 800a700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a704:	e005      	b.n	800a712 <HAL_DMA_IRQHandler+0x3ba>
 800a706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a70a:	e002      	b.n	800a712 <HAL_DMA_IRQHandler+0x3ba>
 800a70c:	2320      	movs	r3, #32
 800a70e:	e000      	b.n	800a712 <HAL_DMA_IRQHandler+0x3ba>
 800a710:	2302      	movs	r3, #2
 800a712:	4a2e      	ldr	r2, [pc, #184]	; (800a7cc <HAL_DMA_IRQHandler+0x474>)
 800a714:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a722:	2b00      	cmp	r3, #0
 800a724:	d034      	beq.n	800a790 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800a72e:	e02f      	b.n	800a790 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a734:	2208      	movs	r2, #8
 800a736:	409a      	lsls	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4013      	ands	r3, r2
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d028      	beq.n	800a792 <HAL_DMA_IRQHandler+0x43a>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f003 0308 	and.w	r3, r3, #8
 800a746:	2b00      	cmp	r3, #0
 800a748:	d023      	beq.n	800a792 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f022 020e 	bic.w	r2, r2, #14
 800a758:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a762:	2101      	movs	r1, #1
 800a764:	fa01 f202 	lsl.w	r2, r1, r2
 800a768:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a784:	2b00      	cmp	r3, #0
 800a786:	d004      	beq.n	800a792 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	4798      	blx	r3
    }
  }
  return;
 800a790:	bf00      	nop
 800a792:	bf00      	nop
}
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	40020080 	.word	0x40020080
 800a7a0:	40020008 	.word	0x40020008
 800a7a4:	4002001c 	.word	0x4002001c
 800a7a8:	40020030 	.word	0x40020030
 800a7ac:	40020044 	.word	0x40020044
 800a7b0:	40020058 	.word	0x40020058
 800a7b4:	4002006c 	.word	0x4002006c
 800a7b8:	40020408 	.word	0x40020408
 800a7bc:	4002041c 	.word	0x4002041c
 800a7c0:	40020430 	.word	0x40020430
 800a7c4:	40020444 	.word	0x40020444
 800a7c8:	40020400 	.word	0x40020400
 800a7cc:	40020000 	.word	0x40020000

0800a7d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
 800a7dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	fa01 f202 	lsl.w	r2, r1, r2
 800a7ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	2b10      	cmp	r3, #16
 800a7fc:	d108      	bne.n	800a810 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a80e:	e007      	b.n	800a820 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	60da      	str	r2, [r3, #12]
}
 800a820:	bf00      	nop
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	bc80      	pop	{r7}
 800a828:	4770      	bx	lr
	...

0800a82c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b08b      	sub	sp, #44	; 0x2c
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a836:	2300      	movs	r3, #0
 800a838:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a83a:	2300      	movs	r3, #0
 800a83c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a83e:	e179      	b.n	800ab34 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a840:	2201      	movs	r2, #1
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	fa02 f303 	lsl.w	r3, r2, r3
 800a848:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	69fa      	ldr	r2, [r7, #28]
 800a850:	4013      	ands	r3, r2
 800a852:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a854:	69ba      	ldr	r2, [r7, #24]
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	429a      	cmp	r2, r3
 800a85a:	f040 8168 	bne.w	800ab2e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	4a96      	ldr	r2, [pc, #600]	; (800aabc <HAL_GPIO_Init+0x290>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d05e      	beq.n	800a926 <HAL_GPIO_Init+0xfa>
 800a868:	4a94      	ldr	r2, [pc, #592]	; (800aabc <HAL_GPIO_Init+0x290>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d875      	bhi.n	800a95a <HAL_GPIO_Init+0x12e>
 800a86e:	4a94      	ldr	r2, [pc, #592]	; (800aac0 <HAL_GPIO_Init+0x294>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d058      	beq.n	800a926 <HAL_GPIO_Init+0xfa>
 800a874:	4a92      	ldr	r2, [pc, #584]	; (800aac0 <HAL_GPIO_Init+0x294>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d86f      	bhi.n	800a95a <HAL_GPIO_Init+0x12e>
 800a87a:	4a92      	ldr	r2, [pc, #584]	; (800aac4 <HAL_GPIO_Init+0x298>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d052      	beq.n	800a926 <HAL_GPIO_Init+0xfa>
 800a880:	4a90      	ldr	r2, [pc, #576]	; (800aac4 <HAL_GPIO_Init+0x298>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d869      	bhi.n	800a95a <HAL_GPIO_Init+0x12e>
 800a886:	4a90      	ldr	r2, [pc, #576]	; (800aac8 <HAL_GPIO_Init+0x29c>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d04c      	beq.n	800a926 <HAL_GPIO_Init+0xfa>
 800a88c:	4a8e      	ldr	r2, [pc, #568]	; (800aac8 <HAL_GPIO_Init+0x29c>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d863      	bhi.n	800a95a <HAL_GPIO_Init+0x12e>
 800a892:	4a8e      	ldr	r2, [pc, #568]	; (800aacc <HAL_GPIO_Init+0x2a0>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d046      	beq.n	800a926 <HAL_GPIO_Init+0xfa>
 800a898:	4a8c      	ldr	r2, [pc, #560]	; (800aacc <HAL_GPIO_Init+0x2a0>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d85d      	bhi.n	800a95a <HAL_GPIO_Init+0x12e>
 800a89e:	2b12      	cmp	r3, #18
 800a8a0:	d82a      	bhi.n	800a8f8 <HAL_GPIO_Init+0xcc>
 800a8a2:	2b12      	cmp	r3, #18
 800a8a4:	d859      	bhi.n	800a95a <HAL_GPIO_Init+0x12e>
 800a8a6:	a201      	add	r2, pc, #4	; (adr r2, 800a8ac <HAL_GPIO_Init+0x80>)
 800a8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ac:	0800a927 	.word	0x0800a927
 800a8b0:	0800a901 	.word	0x0800a901
 800a8b4:	0800a913 	.word	0x0800a913
 800a8b8:	0800a955 	.word	0x0800a955
 800a8bc:	0800a95b 	.word	0x0800a95b
 800a8c0:	0800a95b 	.word	0x0800a95b
 800a8c4:	0800a95b 	.word	0x0800a95b
 800a8c8:	0800a95b 	.word	0x0800a95b
 800a8cc:	0800a95b 	.word	0x0800a95b
 800a8d0:	0800a95b 	.word	0x0800a95b
 800a8d4:	0800a95b 	.word	0x0800a95b
 800a8d8:	0800a95b 	.word	0x0800a95b
 800a8dc:	0800a95b 	.word	0x0800a95b
 800a8e0:	0800a95b 	.word	0x0800a95b
 800a8e4:	0800a95b 	.word	0x0800a95b
 800a8e8:	0800a95b 	.word	0x0800a95b
 800a8ec:	0800a95b 	.word	0x0800a95b
 800a8f0:	0800a909 	.word	0x0800a909
 800a8f4:	0800a91d 	.word	0x0800a91d
 800a8f8:	4a75      	ldr	r2, [pc, #468]	; (800aad0 <HAL_GPIO_Init+0x2a4>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d013      	beq.n	800a926 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a8fe:	e02c      	b.n	800a95a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	623b      	str	r3, [r7, #32]
          break;
 800a906:	e029      	b.n	800a95c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	3304      	adds	r3, #4
 800a90e:	623b      	str	r3, [r7, #32]
          break;
 800a910:	e024      	b.n	800a95c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	3308      	adds	r3, #8
 800a918:	623b      	str	r3, [r7, #32]
          break;
 800a91a:	e01f      	b.n	800a95c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	330c      	adds	r3, #12
 800a922:	623b      	str	r3, [r7, #32]
          break;
 800a924:	e01a      	b.n	800a95c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d102      	bne.n	800a934 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a92e:	2304      	movs	r3, #4
 800a930:	623b      	str	r3, [r7, #32]
          break;
 800a932:	e013      	b.n	800a95c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d105      	bne.n	800a948 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a93c:	2308      	movs	r3, #8
 800a93e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	69fa      	ldr	r2, [r7, #28]
 800a944:	611a      	str	r2, [r3, #16]
          break;
 800a946:	e009      	b.n	800a95c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a948:	2308      	movs	r3, #8
 800a94a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	69fa      	ldr	r2, [r7, #28]
 800a950:	615a      	str	r2, [r3, #20]
          break;
 800a952:	e003      	b.n	800a95c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a954:	2300      	movs	r3, #0
 800a956:	623b      	str	r3, [r7, #32]
          break;
 800a958:	e000      	b.n	800a95c <HAL_GPIO_Init+0x130>
          break;
 800a95a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	2bff      	cmp	r3, #255	; 0xff
 800a960:	d801      	bhi.n	800a966 <HAL_GPIO_Init+0x13a>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	e001      	b.n	800a96a <HAL_GPIO_Init+0x13e>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	3304      	adds	r3, #4
 800a96a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	2bff      	cmp	r3, #255	; 0xff
 800a970:	d802      	bhi.n	800a978 <HAL_GPIO_Init+0x14c>
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	e002      	b.n	800a97e <HAL_GPIO_Init+0x152>
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	3b08      	subs	r3, #8
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	210f      	movs	r1, #15
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	fa01 f303 	lsl.w	r3, r1, r3
 800a98c:	43db      	mvns	r3, r3
 800a98e:	401a      	ands	r2, r3
 800a990:	6a39      	ldr	r1, [r7, #32]
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	fa01 f303 	lsl.w	r3, r1, r3
 800a998:	431a      	orrs	r2, r3
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 80c1 	beq.w	800ab2e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a9ac:	4b49      	ldr	r3, [pc, #292]	; (800aad4 <HAL_GPIO_Init+0x2a8>)
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	4a48      	ldr	r2, [pc, #288]	; (800aad4 <HAL_GPIO_Init+0x2a8>)
 800a9b2:	f043 0301 	orr.w	r3, r3, #1
 800a9b6:	6193      	str	r3, [r2, #24]
 800a9b8:	4b46      	ldr	r3, [pc, #280]	; (800aad4 <HAL_GPIO_Init+0x2a8>)
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	60bb      	str	r3, [r7, #8]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a9c4:	4a44      	ldr	r2, [pc, #272]	; (800aad8 <HAL_GPIO_Init+0x2ac>)
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	089b      	lsrs	r3, r3, #2
 800a9ca:	3302      	adds	r3, #2
 800a9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	f003 0303 	and.w	r3, r3, #3
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	220f      	movs	r2, #15
 800a9dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e0:	43db      	mvns	r3, r3
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a3c      	ldr	r2, [pc, #240]	; (800aadc <HAL_GPIO_Init+0x2b0>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d01f      	beq.n	800aa30 <HAL_GPIO_Init+0x204>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a3b      	ldr	r2, [pc, #236]	; (800aae0 <HAL_GPIO_Init+0x2b4>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d019      	beq.n	800aa2c <HAL_GPIO_Init+0x200>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a3a      	ldr	r2, [pc, #232]	; (800aae4 <HAL_GPIO_Init+0x2b8>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d013      	beq.n	800aa28 <HAL_GPIO_Init+0x1fc>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a39      	ldr	r2, [pc, #228]	; (800aae8 <HAL_GPIO_Init+0x2bc>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d00d      	beq.n	800aa24 <HAL_GPIO_Init+0x1f8>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a38      	ldr	r2, [pc, #224]	; (800aaec <HAL_GPIO_Init+0x2c0>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d007      	beq.n	800aa20 <HAL_GPIO_Init+0x1f4>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a37      	ldr	r2, [pc, #220]	; (800aaf0 <HAL_GPIO_Init+0x2c4>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d101      	bne.n	800aa1c <HAL_GPIO_Init+0x1f0>
 800aa18:	2305      	movs	r3, #5
 800aa1a:	e00a      	b.n	800aa32 <HAL_GPIO_Init+0x206>
 800aa1c:	2306      	movs	r3, #6
 800aa1e:	e008      	b.n	800aa32 <HAL_GPIO_Init+0x206>
 800aa20:	2304      	movs	r3, #4
 800aa22:	e006      	b.n	800aa32 <HAL_GPIO_Init+0x206>
 800aa24:	2303      	movs	r3, #3
 800aa26:	e004      	b.n	800aa32 <HAL_GPIO_Init+0x206>
 800aa28:	2302      	movs	r3, #2
 800aa2a:	e002      	b.n	800aa32 <HAL_GPIO_Init+0x206>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e000      	b.n	800aa32 <HAL_GPIO_Init+0x206>
 800aa30:	2300      	movs	r3, #0
 800aa32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa34:	f002 0203 	and.w	r2, r2, #3
 800aa38:	0092      	lsls	r2, r2, #2
 800aa3a:	4093      	lsls	r3, r2
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800aa42:	4925      	ldr	r1, [pc, #148]	; (800aad8 <HAL_GPIO_Init+0x2ac>)
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	089b      	lsrs	r3, r3, #2
 800aa48:	3302      	adds	r3, #2
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d006      	beq.n	800aa6a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800aa5c:	4b25      	ldr	r3, [pc, #148]	; (800aaf4 <HAL_GPIO_Init+0x2c8>)
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	4924      	ldr	r1, [pc, #144]	; (800aaf4 <HAL_GPIO_Init+0x2c8>)
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	608b      	str	r3, [r1, #8]
 800aa68:	e006      	b.n	800aa78 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800aa6a:	4b22      	ldr	r3, [pc, #136]	; (800aaf4 <HAL_GPIO_Init+0x2c8>)
 800aa6c:	689a      	ldr	r2, [r3, #8]
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	43db      	mvns	r3, r3
 800aa72:	4920      	ldr	r1, [pc, #128]	; (800aaf4 <HAL_GPIO_Init+0x2c8>)
 800aa74:	4013      	ands	r3, r2
 800aa76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d006      	beq.n	800aa92 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800aa84:	4b1b      	ldr	r3, [pc, #108]	; (800aaf4 <HAL_GPIO_Init+0x2c8>)
 800aa86:	68da      	ldr	r2, [r3, #12]
 800aa88:	491a      	ldr	r1, [pc, #104]	; (800aaf4 <HAL_GPIO_Init+0x2c8>)
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	60cb      	str	r3, [r1, #12]
 800aa90:	e006      	b.n	800aaa0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800aa92:	4b18      	ldr	r3, [pc, #96]	; (800aaf4 <HAL_GPIO_Init+0x2c8>)
 800aa94:	68da      	ldr	r2, [r3, #12]
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	43db      	mvns	r3, r3
 800aa9a:	4916      	ldr	r1, [pc, #88]	; (800aaf4 <HAL_GPIO_Init+0x2c8>)
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d025      	beq.n	800aaf8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800aaac:	4b11      	ldr	r3, [pc, #68]	; (800aaf4 <HAL_GPIO_Init+0x2c8>)
 800aaae:	685a      	ldr	r2, [r3, #4]
 800aab0:	4910      	ldr	r1, [pc, #64]	; (800aaf4 <HAL_GPIO_Init+0x2c8>)
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	604b      	str	r3, [r1, #4]
 800aab8:	e025      	b.n	800ab06 <HAL_GPIO_Init+0x2da>
 800aaba:	bf00      	nop
 800aabc:	10320000 	.word	0x10320000
 800aac0:	10310000 	.word	0x10310000
 800aac4:	10220000 	.word	0x10220000
 800aac8:	10210000 	.word	0x10210000
 800aacc:	10120000 	.word	0x10120000
 800aad0:	10110000 	.word	0x10110000
 800aad4:	40021000 	.word	0x40021000
 800aad8:	40010000 	.word	0x40010000
 800aadc:	40010800 	.word	0x40010800
 800aae0:	40010c00 	.word	0x40010c00
 800aae4:	40011000 	.word	0x40011000
 800aae8:	40011400 	.word	0x40011400
 800aaec:	40011800 	.word	0x40011800
 800aaf0:	40011c00 	.word	0x40011c00
 800aaf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800aaf8:	4b15      	ldr	r3, [pc, #84]	; (800ab50 <HAL_GPIO_Init+0x324>)
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	43db      	mvns	r3, r3
 800ab00:	4913      	ldr	r1, [pc, #76]	; (800ab50 <HAL_GPIO_Init+0x324>)
 800ab02:	4013      	ands	r3, r2
 800ab04:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d006      	beq.n	800ab20 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800ab12:	4b0f      	ldr	r3, [pc, #60]	; (800ab50 <HAL_GPIO_Init+0x324>)
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	490e      	ldr	r1, [pc, #56]	; (800ab50 <HAL_GPIO_Init+0x324>)
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	600b      	str	r3, [r1, #0]
 800ab1e:	e006      	b.n	800ab2e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800ab20:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <HAL_GPIO_Init+0x324>)
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	43db      	mvns	r3, r3
 800ab28:	4909      	ldr	r1, [pc, #36]	; (800ab50 <HAL_GPIO_Init+0x324>)
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	3301      	adds	r3, #1
 800ab32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f47f ae7e 	bne.w	800a840 <HAL_GPIO_Init+0x14>
  }
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop
 800ab48:	372c      	adds	r7, #44	; 0x2c
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bc80      	pop	{r7}
 800ab4e:	4770      	bx	lr
 800ab50:	40010400 	.word	0x40010400

0800ab54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b089      	sub	sp, #36	; 0x24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800ab62:	e0a6      	b.n	800acb2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800ab64:	2201      	movs	r2, #1
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	4013      	ands	r3, r2
 800ab70:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 8099 	beq.w	800acac <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800ab7a:	4a54      	ldr	r2, [pc, #336]	; (800accc <HAL_GPIO_DeInit+0x178>)
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	089b      	lsrs	r3, r3, #2
 800ab80:	3302      	adds	r3, #2
 800ab82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab86:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	f003 0303 	and.w	r3, r3, #3
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	220f      	movs	r2, #15
 800ab92:	fa02 f303 	lsl.w	r3, r2, r3
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	4013      	ands	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a4c      	ldr	r2, [pc, #304]	; (800acd0 <HAL_GPIO_DeInit+0x17c>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d01f      	beq.n	800abe4 <HAL_GPIO_DeInit+0x90>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a4b      	ldr	r2, [pc, #300]	; (800acd4 <HAL_GPIO_DeInit+0x180>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d019      	beq.n	800abe0 <HAL_GPIO_DeInit+0x8c>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a4a      	ldr	r2, [pc, #296]	; (800acd8 <HAL_GPIO_DeInit+0x184>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d013      	beq.n	800abdc <HAL_GPIO_DeInit+0x88>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a49      	ldr	r2, [pc, #292]	; (800acdc <HAL_GPIO_DeInit+0x188>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d00d      	beq.n	800abd8 <HAL_GPIO_DeInit+0x84>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a48      	ldr	r2, [pc, #288]	; (800ace0 <HAL_GPIO_DeInit+0x18c>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d007      	beq.n	800abd4 <HAL_GPIO_DeInit+0x80>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a47      	ldr	r2, [pc, #284]	; (800ace4 <HAL_GPIO_DeInit+0x190>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d101      	bne.n	800abd0 <HAL_GPIO_DeInit+0x7c>
 800abcc:	2305      	movs	r3, #5
 800abce:	e00a      	b.n	800abe6 <HAL_GPIO_DeInit+0x92>
 800abd0:	2306      	movs	r3, #6
 800abd2:	e008      	b.n	800abe6 <HAL_GPIO_DeInit+0x92>
 800abd4:	2304      	movs	r3, #4
 800abd6:	e006      	b.n	800abe6 <HAL_GPIO_DeInit+0x92>
 800abd8:	2303      	movs	r3, #3
 800abda:	e004      	b.n	800abe6 <HAL_GPIO_DeInit+0x92>
 800abdc:	2302      	movs	r3, #2
 800abde:	e002      	b.n	800abe6 <HAL_GPIO_DeInit+0x92>
 800abe0:	2301      	movs	r3, #1
 800abe2:	e000      	b.n	800abe6 <HAL_GPIO_DeInit+0x92>
 800abe4:	2300      	movs	r3, #0
 800abe6:	69fa      	ldr	r2, [r7, #28]
 800abe8:	f002 0203 	and.w	r2, r2, #3
 800abec:	0092      	lsls	r2, r2, #2
 800abee:	4093      	lsls	r3, r2
 800abf0:	697a      	ldr	r2, [r7, #20]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d132      	bne.n	800ac5c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800abf6:	4b3c      	ldr	r3, [pc, #240]	; (800ace8 <HAL_GPIO_DeInit+0x194>)
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	43db      	mvns	r3, r3
 800abfe:	493a      	ldr	r1, [pc, #232]	; (800ace8 <HAL_GPIO_DeInit+0x194>)
 800ac00:	4013      	ands	r3, r2
 800ac02:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800ac04:	4b38      	ldr	r3, [pc, #224]	; (800ace8 <HAL_GPIO_DeInit+0x194>)
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	43db      	mvns	r3, r3
 800ac0c:	4936      	ldr	r1, [pc, #216]	; (800ace8 <HAL_GPIO_DeInit+0x194>)
 800ac0e:	4013      	ands	r3, r2
 800ac10:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800ac12:	4b35      	ldr	r3, [pc, #212]	; (800ace8 <HAL_GPIO_DeInit+0x194>)
 800ac14:	68da      	ldr	r2, [r3, #12]
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	43db      	mvns	r3, r3
 800ac1a:	4933      	ldr	r1, [pc, #204]	; (800ace8 <HAL_GPIO_DeInit+0x194>)
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800ac20:	4b31      	ldr	r3, [pc, #196]	; (800ace8 <HAL_GPIO_DeInit+0x194>)
 800ac22:	689a      	ldr	r2, [r3, #8]
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	43db      	mvns	r3, r3
 800ac28:	492f      	ldr	r1, [pc, #188]	; (800ace8 <HAL_GPIO_DeInit+0x194>)
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	f003 0303 	and.w	r3, r3, #3
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	220f      	movs	r2, #15
 800ac38:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800ac3e:	4a23      	ldr	r2, [pc, #140]	; (800accc <HAL_GPIO_DeInit+0x178>)
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	089b      	lsrs	r3, r3, #2
 800ac44:	3302      	adds	r3, #2
 800ac46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	43da      	mvns	r2, r3
 800ac4e:	481f      	ldr	r0, [pc, #124]	; (800accc <HAL_GPIO_DeInit+0x178>)
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	089b      	lsrs	r3, r3, #2
 800ac54:	400a      	ands	r2, r1
 800ac56:	3302      	adds	r3, #2
 800ac58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	2bff      	cmp	r3, #255	; 0xff
 800ac60:	d801      	bhi.n	800ac66 <HAL_GPIO_DeInit+0x112>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	e001      	b.n	800ac6a <HAL_GPIO_DeInit+0x116>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	2bff      	cmp	r3, #255	; 0xff
 800ac70:	d802      	bhi.n	800ac78 <HAL_GPIO_DeInit+0x124>
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	e002      	b.n	800ac7e <HAL_GPIO_DeInit+0x12a>
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	3b08      	subs	r3, #8
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	210f      	movs	r1, #15
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	fa01 f303 	lsl.w	r3, r1, r3
 800ac8c:	43db      	mvns	r3, r3
 800ac8e:	401a      	ands	r2, r3
 800ac90:	2104      	movs	r1, #4
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	fa01 f303 	lsl.w	r3, r1, r3
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	43db      	mvns	r3, r3
 800aca6:	401a      	ands	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	60da      	str	r2, [r3, #12]
    }

    position++;
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	3301      	adds	r3, #1
 800acb0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	fa22 f303 	lsr.w	r3, r2, r3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f47f af52 	bne.w	800ab64 <HAL_GPIO_DeInit+0x10>
  }
}
 800acc0:	bf00      	nop
 800acc2:	bf00      	nop
 800acc4:	3724      	adds	r7, #36	; 0x24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bc80      	pop	{r7}
 800acca:	4770      	bx	lr
 800accc:	40010000 	.word	0x40010000
 800acd0:	40010800 	.word	0x40010800
 800acd4:	40010c00 	.word	0x40010c00
 800acd8:	40011000 	.word	0x40011000
 800acdc:	40011400 	.word	0x40011400
 800ace0:	40011800 	.word	0x40011800
 800ace4:	40011c00 	.word	0x40011c00
 800ace8:	40010400 	.word	0x40010400

0800acec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	689a      	ldr	r2, [r3, #8]
 800acfc:	887b      	ldrh	r3, [r7, #2]
 800acfe:	4013      	ands	r3, r2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d002      	beq.n	800ad0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ad04:	2301      	movs	r3, #1
 800ad06:	73fb      	strb	r3, [r7, #15]
 800ad08:	e001      	b.n	800ad0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bc80      	pop	{r7}
 800ad18:	4770      	bx	lr

0800ad1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	b083      	sub	sp, #12
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	460b      	mov	r3, r1
 800ad24:	807b      	strh	r3, [r7, #2]
 800ad26:	4613      	mov	r3, r2
 800ad28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ad2a:	787b      	ldrb	r3, [r7, #1]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ad30:	887a      	ldrh	r2, [r7, #2]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800ad36:	e003      	b.n	800ad40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800ad38:	887b      	ldrh	r3, [r7, #2]
 800ad3a:	041a      	lsls	r2, r3, #16
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	611a      	str	r2, [r3, #16]
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bc80      	pop	{r7}
 800ad48:	4770      	bx	lr

0800ad4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b085      	sub	sp, #20
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	460b      	mov	r3, r1
 800ad54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ad5c:	887a      	ldrh	r2, [r7, #2]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	4013      	ands	r3, r2
 800ad62:	041a      	lsls	r2, r3, #16
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	43d9      	mvns	r1, r3
 800ad68:	887b      	ldrh	r3, [r7, #2]
 800ad6a:	400b      	ands	r3, r1
 800ad6c:	431a      	orrs	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	611a      	str	r2, [r3, #16]
}
 800ad72:	bf00      	nop
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bc80      	pop	{r7}
 800ad7a:	4770      	bx	lr

0800ad7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e12b      	b.n	800afe6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d106      	bne.n	800ada8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7f6 fccc 	bl	8001740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2224      	movs	r2, #36	; 0x24
 800adac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 0201 	bic.w	r2, r2, #1
 800adbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800adde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ade0:	f001 fbf0 	bl	800c5c4 <HAL_RCC_GetPCLK1Freq>
 800ade4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	4a81      	ldr	r2, [pc, #516]	; (800aff0 <HAL_I2C_Init+0x274>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d807      	bhi.n	800ae00 <HAL_I2C_Init+0x84>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4a80      	ldr	r2, [pc, #512]	; (800aff4 <HAL_I2C_Init+0x278>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	bf94      	ite	ls
 800adf8:	2301      	movls	r3, #1
 800adfa:	2300      	movhi	r3, #0
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	e006      	b.n	800ae0e <HAL_I2C_Init+0x92>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	4a7d      	ldr	r2, [pc, #500]	; (800aff8 <HAL_I2C_Init+0x27c>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	bf94      	ite	ls
 800ae08:	2301      	movls	r3, #1
 800ae0a:	2300      	movhi	r3, #0
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e0e7      	b.n	800afe6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	4a78      	ldr	r2, [pc, #480]	; (800affc <HAL_I2C_Init+0x280>)
 800ae1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae1e:	0c9b      	lsrs	r3, r3, #18
 800ae20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	6a1b      	ldr	r3, [r3, #32]
 800ae3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	4a6a      	ldr	r2, [pc, #424]	; (800aff0 <HAL_I2C_Init+0x274>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d802      	bhi.n	800ae50 <HAL_I2C_Init+0xd4>
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	e009      	b.n	800ae64 <HAL_I2C_Init+0xe8>
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ae56:	fb02 f303 	mul.w	r3, r2, r3
 800ae5a:	4a69      	ldr	r2, [pc, #420]	; (800b000 <HAL_I2C_Init+0x284>)
 800ae5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae60:	099b      	lsrs	r3, r3, #6
 800ae62:	3301      	adds	r3, #1
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	6812      	ldr	r2, [r2, #0]
 800ae68:	430b      	orrs	r3, r1
 800ae6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ae76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	495c      	ldr	r1, [pc, #368]	; (800aff0 <HAL_I2C_Init+0x274>)
 800ae80:	428b      	cmp	r3, r1
 800ae82:	d819      	bhi.n	800aeb8 <HAL_I2C_Init+0x13c>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	1e59      	subs	r1, r3, #1
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	005b      	lsls	r3, r3, #1
 800ae8e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae92:	1c59      	adds	r1, r3, #1
 800ae94:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ae98:	400b      	ands	r3, r1
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00a      	beq.n	800aeb4 <HAL_I2C_Init+0x138>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	1e59      	subs	r1, r3, #1
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	fbb1 f3f3 	udiv	r3, r1, r3
 800aeac:	3301      	adds	r3, #1
 800aeae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aeb2:	e051      	b.n	800af58 <HAL_I2C_Init+0x1dc>
 800aeb4:	2304      	movs	r3, #4
 800aeb6:	e04f      	b.n	800af58 <HAL_I2C_Init+0x1dc>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d111      	bne.n	800aee4 <HAL_I2C_Init+0x168>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	1e58      	subs	r0, r3, #1
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6859      	ldr	r1, [r3, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	440b      	add	r3, r1
 800aece:	fbb0 f3f3 	udiv	r3, r0, r3
 800aed2:	3301      	adds	r3, #1
 800aed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	bf0c      	ite	eq
 800aedc:	2301      	moveq	r3, #1
 800aede:	2300      	movne	r3, #0
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	e012      	b.n	800af0a <HAL_I2C_Init+0x18e>
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	1e58      	subs	r0, r3, #1
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6859      	ldr	r1, [r3, #4]
 800aeec:	460b      	mov	r3, r1
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	440b      	add	r3, r1
 800aef2:	0099      	lsls	r1, r3, #2
 800aef4:	440b      	add	r3, r1
 800aef6:	fbb0 f3f3 	udiv	r3, r0, r3
 800aefa:	3301      	adds	r3, #1
 800aefc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af00:	2b00      	cmp	r3, #0
 800af02:	bf0c      	ite	eq
 800af04:	2301      	moveq	r3, #1
 800af06:	2300      	movne	r3, #0
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <HAL_I2C_Init+0x196>
 800af0e:	2301      	movs	r3, #1
 800af10:	e022      	b.n	800af58 <HAL_I2C_Init+0x1dc>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10e      	bne.n	800af38 <HAL_I2C_Init+0x1bc>
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	1e58      	subs	r0, r3, #1
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6859      	ldr	r1, [r3, #4]
 800af22:	460b      	mov	r3, r1
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	440b      	add	r3, r1
 800af28:	fbb0 f3f3 	udiv	r3, r0, r3
 800af2c:	3301      	adds	r3, #1
 800af2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af36:	e00f      	b.n	800af58 <HAL_I2C_Init+0x1dc>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	1e58      	subs	r0, r3, #1
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6859      	ldr	r1, [r3, #4]
 800af40:	460b      	mov	r3, r1
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	440b      	add	r3, r1
 800af46:	0099      	lsls	r1, r3, #2
 800af48:	440b      	add	r3, r1
 800af4a:	fbb0 f3f3 	udiv	r3, r0, r3
 800af4e:	3301      	adds	r3, #1
 800af50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af58:	6879      	ldr	r1, [r7, #4]
 800af5a:	6809      	ldr	r1, [r1, #0]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	69da      	ldr	r2, [r3, #28]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	431a      	orrs	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	430a      	orrs	r2, r1
 800af7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800af86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	6911      	ldr	r1, [r2, #16]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	68d2      	ldr	r2, [r2, #12]
 800af92:	4311      	orrs	r1, r2
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	6812      	ldr	r2, [r2, #0]
 800af98:	430b      	orrs	r3, r1
 800af9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	695a      	ldr	r2, [r3, #20]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	431a      	orrs	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	430a      	orrs	r2, r1
 800afb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f042 0201 	orr.w	r2, r2, #1
 800afc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2220      	movs	r2, #32
 800afd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	000186a0 	.word	0x000186a0
 800aff4:	001e847f 	.word	0x001e847f
 800aff8:	003d08ff 	.word	0x003d08ff
 800affc:	431bde83 	.word	0x431bde83
 800b000:	10624dd3 	.word	0x10624dd3

0800b004 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af02      	add	r7, sp, #8
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	4608      	mov	r0, r1
 800b00e:	4611      	mov	r1, r2
 800b010:	461a      	mov	r2, r3
 800b012:	4603      	mov	r3, r0
 800b014:	817b      	strh	r3, [r7, #10]
 800b016:	460b      	mov	r3, r1
 800b018:	813b      	strh	r3, [r7, #8]
 800b01a:	4613      	mov	r3, r2
 800b01c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b01e:	f7fd fa7d 	bl	800851c <HAL_GetTick>
 800b022:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b20      	cmp	r3, #32
 800b02e:	f040 80d9 	bne.w	800b1e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	2319      	movs	r3, #25
 800b038:	2201      	movs	r2, #1
 800b03a:	496d      	ldr	r1, [pc, #436]	; (800b1f0 <HAL_I2C_Mem_Write+0x1ec>)
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 fcc1 	bl	800b9c4 <I2C_WaitOnFlagUntilTimeout>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b048:	2302      	movs	r3, #2
 800b04a:	e0cc      	b.n	800b1e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b052:	2b01      	cmp	r3, #1
 800b054:	d101      	bne.n	800b05a <HAL_I2C_Mem_Write+0x56>
 800b056:	2302      	movs	r3, #2
 800b058:	e0c5      	b.n	800b1e6 <HAL_I2C_Mem_Write+0x1e2>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2201      	movs	r2, #1
 800b05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0301 	and.w	r3, r3, #1
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d007      	beq.n	800b080 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f042 0201 	orr.w	r2, r2, #1
 800b07e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b08e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2221      	movs	r2, #33	; 0x21
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2240      	movs	r2, #64	; 0x40
 800b09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6a3a      	ldr	r2, [r7, #32]
 800b0aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b0b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4a4d      	ldr	r2, [pc, #308]	; (800b1f4 <HAL_I2C_Mem_Write+0x1f0>)
 800b0c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b0c2:	88f8      	ldrh	r0, [r7, #6]
 800b0c4:	893a      	ldrh	r2, [r7, #8]
 800b0c6:	8979      	ldrh	r1, [r7, #10]
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	9301      	str	r3, [sp, #4]
 800b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f000 faf8 	bl	800b6c8 <I2C_RequestMemoryWrite>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d052      	beq.n	800b184 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e081      	b.n	800b1e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f000 fd86 	bl	800bbf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00d      	beq.n	800b10e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d107      	bne.n	800b10a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e06b      	b.n	800b1e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b112:	781a      	ldrb	r2, [r3, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	1c5a      	adds	r2, r3, #1
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b128:	3b01      	subs	r3, #1
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b134:	b29b      	uxth	r3, r3
 800b136:	3b01      	subs	r3, #1
 800b138:	b29a      	uxth	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	695b      	ldr	r3, [r3, #20]
 800b144:	f003 0304 	and.w	r3, r3, #4
 800b148:	2b04      	cmp	r3, #4
 800b14a:	d11b      	bne.n	800b184 <HAL_I2C_Mem_Write+0x180>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b150:	2b00      	cmp	r3, #0
 800b152:	d017      	beq.n	800b184 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b158:	781a      	ldrb	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b164:	1c5a      	adds	r2, r3, #1
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b16e:	3b01      	subs	r3, #1
 800b170:	b29a      	uxth	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	3b01      	subs	r3, #1
 800b17e:	b29a      	uxth	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1aa      	bne.n	800b0e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 fd79 	bl	800bc88 <I2C_WaitOnBTFFlagUntilTimeout>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00d      	beq.n	800b1b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a0:	2b04      	cmp	r3, #4
 800b1a2:	d107      	bne.n	800b1b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e016      	b.n	800b1e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	e000      	b.n	800b1e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b1e4:	2302      	movs	r3, #2
  }
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3718      	adds	r7, #24
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	00100002 	.word	0x00100002
 800b1f4:	ffff0000 	.word	0xffff0000

0800b1f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b08c      	sub	sp, #48	; 0x30
 800b1fc:	af02      	add	r7, sp, #8
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	4608      	mov	r0, r1
 800b202:	4611      	mov	r1, r2
 800b204:	461a      	mov	r2, r3
 800b206:	4603      	mov	r3, r0
 800b208:	817b      	strh	r3, [r7, #10]
 800b20a:	460b      	mov	r3, r1
 800b20c:	813b      	strh	r3, [r7, #8]
 800b20e:	4613      	mov	r3, r2
 800b210:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b212:	2300      	movs	r3, #0
 800b214:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b216:	f7fd f981 	bl	800851c <HAL_GetTick>
 800b21a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b20      	cmp	r3, #32
 800b226:	f040 8244 	bne.w	800b6b2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	2319      	movs	r3, #25
 800b230:	2201      	movs	r2, #1
 800b232:	4982      	ldr	r1, [pc, #520]	; (800b43c <HAL_I2C_Mem_Read+0x244>)
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 fbc5 	bl	800b9c4 <I2C_WaitOnFlagUntilTimeout>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b240:	2302      	movs	r3, #2
 800b242:	e237      	b.n	800b6b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d101      	bne.n	800b252 <HAL_I2C_Mem_Read+0x5a>
 800b24e:	2302      	movs	r3, #2
 800b250:	e230      	b.n	800b6b4 <HAL_I2C_Mem_Read+0x4bc>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2201      	movs	r2, #1
 800b256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	2b01      	cmp	r3, #1
 800b266:	d007      	beq.n	800b278 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f042 0201 	orr.w	r2, r2, #1
 800b276:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b286:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2222      	movs	r2, #34	; 0x22
 800b28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2240      	movs	r2, #64	; 0x40
 800b294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b2a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	4a62      	ldr	r2, [pc, #392]	; (800b440 <HAL_I2C_Mem_Read+0x248>)
 800b2b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b2ba:	88f8      	ldrh	r0, [r7, #6]
 800b2bc:	893a      	ldrh	r2, [r7, #8]
 800b2be:	8979      	ldrh	r1, [r7, #10]
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	9301      	str	r3, [sp, #4]
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f000 fa92 	bl	800b7f4 <I2C_RequestMemoryRead>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e1ec      	b.n	800b6b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d113      	bne.n	800b30a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	61fb      	str	r3, [r7, #28]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	695b      	ldr	r3, [r3, #20]
 800b2ec:	61fb      	str	r3, [r7, #28]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	61fb      	str	r3, [r7, #28]
 800b2f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b306:	601a      	str	r2, [r3, #0]
 800b308:	e1c0      	b.n	800b68c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d11e      	bne.n	800b350 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b320:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b322:	b672      	cpsid	i
}
 800b324:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b326:	2300      	movs	r3, #0
 800b328:	61bb      	str	r3, [r7, #24]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	61bb      	str	r3, [r7, #24]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	699b      	ldr	r3, [r3, #24]
 800b338:	61bb      	str	r3, [r7, #24]
 800b33a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b34a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b34c:	b662      	cpsie	i
}
 800b34e:	e035      	b.n	800b3bc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b354:	2b02      	cmp	r3, #2
 800b356:	d11e      	bne.n	800b396 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b366:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b368:	b672      	cpsid	i
}
 800b36a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b36c:	2300      	movs	r3, #0
 800b36e:	617b      	str	r3, [r7, #20]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	617b      	str	r3, [r7, #20]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	617b      	str	r3, [r7, #20]
 800b380:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b390:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b392:	b662      	cpsie	i
}
 800b394:	e012      	b.n	800b3bc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b3a4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	613b      	str	r3, [r7, #16]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	695b      	ldr	r3, [r3, #20]
 800b3b0:	613b      	str	r3, [r7, #16]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	613b      	str	r3, [r7, #16]
 800b3ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b3bc:	e166      	b.n	800b68c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	f200 811f 	bhi.w	800b606 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d123      	bne.n	800b418 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f000 fc9f 	bl	800bd18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e167      	b.n	800b6b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	691a      	ldr	r2, [r3, #16]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ee:	b2d2      	uxtb	r2, r2
 800b3f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f6:	1c5a      	adds	r2, r3, #1
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b400:	3b01      	subs	r3, #1
 800b402:	b29a      	uxth	r2, r3
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	3b01      	subs	r3, #1
 800b410:	b29a      	uxth	r2, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b416:	e139      	b.n	800b68c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d152      	bne.n	800b4c6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b426:	2200      	movs	r2, #0
 800b428:	4906      	ldr	r1, [pc, #24]	; (800b444 <HAL_I2C_Mem_Read+0x24c>)
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f000 faca 	bl	800b9c4 <I2C_WaitOnFlagUntilTimeout>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d008      	beq.n	800b448 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e13c      	b.n	800b6b4 <HAL_I2C_Mem_Read+0x4bc>
 800b43a:	bf00      	nop
 800b43c:	00100002 	.word	0x00100002
 800b440:	ffff0000 	.word	0xffff0000
 800b444:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b448:	b672      	cpsid	i
}
 800b44a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b45a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	691a      	ldr	r2, [r3, #16]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	b2d2      	uxtb	r2, r2
 800b468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	1c5a      	adds	r2, r3, #1
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b484:	b29b      	uxth	r3, r3
 800b486:	3b01      	subs	r3, #1
 800b488:	b29a      	uxth	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b48e:	b662      	cpsie	i
}
 800b490:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	691a      	ldr	r2, [r3, #16]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49c:	b2d2      	uxtb	r2, r2
 800b49e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4c4:	e0e2      	b.n	800b68c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	497b      	ldr	r1, [pc, #492]	; (800b6bc <HAL_I2C_Mem_Read+0x4c4>)
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f000 fa77 	bl	800b9c4 <I2C_WaitOnFlagUntilTimeout>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e0e9      	b.n	800b6b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4f0:	b672      	cpsid	i
}
 800b4f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	691a      	ldr	r2, [r3, #16]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fe:	b2d2      	uxtb	r2, r2
 800b500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b510:	3b01      	subs	r3, #1
 800b512:	b29a      	uxth	r2, r3
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	3b01      	subs	r3, #1
 800b520:	b29a      	uxth	r2, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b526:	4b66      	ldr	r3, [pc, #408]	; (800b6c0 <HAL_I2C_Mem_Read+0x4c8>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	08db      	lsrs	r3, r3, #3
 800b52c:	4a65      	ldr	r2, [pc, #404]	; (800b6c4 <HAL_I2C_Mem_Read+0x4cc>)
 800b52e:	fba2 2303 	umull	r2, r3, r2, r3
 800b532:	0a1a      	lsrs	r2, r3, #8
 800b534:	4613      	mov	r3, r2
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	4413      	add	r3, r2
 800b53a:	00da      	lsls	r2, r3, #3
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	3b01      	subs	r3, #1
 800b544:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d118      	bne.n	800b57e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2220      	movs	r2, #32
 800b556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b566:	f043 0220 	orr.w	r2, r3, #32
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b56e:	b662      	cpsie	i
}
 800b570:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2200      	movs	r2, #0
 800b576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e09a      	b.n	800b6b4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d1d9      	bne.n	800b540 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b59a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	691a      	ldr	r2, [r3, #16]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a6:	b2d2      	uxtb	r2, r2
 800b5a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ae:	1c5a      	adds	r2, r3, #1
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b5ce:	b662      	cpsie	i
}
 800b5d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	691a      	ldr	r2, [r3, #16]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	b2d2      	uxtb	r2, r2
 800b5de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b604:	e042      	b.n	800b68c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b608:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f000 fb84 	bl	800bd18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	e04c      	b.n	800b6b4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	691a      	ldr	r2, [r3, #16]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b624:	b2d2      	uxtb	r2, r2
 800b626:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62c:	1c5a      	adds	r2, r3, #1
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b636:	3b01      	subs	r3, #1
 800b638:	b29a      	uxth	r2, r3
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b642:	b29b      	uxth	r3, r3
 800b644:	3b01      	subs	r3, #1
 800b646:	b29a      	uxth	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	f003 0304 	and.w	r3, r3, #4
 800b656:	2b04      	cmp	r3, #4
 800b658:	d118      	bne.n	800b68c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	691a      	ldr	r2, [r3, #16]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b664:	b2d2      	uxtb	r2, r2
 800b666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66c:	1c5a      	adds	r2, r3, #1
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b676:	3b01      	subs	r3, #1
 800b678:	b29a      	uxth	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b682:	b29b      	uxth	r3, r3
 800b684:	3b01      	subs	r3, #1
 800b686:	b29a      	uxth	r2, r3
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b690:	2b00      	cmp	r3, #0
 800b692:	f47f ae94 	bne.w	800b3be <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2220      	movs	r2, #32
 800b69a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e000      	b.n	800b6b4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b6b2:	2302      	movs	r3, #2
  }
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3728      	adds	r7, #40	; 0x28
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	00010004 	.word	0x00010004
 800b6c0:	20000000 	.word	0x20000000
 800b6c4:	14f8b589 	.word	0x14f8b589

0800b6c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af02      	add	r7, sp, #8
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	4608      	mov	r0, r1
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	817b      	strh	r3, [r7, #10]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	813b      	strh	r3, [r7, #8]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f000 f960 	bl	800b9c4 <I2C_WaitOnFlagUntilTimeout>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00d      	beq.n	800b726 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b718:	d103      	bne.n	800b722 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b720:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b722:	2303      	movs	r3, #3
 800b724:	e05f      	b.n	800b7e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b726:	897b      	ldrh	r3, [r7, #10]
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	461a      	mov	r2, r3
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b734:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b738:	6a3a      	ldr	r2, [r7, #32]
 800b73a:	492d      	ldr	r1, [pc, #180]	; (800b7f0 <I2C_RequestMemoryWrite+0x128>)
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f000 f9bb 	bl	800bab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d001      	beq.n	800b74c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	e04c      	b.n	800b7e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b74c:	2300      	movs	r3, #0
 800b74e:	617b      	str	r3, [r7, #20]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	695b      	ldr	r3, [r3, #20]
 800b756:	617b      	str	r3, [r7, #20]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	617b      	str	r3, [r7, #20]
 800b760:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b764:	6a39      	ldr	r1, [r7, #32]
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f000 fa46 	bl	800bbf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00d      	beq.n	800b78e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b776:	2b04      	cmp	r3, #4
 800b778:	d107      	bne.n	800b78a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b788:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e02b      	b.n	800b7e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b78e:	88fb      	ldrh	r3, [r7, #6]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d105      	bne.n	800b7a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b794:	893b      	ldrh	r3, [r7, #8]
 800b796:	b2da      	uxtb	r2, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	611a      	str	r2, [r3, #16]
 800b79e:	e021      	b.n	800b7e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b7a0:	893b      	ldrh	r3, [r7, #8]
 800b7a2:	0a1b      	lsrs	r3, r3, #8
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7b0:	6a39      	ldr	r1, [r7, #32]
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f000 fa20 	bl	800bbf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00d      	beq.n	800b7da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c2:	2b04      	cmp	r3, #4
 800b7c4:	d107      	bne.n	800b7d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e005      	b.n	800b7e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b7da:	893b      	ldrh	r3, [r7, #8]
 800b7dc:	b2da      	uxtb	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	00010002 	.word	0x00010002

0800b7f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b088      	sub	sp, #32
 800b7f8:	af02      	add	r7, sp, #8
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	4608      	mov	r0, r1
 800b7fe:	4611      	mov	r1, r2
 800b800:	461a      	mov	r2, r3
 800b802:	4603      	mov	r3, r0
 800b804:	817b      	strh	r3, [r7, #10]
 800b806:	460b      	mov	r3, r1
 800b808:	813b      	strh	r3, [r7, #8]
 800b80a:	4613      	mov	r3, r2
 800b80c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b81c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b82c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	6a3b      	ldr	r3, [r7, #32]
 800b834:	2200      	movs	r2, #0
 800b836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f000 f8c2 	bl	800b9c4 <I2C_WaitOnFlagUntilTimeout>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00d      	beq.n	800b862 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b854:	d103      	bne.n	800b85e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b85c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b85e:	2303      	movs	r3, #3
 800b860:	e0aa      	b.n	800b9b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b862:	897b      	ldrh	r3, [r7, #10]
 800b864:	b2db      	uxtb	r3, r3
 800b866:	461a      	mov	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b874:	6a3a      	ldr	r2, [r7, #32]
 800b876:	4952      	ldr	r1, [pc, #328]	; (800b9c0 <I2C_RequestMemoryRead+0x1cc>)
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 f91d 	bl	800bab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e097      	b.n	800b9b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b888:	2300      	movs	r3, #0
 800b88a:	617b      	str	r3, [r7, #20]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	617b      	str	r3, [r7, #20]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	617b      	str	r3, [r7, #20]
 800b89c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b89e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a0:	6a39      	ldr	r1, [r7, #32]
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f000 f9a8 	bl	800bbf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00d      	beq.n	800b8ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b2:	2b04      	cmp	r3, #4
 800b8b4:	d107      	bne.n	800b8c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e076      	b.n	800b9b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b8ca:	88fb      	ldrh	r3, [r7, #6]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d105      	bne.n	800b8dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b8d0:	893b      	ldrh	r3, [r7, #8]
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	611a      	str	r2, [r3, #16]
 800b8da:	e021      	b.n	800b920 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b8dc:	893b      	ldrh	r3, [r7, #8]
 800b8de:	0a1b      	lsrs	r3, r3, #8
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ec:	6a39      	ldr	r1, [r7, #32]
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f000 f982 	bl	800bbf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00d      	beq.n	800b916 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fe:	2b04      	cmp	r3, #4
 800b900:	d107      	bne.n	800b912 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e050      	b.n	800b9b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b916:	893b      	ldrh	r3, [r7, #8]
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b922:	6a39      	ldr	r1, [r7, #32]
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f000 f967 	bl	800bbf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00d      	beq.n	800b94c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b934:	2b04      	cmp	r3, #4
 800b936:	d107      	bne.n	800b948 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b946:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	e035      	b.n	800b9b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b95a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	2200      	movs	r2, #0
 800b964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f000 f82b 	bl	800b9c4 <I2C_WaitOnFlagUntilTimeout>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00d      	beq.n	800b990 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b97e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b982:	d103      	bne.n	800b98c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b98a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e013      	b.n	800b9b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b990:	897b      	ldrh	r3, [r7, #10]
 800b992:	b2db      	uxtb	r3, r3
 800b994:	f043 0301 	orr.w	r3, r3, #1
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	6a3a      	ldr	r2, [r7, #32]
 800b9a4:	4906      	ldr	r1, [pc, #24]	; (800b9c0 <I2C_RequestMemoryRead+0x1cc>)
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f000 f886 	bl	800bab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d001      	beq.n	800b9b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e000      	b.n	800b9b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	00010002 	.word	0x00010002

0800b9c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	603b      	str	r3, [r7, #0]
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9d4:	e048      	b.n	800ba68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9dc:	d044      	beq.n	800ba68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9de:	f7fc fd9d 	bl	800851c <HAL_GetTick>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	683a      	ldr	r2, [r7, #0]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d302      	bcc.n	800b9f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d139      	bne.n	800ba68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	0c1b      	lsrs	r3, r3, #16
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d10d      	bne.n	800ba1a <I2C_WaitOnFlagUntilTimeout+0x56>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	695b      	ldr	r3, [r3, #20]
 800ba04:	43da      	mvns	r2, r3
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	4013      	ands	r3, r2
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	bf0c      	ite	eq
 800ba10:	2301      	moveq	r3, #1
 800ba12:	2300      	movne	r3, #0
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	461a      	mov	r2, r3
 800ba18:	e00c      	b.n	800ba34 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	43da      	mvns	r2, r3
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	4013      	ands	r3, r2
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	bf0c      	ite	eq
 800ba2c:	2301      	moveq	r3, #1
 800ba2e:	2300      	movne	r3, #0
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	461a      	mov	r2, r3
 800ba34:	79fb      	ldrb	r3, [r7, #7]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d116      	bne.n	800ba68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2220      	movs	r2, #32
 800ba44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba54:	f043 0220 	orr.w	r2, r3, #32
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	e023      	b.n	800bab0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	0c1b      	lsrs	r3, r3, #16
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d10d      	bne.n	800ba8e <I2C_WaitOnFlagUntilTimeout+0xca>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	695b      	ldr	r3, [r3, #20]
 800ba78:	43da      	mvns	r2, r3
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	4013      	ands	r3, r2
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	bf0c      	ite	eq
 800ba84:	2301      	moveq	r3, #1
 800ba86:	2300      	movne	r3, #0
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	e00c      	b.n	800baa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	43da      	mvns	r2, r3
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	4013      	ands	r3, r2
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	bf0c      	ite	eq
 800baa0:	2301      	moveq	r3, #1
 800baa2:	2300      	movne	r3, #0
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	461a      	mov	r2, r3
 800baa8:	79fb      	ldrb	r3, [r7, #7]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d093      	beq.n	800b9d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	607a      	str	r2, [r7, #4]
 800bac4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bac6:	e071      	b.n	800bbac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bad6:	d123      	bne.n	800bb20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bae6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800baf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2200      	movs	r2, #0
 800baf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2220      	movs	r2, #32
 800bafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0c:	f043 0204 	orr.w	r2, r3, #4
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e067      	b.n	800bbf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb26:	d041      	beq.n	800bbac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb28:	f7fc fcf8 	bl	800851c <HAL_GetTick>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d302      	bcc.n	800bb3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d136      	bne.n	800bbac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	0c1b      	lsrs	r3, r3, #16
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d10c      	bne.n	800bb62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	695b      	ldr	r3, [r3, #20]
 800bb4e:	43da      	mvns	r2, r3
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	4013      	ands	r3, r2
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	bf14      	ite	ne
 800bb5a:	2301      	movne	r3, #1
 800bb5c:	2300      	moveq	r3, #0
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	e00b      	b.n	800bb7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	43da      	mvns	r2, r3
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	4013      	ands	r3, r2
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	bf14      	ite	ne
 800bb74:	2301      	movne	r3, #1
 800bb76:	2300      	moveq	r3, #0
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d016      	beq.n	800bbac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2220      	movs	r2, #32
 800bb88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb98:	f043 0220 	orr.w	r2, r3, #32
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e021      	b.n	800bbf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	0c1b      	lsrs	r3, r3, #16
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d10c      	bne.n	800bbd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	43da      	mvns	r2, r3
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	bf14      	ite	ne
 800bbc8:	2301      	movne	r3, #1
 800bbca:	2300      	moveq	r3, #0
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	e00b      	b.n	800bbe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	43da      	mvns	r2, r3
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	4013      	ands	r3, r2
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	bf14      	ite	ne
 800bbe2:	2301      	movne	r3, #1
 800bbe4:	2300      	moveq	r3, #0
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f47f af6d 	bne.w	800bac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc04:	e034      	b.n	800bc70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f000 f8e3 	bl	800bdd2 <I2C_IsAcknowledgeFailed>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e034      	b.n	800bc80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1c:	d028      	beq.n	800bc70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc1e:	f7fc fc7d 	bl	800851c <HAL_GetTick>
 800bc22:	4602      	mov	r2, r0
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d302      	bcc.n	800bc34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d11d      	bne.n	800bc70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc3e:	2b80      	cmp	r3, #128	; 0x80
 800bc40:	d016      	beq.n	800bc70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2220      	movs	r2, #32
 800bc4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5c:	f043 0220 	orr.w	r2, r3, #32
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e007      	b.n	800bc80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc7a:	2b80      	cmp	r3, #128	; 0x80
 800bc7c:	d1c3      	bne.n	800bc06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc94:	e034      	b.n	800bd00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f000 f89b 	bl	800bdd2 <I2C_IsAcknowledgeFailed>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d001      	beq.n	800bca6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	e034      	b.n	800bd10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcac:	d028      	beq.n	800bd00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcae:	f7fc fc35 	bl	800851c <HAL_GetTick>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d302      	bcc.n	800bcc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d11d      	bne.n	800bd00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	f003 0304 	and.w	r3, r3, #4
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d016      	beq.n	800bd00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2220      	movs	r2, #32
 800bcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcec:	f043 0220 	orr.w	r2, r3, #32
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e007      	b.n	800bd10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	695b      	ldr	r3, [r3, #20]
 800bd06:	f003 0304 	and.w	r3, r3, #4
 800bd0a:	2b04      	cmp	r3, #4
 800bd0c:	d1c3      	bne.n	800bc96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd24:	e049      	b.n	800bdba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	695b      	ldr	r3, [r3, #20]
 800bd2c:	f003 0310 	and.w	r3, r3, #16
 800bd30:	2b10      	cmp	r3, #16
 800bd32:	d119      	bne.n	800bd68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f06f 0210 	mvn.w	r2, #16
 800bd3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2220      	movs	r2, #32
 800bd48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e030      	b.n	800bdca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd68:	f7fc fbd8 	bl	800851c <HAL_GetTick>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d302      	bcc.n	800bd7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d11d      	bne.n	800bdba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd88:	2b40      	cmp	r3, #64	; 0x40
 800bd8a:	d016      	beq.n	800bdba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2220      	movs	r2, #32
 800bd96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda6:	f043 0220 	orr.w	r2, r3, #32
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e007      	b.n	800bdca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	695b      	ldr	r3, [r3, #20]
 800bdc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc4:	2b40      	cmp	r3, #64	; 0x40
 800bdc6:	d1ae      	bne.n	800bd26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b083      	sub	sp, #12
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	695b      	ldr	r3, [r3, #20]
 800bde0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bde4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bde8:	d11b      	bne.n	800be22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bdf2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0e:	f043 0204 	orr.w	r2, r3, #4
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e000      	b.n	800be24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800be22:	2300      	movs	r3, #0
}
 800be24:	4618      	mov	r0, r3
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	bc80      	pop	{r7}
 800be2c:	4770      	bx	lr
	...

0800be30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d101      	bne.n	800be42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	e272      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f000 8087 	beq.w	800bf5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800be50:	4b92      	ldr	r3, [pc, #584]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	f003 030c 	and.w	r3, r3, #12
 800be58:	2b04      	cmp	r3, #4
 800be5a:	d00c      	beq.n	800be76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800be5c:	4b8f      	ldr	r3, [pc, #572]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	f003 030c 	and.w	r3, r3, #12
 800be64:	2b08      	cmp	r3, #8
 800be66:	d112      	bne.n	800be8e <HAL_RCC_OscConfig+0x5e>
 800be68:	4b8c      	ldr	r3, [pc, #560]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be74:	d10b      	bne.n	800be8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be76:	4b89      	ldr	r3, [pc, #548]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d06c      	beq.n	800bf5c <HAL_RCC_OscConfig+0x12c>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d168      	bne.n	800bf5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e24c      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be96:	d106      	bne.n	800bea6 <HAL_RCC_OscConfig+0x76>
 800be98:	4b80      	ldr	r3, [pc, #512]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a7f      	ldr	r2, [pc, #508]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800be9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bea2:	6013      	str	r3, [r2, #0]
 800bea4:	e02e      	b.n	800bf04 <HAL_RCC_OscConfig+0xd4>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10c      	bne.n	800bec8 <HAL_RCC_OscConfig+0x98>
 800beae:	4b7b      	ldr	r3, [pc, #492]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a7a      	ldr	r2, [pc, #488]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800beb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800beb8:	6013      	str	r3, [r2, #0]
 800beba:	4b78      	ldr	r3, [pc, #480]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a77      	ldr	r2, [pc, #476]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bec4:	6013      	str	r3, [r2, #0]
 800bec6:	e01d      	b.n	800bf04 <HAL_RCC_OscConfig+0xd4>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bed0:	d10c      	bne.n	800beec <HAL_RCC_OscConfig+0xbc>
 800bed2:	4b72      	ldr	r3, [pc, #456]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a71      	ldr	r2, [pc, #452]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bedc:	6013      	str	r3, [r2, #0]
 800bede:	4b6f      	ldr	r3, [pc, #444]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a6e      	ldr	r2, [pc, #440]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bee8:	6013      	str	r3, [r2, #0]
 800beea:	e00b      	b.n	800bf04 <HAL_RCC_OscConfig+0xd4>
 800beec:	4b6b      	ldr	r3, [pc, #428]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a6a      	ldr	r2, [pc, #424]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	4b68      	ldr	r3, [pc, #416]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a67      	ldr	r2, [pc, #412]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800befe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d013      	beq.n	800bf34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf0c:	f7fc fb06 	bl	800851c <HAL_GetTick>
 800bf10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf12:	e008      	b.n	800bf26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf14:	f7fc fb02 	bl	800851c <HAL_GetTick>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	2b64      	cmp	r3, #100	; 0x64
 800bf20:	d901      	bls.n	800bf26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800bf22:	2303      	movs	r3, #3
 800bf24:	e200      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf26:	4b5d      	ldr	r3, [pc, #372]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d0f0      	beq.n	800bf14 <HAL_RCC_OscConfig+0xe4>
 800bf32:	e014      	b.n	800bf5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf34:	f7fc faf2 	bl	800851c <HAL_GetTick>
 800bf38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bf3a:	e008      	b.n	800bf4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf3c:	f7fc faee 	bl	800851c <HAL_GetTick>
 800bf40:	4602      	mov	r2, r0
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	2b64      	cmp	r3, #100	; 0x64
 800bf48:	d901      	bls.n	800bf4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	e1ec      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bf4e:	4b53      	ldr	r3, [pc, #332]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1f0      	bne.n	800bf3c <HAL_RCC_OscConfig+0x10c>
 800bf5a:	e000      	b.n	800bf5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f003 0302 	and.w	r3, r3, #2
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d063      	beq.n	800c032 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bf6a:	4b4c      	ldr	r3, [pc, #304]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	f003 030c 	and.w	r3, r3, #12
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00b      	beq.n	800bf8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bf76:	4b49      	ldr	r3, [pc, #292]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	f003 030c 	and.w	r3, r3, #12
 800bf7e:	2b08      	cmp	r3, #8
 800bf80:	d11c      	bne.n	800bfbc <HAL_RCC_OscConfig+0x18c>
 800bf82:	4b46      	ldr	r3, [pc, #280]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d116      	bne.n	800bfbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf8e:	4b43      	ldr	r3, [pc, #268]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 0302 	and.w	r3, r3, #2
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d005      	beq.n	800bfa6 <HAL_RCC_OscConfig+0x176>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d001      	beq.n	800bfa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e1c0      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfa6:	4b3d      	ldr	r3, [pc, #244]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	695b      	ldr	r3, [r3, #20]
 800bfb2:	00db      	lsls	r3, r3, #3
 800bfb4:	4939      	ldr	r1, [pc, #228]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bfba:	e03a      	b.n	800c032 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d020      	beq.n	800c006 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bfc4:	4b36      	ldr	r3, [pc, #216]	; (800c0a0 <HAL_RCC_OscConfig+0x270>)
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfca:	f7fc faa7 	bl	800851c <HAL_GetTick>
 800bfce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bfd0:	e008      	b.n	800bfe4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfd2:	f7fc faa3 	bl	800851c <HAL_GetTick>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d901      	bls.n	800bfe4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e1a1      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bfe4:	4b2d      	ldr	r3, [pc, #180]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 0302 	and.w	r3, r3, #2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d0f0      	beq.n	800bfd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bff0:	4b2a      	ldr	r3, [pc, #168]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	695b      	ldr	r3, [r3, #20]
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	4927      	ldr	r1, [pc, #156]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800c000:	4313      	orrs	r3, r2
 800c002:	600b      	str	r3, [r1, #0]
 800c004:	e015      	b.n	800c032 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c006:	4b26      	ldr	r3, [pc, #152]	; (800c0a0 <HAL_RCC_OscConfig+0x270>)
 800c008:	2200      	movs	r2, #0
 800c00a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c00c:	f7fc fa86 	bl	800851c <HAL_GetTick>
 800c010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c012:	e008      	b.n	800c026 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c014:	f7fc fa82 	bl	800851c <HAL_GetTick>
 800c018:	4602      	mov	r2, r0
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d901      	bls.n	800c026 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	e180      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c026:	4b1d      	ldr	r3, [pc, #116]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 0302 	and.w	r3, r3, #2
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1f0      	bne.n	800c014 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f003 0308 	and.w	r3, r3, #8
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d03a      	beq.n	800c0b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d019      	beq.n	800c07a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c046:	4b17      	ldr	r3, [pc, #92]	; (800c0a4 <HAL_RCC_OscConfig+0x274>)
 800c048:	2201      	movs	r2, #1
 800c04a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c04c:	f7fc fa66 	bl	800851c <HAL_GetTick>
 800c050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c052:	e008      	b.n	800c066 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c054:	f7fc fa62 	bl	800851c <HAL_GetTick>
 800c058:	4602      	mov	r2, r0
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d901      	bls.n	800c066 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800c062:	2303      	movs	r3, #3
 800c064:	e160      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c066:	4b0d      	ldr	r3, [pc, #52]	; (800c09c <HAL_RCC_OscConfig+0x26c>)
 800c068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06a:	f003 0302 	and.w	r3, r3, #2
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d0f0      	beq.n	800c054 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800c072:	2001      	movs	r0, #1
 800c074:	f000 face 	bl	800c614 <RCC_Delay>
 800c078:	e01c      	b.n	800c0b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c07a:	4b0a      	ldr	r3, [pc, #40]	; (800c0a4 <HAL_RCC_OscConfig+0x274>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c080:	f7fc fa4c 	bl	800851c <HAL_GetTick>
 800c084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c086:	e00f      	b.n	800c0a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c088:	f7fc fa48 	bl	800851c <HAL_GetTick>
 800c08c:	4602      	mov	r2, r0
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	2b02      	cmp	r3, #2
 800c094:	d908      	bls.n	800c0a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c096:	2303      	movs	r3, #3
 800c098:	e146      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
 800c09a:	bf00      	nop
 800c09c:	40021000 	.word	0x40021000
 800c0a0:	42420000 	.word	0x42420000
 800c0a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c0a8:	4b92      	ldr	r3, [pc, #584]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	f003 0302 	and.w	r3, r3, #2
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1e9      	bne.n	800c088 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f003 0304 	and.w	r3, r3, #4
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 80a6 	beq.w	800c20e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c0c6:	4b8b      	ldr	r3, [pc, #556]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c0c8:	69db      	ldr	r3, [r3, #28]
 800c0ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10d      	bne.n	800c0ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c0d2:	4b88      	ldr	r3, [pc, #544]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c0d4:	69db      	ldr	r3, [r3, #28]
 800c0d6:	4a87      	ldr	r2, [pc, #540]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c0d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0dc:	61d3      	str	r3, [r2, #28]
 800c0de:	4b85      	ldr	r3, [pc, #532]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c0e0:	69db      	ldr	r3, [r3, #28]
 800c0e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0e6:	60bb      	str	r3, [r7, #8]
 800c0e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c0ee:	4b82      	ldr	r3, [pc, #520]	; (800c2f8 <HAL_RCC_OscConfig+0x4c8>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d118      	bne.n	800c12c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c0fa:	4b7f      	ldr	r3, [pc, #508]	; (800c2f8 <HAL_RCC_OscConfig+0x4c8>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a7e      	ldr	r2, [pc, #504]	; (800c2f8 <HAL_RCC_OscConfig+0x4c8>)
 800c100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c106:	f7fc fa09 	bl	800851c <HAL_GetTick>
 800c10a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c10c:	e008      	b.n	800c120 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c10e:	f7fc fa05 	bl	800851c <HAL_GetTick>
 800c112:	4602      	mov	r2, r0
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	2b64      	cmp	r3, #100	; 0x64
 800c11a:	d901      	bls.n	800c120 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c11c:	2303      	movs	r3, #3
 800c11e:	e103      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c120:	4b75      	ldr	r3, [pc, #468]	; (800c2f8 <HAL_RCC_OscConfig+0x4c8>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0f0      	beq.n	800c10e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d106      	bne.n	800c142 <HAL_RCC_OscConfig+0x312>
 800c134:	4b6f      	ldr	r3, [pc, #444]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c136:	6a1b      	ldr	r3, [r3, #32]
 800c138:	4a6e      	ldr	r2, [pc, #440]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c13a:	f043 0301 	orr.w	r3, r3, #1
 800c13e:	6213      	str	r3, [r2, #32]
 800c140:	e02d      	b.n	800c19e <HAL_RCC_OscConfig+0x36e>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10c      	bne.n	800c164 <HAL_RCC_OscConfig+0x334>
 800c14a:	4b6a      	ldr	r3, [pc, #424]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	4a69      	ldr	r2, [pc, #420]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c150:	f023 0301 	bic.w	r3, r3, #1
 800c154:	6213      	str	r3, [r2, #32]
 800c156:	4b67      	ldr	r3, [pc, #412]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c158:	6a1b      	ldr	r3, [r3, #32]
 800c15a:	4a66      	ldr	r2, [pc, #408]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c15c:	f023 0304 	bic.w	r3, r3, #4
 800c160:	6213      	str	r3, [r2, #32]
 800c162:	e01c      	b.n	800c19e <HAL_RCC_OscConfig+0x36e>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	2b05      	cmp	r3, #5
 800c16a:	d10c      	bne.n	800c186 <HAL_RCC_OscConfig+0x356>
 800c16c:	4b61      	ldr	r3, [pc, #388]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c16e:	6a1b      	ldr	r3, [r3, #32]
 800c170:	4a60      	ldr	r2, [pc, #384]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c172:	f043 0304 	orr.w	r3, r3, #4
 800c176:	6213      	str	r3, [r2, #32]
 800c178:	4b5e      	ldr	r3, [pc, #376]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c17a:	6a1b      	ldr	r3, [r3, #32]
 800c17c:	4a5d      	ldr	r2, [pc, #372]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c17e:	f043 0301 	orr.w	r3, r3, #1
 800c182:	6213      	str	r3, [r2, #32]
 800c184:	e00b      	b.n	800c19e <HAL_RCC_OscConfig+0x36e>
 800c186:	4b5b      	ldr	r3, [pc, #364]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c188:	6a1b      	ldr	r3, [r3, #32]
 800c18a:	4a5a      	ldr	r2, [pc, #360]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c18c:	f023 0301 	bic.w	r3, r3, #1
 800c190:	6213      	str	r3, [r2, #32]
 800c192:	4b58      	ldr	r3, [pc, #352]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c194:	6a1b      	ldr	r3, [r3, #32]
 800c196:	4a57      	ldr	r2, [pc, #348]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c198:	f023 0304 	bic.w	r3, r3, #4
 800c19c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d015      	beq.n	800c1d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c1a6:	f7fc f9b9 	bl	800851c <HAL_GetTick>
 800c1aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c1ac:	e00a      	b.n	800c1c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1ae:	f7fc f9b5 	bl	800851c <HAL_GetTick>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d901      	bls.n	800c1c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c1c0:	2303      	movs	r3, #3
 800c1c2:	e0b1      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c1c4:	4b4b      	ldr	r3, [pc, #300]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c1c6:	6a1b      	ldr	r3, [r3, #32]
 800c1c8:	f003 0302 	and.w	r3, r3, #2
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d0ee      	beq.n	800c1ae <HAL_RCC_OscConfig+0x37e>
 800c1d0:	e014      	b.n	800c1fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c1d2:	f7fc f9a3 	bl	800851c <HAL_GetTick>
 800c1d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c1d8:	e00a      	b.n	800c1f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1da:	f7fc f99f 	bl	800851c <HAL_GetTick>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d901      	bls.n	800c1f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e09b      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c1f0:	4b40      	ldr	r3, [pc, #256]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c1f2:	6a1b      	ldr	r3, [r3, #32]
 800c1f4:	f003 0302 	and.w	r3, r3, #2
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1ee      	bne.n	800c1da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d105      	bne.n	800c20e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c202:	4b3c      	ldr	r3, [pc, #240]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	4a3b      	ldr	r2, [pc, #236]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c20c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	69db      	ldr	r3, [r3, #28]
 800c212:	2b00      	cmp	r3, #0
 800c214:	f000 8087 	beq.w	800c326 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c218:	4b36      	ldr	r3, [pc, #216]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	f003 030c 	and.w	r3, r3, #12
 800c220:	2b08      	cmp	r3, #8
 800c222:	d061      	beq.n	800c2e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d146      	bne.n	800c2ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c22c:	4b33      	ldr	r3, [pc, #204]	; (800c2fc <HAL_RCC_OscConfig+0x4cc>)
 800c22e:	2200      	movs	r2, #0
 800c230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c232:	f7fc f973 	bl	800851c <HAL_GetTick>
 800c236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c238:	e008      	b.n	800c24c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c23a:	f7fc f96f 	bl	800851c <HAL_GetTick>
 800c23e:	4602      	mov	r2, r0
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	1ad3      	subs	r3, r2, r3
 800c244:	2b02      	cmp	r3, #2
 800c246:	d901      	bls.n	800c24c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c248:	2303      	movs	r3, #3
 800c24a:	e06d      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c24c:	4b29      	ldr	r3, [pc, #164]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c254:	2b00      	cmp	r3, #0
 800c256:	d1f0      	bne.n	800c23a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a1b      	ldr	r3, [r3, #32]
 800c25c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c260:	d108      	bne.n	800c274 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c262:	4b24      	ldr	r3, [pc, #144]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	4921      	ldr	r1, [pc, #132]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c270:	4313      	orrs	r3, r2
 800c272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c274:	4b1f      	ldr	r3, [pc, #124]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6a19      	ldr	r1, [r3, #32]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c284:	430b      	orrs	r3, r1
 800c286:	491b      	ldr	r1, [pc, #108]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c288:	4313      	orrs	r3, r2
 800c28a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c28c:	4b1b      	ldr	r3, [pc, #108]	; (800c2fc <HAL_RCC_OscConfig+0x4cc>)
 800c28e:	2201      	movs	r2, #1
 800c290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c292:	f7fc f943 	bl	800851c <HAL_GetTick>
 800c296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c298:	e008      	b.n	800c2ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c29a:	f7fc f93f 	bl	800851c <HAL_GetTick>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d901      	bls.n	800c2ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e03d      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c2ac:	4b11      	ldr	r3, [pc, #68]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0f0      	beq.n	800c29a <HAL_RCC_OscConfig+0x46a>
 800c2b8:	e035      	b.n	800c326 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2ba:	4b10      	ldr	r3, [pc, #64]	; (800c2fc <HAL_RCC_OscConfig+0x4cc>)
 800c2bc:	2200      	movs	r2, #0
 800c2be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2c0:	f7fc f92c 	bl	800851c <HAL_GetTick>
 800c2c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c2c6:	e008      	b.n	800c2da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2c8:	f7fc f928 	bl	800851c <HAL_GetTick>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d901      	bls.n	800c2da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	e026      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c2da:	4b06      	ldr	r3, [pc, #24]	; (800c2f4 <HAL_RCC_OscConfig+0x4c4>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1f0      	bne.n	800c2c8 <HAL_RCC_OscConfig+0x498>
 800c2e6:	e01e      	b.n	800c326 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	69db      	ldr	r3, [r3, #28]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d107      	bne.n	800c300 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e019      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
 800c2f4:	40021000 	.word	0x40021000
 800c2f8:	40007000 	.word	0x40007000
 800c2fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c300:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <HAL_RCC_OscConfig+0x500>)
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a1b      	ldr	r3, [r3, #32]
 800c310:	429a      	cmp	r2, r3
 800c312:	d106      	bne.n	800c322 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c31e:	429a      	cmp	r2, r3
 800c320:	d001      	beq.n	800c326 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e000      	b.n	800c328 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	40021000 	.word	0x40021000

0800c334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	e0d0      	b.n	800c4ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c348:	4b6a      	ldr	r3, [pc, #424]	; (800c4f4 <HAL_RCC_ClockConfig+0x1c0>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 0307 	and.w	r3, r3, #7
 800c350:	683a      	ldr	r2, [r7, #0]
 800c352:	429a      	cmp	r2, r3
 800c354:	d910      	bls.n	800c378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c356:	4b67      	ldr	r3, [pc, #412]	; (800c4f4 <HAL_RCC_ClockConfig+0x1c0>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f023 0207 	bic.w	r2, r3, #7
 800c35e:	4965      	ldr	r1, [pc, #404]	; (800c4f4 <HAL_RCC_ClockConfig+0x1c0>)
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	4313      	orrs	r3, r2
 800c364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c366:	4b63      	ldr	r3, [pc, #396]	; (800c4f4 <HAL_RCC_ClockConfig+0x1c0>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 0307 	and.w	r3, r3, #7
 800c36e:	683a      	ldr	r2, [r7, #0]
 800c370:	429a      	cmp	r2, r3
 800c372:	d001      	beq.n	800c378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	e0b8      	b.n	800c4ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f003 0302 	and.w	r3, r3, #2
 800c380:	2b00      	cmp	r3, #0
 800c382:	d020      	beq.n	800c3c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 0304 	and.w	r3, r3, #4
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d005      	beq.n	800c39c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c390:	4b59      	ldr	r3, [pc, #356]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	4a58      	ldr	r2, [pc, #352]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c396:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c39a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f003 0308 	and.w	r3, r3, #8
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d005      	beq.n	800c3b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c3a8:	4b53      	ldr	r3, [pc, #332]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	4a52      	ldr	r2, [pc, #328]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c3ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800c3b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c3b4:	4b50      	ldr	r3, [pc, #320]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	494d      	ldr	r1, [pc, #308]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f003 0301 	and.w	r3, r3, #1
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d040      	beq.n	800c454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d107      	bne.n	800c3ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3da:	4b47      	ldr	r3, [pc, #284]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d115      	bne.n	800c412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e07f      	b.n	800c4ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d107      	bne.n	800c402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c3f2:	4b41      	ldr	r3, [pc, #260]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d109      	bne.n	800c412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e073      	b.n	800c4ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c402:	4b3d      	ldr	r3, [pc, #244]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 0302 	and.w	r3, r3, #2
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d101      	bne.n	800c412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	e06b      	b.n	800c4ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c412:	4b39      	ldr	r3, [pc, #228]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	f023 0203 	bic.w	r2, r3, #3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	4936      	ldr	r1, [pc, #216]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c420:	4313      	orrs	r3, r2
 800c422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c424:	f7fc f87a 	bl	800851c <HAL_GetTick>
 800c428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c42a:	e00a      	b.n	800c442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c42c:	f7fc f876 	bl	800851c <HAL_GetTick>
 800c430:	4602      	mov	r2, r0
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	f241 3288 	movw	r2, #5000	; 0x1388
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d901      	bls.n	800c442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c43e:	2303      	movs	r3, #3
 800c440:	e053      	b.n	800c4ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c442:	4b2d      	ldr	r3, [pc, #180]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	f003 020c 	and.w	r2, r3, #12
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	429a      	cmp	r2, r3
 800c452:	d1eb      	bne.n	800c42c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c454:	4b27      	ldr	r3, [pc, #156]	; (800c4f4 <HAL_RCC_ClockConfig+0x1c0>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0307 	and.w	r3, r3, #7
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d210      	bcs.n	800c484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c462:	4b24      	ldr	r3, [pc, #144]	; (800c4f4 <HAL_RCC_ClockConfig+0x1c0>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f023 0207 	bic.w	r2, r3, #7
 800c46a:	4922      	ldr	r1, [pc, #136]	; (800c4f4 <HAL_RCC_ClockConfig+0x1c0>)
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	4313      	orrs	r3, r2
 800c470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c472:	4b20      	ldr	r3, [pc, #128]	; (800c4f4 <HAL_RCC_ClockConfig+0x1c0>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f003 0307 	and.w	r3, r3, #7
 800c47a:	683a      	ldr	r2, [r7, #0]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d001      	beq.n	800c484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	e032      	b.n	800c4ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d008      	beq.n	800c4a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c490:	4b19      	ldr	r3, [pc, #100]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	4916      	ldr	r1, [pc, #88]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 0308 	and.w	r3, r3, #8
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d009      	beq.n	800c4c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c4ae:	4b12      	ldr	r3, [pc, #72]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	490e      	ldr	r1, [pc, #56]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c4c2:	f000 f821 	bl	800c508 <HAL_RCC_GetSysClockFreq>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	4b0b      	ldr	r3, [pc, #44]	; (800c4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	091b      	lsrs	r3, r3, #4
 800c4ce:	f003 030f 	and.w	r3, r3, #15
 800c4d2:	490a      	ldr	r1, [pc, #40]	; (800c4fc <HAL_RCC_ClockConfig+0x1c8>)
 800c4d4:	5ccb      	ldrb	r3, [r1, r3]
 800c4d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c4da:	4a09      	ldr	r2, [pc, #36]	; (800c500 <HAL_RCC_ClockConfig+0x1cc>)
 800c4dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c4de:	4b09      	ldr	r3, [pc, #36]	; (800c504 <HAL_RCC_ClockConfig+0x1d0>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fb ffd8 	bl	8008498 <HAL_InitTick>

  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	40022000 	.word	0x40022000
 800c4f8:	40021000 	.word	0x40021000
 800c4fc:	08012de4 	.word	0x08012de4
 800c500:	20000000 	.word	0x20000000
 800c504:	20000048 	.word	0x20000048

0800c508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c508:	b480      	push	{r7}
 800c50a:	b087      	sub	sp, #28
 800c50c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c50e:	2300      	movs	r3, #0
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	2300      	movs	r3, #0
 800c514:	60bb      	str	r3, [r7, #8]
 800c516:	2300      	movs	r3, #0
 800c518:	617b      	str	r3, [r7, #20]
 800c51a:	2300      	movs	r3, #0
 800c51c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c51e:	2300      	movs	r3, #0
 800c520:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c522:	4b1e      	ldr	r3, [pc, #120]	; (800c59c <HAL_RCC_GetSysClockFreq+0x94>)
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f003 030c 	and.w	r3, r3, #12
 800c52e:	2b04      	cmp	r3, #4
 800c530:	d002      	beq.n	800c538 <HAL_RCC_GetSysClockFreq+0x30>
 800c532:	2b08      	cmp	r3, #8
 800c534:	d003      	beq.n	800c53e <HAL_RCC_GetSysClockFreq+0x36>
 800c536:	e027      	b.n	800c588 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c538:	4b19      	ldr	r3, [pc, #100]	; (800c5a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c53a:	613b      	str	r3, [r7, #16]
      break;
 800c53c:	e027      	b.n	800c58e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	0c9b      	lsrs	r3, r3, #18
 800c542:	f003 030f 	and.w	r3, r3, #15
 800c546:	4a17      	ldr	r2, [pc, #92]	; (800c5a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c548:	5cd3      	ldrb	r3, [r2, r3]
 800c54a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d010      	beq.n	800c578 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c556:	4b11      	ldr	r3, [pc, #68]	; (800c59c <HAL_RCC_GetSysClockFreq+0x94>)
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	0c5b      	lsrs	r3, r3, #17
 800c55c:	f003 0301 	and.w	r3, r3, #1
 800c560:	4a11      	ldr	r2, [pc, #68]	; (800c5a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c562:	5cd3      	ldrb	r3, [r2, r3]
 800c564:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a0d      	ldr	r2, [pc, #52]	; (800c5a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c56a:	fb03 f202 	mul.w	r2, r3, r2
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	fbb2 f3f3 	udiv	r3, r2, r3
 800c574:	617b      	str	r3, [r7, #20]
 800c576:	e004      	b.n	800c582 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a0c      	ldr	r2, [pc, #48]	; (800c5ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800c57c:	fb02 f303 	mul.w	r3, r2, r3
 800c580:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	613b      	str	r3, [r7, #16]
      break;
 800c586:	e002      	b.n	800c58e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c588:	4b05      	ldr	r3, [pc, #20]	; (800c5a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c58a:	613b      	str	r3, [r7, #16]
      break;
 800c58c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c58e:	693b      	ldr	r3, [r7, #16]
}
 800c590:	4618      	mov	r0, r3
 800c592:	371c      	adds	r7, #28
 800c594:	46bd      	mov	sp, r7
 800c596:	bc80      	pop	{r7}
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	40021000 	.word	0x40021000
 800c5a0:	007a1200 	.word	0x007a1200
 800c5a4:	08012e10 	.word	0x08012e10
 800c5a8:	08012e20 	.word	0x08012e20
 800c5ac:	003d0900 	.word	0x003d0900

0800c5b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c5b4:	4b02      	ldr	r3, [pc, #8]	; (800c5c0 <HAL_RCC_GetHCLKFreq+0x10>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bc80      	pop	{r7}
 800c5be:	4770      	bx	lr
 800c5c0:	20000000 	.word	0x20000000

0800c5c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c5c8:	f7ff fff2 	bl	800c5b0 <HAL_RCC_GetHCLKFreq>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	0a1b      	lsrs	r3, r3, #8
 800c5d4:	f003 0307 	and.w	r3, r3, #7
 800c5d8:	4903      	ldr	r1, [pc, #12]	; (800c5e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c5da:	5ccb      	ldrb	r3, [r1, r3]
 800c5dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	40021000 	.word	0x40021000
 800c5e8:	08012df4 	.word	0x08012df4

0800c5ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c5f0:	f7ff ffde 	bl	800c5b0 <HAL_RCC_GetHCLKFreq>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	4b05      	ldr	r3, [pc, #20]	; (800c60c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	0adb      	lsrs	r3, r3, #11
 800c5fc:	f003 0307 	and.w	r3, r3, #7
 800c600:	4903      	ldr	r1, [pc, #12]	; (800c610 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c602:	5ccb      	ldrb	r3, [r1, r3]
 800c604:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c608:	4618      	mov	r0, r3
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	40021000 	.word	0x40021000
 800c610:	08012df4 	.word	0x08012df4

0800c614 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c61c:	4b0a      	ldr	r3, [pc, #40]	; (800c648 <RCC_Delay+0x34>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a0a      	ldr	r2, [pc, #40]	; (800c64c <RCC_Delay+0x38>)
 800c622:	fba2 2303 	umull	r2, r3, r2, r3
 800c626:	0a5b      	lsrs	r3, r3, #9
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	fb02 f303 	mul.w	r3, r2, r3
 800c62e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c630:	bf00      	nop
  }
  while (Delay --);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	1e5a      	subs	r2, r3, #1
 800c636:	60fa      	str	r2, [r7, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1f9      	bne.n	800c630 <RCC_Delay+0x1c>
}
 800c63c:	bf00      	nop
 800c63e:	bf00      	nop
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	bc80      	pop	{r7}
 800c646:	4770      	bx	lr
 800c648:	20000000 	.word	0x20000000
 800c64c:	10624dd3 	.word	0x10624dd3

0800c650 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800c658:	2300      	movs	r3, #0
 800c65a:	613b      	str	r3, [r7, #16]
 800c65c:	2300      	movs	r3, #0
 800c65e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f003 0301 	and.w	r3, r3, #1
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d07d      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800c66c:	2300      	movs	r3, #0
 800c66e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c670:	4b4f      	ldr	r3, [pc, #316]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c672:	69db      	ldr	r3, [r3, #28]
 800c674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10d      	bne.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c67c:	4b4c      	ldr	r3, [pc, #304]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c67e:	69db      	ldr	r3, [r3, #28]
 800c680:	4a4b      	ldr	r2, [pc, #300]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c686:	61d3      	str	r3, [r2, #28]
 800c688:	4b49      	ldr	r3, [pc, #292]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c68a:	69db      	ldr	r3, [r3, #28]
 800c68c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c690:	60bb      	str	r3, [r7, #8]
 800c692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c694:	2301      	movs	r3, #1
 800c696:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c698:	4b46      	ldr	r3, [pc, #280]	; (800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d118      	bne.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c6a4:	4b43      	ldr	r3, [pc, #268]	; (800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a42      	ldr	r2, [pc, #264]	; (800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c6aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c6b0:	f7fb ff34 	bl	800851c <HAL_GetTick>
 800c6b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c6b6:	e008      	b.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6b8:	f7fb ff30 	bl	800851c <HAL_GetTick>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	2b64      	cmp	r3, #100	; 0x64
 800c6c4:	d901      	bls.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	e06d      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c6ca:	4b3a      	ldr	r3, [pc, #232]	; (800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d0f0      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c6d6:	4b36      	ldr	r3, [pc, #216]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d02e      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d027      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c6f4:	4b2e      	ldr	r3, [pc, #184]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c6f6:	6a1b      	ldr	r3, [r3, #32]
 800c6f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c6fe:	4b2e      	ldr	r3, [pc, #184]	; (800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800c700:	2201      	movs	r2, #1
 800c702:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c704:	4b2c      	ldr	r3, [pc, #176]	; (800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800c706:	2200      	movs	r2, #0
 800c708:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800c70a:	4a29      	ldr	r2, [pc, #164]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	2b00      	cmp	r3, #0
 800c718:	d014      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c71a:	f7fb feff 	bl	800851c <HAL_GetTick>
 800c71e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c720:	e00a      	b.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c722:	f7fb fefb 	bl	800851c <HAL_GetTick>
 800c726:	4602      	mov	r2, r0
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c730:	4293      	cmp	r3, r2
 800c732:	d901      	bls.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800c734:	2303      	movs	r3, #3
 800c736:	e036      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c738:	4b1d      	ldr	r3, [pc, #116]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c73a:	6a1b      	ldr	r3, [r3, #32]
 800c73c:	f003 0302 	and.w	r3, r3, #2
 800c740:	2b00      	cmp	r3, #0
 800c742:	d0ee      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c744:	4b1a      	ldr	r3, [pc, #104]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c746:	6a1b      	ldr	r3, [r3, #32]
 800c748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	4917      	ldr	r1, [pc, #92]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c752:	4313      	orrs	r3, r2
 800c754:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c756:	7dfb      	ldrb	r3, [r7, #23]
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d105      	bne.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c75c:	4b14      	ldr	r3, [pc, #80]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c75e:	69db      	ldr	r3, [r3, #28]
 800c760:	4a13      	ldr	r2, [pc, #76]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c766:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f003 0302 	and.w	r3, r3, #2
 800c770:	2b00      	cmp	r3, #0
 800c772:	d008      	beq.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c774:	4b0e      	ldr	r3, [pc, #56]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	490b      	ldr	r1, [pc, #44]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c782:	4313      	orrs	r3, r2
 800c784:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f003 0310 	and.w	r3, r3, #16
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d008      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c792:	4b07      	ldr	r3, [pc, #28]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	695b      	ldr	r3, [r3, #20]
 800c79e:	4904      	ldr	r1, [pc, #16]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3718      	adds	r7, #24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	40021000 	.word	0x40021000
 800c7b4:	40007000 	.word	0x40007000
 800c7b8:	42420440 	.word	0x42420440

0800c7bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d101      	bne.n	800c7ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e041      	b.n	800c852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d106      	bne.n	800c7e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f7f5 fcf8 	bl	80021d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2202      	movs	r2, #2
 800c7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	f000 fc5e 	bl	800d0bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
	...

0800c85c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d001      	beq.n	800c874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	e044      	b.n	800c8fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2202      	movs	r2, #2
 800c878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68da      	ldr	r2, [r3, #12]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f042 0201 	orr.w	r2, r2, #1
 800c88a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a1d      	ldr	r2, [pc, #116]	; (800c908 <HAL_TIM_Base_Start_IT+0xac>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d018      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x6c>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a1c      	ldr	r2, [pc, #112]	; (800c90c <HAL_TIM_Base_Start_IT+0xb0>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d013      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x6c>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8a8:	d00e      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x6c>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a18      	ldr	r2, [pc, #96]	; (800c910 <HAL_TIM_Base_Start_IT+0xb4>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d009      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x6c>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a16      	ldr	r2, [pc, #88]	; (800c914 <HAL_TIM_Base_Start_IT+0xb8>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d004      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x6c>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a15      	ldr	r2, [pc, #84]	; (800c918 <HAL_TIM_Base_Start_IT+0xbc>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d111      	bne.n	800c8ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	f003 0307 	and.w	r3, r3, #7
 800c8d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b06      	cmp	r3, #6
 800c8d8:	d010      	beq.n	800c8fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f042 0201 	orr.w	r2, r2, #1
 800c8e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8ea:	e007      	b.n	800c8fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f042 0201 	orr.w	r2, r2, #1
 800c8fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3714      	adds	r7, #20
 800c902:	46bd      	mov	sp, r7
 800c904:	bc80      	pop	{r7}
 800c906:	4770      	bx	lr
 800c908:	40012c00 	.word	0x40012c00
 800c90c:	40013400 	.word	0x40013400
 800c910:	40000400 	.word	0x40000400
 800c914:	40000800 	.word	0x40000800
 800c918:	40000c00 	.word	0x40000c00

0800c91c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d101      	bne.n	800c92e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c92a:	2301      	movs	r3, #1
 800c92c:	e041      	b.n	800c9b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c934:	b2db      	uxtb	r3, r3
 800c936:	2b00      	cmp	r3, #0
 800c938:	d106      	bne.n	800c948 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 f839 	bl	800c9ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2202      	movs	r2, #2
 800c94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	3304      	adds	r3, #4
 800c958:	4619      	mov	r1, r3
 800c95a:	4610      	mov	r0, r2
 800c95c:	f000 fbae 	bl	800d0bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c9ba:	b480      	push	{r7}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c9c2:	bf00      	nop
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bc80      	pop	{r7}
 800c9ca:	4770      	bx	lr

0800c9cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d109      	bne.n	800c9f0 <HAL_TIM_PWM_Start+0x24>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	bf14      	ite	ne
 800c9e8:	2301      	movne	r3, #1
 800c9ea:	2300      	moveq	r3, #0
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	e022      	b.n	800ca36 <HAL_TIM_PWM_Start+0x6a>
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	2b04      	cmp	r3, #4
 800c9f4:	d109      	bne.n	800ca0a <HAL_TIM_PWM_Start+0x3e>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	bf14      	ite	ne
 800ca02:	2301      	movne	r3, #1
 800ca04:	2300      	moveq	r3, #0
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	e015      	b.n	800ca36 <HAL_TIM_PWM_Start+0x6a>
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	2b08      	cmp	r3, #8
 800ca0e:	d109      	bne.n	800ca24 <HAL_TIM_PWM_Start+0x58>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	bf14      	ite	ne
 800ca1c:	2301      	movne	r3, #1
 800ca1e:	2300      	moveq	r3, #0
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	e008      	b.n	800ca36 <HAL_TIM_PWM_Start+0x6a>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	bf14      	ite	ne
 800ca30:	2301      	movne	r3, #1
 800ca32:	2300      	moveq	r3, #0
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d001      	beq.n	800ca3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e072      	b.n	800cb24 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d104      	bne.n	800ca4e <HAL_TIM_PWM_Start+0x82>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2202      	movs	r2, #2
 800ca48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca4c:	e013      	b.n	800ca76 <HAL_TIM_PWM_Start+0xaa>
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	2b04      	cmp	r3, #4
 800ca52:	d104      	bne.n	800ca5e <HAL_TIM_PWM_Start+0x92>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2202      	movs	r2, #2
 800ca58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca5c:	e00b      	b.n	800ca76 <HAL_TIM_PWM_Start+0xaa>
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	2b08      	cmp	r3, #8
 800ca62:	d104      	bne.n	800ca6e <HAL_TIM_PWM_Start+0xa2>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2202      	movs	r2, #2
 800ca68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca6c:	e003      	b.n	800ca76 <HAL_TIM_PWM_Start+0xaa>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2202      	movs	r2, #2
 800ca72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	6839      	ldr	r1, [r7, #0]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 fdd8 	bl	800d634 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a28      	ldr	r2, [pc, #160]	; (800cb2c <HAL_TIM_PWM_Start+0x160>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d004      	beq.n	800ca98 <HAL_TIM_PWM_Start+0xcc>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a27      	ldr	r2, [pc, #156]	; (800cb30 <HAL_TIM_PWM_Start+0x164>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d101      	bne.n	800ca9c <HAL_TIM_PWM_Start+0xd0>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e000      	b.n	800ca9e <HAL_TIM_PWM_Start+0xd2>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d007      	beq.n	800cab2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cab0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a1d      	ldr	r2, [pc, #116]	; (800cb2c <HAL_TIM_PWM_Start+0x160>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d018      	beq.n	800caee <HAL_TIM_PWM_Start+0x122>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a1b      	ldr	r2, [pc, #108]	; (800cb30 <HAL_TIM_PWM_Start+0x164>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d013      	beq.n	800caee <HAL_TIM_PWM_Start+0x122>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cace:	d00e      	beq.n	800caee <HAL_TIM_PWM_Start+0x122>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a17      	ldr	r2, [pc, #92]	; (800cb34 <HAL_TIM_PWM_Start+0x168>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d009      	beq.n	800caee <HAL_TIM_PWM_Start+0x122>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a16      	ldr	r2, [pc, #88]	; (800cb38 <HAL_TIM_PWM_Start+0x16c>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d004      	beq.n	800caee <HAL_TIM_PWM_Start+0x122>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a14      	ldr	r2, [pc, #80]	; (800cb3c <HAL_TIM_PWM_Start+0x170>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d111      	bne.n	800cb12 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	f003 0307 	and.w	r3, r3, #7
 800caf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2b06      	cmp	r3, #6
 800cafe:	d010      	beq.n	800cb22 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f042 0201 	orr.w	r2, r2, #1
 800cb0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb10:	e007      	b.n	800cb22 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f042 0201 	orr.w	r2, r2, #1
 800cb20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	40012c00 	.word	0x40012c00
 800cb30:	40013400 	.word	0x40013400
 800cb34:	40000400 	.word	0x40000400
 800cb38:	40000800 	.word	0x40000800
 800cb3c:	40000c00 	.word	0x40000c00

0800cb40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	f003 0302 	and.w	r3, r3, #2
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	d122      	bne.n	800cb9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	f003 0302 	and.w	r3, r3, #2
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d11b      	bne.n	800cb9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f06f 0202 	mvn.w	r2, #2
 800cb6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2201      	movs	r2, #1
 800cb72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	699b      	ldr	r3, [r3, #24]
 800cb7a:	f003 0303 	and.w	r3, r3, #3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d003      	beq.n	800cb8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fa7f 	bl	800d086 <HAL_TIM_IC_CaptureCallback>
 800cb88:	e005      	b.n	800cb96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fa72 	bl	800d074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 fa81 	bl	800d098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	691b      	ldr	r3, [r3, #16]
 800cba2:	f003 0304 	and.w	r3, r3, #4
 800cba6:	2b04      	cmp	r3, #4
 800cba8:	d122      	bne.n	800cbf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	f003 0304 	and.w	r3, r3, #4
 800cbb4:	2b04      	cmp	r3, #4
 800cbb6:	d11b      	bne.n	800cbf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f06f 0204 	mvn.w	r2, #4
 800cbc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2202      	movs	r2, #2
 800cbc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	699b      	ldr	r3, [r3, #24]
 800cbce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d003      	beq.n	800cbde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fa55 	bl	800d086 <HAL_TIM_IC_CaptureCallback>
 800cbdc:	e005      	b.n	800cbea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 fa48 	bl	800d074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 fa57 	bl	800d098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	f003 0308 	and.w	r3, r3, #8
 800cbfa:	2b08      	cmp	r3, #8
 800cbfc:	d122      	bne.n	800cc44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	f003 0308 	and.w	r3, r3, #8
 800cc08:	2b08      	cmp	r3, #8
 800cc0a:	d11b      	bne.n	800cc44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f06f 0208 	mvn.w	r2, #8
 800cc14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2204      	movs	r2, #4
 800cc1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	69db      	ldr	r3, [r3, #28]
 800cc22:	f003 0303 	and.w	r3, r3, #3
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d003      	beq.n	800cc32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fa2b 	bl	800d086 <HAL_TIM_IC_CaptureCallback>
 800cc30:	e005      	b.n	800cc3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 fa1e 	bl	800d074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 fa2d 	bl	800d098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	f003 0310 	and.w	r3, r3, #16
 800cc4e:	2b10      	cmp	r3, #16
 800cc50:	d122      	bne.n	800cc98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	f003 0310 	and.w	r3, r3, #16
 800cc5c:	2b10      	cmp	r3, #16
 800cc5e:	d11b      	bne.n	800cc98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f06f 0210 	mvn.w	r2, #16
 800cc68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2208      	movs	r2, #8
 800cc6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	69db      	ldr	r3, [r3, #28]
 800cc76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d003      	beq.n	800cc86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fa01 	bl	800d086 <HAL_TIM_IC_CaptureCallback>
 800cc84:	e005      	b.n	800cc92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 f9f4 	bl	800d074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fa03 	bl	800d098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	691b      	ldr	r3, [r3, #16]
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d10e      	bne.n	800ccc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	f003 0301 	and.w	r3, r3, #1
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d107      	bne.n	800ccc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f06f 0201 	mvn.w	r2, #1
 800ccbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f9cf 	bl	800d062 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	691b      	ldr	r3, [r3, #16]
 800ccca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccce:	2b80      	cmp	r3, #128	; 0x80
 800ccd0:	d10e      	bne.n	800ccf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccdc:	2b80      	cmp	r3, #128	; 0x80
 800ccde:	d107      	bne.n	800ccf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 fd3b 	bl	800d766 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccfa:	2b40      	cmp	r3, #64	; 0x40
 800ccfc:	d10e      	bne.n	800cd1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd08:	2b40      	cmp	r3, #64	; 0x40
 800cd0a:	d107      	bne.n	800cd1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 f9c7 	bl	800d0aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	691b      	ldr	r3, [r3, #16]
 800cd22:	f003 0320 	and.w	r3, r3, #32
 800cd26:	2b20      	cmp	r3, #32
 800cd28:	d10e      	bne.n	800cd48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	f003 0320 	and.w	r3, r3, #32
 800cd34:	2b20      	cmp	r3, #32
 800cd36:	d107      	bne.n	800cd48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f06f 0220 	mvn.w	r2, #32
 800cd40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fd06 	bl	800d754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd48:	bf00      	nop
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d101      	bne.n	800cd6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cd6a:	2302      	movs	r3, #2
 800cd6c:	e0ae      	b.n	800cecc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b0c      	cmp	r3, #12
 800cd7a:	f200 809f 	bhi.w	800cebc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800cd7e:	a201      	add	r2, pc, #4	; (adr r2, 800cd84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd84:	0800cdb9 	.word	0x0800cdb9
 800cd88:	0800cebd 	.word	0x0800cebd
 800cd8c:	0800cebd 	.word	0x0800cebd
 800cd90:	0800cebd 	.word	0x0800cebd
 800cd94:	0800cdf9 	.word	0x0800cdf9
 800cd98:	0800cebd 	.word	0x0800cebd
 800cd9c:	0800cebd 	.word	0x0800cebd
 800cda0:	0800cebd 	.word	0x0800cebd
 800cda4:	0800ce3b 	.word	0x0800ce3b
 800cda8:	0800cebd 	.word	0x0800cebd
 800cdac:	0800cebd 	.word	0x0800cebd
 800cdb0:	0800cebd 	.word	0x0800cebd
 800cdb4:	0800ce7b 	.word	0x0800ce7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68b9      	ldr	r1, [r7, #8]
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f000 f9f6 	bl	800d1b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	699a      	ldr	r2, [r3, #24]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f042 0208 	orr.w	r2, r2, #8
 800cdd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	699a      	ldr	r2, [r3, #24]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f022 0204 	bic.w	r2, r2, #4
 800cde2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	6999      	ldr	r1, [r3, #24]
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	691a      	ldr	r2, [r3, #16]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	430a      	orrs	r2, r1
 800cdf4:	619a      	str	r2, [r3, #24]
      break;
 800cdf6:	e064      	b.n	800cec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	68b9      	ldr	r1, [r7, #8]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 fa46 	bl	800d290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	699a      	ldr	r2, [r3, #24]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	699a      	ldr	r2, [r3, #24]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	6999      	ldr	r1, [r3, #24]
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	021a      	lsls	r2, r3, #8
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	430a      	orrs	r2, r1
 800ce36:	619a      	str	r2, [r3, #24]
      break;
 800ce38:	e043      	b.n	800cec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68b9      	ldr	r1, [r7, #8]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f000 fa99 	bl	800d378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	69da      	ldr	r2, [r3, #28]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f042 0208 	orr.w	r2, r2, #8
 800ce54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	69da      	ldr	r2, [r3, #28]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f022 0204 	bic.w	r2, r2, #4
 800ce64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	69d9      	ldr	r1, [r3, #28]
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	691a      	ldr	r2, [r3, #16]
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	430a      	orrs	r2, r1
 800ce76:	61da      	str	r2, [r3, #28]
      break;
 800ce78:	e023      	b.n	800cec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 faed 	bl	800d460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	69da      	ldr	r2, [r3, #28]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	69da      	ldr	r2, [r3, #28]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	69d9      	ldr	r1, [r3, #28]
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	691b      	ldr	r3, [r3, #16]
 800ceb0:	021a      	lsls	r2, r3, #8
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	61da      	str	r2, [r3, #28]
      break;
 800ceba:	e002      	b.n	800cec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	75fb      	strb	r3, [r7, #23]
      break;
 800cec0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ceca:	7dfb      	ldrb	r3, [r7, #23]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3718      	adds	r7, #24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cede:	2300      	movs	r3, #0
 800cee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d101      	bne.n	800cef0 <HAL_TIM_ConfigClockSource+0x1c>
 800ceec:	2302      	movs	r3, #2
 800ceee:	e0b4      	b.n	800d05a <HAL_TIM_ConfigClockSource+0x186>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2202      	movs	r2, #2
 800cefc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cf0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf28:	d03e      	beq.n	800cfa8 <HAL_TIM_ConfigClockSource+0xd4>
 800cf2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf2e:	f200 8087 	bhi.w	800d040 <HAL_TIM_ConfigClockSource+0x16c>
 800cf32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf36:	f000 8086 	beq.w	800d046 <HAL_TIM_ConfigClockSource+0x172>
 800cf3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf3e:	d87f      	bhi.n	800d040 <HAL_TIM_ConfigClockSource+0x16c>
 800cf40:	2b70      	cmp	r3, #112	; 0x70
 800cf42:	d01a      	beq.n	800cf7a <HAL_TIM_ConfigClockSource+0xa6>
 800cf44:	2b70      	cmp	r3, #112	; 0x70
 800cf46:	d87b      	bhi.n	800d040 <HAL_TIM_ConfigClockSource+0x16c>
 800cf48:	2b60      	cmp	r3, #96	; 0x60
 800cf4a:	d050      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x11a>
 800cf4c:	2b60      	cmp	r3, #96	; 0x60
 800cf4e:	d877      	bhi.n	800d040 <HAL_TIM_ConfigClockSource+0x16c>
 800cf50:	2b50      	cmp	r3, #80	; 0x50
 800cf52:	d03c      	beq.n	800cfce <HAL_TIM_ConfigClockSource+0xfa>
 800cf54:	2b50      	cmp	r3, #80	; 0x50
 800cf56:	d873      	bhi.n	800d040 <HAL_TIM_ConfigClockSource+0x16c>
 800cf58:	2b40      	cmp	r3, #64	; 0x40
 800cf5a:	d058      	beq.n	800d00e <HAL_TIM_ConfigClockSource+0x13a>
 800cf5c:	2b40      	cmp	r3, #64	; 0x40
 800cf5e:	d86f      	bhi.n	800d040 <HAL_TIM_ConfigClockSource+0x16c>
 800cf60:	2b30      	cmp	r3, #48	; 0x30
 800cf62:	d064      	beq.n	800d02e <HAL_TIM_ConfigClockSource+0x15a>
 800cf64:	2b30      	cmp	r3, #48	; 0x30
 800cf66:	d86b      	bhi.n	800d040 <HAL_TIM_ConfigClockSource+0x16c>
 800cf68:	2b20      	cmp	r3, #32
 800cf6a:	d060      	beq.n	800d02e <HAL_TIM_ConfigClockSource+0x15a>
 800cf6c:	2b20      	cmp	r3, #32
 800cf6e:	d867      	bhi.n	800d040 <HAL_TIM_ConfigClockSource+0x16c>
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d05c      	beq.n	800d02e <HAL_TIM_ConfigClockSource+0x15a>
 800cf74:	2b10      	cmp	r3, #16
 800cf76:	d05a      	beq.n	800d02e <HAL_TIM_ConfigClockSource+0x15a>
 800cf78:	e062      	b.n	800d040 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6818      	ldr	r0, [r3, #0]
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	6899      	ldr	r1, [r3, #8]
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	685a      	ldr	r2, [r3, #4]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	f000 fb34 	bl	800d5f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cf9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	609a      	str	r2, [r3, #8]
      break;
 800cfa6:	e04f      	b.n	800d048 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6818      	ldr	r0, [r3, #0]
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	6899      	ldr	r1, [r3, #8]
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	685a      	ldr	r2, [r3, #4]
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	f000 fb1d 	bl	800d5f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	689a      	ldr	r2, [r3, #8]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cfca:	609a      	str	r2, [r3, #8]
      break;
 800cfcc:	e03c      	b.n	800d048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	6859      	ldr	r1, [r3, #4]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	f000 fa94 	bl	800d508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2150      	movs	r1, #80	; 0x50
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 faeb 	bl	800d5c2 <TIM_ITRx_SetConfig>
      break;
 800cfec:	e02c      	b.n	800d048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6818      	ldr	r0, [r3, #0]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	6859      	ldr	r1, [r3, #4]
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	461a      	mov	r2, r3
 800cffc:	f000 fab2 	bl	800d564 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2160      	movs	r1, #96	; 0x60
 800d006:	4618      	mov	r0, r3
 800d008:	f000 fadb 	bl	800d5c2 <TIM_ITRx_SetConfig>
      break;
 800d00c:	e01c      	b.n	800d048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6818      	ldr	r0, [r3, #0]
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	6859      	ldr	r1, [r3, #4]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	461a      	mov	r2, r3
 800d01c:	f000 fa74 	bl	800d508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2140      	movs	r1, #64	; 0x40
 800d026:	4618      	mov	r0, r3
 800d028:	f000 facb 	bl	800d5c2 <TIM_ITRx_SetConfig>
      break;
 800d02c:	e00c      	b.n	800d048 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4619      	mov	r1, r3
 800d038:	4610      	mov	r0, r2
 800d03a:	f000 fac2 	bl	800d5c2 <TIM_ITRx_SetConfig>
      break;
 800d03e:	e003      	b.n	800d048 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	73fb      	strb	r3, [r7, #15]
      break;
 800d044:	e000      	b.n	800d048 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d058:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d062:	b480      	push	{r7}
 800d064:	b083      	sub	sp, #12
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d06a:	bf00      	nop
 800d06c:	370c      	adds	r7, #12
 800d06e:	46bd      	mov	sp, r7
 800d070:	bc80      	pop	{r7}
 800d072:	4770      	bx	lr

0800d074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d07c:	bf00      	nop
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	bc80      	pop	{r7}
 800d084:	4770      	bx	lr

0800d086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d086:	b480      	push	{r7}
 800d088:	b083      	sub	sp, #12
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d08e:	bf00      	nop
 800d090:	370c      	adds	r7, #12
 800d092:	46bd      	mov	sp, r7
 800d094:	bc80      	pop	{r7}
 800d096:	4770      	bx	lr

0800d098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bc80      	pop	{r7}
 800d0a8:	4770      	bx	lr

0800d0aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d0b2:	bf00      	nop
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bc80      	pop	{r7}
 800d0ba:	4770      	bx	lr

0800d0bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4a33      	ldr	r2, [pc, #204]	; (800d19c <TIM_Base_SetConfig+0xe0>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d013      	beq.n	800d0fc <TIM_Base_SetConfig+0x40>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	4a32      	ldr	r2, [pc, #200]	; (800d1a0 <TIM_Base_SetConfig+0xe4>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d00f      	beq.n	800d0fc <TIM_Base_SetConfig+0x40>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0e2:	d00b      	beq.n	800d0fc <TIM_Base_SetConfig+0x40>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4a2f      	ldr	r2, [pc, #188]	; (800d1a4 <TIM_Base_SetConfig+0xe8>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d007      	beq.n	800d0fc <TIM_Base_SetConfig+0x40>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	4a2e      	ldr	r2, [pc, #184]	; (800d1a8 <TIM_Base_SetConfig+0xec>)
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d003      	beq.n	800d0fc <TIM_Base_SetConfig+0x40>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	4a2d      	ldr	r2, [pc, #180]	; (800d1ac <TIM_Base_SetConfig+0xf0>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d108      	bne.n	800d10e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	4313      	orrs	r3, r2
 800d10c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4a22      	ldr	r2, [pc, #136]	; (800d19c <TIM_Base_SetConfig+0xe0>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d013      	beq.n	800d13e <TIM_Base_SetConfig+0x82>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4a21      	ldr	r2, [pc, #132]	; (800d1a0 <TIM_Base_SetConfig+0xe4>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d00f      	beq.n	800d13e <TIM_Base_SetConfig+0x82>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d124:	d00b      	beq.n	800d13e <TIM_Base_SetConfig+0x82>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	4a1e      	ldr	r2, [pc, #120]	; (800d1a4 <TIM_Base_SetConfig+0xe8>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d007      	beq.n	800d13e <TIM_Base_SetConfig+0x82>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4a1d      	ldr	r2, [pc, #116]	; (800d1a8 <TIM_Base_SetConfig+0xec>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d003      	beq.n	800d13e <TIM_Base_SetConfig+0x82>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	4a1c      	ldr	r2, [pc, #112]	; (800d1ac <TIM_Base_SetConfig+0xf0>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d108      	bne.n	800d150 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	4313      	orrs	r3, r2
 800d14e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	695b      	ldr	r3, [r3, #20]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	689a      	ldr	r2, [r3, #8]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a09      	ldr	r2, [pc, #36]	; (800d19c <TIM_Base_SetConfig+0xe0>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d003      	beq.n	800d184 <TIM_Base_SetConfig+0xc8>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4a08      	ldr	r2, [pc, #32]	; (800d1a0 <TIM_Base_SetConfig+0xe4>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d103      	bne.n	800d18c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	691a      	ldr	r2, [r3, #16]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	615a      	str	r2, [r3, #20]
}
 800d192:	bf00      	nop
 800d194:	3714      	adds	r7, #20
 800d196:	46bd      	mov	sp, r7
 800d198:	bc80      	pop	{r7}
 800d19a:	4770      	bx	lr
 800d19c:	40012c00 	.word	0x40012c00
 800d1a0:	40013400 	.word	0x40013400
 800d1a4:	40000400 	.word	0x40000400
 800d1a8:	40000800 	.word	0x40000800
 800d1ac:	40000c00 	.word	0x40000c00

0800d1b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b087      	sub	sp, #28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a1b      	ldr	r3, [r3, #32]
 800d1c4:	f023 0201 	bic.w	r2, r3, #1
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	699b      	ldr	r3, [r3, #24]
 800d1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f023 0303 	bic.w	r3, r3, #3
 800d1e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f023 0302 	bic.w	r3, r3, #2
 800d1f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	697a      	ldr	r2, [r7, #20]
 800d200:	4313      	orrs	r3, r2
 800d202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a20      	ldr	r2, [pc, #128]	; (800d288 <TIM_OC1_SetConfig+0xd8>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d003      	beq.n	800d214 <TIM_OC1_SetConfig+0x64>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a1f      	ldr	r2, [pc, #124]	; (800d28c <TIM_OC1_SetConfig+0xdc>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d10c      	bne.n	800d22e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	f023 0308 	bic.w	r3, r3, #8
 800d21a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	4313      	orrs	r3, r2
 800d224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	f023 0304 	bic.w	r3, r3, #4
 800d22c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4a15      	ldr	r2, [pc, #84]	; (800d288 <TIM_OC1_SetConfig+0xd8>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d003      	beq.n	800d23e <TIM_OC1_SetConfig+0x8e>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4a14      	ldr	r2, [pc, #80]	; (800d28c <TIM_OC1_SetConfig+0xdc>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d111      	bne.n	800d262 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d24c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	695b      	ldr	r3, [r3, #20]
 800d252:	693a      	ldr	r2, [r7, #16]
 800d254:	4313      	orrs	r3, r2
 800d256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	693a      	ldr	r2, [r7, #16]
 800d25e:	4313      	orrs	r3, r2
 800d260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	693a      	ldr	r2, [r7, #16]
 800d266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	68fa      	ldr	r2, [r7, #12]
 800d26c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	685a      	ldr	r2, [r3, #4]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	697a      	ldr	r2, [r7, #20]
 800d27a:	621a      	str	r2, [r3, #32]
}
 800d27c:	bf00      	nop
 800d27e:	371c      	adds	r7, #28
 800d280:	46bd      	mov	sp, r7
 800d282:	bc80      	pop	{r7}
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	40012c00 	.word	0x40012c00
 800d28c:	40013400 	.word	0x40013400

0800d290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d290:	b480      	push	{r7}
 800d292:	b087      	sub	sp, #28
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6a1b      	ldr	r3, [r3, #32]
 800d29e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6a1b      	ldr	r3, [r3, #32]
 800d2a4:	f023 0210 	bic.w	r2, r3, #16
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	699b      	ldr	r3, [r3, #24]
 800d2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	021b      	lsls	r3, r3, #8
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	f023 0320 	bic.w	r3, r3, #32
 800d2da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	011b      	lsls	r3, r3, #4
 800d2e2:	697a      	ldr	r2, [r7, #20]
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4a21      	ldr	r2, [pc, #132]	; (800d370 <TIM_OC2_SetConfig+0xe0>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d003      	beq.n	800d2f8 <TIM_OC2_SetConfig+0x68>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	4a20      	ldr	r2, [pc, #128]	; (800d374 <TIM_OC2_SetConfig+0xe4>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d10d      	bne.n	800d314 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	011b      	lsls	r3, r3, #4
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	4313      	orrs	r3, r2
 800d30a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d312:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4a16      	ldr	r2, [pc, #88]	; (800d370 <TIM_OC2_SetConfig+0xe0>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d003      	beq.n	800d324 <TIM_OC2_SetConfig+0x94>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4a15      	ldr	r2, [pc, #84]	; (800d374 <TIM_OC2_SetConfig+0xe4>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d113      	bne.n	800d34c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d32a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d332:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	695b      	ldr	r3, [r3, #20]
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	693a      	ldr	r2, [r7, #16]
 800d33c:	4313      	orrs	r3, r2
 800d33e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	699b      	ldr	r3, [r3, #24]
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	693a      	ldr	r2, [r7, #16]
 800d348:	4313      	orrs	r3, r2
 800d34a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	693a      	ldr	r2, [r7, #16]
 800d350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	697a      	ldr	r2, [r7, #20]
 800d364:	621a      	str	r2, [r3, #32]
}
 800d366:	bf00      	nop
 800d368:	371c      	adds	r7, #28
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bc80      	pop	{r7}
 800d36e:	4770      	bx	lr
 800d370:	40012c00 	.word	0x40012c00
 800d374:	40013400 	.word	0x40013400

0800d378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d378:	b480      	push	{r7}
 800d37a:	b087      	sub	sp, #28
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6a1b      	ldr	r3, [r3, #32]
 800d386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6a1b      	ldr	r3, [r3, #32]
 800d38c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	69db      	ldr	r3, [r3, #28]
 800d39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f023 0303 	bic.w	r3, r3, #3
 800d3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	021b      	lsls	r3, r3, #8
 800d3c8:	697a      	ldr	r2, [r7, #20]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4a21      	ldr	r2, [pc, #132]	; (800d458 <TIM_OC3_SetConfig+0xe0>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d003      	beq.n	800d3de <TIM_OC3_SetConfig+0x66>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	4a20      	ldr	r2, [pc, #128]	; (800d45c <TIM_OC3_SetConfig+0xe4>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d10d      	bne.n	800d3fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	021b      	lsls	r3, r3, #8
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d3f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a16      	ldr	r2, [pc, #88]	; (800d458 <TIM_OC3_SetConfig+0xe0>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d003      	beq.n	800d40a <TIM_OC3_SetConfig+0x92>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a15      	ldr	r2, [pc, #84]	; (800d45c <TIM_OC3_SetConfig+0xe4>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d113      	bne.n	800d432 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	695b      	ldr	r3, [r3, #20]
 800d41e:	011b      	lsls	r3, r3, #4
 800d420:	693a      	ldr	r2, [r7, #16]
 800d422:	4313      	orrs	r3, r2
 800d424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	011b      	lsls	r3, r3, #4
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	4313      	orrs	r3, r2
 800d430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	685a      	ldr	r2, [r3, #4]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	697a      	ldr	r2, [r7, #20]
 800d44a:	621a      	str	r2, [r3, #32]
}
 800d44c:	bf00      	nop
 800d44e:	371c      	adds	r7, #28
 800d450:	46bd      	mov	sp, r7
 800d452:	bc80      	pop	{r7}
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	40012c00 	.word	0x40012c00
 800d45c:	40013400 	.word	0x40013400

0800d460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d460:	b480      	push	{r7}
 800d462:	b087      	sub	sp, #28
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6a1b      	ldr	r3, [r3, #32]
 800d474:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	69db      	ldr	r3, [r3, #28]
 800d486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d48e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	021b      	lsls	r3, r3, #8
 800d49e:	68fa      	ldr	r2, [r7, #12]
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	031b      	lsls	r3, r3, #12
 800d4b2:	693a      	ldr	r2, [r7, #16]
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4a11      	ldr	r2, [pc, #68]	; (800d500 <TIM_OC4_SetConfig+0xa0>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d003      	beq.n	800d4c8 <TIM_OC4_SetConfig+0x68>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4a10      	ldr	r2, [pc, #64]	; (800d504 <TIM_OC4_SetConfig+0xa4>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d109      	bne.n	800d4dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	695b      	ldr	r3, [r3, #20]
 800d4d4:	019b      	lsls	r3, r3, #6
 800d4d6:	697a      	ldr	r2, [r7, #20]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	697a      	ldr	r2, [r7, #20]
 800d4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	693a      	ldr	r2, [r7, #16]
 800d4f4:	621a      	str	r2, [r3, #32]
}
 800d4f6:	bf00      	nop
 800d4f8:	371c      	adds	r7, #28
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bc80      	pop	{r7}
 800d4fe:	4770      	bx	lr
 800d500:	40012c00 	.word	0x40012c00
 800d504:	40013400 	.word	0x40013400

0800d508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d508:	b480      	push	{r7}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6a1b      	ldr	r3, [r3, #32]
 800d518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	f023 0201 	bic.w	r2, r3, #1
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	699b      	ldr	r3, [r3, #24]
 800d52a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	011b      	lsls	r3, r3, #4
 800d538:	693a      	ldr	r2, [r7, #16]
 800d53a:	4313      	orrs	r3, r2
 800d53c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	f023 030a 	bic.w	r3, r3, #10
 800d544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d546:	697a      	ldr	r2, [r7, #20]
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	693a      	ldr	r2, [r7, #16]
 800d552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	697a      	ldr	r2, [r7, #20]
 800d558:	621a      	str	r2, [r3, #32]
}
 800d55a:	bf00      	nop
 800d55c:	371c      	adds	r7, #28
 800d55e:	46bd      	mov	sp, r7
 800d560:	bc80      	pop	{r7}
 800d562:	4770      	bx	lr

0800d564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d564:	b480      	push	{r7}
 800d566:	b087      	sub	sp, #28
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6a1b      	ldr	r3, [r3, #32]
 800d574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	f023 0210 	bic.w	r2, r3, #16
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	699b      	ldr	r3, [r3, #24]
 800d586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d58e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	031b      	lsls	r3, r3, #12
 800d594:	693a      	ldr	r2, [r7, #16]
 800d596:	4313      	orrs	r3, r2
 800d598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d5a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	011b      	lsls	r3, r3, #4
 800d5a6:	697a      	ldr	r2, [r7, #20]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	693a      	ldr	r2, [r7, #16]
 800d5b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	697a      	ldr	r2, [r7, #20]
 800d5b6:	621a      	str	r2, [r3, #32]
}
 800d5b8:	bf00      	nop
 800d5ba:	371c      	adds	r7, #28
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bc80      	pop	{r7}
 800d5c0:	4770      	bx	lr

0800d5c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d5c2:	b480      	push	{r7}
 800d5c4:	b085      	sub	sp, #20
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	689b      	ldr	r3, [r3, #8]
 800d5d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d5da:	683a      	ldr	r2, [r7, #0]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	f043 0307 	orr.w	r3, r3, #7
 800d5e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	609a      	str	r2, [r3, #8]
}
 800d5ec:	bf00      	nop
 800d5ee:	3714      	adds	r7, #20
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bc80      	pop	{r7}
 800d5f4:	4770      	bx	lr

0800d5f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d5f6:	b480      	push	{r7}
 800d5f8:	b087      	sub	sp, #28
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	60f8      	str	r0, [r7, #12]
 800d5fe:	60b9      	str	r1, [r7, #8]
 800d600:	607a      	str	r2, [r7, #4]
 800d602:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d610:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	021a      	lsls	r2, r3, #8
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	431a      	orrs	r2, r3
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	4313      	orrs	r3, r2
 800d622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	697a      	ldr	r2, [r7, #20]
 800d628:	609a      	str	r2, [r3, #8]
}
 800d62a:	bf00      	nop
 800d62c:	371c      	adds	r7, #28
 800d62e:	46bd      	mov	sp, r7
 800d630:	bc80      	pop	{r7}
 800d632:	4770      	bx	lr

0800d634 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d634:	b480      	push	{r7}
 800d636:	b087      	sub	sp, #28
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	f003 031f 	and.w	r3, r3, #31
 800d646:	2201      	movs	r2, #1
 800d648:	fa02 f303 	lsl.w	r3, r2, r3
 800d64c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6a1a      	ldr	r2, [r3, #32]
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	43db      	mvns	r3, r3
 800d656:	401a      	ands	r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6a1a      	ldr	r2, [r3, #32]
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	f003 031f 	and.w	r3, r3, #31
 800d666:	6879      	ldr	r1, [r7, #4]
 800d668:	fa01 f303 	lsl.w	r3, r1, r3
 800d66c:	431a      	orrs	r2, r3
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	621a      	str	r2, [r3, #32]
}
 800d672:	bf00      	nop
 800d674:	371c      	adds	r7, #28
 800d676:	46bd      	mov	sp, r7
 800d678:	bc80      	pop	{r7}
 800d67a:	4770      	bx	lr

0800d67c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d101      	bne.n	800d694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d690:	2302      	movs	r3, #2
 800d692:	e050      	b.n	800d736 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2202      	movs	r2, #2
 800d6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	689b      	ldr	r3, [r3, #8]
 800d6b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a1b      	ldr	r2, [pc, #108]	; (800d740 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d018      	beq.n	800d70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a19      	ldr	r2, [pc, #100]	; (800d744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d013      	beq.n	800d70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6ea:	d00e      	beq.n	800d70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a15      	ldr	r2, [pc, #84]	; (800d748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d009      	beq.n	800d70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a14      	ldr	r2, [pc, #80]	; (800d74c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d004      	beq.n	800d70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a12      	ldr	r2, [pc, #72]	; (800d750 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d10c      	bne.n	800d724 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	68ba      	ldr	r2, [r7, #8]
 800d718:	4313      	orrs	r3, r2
 800d71a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68ba      	ldr	r2, [r7, #8]
 800d722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3714      	adds	r7, #20
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bc80      	pop	{r7}
 800d73e:	4770      	bx	lr
 800d740:	40012c00 	.word	0x40012c00
 800d744:	40013400 	.word	0x40013400
 800d748:	40000400 	.word	0x40000400
 800d74c:	40000800 	.word	0x40000800
 800d750:	40000c00 	.word	0x40000c00

0800d754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	bc80      	pop	{r7}
 800d764:	4770      	bx	lr

0800d766 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d766:	b480      	push	{r7}
 800d768:	b083      	sub	sp, #12
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d76e:	bf00      	nop
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	bc80      	pop	{r7}
 800d776:	4770      	bx	lr

0800d778 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d101      	bne.n	800d78a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e042      	b.n	800d810 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d790:	b2db      	uxtb	r3, r3
 800d792:	2b00      	cmp	r3, #0
 800d794:	d106      	bne.n	800d7a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f7f4 fe48 	bl	8002434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2224      	movs	r2, #36	; 0x24
 800d7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	68da      	ldr	r2, [r3, #12]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d7ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 ff7d 	bl	800e6bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	691a      	ldr	r2, [r3, #16]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d7d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	695a      	ldr	r2, [r3, #20]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d7e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	68da      	ldr	r2, [r3, #12]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d7f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2220      	movs	r2, #32
 800d7fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2220      	movs	r2, #32
 800d804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d101      	bne.n	800d82a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800d826:	2301      	movs	r3, #1
 800d828:	e024      	b.n	800d874 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2224      	movs	r2, #36	; 0x24
 800d82e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68da      	ldr	r2, [r3, #12]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d840:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7f4 ffd0 	bl	80027e8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d872:	2300      	movs	r3, #0
}
 800d874:	4618      	mov	r0, r3
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08a      	sub	sp, #40	; 0x28
 800d880:	af02      	add	r7, sp, #8
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	603b      	str	r3, [r7, #0]
 800d888:	4613      	mov	r3, r2
 800d88a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d88c:	2300      	movs	r3, #0
 800d88e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d896:	b2db      	uxtb	r3, r3
 800d898:	2b20      	cmp	r3, #32
 800d89a:	d16d      	bne.n	800d978 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d002      	beq.n	800d8a8 <HAL_UART_Transmit+0x2c>
 800d8a2:	88fb      	ldrh	r3, [r7, #6]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d101      	bne.n	800d8ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e066      	b.n	800d97a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2221      	movs	r2, #33	; 0x21
 800d8b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d8ba:	f7fa fe2f 	bl	800851c <HAL_GetTick>
 800d8be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	88fa      	ldrh	r2, [r7, #6]
 800d8c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	88fa      	ldrh	r2, [r7, #6]
 800d8ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8d4:	d108      	bne.n	800d8e8 <HAL_UART_Transmit+0x6c>
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	691b      	ldr	r3, [r3, #16]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d104      	bne.n	800d8e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	61bb      	str	r3, [r7, #24]
 800d8e6:	e003      	b.n	800d8f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d8f0:	e02a      	b.n	800d948 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	9300      	str	r3, [sp, #0]
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	2180      	movs	r1, #128	; 0x80
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f000 fc12 	bl	800e126 <UART_WaitOnFlagUntilTimeout>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800d908:	2303      	movs	r3, #3
 800d90a:	e036      	b.n	800d97a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10b      	bne.n	800d92a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	461a      	mov	r2, r3
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	3302      	adds	r3, #2
 800d926:	61bb      	str	r3, [r7, #24]
 800d928:	e007      	b.n	800d93a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	781a      	ldrb	r2, [r3, #0]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	3301      	adds	r3, #1
 800d938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d93e:	b29b      	uxth	r3, r3
 800d940:	3b01      	subs	r3, #1
 800d942:	b29a      	uxth	r2, r3
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1cf      	bne.n	800d8f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	2200      	movs	r2, #0
 800d95a:	2140      	movs	r1, #64	; 0x40
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	f000 fbe2 	bl	800e126 <UART_WaitOnFlagUntilTimeout>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d001      	beq.n	800d96c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800d968:	2303      	movs	r3, #3
 800d96a:	e006      	b.n	800d97a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2220      	movs	r2, #32
 800d970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800d974:	2300      	movs	r3, #0
 800d976:	e000      	b.n	800d97a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800d978:	2302      	movs	r3, #2
  }
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3720      	adds	r7, #32
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b084      	sub	sp, #16
 800d986:	af00      	add	r7, sp, #0
 800d988:	60f8      	str	r0, [r7, #12]
 800d98a:	60b9      	str	r1, [r7, #8]
 800d98c:	4613      	mov	r3, r2
 800d98e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d996:	b2db      	uxtb	r3, r3
 800d998:	2b20      	cmp	r3, #32
 800d99a:	d112      	bne.n	800d9c2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d002      	beq.n	800d9a8 <HAL_UART_Receive_DMA+0x26>
 800d9a2:	88fb      	ldrh	r3, [r7, #6]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d101      	bne.n	800d9ac <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e00b      	b.n	800d9c4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d9b2:	88fb      	ldrh	r3, [r7, #6]
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	68b9      	ldr	r1, [r7, #8]
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	f000 fc23 	bl	800e204 <UART_Start_Receive_DMA>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	e000      	b.n	800d9c4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d9c2:	2302      	movs	r3, #2
  }
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b0ba      	sub	sp, #232	; 0xe8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	695b      	ldr	r3, [r3, #20]
 800d9ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da02:	f003 030f 	and.w	r3, r3, #15
 800da06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800da0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10f      	bne.n	800da32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800da12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da16:	f003 0320 	and.w	r3, r3, #32
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d009      	beq.n	800da32 <HAL_UART_IRQHandler+0x66>
 800da1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da22:	f003 0320 	and.w	r3, r3, #32
 800da26:	2b00      	cmp	r3, #0
 800da28:	d003      	beq.n	800da32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 fd88 	bl	800e540 <UART_Receive_IT>
      return;
 800da30:	e25b      	b.n	800deea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800da32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da36:	2b00      	cmp	r3, #0
 800da38:	f000 80de 	beq.w	800dbf8 <HAL_UART_IRQHandler+0x22c>
 800da3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da40:	f003 0301 	and.w	r3, r3, #1
 800da44:	2b00      	cmp	r3, #0
 800da46:	d106      	bne.n	800da56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800da48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800da50:	2b00      	cmp	r3, #0
 800da52:	f000 80d1 	beq.w	800dbf8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800da56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da5a:	f003 0301 	and.w	r3, r3, #1
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00b      	beq.n	800da7a <HAL_UART_IRQHandler+0xae>
 800da62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d005      	beq.n	800da7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da72:	f043 0201 	orr.w	r2, r3, #1
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800da7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da7e:	f003 0304 	and.w	r3, r3, #4
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00b      	beq.n	800da9e <HAL_UART_IRQHandler+0xd2>
 800da86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d005      	beq.n	800da9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da96:	f043 0202 	orr.w	r2, r3, #2
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800da9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800daa2:	f003 0302 	and.w	r3, r3, #2
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00b      	beq.n	800dac2 <HAL_UART_IRQHandler+0xf6>
 800daaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800daae:	f003 0301 	and.w	r3, r3, #1
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d005      	beq.n	800dac2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daba:	f043 0204 	orr.w	r2, r3, #4
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800dac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dac6:	f003 0308 	and.w	r3, r3, #8
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d011      	beq.n	800daf2 <HAL_UART_IRQHandler+0x126>
 800dace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dad2:	f003 0320 	and.w	r3, r3, #32
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d105      	bne.n	800dae6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800dada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d005      	beq.n	800daf2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daea:	f043 0208 	orr.w	r2, r3, #8
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f000 81f2 	beq.w	800dee0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db00:	f003 0320 	and.w	r3, r3, #32
 800db04:	2b00      	cmp	r3, #0
 800db06:	d008      	beq.n	800db1a <HAL_UART_IRQHandler+0x14e>
 800db08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db0c:	f003 0320 	and.w	r3, r3, #32
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 fd13 	bl	800e540 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	695b      	ldr	r3, [r3, #20]
 800db20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db24:	2b00      	cmp	r3, #0
 800db26:	bf14      	ite	ne
 800db28:	2301      	movne	r3, #1
 800db2a:	2300      	moveq	r3, #0
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db36:	f003 0308 	and.w	r3, r3, #8
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d103      	bne.n	800db46 <HAL_UART_IRQHandler+0x17a>
 800db3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db42:	2b00      	cmp	r3, #0
 800db44:	d04f      	beq.n	800dbe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fc1d 	bl	800e386 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	695b      	ldr	r3, [r3, #20]
 800db52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db56:	2b00      	cmp	r3, #0
 800db58:	d041      	beq.n	800dbde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	3314      	adds	r3, #20
 800db60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db68:	e853 3f00 	ldrex	r3, [r3]
 800db6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800db70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	3314      	adds	r3, #20
 800db82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800db86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800db8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800db92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800db96:	e841 2300 	strex	r3, r2, [r1]
 800db9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800db9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1d9      	bne.n	800db5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d013      	beq.n	800dbd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbb2:	4a7e      	ldr	r2, [pc, #504]	; (800ddac <HAL_UART_IRQHandler+0x3e0>)
 800dbb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fc fac4 	bl	800a148 <HAL_DMA_Abort_IT>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d016      	beq.n	800dbf4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbd4:	e00e      	b.n	800dbf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7f5 fac4 	bl	8003164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbdc:	e00a      	b.n	800dbf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f7f5 fac0 	bl	8003164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbe4:	e006      	b.n	800dbf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7f5 fabc 	bl	8003164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800dbf2:	e175      	b.n	800dee0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbf4:	bf00      	nop
    return;
 800dbf6:	e173      	b.n	800dee0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	f040 814f 	bne.w	800dea0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800dc02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc06:	f003 0310 	and.w	r3, r3, #16
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f000 8148 	beq.w	800dea0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800dc10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc14:	f003 0310 	and.w	r3, r3, #16
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 8141 	beq.w	800dea0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dc1e:	2300      	movs	r3, #0
 800dc20:	60bb      	str	r3, [r7, #8]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	60bb      	str	r3, [r7, #8]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	60bb      	str	r3, [r7, #8]
 800dc32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	695b      	ldr	r3, [r3, #20]
 800dc3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	f000 80b6 	beq.w	800ddb0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dc50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	f000 8145 	beq.w	800dee4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dc5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc62:	429a      	cmp	r2, r3
 800dc64:	f080 813e 	bcs.w	800dee4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc74:	699b      	ldr	r3, [r3, #24]
 800dc76:	2b20      	cmp	r3, #32
 800dc78:	f000 8088 	beq.w	800dd8c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	330c      	adds	r3, #12
 800dc82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc8a:	e853 3f00 	ldrex	r3, [r3]
 800dc8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dc92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	330c      	adds	r3, #12
 800dca4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800dca8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800dcac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dcb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dcb8:	e841 2300 	strex	r3, r2, [r1]
 800dcbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dcc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d1d9      	bne.n	800dc7c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	3314      	adds	r3, #20
 800dcce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dcd2:	e853 3f00 	ldrex	r3, [r3]
 800dcd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dcd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcda:	f023 0301 	bic.w	r3, r3, #1
 800dcde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	3314      	adds	r3, #20
 800dce8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dcec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dcf0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dcf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dcf8:	e841 2300 	strex	r3, r2, [r1]
 800dcfc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dcfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1e1      	bne.n	800dcc8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	3314      	adds	r3, #20
 800dd0a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd0e:	e853 3f00 	ldrex	r3, [r3]
 800dd12:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dd14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	3314      	adds	r3, #20
 800dd24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dd28:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dd2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dd2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd30:	e841 2300 	strex	r3, r2, [r1]
 800dd34:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dd36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1e3      	bne.n	800dd04 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2220      	movs	r2, #32
 800dd40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2200      	movs	r2, #0
 800dd48:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	330c      	adds	r3, #12
 800dd50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd54:	e853 3f00 	ldrex	r3, [r3]
 800dd58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dd5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd5c:	f023 0310 	bic.w	r3, r3, #16
 800dd60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	330c      	adds	r3, #12
 800dd6a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800dd6e:	65ba      	str	r2, [r7, #88]	; 0x58
 800dd70:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd76:	e841 2300 	strex	r3, r2, [r1]
 800dd7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dd7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1e3      	bne.n	800dd4a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fc f9a2 	bl	800a0d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2202      	movs	r2, #2
 800dd90:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	1ad3      	subs	r3, r2, r3
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	4619      	mov	r1, r3
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 f8b6 	bl	800df14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800dda8:	e09c      	b.n	800dee4 <HAL_UART_IRQHandler+0x518>
 800ddaa:	bf00      	nop
 800ddac:	0800e44b 	.word	0x0800e44b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	1ad3      	subs	r3, r2, r3
 800ddbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f000 808e 	beq.w	800dee8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ddcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f000 8089 	beq.w	800dee8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	330c      	adds	r3, #12
 800dddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde0:	e853 3f00 	ldrex	r3, [r3]
 800dde4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dde6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dde8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ddec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	330c      	adds	r3, #12
 800ddf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ddfa:	647a      	str	r2, [r7, #68]	; 0x44
 800ddfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de02:	e841 2300 	strex	r3, r2, [r1]
 800de06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1e3      	bne.n	800ddd6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	3314      	adds	r3, #20
 800de14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de18:	e853 3f00 	ldrex	r3, [r3]
 800de1c:	623b      	str	r3, [r7, #32]
   return(result);
 800de1e:	6a3b      	ldr	r3, [r7, #32]
 800de20:	f023 0301 	bic.w	r3, r3, #1
 800de24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	3314      	adds	r3, #20
 800de2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800de32:	633a      	str	r2, [r7, #48]	; 0x30
 800de34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de3a:	e841 2300 	strex	r3, r2, [r1]
 800de3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1e3      	bne.n	800de0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2220      	movs	r2, #32
 800de4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2200      	movs	r2, #0
 800de52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	330c      	adds	r3, #12
 800de5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	e853 3f00 	ldrex	r3, [r3]
 800de62:	60fb      	str	r3, [r7, #12]
   return(result);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f023 0310 	bic.w	r3, r3, #16
 800de6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	330c      	adds	r3, #12
 800de74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800de78:	61fa      	str	r2, [r7, #28]
 800de7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de7c:	69b9      	ldr	r1, [r7, #24]
 800de7e:	69fa      	ldr	r2, [r7, #28]
 800de80:	e841 2300 	strex	r3, r2, [r1]
 800de84:	617b      	str	r3, [r7, #20]
   return(result);
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1e3      	bne.n	800de54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2202      	movs	r2, #2
 800de90:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800de92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de96:	4619      	mov	r1, r3
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 f83b 	bl	800df14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800de9e:	e023      	b.n	800dee8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800dea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d009      	beq.n	800dec0 <HAL_UART_IRQHandler+0x4f4>
 800deac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800deb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d003      	beq.n	800dec0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 fada 	bl	800e472 <UART_Transmit_IT>
    return;
 800debe:	e014      	b.n	800deea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d00e      	beq.n	800deea <HAL_UART_IRQHandler+0x51e>
 800decc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ded0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d008      	beq.n	800deea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 fb19 	bl	800e510 <UART_EndTransmit_IT>
    return;
 800dede:	e004      	b.n	800deea <HAL_UART_IRQHandler+0x51e>
    return;
 800dee0:	bf00      	nop
 800dee2:	e002      	b.n	800deea <HAL_UART_IRQHandler+0x51e>
      return;
 800dee4:	bf00      	nop
 800dee6:	e000      	b.n	800deea <HAL_UART_IRQHandler+0x51e>
      return;
 800dee8:	bf00      	nop
  }
}
 800deea:	37e8      	adds	r7, #232	; 0xe8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800def8:	bf00      	nop
 800defa:	370c      	adds	r7, #12
 800defc:	46bd      	mov	sp, r7
 800defe:	bc80      	pop	{r7}
 800df00:	4770      	bx	lr

0800df02 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800df02:	b480      	push	{r7}
 800df04:	b083      	sub	sp, #12
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800df0a:	bf00      	nop
 800df0c:	370c      	adds	r7, #12
 800df0e:	46bd      	mov	sp, r7
 800df10:	bc80      	pop	{r7}
 800df12:	4770      	bx	lr

0800df14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	460b      	mov	r3, r1
 800df1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800df20:	bf00      	nop
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	bc80      	pop	{r7}
 800df28:	4770      	bx	lr

0800df2a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b09c      	sub	sp, #112	; 0x70
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df36:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f003 0320 	and.w	r3, r3, #32
 800df42:	2b00      	cmp	r3, #0
 800df44:	d172      	bne.n	800e02c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800df46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df48:	2200      	movs	r2, #0
 800df4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	330c      	adds	r3, #12
 800df52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df56:	e853 3f00 	ldrex	r3, [r3]
 800df5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800df5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df62:	66bb      	str	r3, [r7, #104]	; 0x68
 800df64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	330c      	adds	r3, #12
 800df6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df6c:	65ba      	str	r2, [r7, #88]	; 0x58
 800df6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df74:	e841 2300 	strex	r3, r2, [r1]
 800df78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1e5      	bne.n	800df4c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	3314      	adds	r3, #20
 800df86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	e853 3f00 	ldrex	r3, [r3]
 800df8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800df90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df92:	f023 0301 	bic.w	r3, r3, #1
 800df96:	667b      	str	r3, [r7, #100]	; 0x64
 800df98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3314      	adds	r3, #20
 800df9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dfa0:	647a      	str	r2, [r7, #68]	; 0x44
 800dfa2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dfa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfa8:	e841 2300 	strex	r3, r2, [r1]
 800dfac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1e5      	bne.n	800df80 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	3314      	adds	r3, #20
 800dfba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	e853 3f00 	ldrex	r3, [r3]
 800dfc2:	623b      	str	r3, [r7, #32]
   return(result);
 800dfc4:	6a3b      	ldr	r3, [r7, #32]
 800dfc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfca:	663b      	str	r3, [r7, #96]	; 0x60
 800dfcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	3314      	adds	r3, #20
 800dfd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfd4:	633a      	str	r2, [r7, #48]	; 0x30
 800dfd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfdc:	e841 2300 	strex	r3, r2, [r1]
 800dfe0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d1e5      	bne.n	800dfb4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dfe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfea:	2220      	movs	r2, #32
 800dfec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d119      	bne.n	800e02c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	330c      	adds	r3, #12
 800dffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	e853 3f00 	ldrex	r3, [r3]
 800e006:	60fb      	str	r3, [r7, #12]
   return(result);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f023 0310 	bic.w	r3, r3, #16
 800e00e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	330c      	adds	r3, #12
 800e016:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e018:	61fa      	str	r2, [r7, #28]
 800e01a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01c:	69b9      	ldr	r1, [r7, #24]
 800e01e:	69fa      	ldr	r2, [r7, #28]
 800e020:	e841 2300 	strex	r3, r2, [r1]
 800e024:	617b      	str	r3, [r7, #20]
   return(result);
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d1e5      	bne.n	800dff8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e02c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e02e:	2200      	movs	r2, #0
 800e030:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e036:	2b01      	cmp	r3, #1
 800e038:	d106      	bne.n	800e048 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e03a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e03c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e03e:	4619      	mov	r1, r3
 800e040:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e042:	f7ff ff67 	bl	800df14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e046:	e002      	b.n	800e04e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800e048:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e04a:	f7f5 f894 	bl	8003176 <HAL_UART_RxCpltCallback>
}
 800e04e:	bf00      	nop
 800e050:	3770      	adds	r7, #112	; 0x70
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b084      	sub	sp, #16
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e062:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2201      	movs	r2, #1
 800e068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d108      	bne.n	800e084 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e076:	085b      	lsrs	r3, r3, #1
 800e078:	b29b      	uxth	r3, r3
 800e07a:	4619      	mov	r1, r3
 800e07c:	68f8      	ldr	r0, [r7, #12]
 800e07e:	f7ff ff49 	bl	800df14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e082:	e002      	b.n	800e08a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800e084:	68f8      	ldr	r0, [r7, #12]
 800e086:	f7ff ff3c 	bl	800df02 <HAL_UART_RxHalfCpltCallback>
}
 800e08a:	bf00      	nop
 800e08c:	3710      	adds	r7, #16
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}

0800e092 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b084      	sub	sp, #16
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e09a:	2300      	movs	r3, #0
 800e09c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	695b      	ldr	r3, [r3, #20]
 800e0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	bf14      	ite	ne
 800e0b2:	2301      	movne	r3, #1
 800e0b4:	2300      	moveq	r3, #0
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b21      	cmp	r3, #33	; 0x21
 800e0c4:	d108      	bne.n	800e0d8 <UART_DMAError+0x46>
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d005      	beq.n	800e0d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e0d2:	68b8      	ldr	r0, [r7, #8]
 800e0d4:	f000 f930 	bl	800e338 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	695b      	ldr	r3, [r3, #20]
 800e0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	bf14      	ite	ne
 800e0e6:	2301      	movne	r3, #1
 800e0e8:	2300      	moveq	r3, #0
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	2b22      	cmp	r3, #34	; 0x22
 800e0f8:	d108      	bne.n	800e10c <UART_DMAError+0x7a>
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d005      	beq.n	800e10c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2200      	movs	r2, #0
 800e104:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e106:	68b8      	ldr	r0, [r7, #8]
 800e108:	f000 f93d 	bl	800e386 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e110:	f043 0210 	orr.w	r2, r3, #16
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e118:	68b8      	ldr	r0, [r7, #8]
 800e11a:	f7f5 f823 	bl	8003164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e11e:	bf00      	nop
 800e120:	3710      	adds	r7, #16
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b090      	sub	sp, #64	; 0x40
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	60f8      	str	r0, [r7, #12]
 800e12e:	60b9      	str	r1, [r7, #8]
 800e130:	603b      	str	r3, [r7, #0]
 800e132:	4613      	mov	r3, r2
 800e134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e136:	e050      	b.n	800e1da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e13e:	d04c      	beq.n	800e1da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e142:	2b00      	cmp	r3, #0
 800e144:	d007      	beq.n	800e156 <UART_WaitOnFlagUntilTimeout+0x30>
 800e146:	f7fa f9e9 	bl	800851c <HAL_GetTick>
 800e14a:	4602      	mov	r2, r0
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	1ad3      	subs	r3, r2, r3
 800e150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e152:	429a      	cmp	r2, r3
 800e154:	d241      	bcs.n	800e1da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	330c      	adds	r3, #12
 800e15c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e160:	e853 3f00 	ldrex	r3, [r3]
 800e164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e168:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e16c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	330c      	adds	r3, #12
 800e174:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e176:	637a      	str	r2, [r7, #52]	; 0x34
 800e178:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e17a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e17c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e17e:	e841 2300 	strex	r3, r2, [r1]
 800e182:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e186:	2b00      	cmp	r3, #0
 800e188:	d1e5      	bne.n	800e156 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	3314      	adds	r3, #20
 800e190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	e853 3f00 	ldrex	r3, [r3]
 800e198:	613b      	str	r3, [r7, #16]
   return(result);
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	f023 0301 	bic.w	r3, r3, #1
 800e1a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	3314      	adds	r3, #20
 800e1a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1aa:	623a      	str	r2, [r7, #32]
 800e1ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ae:	69f9      	ldr	r1, [r7, #28]
 800e1b0:	6a3a      	ldr	r2, [r7, #32]
 800e1b2:	e841 2300 	strex	r3, r2, [r1]
 800e1b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d1e5      	bne.n	800e18a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2220      	movs	r2, #32
 800e1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2220      	movs	r2, #32
 800e1ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800e1d6:	2303      	movs	r3, #3
 800e1d8:	e00f      	b.n	800e1fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	4013      	ands	r3, r2
 800e1e4:	68ba      	ldr	r2, [r7, #8]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	bf0c      	ite	eq
 800e1ea:	2301      	moveq	r3, #1
 800e1ec:	2300      	movne	r3, #0
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	79fb      	ldrb	r3, [r7, #7]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d09f      	beq.n	800e138 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e1f8:	2300      	movs	r3, #0
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3740      	adds	r7, #64	; 0x40
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
	...

0800e204 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b098      	sub	sp, #96	; 0x60
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	4613      	mov	r3, r2
 800e210:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	88fa      	ldrh	r2, [r7, #6]
 800e21c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2200      	movs	r2, #0
 800e222:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2222      	movs	r2, #34	; 0x22
 800e228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e230:	4a3e      	ldr	r2, [pc, #248]	; (800e32c <UART_Start_Receive_DMA+0x128>)
 800e232:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e238:	4a3d      	ldr	r2, [pc, #244]	; (800e330 <UART_Start_Receive_DMA+0x12c>)
 800e23a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e240:	4a3c      	ldr	r2, [pc, #240]	; (800e334 <UART_Start_Receive_DMA+0x130>)
 800e242:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e248:	2200      	movs	r2, #0
 800e24a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e24c:	f107 0308 	add.w	r3, r7, #8
 800e250:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	3304      	adds	r3, #4
 800e25c:	4619      	mov	r1, r3
 800e25e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	88fb      	ldrh	r3, [r7, #6]
 800e264:	f7fb fed4 	bl	800a010 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e268:	2300      	movs	r3, #0
 800e26a:	613b      	str	r3, [r7, #16]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	613b      	str	r3, [r7, #16]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	613b      	str	r3, [r7, #16]
 800e27c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d019      	beq.n	800e2ba <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	330c      	adds	r3, #12
 800e28c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e290:	e853 3f00 	ldrex	r3, [r3]
 800e294:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e29c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	330c      	adds	r3, #12
 800e2a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e2a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e2ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2ae:	e841 2300 	strex	r3, r2, [r1]
 800e2b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1e5      	bne.n	800e286 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	3314      	adds	r3, #20
 800e2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c4:	e853 3f00 	ldrex	r3, [r3]
 800e2c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2cc:	f043 0301 	orr.w	r3, r3, #1
 800e2d0:	657b      	str	r3, [r7, #84]	; 0x54
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	3314      	adds	r3, #20
 800e2d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2da:	63ba      	str	r2, [r7, #56]	; 0x38
 800e2dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e2e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2e2:	e841 2300 	strex	r3, r2, [r1]
 800e2e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1e5      	bne.n	800e2ba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	3314      	adds	r3, #20
 800e2f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	e853 3f00 	ldrex	r3, [r3]
 800e2fc:	617b      	str	r3, [r7, #20]
   return(result);
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e304:	653b      	str	r3, [r7, #80]	; 0x50
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	3314      	adds	r3, #20
 800e30c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e30e:	627a      	str	r2, [r7, #36]	; 0x24
 800e310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e312:	6a39      	ldr	r1, [r7, #32]
 800e314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e316:	e841 2300 	strex	r3, r2, [r1]
 800e31a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d1e5      	bne.n	800e2ee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3760      	adds	r7, #96	; 0x60
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	0800df2b 	.word	0x0800df2b
 800e330:	0800e057 	.word	0x0800e057
 800e334:	0800e093 	.word	0x0800e093

0800e338 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e338:	b480      	push	{r7}
 800e33a:	b089      	sub	sp, #36	; 0x24
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	330c      	adds	r3, #12
 800e346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	e853 3f00 	ldrex	r3, [r3]
 800e34e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e356:	61fb      	str	r3, [r7, #28]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	330c      	adds	r3, #12
 800e35e:	69fa      	ldr	r2, [r7, #28]
 800e360:	61ba      	str	r2, [r7, #24]
 800e362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e364:	6979      	ldr	r1, [r7, #20]
 800e366:	69ba      	ldr	r2, [r7, #24]
 800e368:	e841 2300 	strex	r3, r2, [r1]
 800e36c:	613b      	str	r3, [r7, #16]
   return(result);
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d1e5      	bne.n	800e340 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2220      	movs	r2, #32
 800e378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800e37c:	bf00      	nop
 800e37e:	3724      	adds	r7, #36	; 0x24
 800e380:	46bd      	mov	sp, r7
 800e382:	bc80      	pop	{r7}
 800e384:	4770      	bx	lr

0800e386 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e386:	b480      	push	{r7}
 800e388:	b095      	sub	sp, #84	; 0x54
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	330c      	adds	r3, #12
 800e394:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e398:	e853 3f00 	ldrex	r3, [r3]
 800e39c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e3a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	330c      	adds	r3, #12
 800e3ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3ae:	643a      	str	r2, [r7, #64]	; 0x40
 800e3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e3b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3b6:	e841 2300 	strex	r3, r2, [r1]
 800e3ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1e5      	bne.n	800e38e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	3314      	adds	r3, #20
 800e3c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ca:	6a3b      	ldr	r3, [r7, #32]
 800e3cc:	e853 3f00 	ldrex	r3, [r3]
 800e3d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	f023 0301 	bic.w	r3, r3, #1
 800e3d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	3314      	adds	r3, #20
 800e3e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e3e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3ea:	e841 2300 	strex	r3, r2, [r1]
 800e3ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1e5      	bne.n	800e3c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d119      	bne.n	800e432 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	330c      	adds	r3, #12
 800e404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	e853 3f00 	ldrex	r3, [r3]
 800e40c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	f023 0310 	bic.w	r3, r3, #16
 800e414:	647b      	str	r3, [r7, #68]	; 0x44
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	330c      	adds	r3, #12
 800e41c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e41e:	61ba      	str	r2, [r7, #24]
 800e420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e422:	6979      	ldr	r1, [r7, #20]
 800e424:	69ba      	ldr	r2, [r7, #24]
 800e426:	e841 2300 	strex	r3, r2, [r1]
 800e42a:	613b      	str	r3, [r7, #16]
   return(result);
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1e5      	bne.n	800e3fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2220      	movs	r2, #32
 800e436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e440:	bf00      	nop
 800e442:	3754      	adds	r7, #84	; 0x54
 800e444:	46bd      	mov	sp, r7
 800e446:	bc80      	pop	{r7}
 800e448:	4770      	bx	lr

0800e44a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b084      	sub	sp, #16
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2200      	movs	r2, #0
 800e462:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f7f4 fe7d 	bl	8003164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e46a:	bf00      	nop
 800e46c:	3710      	adds	r7, #16
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}

0800e472 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e472:	b480      	push	{r7}
 800e474:	b085      	sub	sp, #20
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e480:	b2db      	uxtb	r3, r3
 800e482:	2b21      	cmp	r3, #33	; 0x21
 800e484:	d13e      	bne.n	800e504 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e48e:	d114      	bne.n	800e4ba <UART_Transmit_IT+0x48>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d110      	bne.n	800e4ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6a1b      	ldr	r3, [r3, #32]
 800e49c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	881b      	ldrh	r3, [r3, #0]
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6a1b      	ldr	r3, [r3, #32]
 800e4b2:	1c9a      	adds	r2, r3, #2
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	621a      	str	r2, [r3, #32]
 800e4b8:	e008      	b.n	800e4cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a1b      	ldr	r3, [r3, #32]
 800e4be:	1c59      	adds	r1, r3, #1
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	6211      	str	r1, [r2, #32]
 800e4c4:	781a      	ldrb	r2, [r3, #0]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	4619      	mov	r1, r3
 800e4da:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d10f      	bne.n	800e500 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	68da      	ldr	r2, [r3, #12]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e4ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	68da      	ldr	r2, [r3, #12]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e500:	2300      	movs	r3, #0
 800e502:	e000      	b.n	800e506 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e504:	2302      	movs	r3, #2
  }
}
 800e506:	4618      	mov	r0, r3
 800e508:	3714      	adds	r7, #20
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bc80      	pop	{r7}
 800e50e:	4770      	bx	lr

0800e510 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68da      	ldr	r2, [r3, #12]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e526:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2220      	movs	r2, #32
 800e52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7ff fcdd 	bl	800def0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e536:	2300      	movs	r3, #0
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3708      	adds	r7, #8
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b08c      	sub	sp, #48	; 0x30
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	2b22      	cmp	r3, #34	; 0x22
 800e552:	f040 80ae 	bne.w	800e6b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e55e:	d117      	bne.n	800e590 <UART_Receive_IT+0x50>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	691b      	ldr	r3, [r3, #16]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d113      	bne.n	800e590 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e568:	2300      	movs	r3, #0
 800e56a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e570:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e57e:	b29a      	uxth	r2, r3
 800e580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e582:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e588:	1c9a      	adds	r2, r3, #2
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	629a      	str	r2, [r3, #40]	; 0x28
 800e58e:	e026      	b.n	800e5de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e594:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800e596:	2300      	movs	r3, #0
 800e598:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5a2:	d007      	beq.n	800e5b4 <UART_Receive_IT+0x74>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d10a      	bne.n	800e5c2 <UART_Receive_IT+0x82>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d106      	bne.n	800e5c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	b2da      	uxtb	r2, r3
 800e5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5be:	701a      	strb	r2, [r3, #0]
 800e5c0:	e008      	b.n	800e5d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5ce:	b2da      	uxtb	r2, r3
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d8:	1c5a      	adds	r2, r3, #1
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d15d      	bne.n	800e6ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	68da      	ldr	r2, [r3, #12]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f022 0220 	bic.w	r2, r2, #32
 800e600:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68da      	ldr	r2, [r3, #12]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e610:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	695a      	ldr	r2, [r3, #20]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f022 0201 	bic.w	r2, r2, #1
 800e620:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2220      	movs	r2, #32
 800e626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e634:	2b01      	cmp	r3, #1
 800e636:	d135      	bne.n	800e6a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	330c      	adds	r3, #12
 800e644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	e853 3f00 	ldrex	r3, [r3]
 800e64c:	613b      	str	r3, [r7, #16]
   return(result);
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	f023 0310 	bic.w	r3, r3, #16
 800e654:	627b      	str	r3, [r7, #36]	; 0x24
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	330c      	adds	r3, #12
 800e65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e65e:	623a      	str	r2, [r7, #32]
 800e660:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e662:	69f9      	ldr	r1, [r7, #28]
 800e664:	6a3a      	ldr	r2, [r7, #32]
 800e666:	e841 2300 	strex	r3, r2, [r1]
 800e66a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d1e5      	bne.n	800e63e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f003 0310 	and.w	r3, r3, #16
 800e67c:	2b10      	cmp	r3, #16
 800e67e:	d10a      	bne.n	800e696 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e680:	2300      	movs	r3, #0
 800e682:	60fb      	str	r3, [r7, #12]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	60fb      	str	r3, [r7, #12]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	60fb      	str	r3, [r7, #12]
 800e694:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e69a:	4619      	mov	r1, r3
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7ff fc39 	bl	800df14 <HAL_UARTEx_RxEventCallback>
 800e6a2:	e002      	b.n	800e6aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7f4 fd66 	bl	8003176 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	e002      	b.n	800e6b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	e000      	b.n	800e6b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e6b2:	2302      	movs	r3, #2
  }
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3730      	adds	r7, #48	; 0x30
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	691b      	ldr	r3, [r3, #16]
 800e6ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	68da      	ldr	r2, [r3, #12]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	430a      	orrs	r2, r1
 800e6d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	689a      	ldr	r2, [r3, #8]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	691b      	ldr	r3, [r3, #16]
 800e6e2:	431a      	orrs	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	695b      	ldr	r3, [r3, #20]
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800e6f6:	f023 030c 	bic.w	r3, r3, #12
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	6812      	ldr	r2, [r2, #0]
 800e6fe:	68b9      	ldr	r1, [r7, #8]
 800e700:	430b      	orrs	r3, r1
 800e702:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	695b      	ldr	r3, [r3, #20]
 800e70a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	699a      	ldr	r2, [r3, #24]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	430a      	orrs	r2, r1
 800e718:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4a2c      	ldr	r2, [pc, #176]	; (800e7d0 <UART_SetConfig+0x114>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d103      	bne.n	800e72c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800e724:	f7fd ff62 	bl	800c5ec <HAL_RCC_GetPCLK2Freq>
 800e728:	60f8      	str	r0, [r7, #12]
 800e72a:	e002      	b.n	800e732 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800e72c:	f7fd ff4a 	bl	800c5c4 <HAL_RCC_GetPCLK1Freq>
 800e730:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e732:	68fa      	ldr	r2, [r7, #12]
 800e734:	4613      	mov	r3, r2
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	4413      	add	r3, r2
 800e73a:	009a      	lsls	r2, r3, #2
 800e73c:	441a      	add	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	fbb2 f3f3 	udiv	r3, r2, r3
 800e748:	4a22      	ldr	r2, [pc, #136]	; (800e7d4 <UART_SetConfig+0x118>)
 800e74a:	fba2 2303 	umull	r2, r3, r2, r3
 800e74e:	095b      	lsrs	r3, r3, #5
 800e750:	0119      	lsls	r1, r3, #4
 800e752:	68fa      	ldr	r2, [r7, #12]
 800e754:	4613      	mov	r3, r2
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	4413      	add	r3, r2
 800e75a:	009a      	lsls	r2, r3, #2
 800e75c:	441a      	add	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	fbb2 f2f3 	udiv	r2, r2, r3
 800e768:	4b1a      	ldr	r3, [pc, #104]	; (800e7d4 <UART_SetConfig+0x118>)
 800e76a:	fba3 0302 	umull	r0, r3, r3, r2
 800e76e:	095b      	lsrs	r3, r3, #5
 800e770:	2064      	movs	r0, #100	; 0x64
 800e772:	fb00 f303 	mul.w	r3, r0, r3
 800e776:	1ad3      	subs	r3, r2, r3
 800e778:	011b      	lsls	r3, r3, #4
 800e77a:	3332      	adds	r3, #50	; 0x32
 800e77c:	4a15      	ldr	r2, [pc, #84]	; (800e7d4 <UART_SetConfig+0x118>)
 800e77e:	fba2 2303 	umull	r2, r3, r2, r3
 800e782:	095b      	lsrs	r3, r3, #5
 800e784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e788:	4419      	add	r1, r3
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	4613      	mov	r3, r2
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	4413      	add	r3, r2
 800e792:	009a      	lsls	r2, r3, #2
 800e794:	441a      	add	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	009b      	lsls	r3, r3, #2
 800e79c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e7a0:	4b0c      	ldr	r3, [pc, #48]	; (800e7d4 <UART_SetConfig+0x118>)
 800e7a2:	fba3 0302 	umull	r0, r3, r3, r2
 800e7a6:	095b      	lsrs	r3, r3, #5
 800e7a8:	2064      	movs	r0, #100	; 0x64
 800e7aa:	fb00 f303 	mul.w	r3, r0, r3
 800e7ae:	1ad3      	subs	r3, r2, r3
 800e7b0:	011b      	lsls	r3, r3, #4
 800e7b2:	3332      	adds	r3, #50	; 0x32
 800e7b4:	4a07      	ldr	r2, [pc, #28]	; (800e7d4 <UART_SetConfig+0x118>)
 800e7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e7ba:	095b      	lsrs	r3, r3, #5
 800e7bc:	f003 020f 	and.w	r2, r3, #15
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	440a      	add	r2, r1
 800e7c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800e7c8:	bf00      	nop
 800e7ca:	3710      	adds	r7, #16
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	40013800 	.word	0x40013800
 800e7d4:	51eb851f 	.word	0x51eb851f

0800e7d8 <__errno>:
 800e7d8:	4b01      	ldr	r3, [pc, #4]	; (800e7e0 <__errno+0x8>)
 800e7da:	6818      	ldr	r0, [r3, #0]
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop
 800e7e0:	20000050 	.word	0x20000050

0800e7e4 <__libc_init_array>:
 800e7e4:	b570      	push	{r4, r5, r6, lr}
 800e7e6:	2600      	movs	r6, #0
 800e7e8:	4d0c      	ldr	r5, [pc, #48]	; (800e81c <__libc_init_array+0x38>)
 800e7ea:	4c0d      	ldr	r4, [pc, #52]	; (800e820 <__libc_init_array+0x3c>)
 800e7ec:	1b64      	subs	r4, r4, r5
 800e7ee:	10a4      	asrs	r4, r4, #2
 800e7f0:	42a6      	cmp	r6, r4
 800e7f2:	d109      	bne.n	800e808 <__libc_init_array+0x24>
 800e7f4:	f003 f9b0 	bl	8011b58 <_init>
 800e7f8:	2600      	movs	r6, #0
 800e7fa:	4d0a      	ldr	r5, [pc, #40]	; (800e824 <__libc_init_array+0x40>)
 800e7fc:	4c0a      	ldr	r4, [pc, #40]	; (800e828 <__libc_init_array+0x44>)
 800e7fe:	1b64      	subs	r4, r4, r5
 800e800:	10a4      	asrs	r4, r4, #2
 800e802:	42a6      	cmp	r6, r4
 800e804:	d105      	bne.n	800e812 <__libc_init_array+0x2e>
 800e806:	bd70      	pop	{r4, r5, r6, pc}
 800e808:	f855 3b04 	ldr.w	r3, [r5], #4
 800e80c:	4798      	blx	r3
 800e80e:	3601      	adds	r6, #1
 800e810:	e7ee      	b.n	800e7f0 <__libc_init_array+0xc>
 800e812:	f855 3b04 	ldr.w	r3, [r5], #4
 800e816:	4798      	blx	r3
 800e818:	3601      	adds	r6, #1
 800e81a:	e7f2      	b.n	800e802 <__libc_init_array+0x1e>
 800e81c:	0801325c 	.word	0x0801325c
 800e820:	0801325c 	.word	0x0801325c
 800e824:	0801325c 	.word	0x0801325c
 800e828:	08013260 	.word	0x08013260

0800e82c <memcpy>:
 800e82c:	440a      	add	r2, r1
 800e82e:	4291      	cmp	r1, r2
 800e830:	f100 33ff 	add.w	r3, r0, #4294967295
 800e834:	d100      	bne.n	800e838 <memcpy+0xc>
 800e836:	4770      	bx	lr
 800e838:	b510      	push	{r4, lr}
 800e83a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e83e:	4291      	cmp	r1, r2
 800e840:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e844:	d1f9      	bne.n	800e83a <memcpy+0xe>
 800e846:	bd10      	pop	{r4, pc}

0800e848 <memset>:
 800e848:	4603      	mov	r3, r0
 800e84a:	4402      	add	r2, r0
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d100      	bne.n	800e852 <memset+0xa>
 800e850:	4770      	bx	lr
 800e852:	f803 1b01 	strb.w	r1, [r3], #1
 800e856:	e7f9      	b.n	800e84c <memset+0x4>

0800e858 <iprintf>:
 800e858:	b40f      	push	{r0, r1, r2, r3}
 800e85a:	4b0a      	ldr	r3, [pc, #40]	; (800e884 <iprintf+0x2c>)
 800e85c:	b513      	push	{r0, r1, r4, lr}
 800e85e:	681c      	ldr	r4, [r3, #0]
 800e860:	b124      	cbz	r4, 800e86c <iprintf+0x14>
 800e862:	69a3      	ldr	r3, [r4, #24]
 800e864:	b913      	cbnz	r3, 800e86c <iprintf+0x14>
 800e866:	4620      	mov	r0, r4
 800e868:	f000 ffae 	bl	800f7c8 <__sinit>
 800e86c:	ab05      	add	r3, sp, #20
 800e86e:	4620      	mov	r0, r4
 800e870:	9a04      	ldr	r2, [sp, #16]
 800e872:	68a1      	ldr	r1, [r4, #8]
 800e874:	9301      	str	r3, [sp, #4]
 800e876:	f002 faa5 	bl	8010dc4 <_vfiprintf_r>
 800e87a:	b002      	add	sp, #8
 800e87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e880:	b004      	add	sp, #16
 800e882:	4770      	bx	lr
 800e884:	20000050 	.word	0x20000050

0800e888 <strcpy>:
 800e888:	4603      	mov	r3, r0
 800e88a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e88e:	f803 2b01 	strb.w	r2, [r3], #1
 800e892:	2a00      	cmp	r2, #0
 800e894:	d1f9      	bne.n	800e88a <strcpy+0x2>
 800e896:	4770      	bx	lr

0800e898 <sulp>:
 800e898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e89c:	460f      	mov	r7, r1
 800e89e:	4690      	mov	r8, r2
 800e8a0:	f001 ff1c 	bl	80106dc <__ulp>
 800e8a4:	4604      	mov	r4, r0
 800e8a6:	460d      	mov	r5, r1
 800e8a8:	f1b8 0f00 	cmp.w	r8, #0
 800e8ac:	d011      	beq.n	800e8d2 <sulp+0x3a>
 800e8ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800e8b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	dd0b      	ble.n	800e8d2 <sulp+0x3a>
 800e8ba:	2400      	movs	r4, #0
 800e8bc:	051b      	lsls	r3, r3, #20
 800e8be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e8c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e8c6:	4622      	mov	r2, r4
 800e8c8:	462b      	mov	r3, r5
 800e8ca:	f7f1 fe7b 	bl	80005c4 <__aeabi_dmul>
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	460d      	mov	r5, r1
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	4629      	mov	r1, r5
 800e8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8da:	0000      	movs	r0, r0
 800e8dc:	0000      	movs	r0, r0
	...

0800e8e0 <_strtod_l>:
 800e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e4:	469b      	mov	fp, r3
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	b09f      	sub	sp, #124	; 0x7c
 800e8ea:	931a      	str	r3, [sp, #104]	; 0x68
 800e8ec:	4b9e      	ldr	r3, [pc, #632]	; (800eb68 <_strtod_l+0x288>)
 800e8ee:	4682      	mov	sl, r0
 800e8f0:	681f      	ldr	r7, [r3, #0]
 800e8f2:	460e      	mov	r6, r1
 800e8f4:	4638      	mov	r0, r7
 800e8f6:	9215      	str	r2, [sp, #84]	; 0x54
 800e8f8:	f7f1 fca0 	bl	800023c <strlen>
 800e8fc:	f04f 0800 	mov.w	r8, #0
 800e900:	4604      	mov	r4, r0
 800e902:	f04f 0900 	mov.w	r9, #0
 800e906:	9619      	str	r6, [sp, #100]	; 0x64
 800e908:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e90a:	781a      	ldrb	r2, [r3, #0]
 800e90c:	2a2b      	cmp	r2, #43	; 0x2b
 800e90e:	d04c      	beq.n	800e9aa <_strtod_l+0xca>
 800e910:	d83a      	bhi.n	800e988 <_strtod_l+0xa8>
 800e912:	2a0d      	cmp	r2, #13
 800e914:	d833      	bhi.n	800e97e <_strtod_l+0x9e>
 800e916:	2a08      	cmp	r2, #8
 800e918:	d833      	bhi.n	800e982 <_strtod_l+0xa2>
 800e91a:	2a00      	cmp	r2, #0
 800e91c:	d03d      	beq.n	800e99a <_strtod_l+0xba>
 800e91e:	2300      	movs	r3, #0
 800e920:	930a      	str	r3, [sp, #40]	; 0x28
 800e922:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800e924:	782b      	ldrb	r3, [r5, #0]
 800e926:	2b30      	cmp	r3, #48	; 0x30
 800e928:	f040 80aa 	bne.w	800ea80 <_strtod_l+0x1a0>
 800e92c:	786b      	ldrb	r3, [r5, #1]
 800e92e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e932:	2b58      	cmp	r3, #88	; 0x58
 800e934:	d166      	bne.n	800ea04 <_strtod_l+0x124>
 800e936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e938:	4650      	mov	r0, sl
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	ab1a      	add	r3, sp, #104	; 0x68
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	4a8a      	ldr	r2, [pc, #552]	; (800eb6c <_strtod_l+0x28c>)
 800e942:	f8cd b008 	str.w	fp, [sp, #8]
 800e946:	ab1b      	add	r3, sp, #108	; 0x6c
 800e948:	a919      	add	r1, sp, #100	; 0x64
 800e94a:	f001 f843 	bl	800f9d4 <__gethex>
 800e94e:	f010 0607 	ands.w	r6, r0, #7
 800e952:	4604      	mov	r4, r0
 800e954:	d005      	beq.n	800e962 <_strtod_l+0x82>
 800e956:	2e06      	cmp	r6, #6
 800e958:	d129      	bne.n	800e9ae <_strtod_l+0xce>
 800e95a:	2300      	movs	r3, #0
 800e95c:	3501      	adds	r5, #1
 800e95e:	9519      	str	r5, [sp, #100]	; 0x64
 800e960:	930a      	str	r3, [sp, #40]	; 0x28
 800e962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e964:	2b00      	cmp	r3, #0
 800e966:	f040 858a 	bne.w	800f47e <_strtod_l+0xb9e>
 800e96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e96c:	b1d3      	cbz	r3, 800e9a4 <_strtod_l+0xc4>
 800e96e:	4642      	mov	r2, r8
 800e970:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e974:	4610      	mov	r0, r2
 800e976:	4619      	mov	r1, r3
 800e978:	b01f      	add	sp, #124	; 0x7c
 800e97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e97e:	2a20      	cmp	r2, #32
 800e980:	d1cd      	bne.n	800e91e <_strtod_l+0x3e>
 800e982:	3301      	adds	r3, #1
 800e984:	9319      	str	r3, [sp, #100]	; 0x64
 800e986:	e7bf      	b.n	800e908 <_strtod_l+0x28>
 800e988:	2a2d      	cmp	r2, #45	; 0x2d
 800e98a:	d1c8      	bne.n	800e91e <_strtod_l+0x3e>
 800e98c:	2201      	movs	r2, #1
 800e98e:	920a      	str	r2, [sp, #40]	; 0x28
 800e990:	1c5a      	adds	r2, r3, #1
 800e992:	9219      	str	r2, [sp, #100]	; 0x64
 800e994:	785b      	ldrb	r3, [r3, #1]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d1c3      	bne.n	800e922 <_strtod_l+0x42>
 800e99a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e99c:	9619      	str	r6, [sp, #100]	; 0x64
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f040 856b 	bne.w	800f47a <_strtod_l+0xb9a>
 800e9a4:	4642      	mov	r2, r8
 800e9a6:	464b      	mov	r3, r9
 800e9a8:	e7e4      	b.n	800e974 <_strtod_l+0x94>
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	e7ef      	b.n	800e98e <_strtod_l+0xae>
 800e9ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e9b0:	b13a      	cbz	r2, 800e9c2 <_strtod_l+0xe2>
 800e9b2:	2135      	movs	r1, #53	; 0x35
 800e9b4:	a81c      	add	r0, sp, #112	; 0x70
 800e9b6:	f001 ff95 	bl	80108e4 <__copybits>
 800e9ba:	4650      	mov	r0, sl
 800e9bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e9be:	f001 fb5d 	bl	801007c <_Bfree>
 800e9c2:	3e01      	subs	r6, #1
 800e9c4:	2e04      	cmp	r6, #4
 800e9c6:	d806      	bhi.n	800e9d6 <_strtod_l+0xf6>
 800e9c8:	e8df f006 	tbb	[pc, r6]
 800e9cc:	1714030a 	.word	0x1714030a
 800e9d0:	0a          	.byte	0x0a
 800e9d1:	00          	.byte	0x00
 800e9d2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800e9d6:	0721      	lsls	r1, r4, #28
 800e9d8:	d5c3      	bpl.n	800e962 <_strtod_l+0x82>
 800e9da:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e9de:	e7c0      	b.n	800e962 <_strtod_l+0x82>
 800e9e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e9e2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800e9e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e9ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e9ee:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e9f2:	e7f0      	b.n	800e9d6 <_strtod_l+0xf6>
 800e9f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800eb70 <_strtod_l+0x290>
 800e9f8:	e7ed      	b.n	800e9d6 <_strtod_l+0xf6>
 800e9fa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e9fe:	f04f 38ff 	mov.w	r8, #4294967295
 800ea02:	e7e8      	b.n	800e9d6 <_strtod_l+0xf6>
 800ea04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea06:	1c5a      	adds	r2, r3, #1
 800ea08:	9219      	str	r2, [sp, #100]	; 0x64
 800ea0a:	785b      	ldrb	r3, [r3, #1]
 800ea0c:	2b30      	cmp	r3, #48	; 0x30
 800ea0e:	d0f9      	beq.n	800ea04 <_strtod_l+0x124>
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d0a6      	beq.n	800e962 <_strtod_l+0x82>
 800ea14:	2301      	movs	r3, #1
 800ea16:	9307      	str	r3, [sp, #28]
 800ea18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea1a:	220a      	movs	r2, #10
 800ea1c:	9308      	str	r3, [sp, #32]
 800ea1e:	2300      	movs	r3, #0
 800ea20:	469b      	mov	fp, r3
 800ea22:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ea26:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ea28:	7805      	ldrb	r5, [r0, #0]
 800ea2a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ea2e:	b2d9      	uxtb	r1, r3
 800ea30:	2909      	cmp	r1, #9
 800ea32:	d927      	bls.n	800ea84 <_strtod_l+0x1a4>
 800ea34:	4622      	mov	r2, r4
 800ea36:	4639      	mov	r1, r7
 800ea38:	f002 fce7 	bl	801140a <strncmp>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	d033      	beq.n	800eaa8 <_strtod_l+0x1c8>
 800ea40:	2000      	movs	r0, #0
 800ea42:	462a      	mov	r2, r5
 800ea44:	465c      	mov	r4, fp
 800ea46:	4603      	mov	r3, r0
 800ea48:	9004      	str	r0, [sp, #16]
 800ea4a:	2a65      	cmp	r2, #101	; 0x65
 800ea4c:	d001      	beq.n	800ea52 <_strtod_l+0x172>
 800ea4e:	2a45      	cmp	r2, #69	; 0x45
 800ea50:	d114      	bne.n	800ea7c <_strtod_l+0x19c>
 800ea52:	b91c      	cbnz	r4, 800ea5c <_strtod_l+0x17c>
 800ea54:	9a07      	ldr	r2, [sp, #28]
 800ea56:	4302      	orrs	r2, r0
 800ea58:	d09f      	beq.n	800e99a <_strtod_l+0xba>
 800ea5a:	2400      	movs	r4, #0
 800ea5c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ea5e:	1c72      	adds	r2, r6, #1
 800ea60:	9219      	str	r2, [sp, #100]	; 0x64
 800ea62:	7872      	ldrb	r2, [r6, #1]
 800ea64:	2a2b      	cmp	r2, #43	; 0x2b
 800ea66:	d079      	beq.n	800eb5c <_strtod_l+0x27c>
 800ea68:	2a2d      	cmp	r2, #45	; 0x2d
 800ea6a:	f000 8083 	beq.w	800eb74 <_strtod_l+0x294>
 800ea6e:	2700      	movs	r7, #0
 800ea70:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ea74:	2909      	cmp	r1, #9
 800ea76:	f240 8083 	bls.w	800eb80 <_strtod_l+0x2a0>
 800ea7a:	9619      	str	r6, [sp, #100]	; 0x64
 800ea7c:	2500      	movs	r5, #0
 800ea7e:	e09f      	b.n	800ebc0 <_strtod_l+0x2e0>
 800ea80:	2300      	movs	r3, #0
 800ea82:	e7c8      	b.n	800ea16 <_strtod_l+0x136>
 800ea84:	f1bb 0f08 	cmp.w	fp, #8
 800ea88:	bfd5      	itete	le
 800ea8a:	9906      	ldrle	r1, [sp, #24]
 800ea8c:	9905      	ldrgt	r1, [sp, #20]
 800ea8e:	fb02 3301 	mlale	r3, r2, r1, r3
 800ea92:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ea96:	f100 0001 	add.w	r0, r0, #1
 800ea9a:	bfd4      	ite	le
 800ea9c:	9306      	strle	r3, [sp, #24]
 800ea9e:	9305      	strgt	r3, [sp, #20]
 800eaa0:	f10b 0b01 	add.w	fp, fp, #1
 800eaa4:	9019      	str	r0, [sp, #100]	; 0x64
 800eaa6:	e7be      	b.n	800ea26 <_strtod_l+0x146>
 800eaa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eaaa:	191a      	adds	r2, r3, r4
 800eaac:	9219      	str	r2, [sp, #100]	; 0x64
 800eaae:	5d1a      	ldrb	r2, [r3, r4]
 800eab0:	f1bb 0f00 	cmp.w	fp, #0
 800eab4:	d036      	beq.n	800eb24 <_strtod_l+0x244>
 800eab6:	465c      	mov	r4, fp
 800eab8:	9004      	str	r0, [sp, #16]
 800eaba:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800eabe:	2b09      	cmp	r3, #9
 800eac0:	d912      	bls.n	800eae8 <_strtod_l+0x208>
 800eac2:	2301      	movs	r3, #1
 800eac4:	e7c1      	b.n	800ea4a <_strtod_l+0x16a>
 800eac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eac8:	3001      	adds	r0, #1
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	9219      	str	r2, [sp, #100]	; 0x64
 800eace:	785a      	ldrb	r2, [r3, #1]
 800ead0:	2a30      	cmp	r2, #48	; 0x30
 800ead2:	d0f8      	beq.n	800eac6 <_strtod_l+0x1e6>
 800ead4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ead8:	2b08      	cmp	r3, #8
 800eada:	f200 84d5 	bhi.w	800f488 <_strtod_l+0xba8>
 800eade:	9004      	str	r0, [sp, #16]
 800eae0:	2000      	movs	r0, #0
 800eae2:	4604      	mov	r4, r0
 800eae4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eae6:	9308      	str	r3, [sp, #32]
 800eae8:	3a30      	subs	r2, #48	; 0x30
 800eaea:	f100 0301 	add.w	r3, r0, #1
 800eaee:	d013      	beq.n	800eb18 <_strtod_l+0x238>
 800eaf0:	9904      	ldr	r1, [sp, #16]
 800eaf2:	1905      	adds	r5, r0, r4
 800eaf4:	4419      	add	r1, r3
 800eaf6:	9104      	str	r1, [sp, #16]
 800eaf8:	4623      	mov	r3, r4
 800eafa:	210a      	movs	r1, #10
 800eafc:	42ab      	cmp	r3, r5
 800eafe:	d113      	bne.n	800eb28 <_strtod_l+0x248>
 800eb00:	1823      	adds	r3, r4, r0
 800eb02:	2b08      	cmp	r3, #8
 800eb04:	f104 0401 	add.w	r4, r4, #1
 800eb08:	4404      	add	r4, r0
 800eb0a:	dc1b      	bgt.n	800eb44 <_strtod_l+0x264>
 800eb0c:	230a      	movs	r3, #10
 800eb0e:	9906      	ldr	r1, [sp, #24]
 800eb10:	fb03 2301 	mla	r3, r3, r1, r2
 800eb14:	9306      	str	r3, [sp, #24]
 800eb16:	2300      	movs	r3, #0
 800eb18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	1c51      	adds	r1, r2, #1
 800eb1e:	9119      	str	r1, [sp, #100]	; 0x64
 800eb20:	7852      	ldrb	r2, [r2, #1]
 800eb22:	e7ca      	b.n	800eaba <_strtod_l+0x1da>
 800eb24:	4658      	mov	r0, fp
 800eb26:	e7d3      	b.n	800ead0 <_strtod_l+0x1f0>
 800eb28:	2b08      	cmp	r3, #8
 800eb2a:	dc04      	bgt.n	800eb36 <_strtod_l+0x256>
 800eb2c:	9f06      	ldr	r7, [sp, #24]
 800eb2e:	434f      	muls	r7, r1
 800eb30:	9706      	str	r7, [sp, #24]
 800eb32:	3301      	adds	r3, #1
 800eb34:	e7e2      	b.n	800eafc <_strtod_l+0x21c>
 800eb36:	1c5f      	adds	r7, r3, #1
 800eb38:	2f10      	cmp	r7, #16
 800eb3a:	bfde      	ittt	le
 800eb3c:	9f05      	ldrle	r7, [sp, #20]
 800eb3e:	434f      	mulle	r7, r1
 800eb40:	9705      	strle	r7, [sp, #20]
 800eb42:	e7f6      	b.n	800eb32 <_strtod_l+0x252>
 800eb44:	2c10      	cmp	r4, #16
 800eb46:	bfdf      	itttt	le
 800eb48:	230a      	movle	r3, #10
 800eb4a:	9905      	ldrle	r1, [sp, #20]
 800eb4c:	fb03 2301 	mlale	r3, r3, r1, r2
 800eb50:	9305      	strle	r3, [sp, #20]
 800eb52:	e7e0      	b.n	800eb16 <_strtod_l+0x236>
 800eb54:	2300      	movs	r3, #0
 800eb56:	9304      	str	r3, [sp, #16]
 800eb58:	2301      	movs	r3, #1
 800eb5a:	e77b      	b.n	800ea54 <_strtod_l+0x174>
 800eb5c:	2700      	movs	r7, #0
 800eb5e:	1cb2      	adds	r2, r6, #2
 800eb60:	9219      	str	r2, [sp, #100]	; 0x64
 800eb62:	78b2      	ldrb	r2, [r6, #2]
 800eb64:	e784      	b.n	800ea70 <_strtod_l+0x190>
 800eb66:	bf00      	nop
 800eb68:	08013064 	.word	0x08013064
 800eb6c:	08012e34 	.word	0x08012e34
 800eb70:	7ff00000 	.word	0x7ff00000
 800eb74:	2701      	movs	r7, #1
 800eb76:	e7f2      	b.n	800eb5e <_strtod_l+0x27e>
 800eb78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eb7a:	1c51      	adds	r1, r2, #1
 800eb7c:	9119      	str	r1, [sp, #100]	; 0x64
 800eb7e:	7852      	ldrb	r2, [r2, #1]
 800eb80:	2a30      	cmp	r2, #48	; 0x30
 800eb82:	d0f9      	beq.n	800eb78 <_strtod_l+0x298>
 800eb84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800eb88:	2908      	cmp	r1, #8
 800eb8a:	f63f af77 	bhi.w	800ea7c <_strtod_l+0x19c>
 800eb8e:	f04f 0e0a 	mov.w	lr, #10
 800eb92:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800eb96:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eb98:	9209      	str	r2, [sp, #36]	; 0x24
 800eb9a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eb9c:	1c51      	adds	r1, r2, #1
 800eb9e:	9119      	str	r1, [sp, #100]	; 0x64
 800eba0:	7852      	ldrb	r2, [r2, #1]
 800eba2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800eba6:	2d09      	cmp	r5, #9
 800eba8:	d935      	bls.n	800ec16 <_strtod_l+0x336>
 800ebaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ebac:	1b49      	subs	r1, r1, r5
 800ebae:	2908      	cmp	r1, #8
 800ebb0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ebb4:	dc02      	bgt.n	800ebbc <_strtod_l+0x2dc>
 800ebb6:	4565      	cmp	r5, ip
 800ebb8:	bfa8      	it	ge
 800ebba:	4665      	movge	r5, ip
 800ebbc:	b107      	cbz	r7, 800ebc0 <_strtod_l+0x2e0>
 800ebbe:	426d      	negs	r5, r5
 800ebc0:	2c00      	cmp	r4, #0
 800ebc2:	d14c      	bne.n	800ec5e <_strtod_l+0x37e>
 800ebc4:	9907      	ldr	r1, [sp, #28]
 800ebc6:	4301      	orrs	r1, r0
 800ebc8:	f47f aecb 	bne.w	800e962 <_strtod_l+0x82>
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f47f aee4 	bne.w	800e99a <_strtod_l+0xba>
 800ebd2:	2a69      	cmp	r2, #105	; 0x69
 800ebd4:	d026      	beq.n	800ec24 <_strtod_l+0x344>
 800ebd6:	dc23      	bgt.n	800ec20 <_strtod_l+0x340>
 800ebd8:	2a49      	cmp	r2, #73	; 0x49
 800ebda:	d023      	beq.n	800ec24 <_strtod_l+0x344>
 800ebdc:	2a4e      	cmp	r2, #78	; 0x4e
 800ebde:	f47f aedc 	bne.w	800e99a <_strtod_l+0xba>
 800ebe2:	499d      	ldr	r1, [pc, #628]	; (800ee58 <_strtod_l+0x578>)
 800ebe4:	a819      	add	r0, sp, #100	; 0x64
 800ebe6:	f001 f943 	bl	800fe70 <__match>
 800ebea:	2800      	cmp	r0, #0
 800ebec:	f43f aed5 	beq.w	800e99a <_strtod_l+0xba>
 800ebf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	2b28      	cmp	r3, #40	; 0x28
 800ebf6:	d12c      	bne.n	800ec52 <_strtod_l+0x372>
 800ebf8:	4998      	ldr	r1, [pc, #608]	; (800ee5c <_strtod_l+0x57c>)
 800ebfa:	aa1c      	add	r2, sp, #112	; 0x70
 800ebfc:	a819      	add	r0, sp, #100	; 0x64
 800ebfe:	f001 f94b 	bl	800fe98 <__hexnan>
 800ec02:	2805      	cmp	r0, #5
 800ec04:	d125      	bne.n	800ec52 <_strtod_l+0x372>
 800ec06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec08:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ec0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ec10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ec14:	e6a5      	b.n	800e962 <_strtod_l+0x82>
 800ec16:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ec1a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ec1e:	e7bc      	b.n	800eb9a <_strtod_l+0x2ba>
 800ec20:	2a6e      	cmp	r2, #110	; 0x6e
 800ec22:	e7dc      	b.n	800ebde <_strtod_l+0x2fe>
 800ec24:	498e      	ldr	r1, [pc, #568]	; (800ee60 <_strtod_l+0x580>)
 800ec26:	a819      	add	r0, sp, #100	; 0x64
 800ec28:	f001 f922 	bl	800fe70 <__match>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	f43f aeb4 	beq.w	800e99a <_strtod_l+0xba>
 800ec32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec34:	498b      	ldr	r1, [pc, #556]	; (800ee64 <_strtod_l+0x584>)
 800ec36:	3b01      	subs	r3, #1
 800ec38:	a819      	add	r0, sp, #100	; 0x64
 800ec3a:	9319      	str	r3, [sp, #100]	; 0x64
 800ec3c:	f001 f918 	bl	800fe70 <__match>
 800ec40:	b910      	cbnz	r0, 800ec48 <_strtod_l+0x368>
 800ec42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec44:	3301      	adds	r3, #1
 800ec46:	9319      	str	r3, [sp, #100]	; 0x64
 800ec48:	f04f 0800 	mov.w	r8, #0
 800ec4c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800ee68 <_strtod_l+0x588>
 800ec50:	e687      	b.n	800e962 <_strtod_l+0x82>
 800ec52:	4886      	ldr	r0, [pc, #536]	; (800ee6c <_strtod_l+0x58c>)
 800ec54:	f002 fb7c 	bl	8011350 <nan>
 800ec58:	4680      	mov	r8, r0
 800ec5a:	4689      	mov	r9, r1
 800ec5c:	e681      	b.n	800e962 <_strtod_l+0x82>
 800ec5e:	9b04      	ldr	r3, [sp, #16]
 800ec60:	f1bb 0f00 	cmp.w	fp, #0
 800ec64:	bf08      	it	eq
 800ec66:	46a3      	moveq	fp, r4
 800ec68:	1aeb      	subs	r3, r5, r3
 800ec6a:	2c10      	cmp	r4, #16
 800ec6c:	9806      	ldr	r0, [sp, #24]
 800ec6e:	4626      	mov	r6, r4
 800ec70:	9307      	str	r3, [sp, #28]
 800ec72:	bfa8      	it	ge
 800ec74:	2610      	movge	r6, #16
 800ec76:	f7f1 fc2b 	bl	80004d0 <__aeabi_ui2d>
 800ec7a:	2c09      	cmp	r4, #9
 800ec7c:	4680      	mov	r8, r0
 800ec7e:	4689      	mov	r9, r1
 800ec80:	dd13      	ble.n	800ecaa <_strtod_l+0x3ca>
 800ec82:	4b7b      	ldr	r3, [pc, #492]	; (800ee70 <_strtod_l+0x590>)
 800ec84:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ec88:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ec8c:	f7f1 fc9a 	bl	80005c4 <__aeabi_dmul>
 800ec90:	4680      	mov	r8, r0
 800ec92:	9805      	ldr	r0, [sp, #20]
 800ec94:	4689      	mov	r9, r1
 800ec96:	f7f1 fc1b 	bl	80004d0 <__aeabi_ui2d>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	4640      	mov	r0, r8
 800eca0:	4649      	mov	r1, r9
 800eca2:	f7f1 fad9 	bl	8000258 <__adddf3>
 800eca6:	4680      	mov	r8, r0
 800eca8:	4689      	mov	r9, r1
 800ecaa:	2c0f      	cmp	r4, #15
 800ecac:	dc36      	bgt.n	800ed1c <_strtod_l+0x43c>
 800ecae:	9b07      	ldr	r3, [sp, #28]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f43f ae56 	beq.w	800e962 <_strtod_l+0x82>
 800ecb6:	dd22      	ble.n	800ecfe <_strtod_l+0x41e>
 800ecb8:	2b16      	cmp	r3, #22
 800ecba:	dc09      	bgt.n	800ecd0 <_strtod_l+0x3f0>
 800ecbc:	496c      	ldr	r1, [pc, #432]	; (800ee70 <_strtod_l+0x590>)
 800ecbe:	4642      	mov	r2, r8
 800ecc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ecc4:	464b      	mov	r3, r9
 800ecc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecca:	f7f1 fc7b 	bl	80005c4 <__aeabi_dmul>
 800ecce:	e7c3      	b.n	800ec58 <_strtod_l+0x378>
 800ecd0:	9a07      	ldr	r2, [sp, #28]
 800ecd2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	db20      	blt.n	800ed1c <_strtod_l+0x43c>
 800ecda:	4d65      	ldr	r5, [pc, #404]	; (800ee70 <_strtod_l+0x590>)
 800ecdc:	f1c4 040f 	rsb	r4, r4, #15
 800ece0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ece4:	4642      	mov	r2, r8
 800ece6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecea:	464b      	mov	r3, r9
 800ecec:	f7f1 fc6a 	bl	80005c4 <__aeabi_dmul>
 800ecf0:	9b07      	ldr	r3, [sp, #28]
 800ecf2:	1b1c      	subs	r4, r3, r4
 800ecf4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ecf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ecfc:	e7e5      	b.n	800ecca <_strtod_l+0x3ea>
 800ecfe:	9b07      	ldr	r3, [sp, #28]
 800ed00:	3316      	adds	r3, #22
 800ed02:	db0b      	blt.n	800ed1c <_strtod_l+0x43c>
 800ed04:	9b04      	ldr	r3, [sp, #16]
 800ed06:	4640      	mov	r0, r8
 800ed08:	1b5d      	subs	r5, r3, r5
 800ed0a:	4b59      	ldr	r3, [pc, #356]	; (800ee70 <_strtod_l+0x590>)
 800ed0c:	4649      	mov	r1, r9
 800ed0e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ed12:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed16:	f7f1 fd7f 	bl	8000818 <__aeabi_ddiv>
 800ed1a:	e79d      	b.n	800ec58 <_strtod_l+0x378>
 800ed1c:	9b07      	ldr	r3, [sp, #28]
 800ed1e:	1ba6      	subs	r6, r4, r6
 800ed20:	441e      	add	r6, r3
 800ed22:	2e00      	cmp	r6, #0
 800ed24:	dd74      	ble.n	800ee10 <_strtod_l+0x530>
 800ed26:	f016 030f 	ands.w	r3, r6, #15
 800ed2a:	d00a      	beq.n	800ed42 <_strtod_l+0x462>
 800ed2c:	4950      	ldr	r1, [pc, #320]	; (800ee70 <_strtod_l+0x590>)
 800ed2e:	4642      	mov	r2, r8
 800ed30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed38:	464b      	mov	r3, r9
 800ed3a:	f7f1 fc43 	bl	80005c4 <__aeabi_dmul>
 800ed3e:	4680      	mov	r8, r0
 800ed40:	4689      	mov	r9, r1
 800ed42:	f036 060f 	bics.w	r6, r6, #15
 800ed46:	d052      	beq.n	800edee <_strtod_l+0x50e>
 800ed48:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800ed4c:	dd27      	ble.n	800ed9e <_strtod_l+0x4be>
 800ed4e:	f04f 0b00 	mov.w	fp, #0
 800ed52:	f8cd b010 	str.w	fp, [sp, #16]
 800ed56:	f8cd b020 	str.w	fp, [sp, #32]
 800ed5a:	f8cd b018 	str.w	fp, [sp, #24]
 800ed5e:	2322      	movs	r3, #34	; 0x22
 800ed60:	f04f 0800 	mov.w	r8, #0
 800ed64:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800ee68 <_strtod_l+0x588>
 800ed68:	f8ca 3000 	str.w	r3, [sl]
 800ed6c:	9b08      	ldr	r3, [sp, #32]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f43f adf7 	beq.w	800e962 <_strtod_l+0x82>
 800ed74:	4650      	mov	r0, sl
 800ed76:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ed78:	f001 f980 	bl	801007c <_Bfree>
 800ed7c:	4650      	mov	r0, sl
 800ed7e:	9906      	ldr	r1, [sp, #24]
 800ed80:	f001 f97c 	bl	801007c <_Bfree>
 800ed84:	4650      	mov	r0, sl
 800ed86:	9904      	ldr	r1, [sp, #16]
 800ed88:	f001 f978 	bl	801007c <_Bfree>
 800ed8c:	4650      	mov	r0, sl
 800ed8e:	9908      	ldr	r1, [sp, #32]
 800ed90:	f001 f974 	bl	801007c <_Bfree>
 800ed94:	4659      	mov	r1, fp
 800ed96:	4650      	mov	r0, sl
 800ed98:	f001 f970 	bl	801007c <_Bfree>
 800ed9c:	e5e1      	b.n	800e962 <_strtod_l+0x82>
 800ed9e:	4b35      	ldr	r3, [pc, #212]	; (800ee74 <_strtod_l+0x594>)
 800eda0:	4640      	mov	r0, r8
 800eda2:	9305      	str	r3, [sp, #20]
 800eda4:	2300      	movs	r3, #0
 800eda6:	4649      	mov	r1, r9
 800eda8:	461f      	mov	r7, r3
 800edaa:	1136      	asrs	r6, r6, #4
 800edac:	2e01      	cmp	r6, #1
 800edae:	dc21      	bgt.n	800edf4 <_strtod_l+0x514>
 800edb0:	b10b      	cbz	r3, 800edb6 <_strtod_l+0x4d6>
 800edb2:	4680      	mov	r8, r0
 800edb4:	4689      	mov	r9, r1
 800edb6:	4b2f      	ldr	r3, [pc, #188]	; (800ee74 <_strtod_l+0x594>)
 800edb8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800edbc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800edc0:	4642      	mov	r2, r8
 800edc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800edc6:	464b      	mov	r3, r9
 800edc8:	f7f1 fbfc 	bl	80005c4 <__aeabi_dmul>
 800edcc:	4b26      	ldr	r3, [pc, #152]	; (800ee68 <_strtod_l+0x588>)
 800edce:	460a      	mov	r2, r1
 800edd0:	400b      	ands	r3, r1
 800edd2:	4929      	ldr	r1, [pc, #164]	; (800ee78 <_strtod_l+0x598>)
 800edd4:	4680      	mov	r8, r0
 800edd6:	428b      	cmp	r3, r1
 800edd8:	d8b9      	bhi.n	800ed4e <_strtod_l+0x46e>
 800edda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800edde:	428b      	cmp	r3, r1
 800ede0:	bf86      	itte	hi
 800ede2:	f04f 38ff 	movhi.w	r8, #4294967295
 800ede6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800ee7c <_strtod_l+0x59c>
 800edea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800edee:	2300      	movs	r3, #0
 800edf0:	9305      	str	r3, [sp, #20]
 800edf2:	e07f      	b.n	800eef4 <_strtod_l+0x614>
 800edf4:	07f2      	lsls	r2, r6, #31
 800edf6:	d505      	bpl.n	800ee04 <_strtod_l+0x524>
 800edf8:	9b05      	ldr	r3, [sp, #20]
 800edfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfe:	f7f1 fbe1 	bl	80005c4 <__aeabi_dmul>
 800ee02:	2301      	movs	r3, #1
 800ee04:	9a05      	ldr	r2, [sp, #20]
 800ee06:	3701      	adds	r7, #1
 800ee08:	3208      	adds	r2, #8
 800ee0a:	1076      	asrs	r6, r6, #1
 800ee0c:	9205      	str	r2, [sp, #20]
 800ee0e:	e7cd      	b.n	800edac <_strtod_l+0x4cc>
 800ee10:	d0ed      	beq.n	800edee <_strtod_l+0x50e>
 800ee12:	4276      	negs	r6, r6
 800ee14:	f016 020f 	ands.w	r2, r6, #15
 800ee18:	d00a      	beq.n	800ee30 <_strtod_l+0x550>
 800ee1a:	4b15      	ldr	r3, [pc, #84]	; (800ee70 <_strtod_l+0x590>)
 800ee1c:	4640      	mov	r0, r8
 800ee1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee22:	4649      	mov	r1, r9
 800ee24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee28:	f7f1 fcf6 	bl	8000818 <__aeabi_ddiv>
 800ee2c:	4680      	mov	r8, r0
 800ee2e:	4689      	mov	r9, r1
 800ee30:	1136      	asrs	r6, r6, #4
 800ee32:	d0dc      	beq.n	800edee <_strtod_l+0x50e>
 800ee34:	2e1f      	cmp	r6, #31
 800ee36:	dd23      	ble.n	800ee80 <_strtod_l+0x5a0>
 800ee38:	f04f 0b00 	mov.w	fp, #0
 800ee3c:	f8cd b010 	str.w	fp, [sp, #16]
 800ee40:	f8cd b020 	str.w	fp, [sp, #32]
 800ee44:	f8cd b018 	str.w	fp, [sp, #24]
 800ee48:	2322      	movs	r3, #34	; 0x22
 800ee4a:	f04f 0800 	mov.w	r8, #0
 800ee4e:	f04f 0900 	mov.w	r9, #0
 800ee52:	f8ca 3000 	str.w	r3, [sl]
 800ee56:	e789      	b.n	800ed6c <_strtod_l+0x48c>
 800ee58:	08012e31 	.word	0x08012e31
 800ee5c:	08012e48 	.word	0x08012e48
 800ee60:	08012e28 	.word	0x08012e28
 800ee64:	08012e2b 	.word	0x08012e2b
 800ee68:	7ff00000 	.word	0x7ff00000
 800ee6c:	0801325a 	.word	0x0801325a
 800ee70:	08013118 	.word	0x08013118
 800ee74:	080130f0 	.word	0x080130f0
 800ee78:	7ca00000 	.word	0x7ca00000
 800ee7c:	7fefffff 	.word	0x7fefffff
 800ee80:	f016 0310 	ands.w	r3, r6, #16
 800ee84:	bf18      	it	ne
 800ee86:	236a      	movne	r3, #106	; 0x6a
 800ee88:	4640      	mov	r0, r8
 800ee8a:	9305      	str	r3, [sp, #20]
 800ee8c:	4649      	mov	r1, r9
 800ee8e:	2300      	movs	r3, #0
 800ee90:	4fb0      	ldr	r7, [pc, #704]	; (800f154 <_strtod_l+0x874>)
 800ee92:	07f2      	lsls	r2, r6, #31
 800ee94:	d504      	bpl.n	800eea0 <_strtod_l+0x5c0>
 800ee96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee9a:	f7f1 fb93 	bl	80005c4 <__aeabi_dmul>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	1076      	asrs	r6, r6, #1
 800eea2:	f107 0708 	add.w	r7, r7, #8
 800eea6:	d1f4      	bne.n	800ee92 <_strtod_l+0x5b2>
 800eea8:	b10b      	cbz	r3, 800eeae <_strtod_l+0x5ce>
 800eeaa:	4680      	mov	r8, r0
 800eeac:	4689      	mov	r9, r1
 800eeae:	9b05      	ldr	r3, [sp, #20]
 800eeb0:	b1c3      	cbz	r3, 800eee4 <_strtod_l+0x604>
 800eeb2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800eeb6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	4649      	mov	r1, r9
 800eebe:	dd11      	ble.n	800eee4 <_strtod_l+0x604>
 800eec0:	2b1f      	cmp	r3, #31
 800eec2:	f340 8127 	ble.w	800f114 <_strtod_l+0x834>
 800eec6:	2b34      	cmp	r3, #52	; 0x34
 800eec8:	bfd8      	it	le
 800eeca:	f04f 33ff 	movle.w	r3, #4294967295
 800eece:	f04f 0800 	mov.w	r8, #0
 800eed2:	bfcf      	iteee	gt
 800eed4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800eed8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800eedc:	fa03 f202 	lslle.w	r2, r3, r2
 800eee0:	ea02 0901 	andle.w	r9, r2, r1
 800eee4:	2200      	movs	r2, #0
 800eee6:	2300      	movs	r3, #0
 800eee8:	4640      	mov	r0, r8
 800eeea:	4649      	mov	r1, r9
 800eeec:	f7f1 fdd2 	bl	8000a94 <__aeabi_dcmpeq>
 800eef0:	2800      	cmp	r0, #0
 800eef2:	d1a1      	bne.n	800ee38 <_strtod_l+0x558>
 800eef4:	9b06      	ldr	r3, [sp, #24]
 800eef6:	465a      	mov	r2, fp
 800eef8:	9300      	str	r3, [sp, #0]
 800eefa:	4650      	mov	r0, sl
 800eefc:	4623      	mov	r3, r4
 800eefe:	9908      	ldr	r1, [sp, #32]
 800ef00:	f001 f924 	bl	801014c <__s2b>
 800ef04:	9008      	str	r0, [sp, #32]
 800ef06:	2800      	cmp	r0, #0
 800ef08:	f43f af21 	beq.w	800ed4e <_strtod_l+0x46e>
 800ef0c:	9b04      	ldr	r3, [sp, #16]
 800ef0e:	f04f 0b00 	mov.w	fp, #0
 800ef12:	1b5d      	subs	r5, r3, r5
 800ef14:	9b07      	ldr	r3, [sp, #28]
 800ef16:	f8cd b010 	str.w	fp, [sp, #16]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	bfb4      	ite	lt
 800ef1e:	462b      	movlt	r3, r5
 800ef20:	2300      	movge	r3, #0
 800ef22:	930e      	str	r3, [sp, #56]	; 0x38
 800ef24:	9b07      	ldr	r3, [sp, #28]
 800ef26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ef2a:	9314      	str	r3, [sp, #80]	; 0x50
 800ef2c:	9b08      	ldr	r3, [sp, #32]
 800ef2e:	4650      	mov	r0, sl
 800ef30:	6859      	ldr	r1, [r3, #4]
 800ef32:	f001 f863 	bl	800fffc <_Balloc>
 800ef36:	9006      	str	r0, [sp, #24]
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	f43f af10 	beq.w	800ed5e <_strtod_l+0x47e>
 800ef3e:	9b08      	ldr	r3, [sp, #32]
 800ef40:	300c      	adds	r0, #12
 800ef42:	691a      	ldr	r2, [r3, #16]
 800ef44:	f103 010c 	add.w	r1, r3, #12
 800ef48:	3202      	adds	r2, #2
 800ef4a:	0092      	lsls	r2, r2, #2
 800ef4c:	f7ff fc6e 	bl	800e82c <memcpy>
 800ef50:	ab1c      	add	r3, sp, #112	; 0x70
 800ef52:	9301      	str	r3, [sp, #4]
 800ef54:	ab1b      	add	r3, sp, #108	; 0x6c
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	4642      	mov	r2, r8
 800ef5a:	464b      	mov	r3, r9
 800ef5c:	4650      	mov	r0, sl
 800ef5e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800ef62:	f001 fc35 	bl	80107d0 <__d2b>
 800ef66:	901a      	str	r0, [sp, #104]	; 0x68
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	f43f aef8 	beq.w	800ed5e <_strtod_l+0x47e>
 800ef6e:	2101      	movs	r1, #1
 800ef70:	4650      	mov	r0, sl
 800ef72:	f001 f983 	bl	801027c <__i2b>
 800ef76:	4603      	mov	r3, r0
 800ef78:	9004      	str	r0, [sp, #16]
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	f43f aeef 	beq.w	800ed5e <_strtod_l+0x47e>
 800ef80:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ef82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ef84:	2d00      	cmp	r5, #0
 800ef86:	bfab      	itete	ge
 800ef88:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ef8a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800ef8c:	18ee      	addge	r6, r5, r3
 800ef8e:	1b5c      	sublt	r4, r3, r5
 800ef90:	9b05      	ldr	r3, [sp, #20]
 800ef92:	bfa8      	it	ge
 800ef94:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800ef96:	eba5 0503 	sub.w	r5, r5, r3
 800ef9a:	4415      	add	r5, r2
 800ef9c:	4b6e      	ldr	r3, [pc, #440]	; (800f158 <_strtod_l+0x878>)
 800ef9e:	f105 35ff 	add.w	r5, r5, #4294967295
 800efa2:	bfb8      	it	lt
 800efa4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800efa6:	429d      	cmp	r5, r3
 800efa8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800efac:	f280 80c4 	bge.w	800f138 <_strtod_l+0x858>
 800efb0:	1b5b      	subs	r3, r3, r5
 800efb2:	2b1f      	cmp	r3, #31
 800efb4:	f04f 0701 	mov.w	r7, #1
 800efb8:	eba2 0203 	sub.w	r2, r2, r3
 800efbc:	f300 80b1 	bgt.w	800f122 <_strtod_l+0x842>
 800efc0:	2500      	movs	r5, #0
 800efc2:	fa07 f303 	lsl.w	r3, r7, r3
 800efc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800efc8:	18b7      	adds	r7, r6, r2
 800efca:	9b05      	ldr	r3, [sp, #20]
 800efcc:	42be      	cmp	r6, r7
 800efce:	4414      	add	r4, r2
 800efd0:	441c      	add	r4, r3
 800efd2:	4633      	mov	r3, r6
 800efd4:	bfa8      	it	ge
 800efd6:	463b      	movge	r3, r7
 800efd8:	42a3      	cmp	r3, r4
 800efda:	bfa8      	it	ge
 800efdc:	4623      	movge	r3, r4
 800efde:	2b00      	cmp	r3, #0
 800efe0:	bfc2      	ittt	gt
 800efe2:	1aff      	subgt	r7, r7, r3
 800efe4:	1ae4      	subgt	r4, r4, r3
 800efe6:	1af6      	subgt	r6, r6, r3
 800efe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efea:	2b00      	cmp	r3, #0
 800efec:	dd17      	ble.n	800f01e <_strtod_l+0x73e>
 800efee:	461a      	mov	r2, r3
 800eff0:	4650      	mov	r0, sl
 800eff2:	9904      	ldr	r1, [sp, #16]
 800eff4:	f001 fa00 	bl	80103f8 <__pow5mult>
 800eff8:	9004      	str	r0, [sp, #16]
 800effa:	2800      	cmp	r0, #0
 800effc:	f43f aeaf 	beq.w	800ed5e <_strtod_l+0x47e>
 800f000:	4601      	mov	r1, r0
 800f002:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f004:	4650      	mov	r0, sl
 800f006:	f001 f94f 	bl	80102a8 <__multiply>
 800f00a:	9009      	str	r0, [sp, #36]	; 0x24
 800f00c:	2800      	cmp	r0, #0
 800f00e:	f43f aea6 	beq.w	800ed5e <_strtod_l+0x47e>
 800f012:	4650      	mov	r0, sl
 800f014:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f016:	f001 f831 	bl	801007c <_Bfree>
 800f01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f01c:	931a      	str	r3, [sp, #104]	; 0x68
 800f01e:	2f00      	cmp	r7, #0
 800f020:	f300 808e 	bgt.w	800f140 <_strtod_l+0x860>
 800f024:	9b07      	ldr	r3, [sp, #28]
 800f026:	2b00      	cmp	r3, #0
 800f028:	dd08      	ble.n	800f03c <_strtod_l+0x75c>
 800f02a:	4650      	mov	r0, sl
 800f02c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f02e:	9906      	ldr	r1, [sp, #24]
 800f030:	f001 f9e2 	bl	80103f8 <__pow5mult>
 800f034:	9006      	str	r0, [sp, #24]
 800f036:	2800      	cmp	r0, #0
 800f038:	f43f ae91 	beq.w	800ed5e <_strtod_l+0x47e>
 800f03c:	2c00      	cmp	r4, #0
 800f03e:	dd08      	ble.n	800f052 <_strtod_l+0x772>
 800f040:	4622      	mov	r2, r4
 800f042:	4650      	mov	r0, sl
 800f044:	9906      	ldr	r1, [sp, #24]
 800f046:	f001 fa31 	bl	80104ac <__lshift>
 800f04a:	9006      	str	r0, [sp, #24]
 800f04c:	2800      	cmp	r0, #0
 800f04e:	f43f ae86 	beq.w	800ed5e <_strtod_l+0x47e>
 800f052:	2e00      	cmp	r6, #0
 800f054:	dd08      	ble.n	800f068 <_strtod_l+0x788>
 800f056:	4632      	mov	r2, r6
 800f058:	4650      	mov	r0, sl
 800f05a:	9904      	ldr	r1, [sp, #16]
 800f05c:	f001 fa26 	bl	80104ac <__lshift>
 800f060:	9004      	str	r0, [sp, #16]
 800f062:	2800      	cmp	r0, #0
 800f064:	f43f ae7b 	beq.w	800ed5e <_strtod_l+0x47e>
 800f068:	4650      	mov	r0, sl
 800f06a:	9a06      	ldr	r2, [sp, #24]
 800f06c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f06e:	f001 faa9 	bl	80105c4 <__mdiff>
 800f072:	4683      	mov	fp, r0
 800f074:	2800      	cmp	r0, #0
 800f076:	f43f ae72 	beq.w	800ed5e <_strtod_l+0x47e>
 800f07a:	2400      	movs	r4, #0
 800f07c:	68c3      	ldr	r3, [r0, #12]
 800f07e:	9904      	ldr	r1, [sp, #16]
 800f080:	60c4      	str	r4, [r0, #12]
 800f082:	930b      	str	r3, [sp, #44]	; 0x2c
 800f084:	f001 fa82 	bl	801058c <__mcmp>
 800f088:	42a0      	cmp	r0, r4
 800f08a:	da6b      	bge.n	800f164 <_strtod_l+0x884>
 800f08c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f08e:	ea53 0308 	orrs.w	r3, r3, r8
 800f092:	f040 8091 	bne.w	800f1b8 <_strtod_l+0x8d8>
 800f096:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	f040 808c 	bne.w	800f1b8 <_strtod_l+0x8d8>
 800f0a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f0a4:	0d1b      	lsrs	r3, r3, #20
 800f0a6:	051b      	lsls	r3, r3, #20
 800f0a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f0ac:	f240 8084 	bls.w	800f1b8 <_strtod_l+0x8d8>
 800f0b0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800f0b4:	b91b      	cbnz	r3, 800f0be <_strtod_l+0x7de>
 800f0b6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	dd7c      	ble.n	800f1b8 <_strtod_l+0x8d8>
 800f0be:	4659      	mov	r1, fp
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	4650      	mov	r0, sl
 800f0c4:	f001 f9f2 	bl	80104ac <__lshift>
 800f0c8:	9904      	ldr	r1, [sp, #16]
 800f0ca:	4683      	mov	fp, r0
 800f0cc:	f001 fa5e 	bl	801058c <__mcmp>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	dd71      	ble.n	800f1b8 <_strtod_l+0x8d8>
 800f0d4:	9905      	ldr	r1, [sp, #20]
 800f0d6:	464b      	mov	r3, r9
 800f0d8:	4a20      	ldr	r2, [pc, #128]	; (800f15c <_strtod_l+0x87c>)
 800f0da:	2900      	cmp	r1, #0
 800f0dc:	f000 808c 	beq.w	800f1f8 <_strtod_l+0x918>
 800f0e0:	ea02 0109 	and.w	r1, r2, r9
 800f0e4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f0e8:	f300 8086 	bgt.w	800f1f8 <_strtod_l+0x918>
 800f0ec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f0f0:	f77f aeaa 	ble.w	800ee48 <_strtod_l+0x568>
 800f0f4:	4640      	mov	r0, r8
 800f0f6:	4649      	mov	r1, r9
 800f0f8:	4b19      	ldr	r3, [pc, #100]	; (800f160 <_strtod_l+0x880>)
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f7f1 fa62 	bl	80005c4 <__aeabi_dmul>
 800f100:	460b      	mov	r3, r1
 800f102:	4303      	orrs	r3, r0
 800f104:	bf08      	it	eq
 800f106:	2322      	moveq	r3, #34	; 0x22
 800f108:	4680      	mov	r8, r0
 800f10a:	4689      	mov	r9, r1
 800f10c:	bf08      	it	eq
 800f10e:	f8ca 3000 	streq.w	r3, [sl]
 800f112:	e62f      	b.n	800ed74 <_strtod_l+0x494>
 800f114:	f04f 32ff 	mov.w	r2, #4294967295
 800f118:	fa02 f303 	lsl.w	r3, r2, r3
 800f11c:	ea03 0808 	and.w	r8, r3, r8
 800f120:	e6e0      	b.n	800eee4 <_strtod_l+0x604>
 800f122:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800f126:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800f12a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800f12e:	35e2      	adds	r5, #226	; 0xe2
 800f130:	fa07 f505 	lsl.w	r5, r7, r5
 800f134:	970f      	str	r7, [sp, #60]	; 0x3c
 800f136:	e747      	b.n	800efc8 <_strtod_l+0x6e8>
 800f138:	2301      	movs	r3, #1
 800f13a:	2500      	movs	r5, #0
 800f13c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f13e:	e743      	b.n	800efc8 <_strtod_l+0x6e8>
 800f140:	463a      	mov	r2, r7
 800f142:	4650      	mov	r0, sl
 800f144:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f146:	f001 f9b1 	bl	80104ac <__lshift>
 800f14a:	901a      	str	r0, [sp, #104]	; 0x68
 800f14c:	2800      	cmp	r0, #0
 800f14e:	f47f af69 	bne.w	800f024 <_strtod_l+0x744>
 800f152:	e604      	b.n	800ed5e <_strtod_l+0x47e>
 800f154:	08012e60 	.word	0x08012e60
 800f158:	fffffc02 	.word	0xfffffc02
 800f15c:	7ff00000 	.word	0x7ff00000
 800f160:	39500000 	.word	0x39500000
 800f164:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f168:	d165      	bne.n	800f236 <_strtod_l+0x956>
 800f16a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f16c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f170:	b35a      	cbz	r2, 800f1ca <_strtod_l+0x8ea>
 800f172:	4a99      	ldr	r2, [pc, #612]	; (800f3d8 <_strtod_l+0xaf8>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d12b      	bne.n	800f1d0 <_strtod_l+0x8f0>
 800f178:	9b05      	ldr	r3, [sp, #20]
 800f17a:	4641      	mov	r1, r8
 800f17c:	b303      	cbz	r3, 800f1c0 <_strtod_l+0x8e0>
 800f17e:	464a      	mov	r2, r9
 800f180:	4b96      	ldr	r3, [pc, #600]	; (800f3dc <_strtod_l+0xafc>)
 800f182:	4013      	ands	r3, r2
 800f184:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f188:	f04f 32ff 	mov.w	r2, #4294967295
 800f18c:	d81b      	bhi.n	800f1c6 <_strtod_l+0x8e6>
 800f18e:	0d1b      	lsrs	r3, r3, #20
 800f190:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f194:	fa02 f303 	lsl.w	r3, r2, r3
 800f198:	4299      	cmp	r1, r3
 800f19a:	d119      	bne.n	800f1d0 <_strtod_l+0x8f0>
 800f19c:	4b90      	ldr	r3, [pc, #576]	; (800f3e0 <_strtod_l+0xb00>)
 800f19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d102      	bne.n	800f1aa <_strtod_l+0x8ca>
 800f1a4:	3101      	adds	r1, #1
 800f1a6:	f43f adda 	beq.w	800ed5e <_strtod_l+0x47e>
 800f1aa:	f04f 0800 	mov.w	r8, #0
 800f1ae:	4b8b      	ldr	r3, [pc, #556]	; (800f3dc <_strtod_l+0xafc>)
 800f1b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1b2:	401a      	ands	r2, r3
 800f1b4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800f1b8:	9b05      	ldr	r3, [sp, #20]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d19a      	bne.n	800f0f4 <_strtod_l+0x814>
 800f1be:	e5d9      	b.n	800ed74 <_strtod_l+0x494>
 800f1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c4:	e7e8      	b.n	800f198 <_strtod_l+0x8b8>
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	e7e6      	b.n	800f198 <_strtod_l+0x8b8>
 800f1ca:	ea53 0308 	orrs.w	r3, r3, r8
 800f1ce:	d081      	beq.n	800f0d4 <_strtod_l+0x7f4>
 800f1d0:	b1e5      	cbz	r5, 800f20c <_strtod_l+0x92c>
 800f1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1d4:	421d      	tst	r5, r3
 800f1d6:	d0ef      	beq.n	800f1b8 <_strtod_l+0x8d8>
 800f1d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1da:	4640      	mov	r0, r8
 800f1dc:	4649      	mov	r1, r9
 800f1de:	9a05      	ldr	r2, [sp, #20]
 800f1e0:	b1c3      	cbz	r3, 800f214 <_strtod_l+0x934>
 800f1e2:	f7ff fb59 	bl	800e898 <sulp>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f1ee:	f7f1 f833 	bl	8000258 <__adddf3>
 800f1f2:	4680      	mov	r8, r0
 800f1f4:	4689      	mov	r9, r1
 800f1f6:	e7df      	b.n	800f1b8 <_strtod_l+0x8d8>
 800f1f8:	4013      	ands	r3, r2
 800f1fa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f1fe:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f202:	f04f 38ff 	mov.w	r8, #4294967295
 800f206:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f20a:	e7d5      	b.n	800f1b8 <_strtod_l+0x8d8>
 800f20c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f20e:	ea13 0f08 	tst.w	r3, r8
 800f212:	e7e0      	b.n	800f1d6 <_strtod_l+0x8f6>
 800f214:	f7ff fb40 	bl	800e898 <sulp>
 800f218:	4602      	mov	r2, r0
 800f21a:	460b      	mov	r3, r1
 800f21c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f220:	f7f1 f818 	bl	8000254 <__aeabi_dsub>
 800f224:	2200      	movs	r2, #0
 800f226:	2300      	movs	r3, #0
 800f228:	4680      	mov	r8, r0
 800f22a:	4689      	mov	r9, r1
 800f22c:	f7f1 fc32 	bl	8000a94 <__aeabi_dcmpeq>
 800f230:	2800      	cmp	r0, #0
 800f232:	d0c1      	beq.n	800f1b8 <_strtod_l+0x8d8>
 800f234:	e608      	b.n	800ee48 <_strtod_l+0x568>
 800f236:	4658      	mov	r0, fp
 800f238:	9904      	ldr	r1, [sp, #16]
 800f23a:	f001 fb25 	bl	8010888 <__ratio>
 800f23e:	2200      	movs	r2, #0
 800f240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f244:	4606      	mov	r6, r0
 800f246:	460f      	mov	r7, r1
 800f248:	f7f1 fc38 	bl	8000abc <__aeabi_dcmple>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	d070      	beq.n	800f332 <_strtod_l+0xa52>
 800f250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f252:	2b00      	cmp	r3, #0
 800f254:	d042      	beq.n	800f2dc <_strtod_l+0x9fc>
 800f256:	2600      	movs	r6, #0
 800f258:	4f62      	ldr	r7, [pc, #392]	; (800f3e4 <_strtod_l+0xb04>)
 800f25a:	4d62      	ldr	r5, [pc, #392]	; (800f3e4 <_strtod_l+0xb04>)
 800f25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f262:	0d1b      	lsrs	r3, r3, #20
 800f264:	051b      	lsls	r3, r3, #20
 800f266:	930f      	str	r3, [sp, #60]	; 0x3c
 800f268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f26a:	4b5f      	ldr	r3, [pc, #380]	; (800f3e8 <_strtod_l+0xb08>)
 800f26c:	429a      	cmp	r2, r3
 800f26e:	f040 80c3 	bne.w	800f3f8 <_strtod_l+0xb18>
 800f272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f274:	4640      	mov	r0, r8
 800f276:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800f27a:	4649      	mov	r1, r9
 800f27c:	f001 fa2e 	bl	80106dc <__ulp>
 800f280:	4602      	mov	r2, r0
 800f282:	460b      	mov	r3, r1
 800f284:	4630      	mov	r0, r6
 800f286:	4639      	mov	r1, r7
 800f288:	f7f1 f99c 	bl	80005c4 <__aeabi_dmul>
 800f28c:	4642      	mov	r2, r8
 800f28e:	464b      	mov	r3, r9
 800f290:	f7f0 ffe2 	bl	8000258 <__adddf3>
 800f294:	460b      	mov	r3, r1
 800f296:	4951      	ldr	r1, [pc, #324]	; (800f3dc <_strtod_l+0xafc>)
 800f298:	4a54      	ldr	r2, [pc, #336]	; (800f3ec <_strtod_l+0xb0c>)
 800f29a:	4019      	ands	r1, r3
 800f29c:	4291      	cmp	r1, r2
 800f29e:	4680      	mov	r8, r0
 800f2a0:	d95d      	bls.n	800f35e <_strtod_l+0xa7e>
 800f2a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f2a4:	4b4e      	ldr	r3, [pc, #312]	; (800f3e0 <_strtod_l+0xb00>)
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d103      	bne.n	800f2b2 <_strtod_l+0x9d2>
 800f2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	f43f ad56 	beq.w	800ed5e <_strtod_l+0x47e>
 800f2b2:	f04f 38ff 	mov.w	r8, #4294967295
 800f2b6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800f3e0 <_strtod_l+0xb00>
 800f2ba:	4650      	mov	r0, sl
 800f2bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f2be:	f000 fedd 	bl	801007c <_Bfree>
 800f2c2:	4650      	mov	r0, sl
 800f2c4:	9906      	ldr	r1, [sp, #24]
 800f2c6:	f000 fed9 	bl	801007c <_Bfree>
 800f2ca:	4650      	mov	r0, sl
 800f2cc:	9904      	ldr	r1, [sp, #16]
 800f2ce:	f000 fed5 	bl	801007c <_Bfree>
 800f2d2:	4659      	mov	r1, fp
 800f2d4:	4650      	mov	r0, sl
 800f2d6:	f000 fed1 	bl	801007c <_Bfree>
 800f2da:	e627      	b.n	800ef2c <_strtod_l+0x64c>
 800f2dc:	f1b8 0f00 	cmp.w	r8, #0
 800f2e0:	d119      	bne.n	800f316 <_strtod_l+0xa36>
 800f2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2e8:	b9e3      	cbnz	r3, 800f324 <_strtod_l+0xa44>
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	4630      	mov	r0, r6
 800f2ee:	4639      	mov	r1, r7
 800f2f0:	4b3c      	ldr	r3, [pc, #240]	; (800f3e4 <_strtod_l+0xb04>)
 800f2f2:	f7f1 fbd9 	bl	8000aa8 <__aeabi_dcmplt>
 800f2f6:	b9c8      	cbnz	r0, 800f32c <_strtod_l+0xa4c>
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	4630      	mov	r0, r6
 800f2fc:	4639      	mov	r1, r7
 800f2fe:	4b3c      	ldr	r3, [pc, #240]	; (800f3f0 <_strtod_l+0xb10>)
 800f300:	f7f1 f960 	bl	80005c4 <__aeabi_dmul>
 800f304:	4604      	mov	r4, r0
 800f306:	460d      	mov	r5, r1
 800f308:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800f30c:	9416      	str	r4, [sp, #88]	; 0x58
 800f30e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f310:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800f314:	e7a2      	b.n	800f25c <_strtod_l+0x97c>
 800f316:	f1b8 0f01 	cmp.w	r8, #1
 800f31a:	d103      	bne.n	800f324 <_strtod_l+0xa44>
 800f31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f43f ad92 	beq.w	800ee48 <_strtod_l+0x568>
 800f324:	2600      	movs	r6, #0
 800f326:	2400      	movs	r4, #0
 800f328:	4f32      	ldr	r7, [pc, #200]	; (800f3f4 <_strtod_l+0xb14>)
 800f32a:	e796      	b.n	800f25a <_strtod_l+0x97a>
 800f32c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f32e:	4d30      	ldr	r5, [pc, #192]	; (800f3f0 <_strtod_l+0xb10>)
 800f330:	e7ea      	b.n	800f308 <_strtod_l+0xa28>
 800f332:	4b2f      	ldr	r3, [pc, #188]	; (800f3f0 <_strtod_l+0xb10>)
 800f334:	2200      	movs	r2, #0
 800f336:	4630      	mov	r0, r6
 800f338:	4639      	mov	r1, r7
 800f33a:	f7f1 f943 	bl	80005c4 <__aeabi_dmul>
 800f33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f340:	4604      	mov	r4, r0
 800f342:	460d      	mov	r5, r1
 800f344:	b933      	cbnz	r3, 800f354 <_strtod_l+0xa74>
 800f346:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f34a:	9010      	str	r0, [sp, #64]	; 0x40
 800f34c:	9311      	str	r3, [sp, #68]	; 0x44
 800f34e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f352:	e783      	b.n	800f25c <_strtod_l+0x97c>
 800f354:	4602      	mov	r2, r0
 800f356:	460b      	mov	r3, r1
 800f358:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800f35c:	e7f7      	b.n	800f34e <_strtod_l+0xa6e>
 800f35e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f362:	9b05      	ldr	r3, [sp, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d1a8      	bne.n	800f2ba <_strtod_l+0x9da>
 800f368:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f36c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f36e:	0d1b      	lsrs	r3, r3, #20
 800f370:	051b      	lsls	r3, r3, #20
 800f372:	429a      	cmp	r2, r3
 800f374:	d1a1      	bne.n	800f2ba <_strtod_l+0x9da>
 800f376:	4620      	mov	r0, r4
 800f378:	4629      	mov	r1, r5
 800f37a:	f7f1 ff4d 	bl	8001218 <__aeabi_d2lz>
 800f37e:	f7f1 f8f3 	bl	8000568 <__aeabi_l2d>
 800f382:	4602      	mov	r2, r0
 800f384:	460b      	mov	r3, r1
 800f386:	4620      	mov	r0, r4
 800f388:	4629      	mov	r1, r5
 800f38a:	f7f0 ff63 	bl	8000254 <__aeabi_dsub>
 800f38e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f394:	ea43 0308 	orr.w	r3, r3, r8
 800f398:	4313      	orrs	r3, r2
 800f39a:	4604      	mov	r4, r0
 800f39c:	460d      	mov	r5, r1
 800f39e:	d066      	beq.n	800f46e <_strtod_l+0xb8e>
 800f3a0:	a309      	add	r3, pc, #36	; (adr r3, 800f3c8 <_strtod_l+0xae8>)
 800f3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a6:	f7f1 fb7f 	bl	8000aa8 <__aeabi_dcmplt>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	f47f ace2 	bne.w	800ed74 <_strtod_l+0x494>
 800f3b0:	a307      	add	r3, pc, #28	; (adr r3, 800f3d0 <_strtod_l+0xaf0>)
 800f3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	4629      	mov	r1, r5
 800f3ba:	f7f1 fb93 	bl	8000ae4 <__aeabi_dcmpgt>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	f43f af7b 	beq.w	800f2ba <_strtod_l+0x9da>
 800f3c4:	e4d6      	b.n	800ed74 <_strtod_l+0x494>
 800f3c6:	bf00      	nop
 800f3c8:	94a03595 	.word	0x94a03595
 800f3cc:	3fdfffff 	.word	0x3fdfffff
 800f3d0:	35afe535 	.word	0x35afe535
 800f3d4:	3fe00000 	.word	0x3fe00000
 800f3d8:	000fffff 	.word	0x000fffff
 800f3dc:	7ff00000 	.word	0x7ff00000
 800f3e0:	7fefffff 	.word	0x7fefffff
 800f3e4:	3ff00000 	.word	0x3ff00000
 800f3e8:	7fe00000 	.word	0x7fe00000
 800f3ec:	7c9fffff 	.word	0x7c9fffff
 800f3f0:	3fe00000 	.word	0x3fe00000
 800f3f4:	bff00000 	.word	0xbff00000
 800f3f8:	9b05      	ldr	r3, [sp, #20]
 800f3fa:	b313      	cbz	r3, 800f442 <_strtod_l+0xb62>
 800f3fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f402:	d81e      	bhi.n	800f442 <_strtod_l+0xb62>
 800f404:	a326      	add	r3, pc, #152	; (adr r3, 800f4a0 <_strtod_l+0xbc0>)
 800f406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f40a:	4620      	mov	r0, r4
 800f40c:	4629      	mov	r1, r5
 800f40e:	f7f1 fb55 	bl	8000abc <__aeabi_dcmple>
 800f412:	b190      	cbz	r0, 800f43a <_strtod_l+0xb5a>
 800f414:	4629      	mov	r1, r5
 800f416:	4620      	mov	r0, r4
 800f418:	f7f1 fb84 	bl	8000b24 <__aeabi_d2uiz>
 800f41c:	2801      	cmp	r0, #1
 800f41e:	bf38      	it	cc
 800f420:	2001      	movcc	r0, #1
 800f422:	f7f1 f855 	bl	80004d0 <__aeabi_ui2d>
 800f426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f428:	4604      	mov	r4, r0
 800f42a:	460d      	mov	r5, r1
 800f42c:	b9d3      	cbnz	r3, 800f464 <_strtod_l+0xb84>
 800f42e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f432:	9012      	str	r0, [sp, #72]	; 0x48
 800f434:	9313      	str	r3, [sp, #76]	; 0x4c
 800f436:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800f43a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f43c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800f440:	1a9f      	subs	r7, r3, r2
 800f442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f446:	f001 f949 	bl	80106dc <__ulp>
 800f44a:	4602      	mov	r2, r0
 800f44c:	460b      	mov	r3, r1
 800f44e:	4630      	mov	r0, r6
 800f450:	4639      	mov	r1, r7
 800f452:	f7f1 f8b7 	bl	80005c4 <__aeabi_dmul>
 800f456:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f45a:	f7f0 fefd 	bl	8000258 <__adddf3>
 800f45e:	4680      	mov	r8, r0
 800f460:	4689      	mov	r9, r1
 800f462:	e77e      	b.n	800f362 <_strtod_l+0xa82>
 800f464:	4602      	mov	r2, r0
 800f466:	460b      	mov	r3, r1
 800f468:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800f46c:	e7e3      	b.n	800f436 <_strtod_l+0xb56>
 800f46e:	a30e      	add	r3, pc, #56	; (adr r3, 800f4a8 <_strtod_l+0xbc8>)
 800f470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f474:	f7f1 fb18 	bl	8000aa8 <__aeabi_dcmplt>
 800f478:	e7a1      	b.n	800f3be <_strtod_l+0xade>
 800f47a:	2300      	movs	r3, #0
 800f47c:	930a      	str	r3, [sp, #40]	; 0x28
 800f47e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f480:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f482:	6013      	str	r3, [r2, #0]
 800f484:	f7ff ba71 	b.w	800e96a <_strtod_l+0x8a>
 800f488:	2a65      	cmp	r2, #101	; 0x65
 800f48a:	f43f ab63 	beq.w	800eb54 <_strtod_l+0x274>
 800f48e:	2a45      	cmp	r2, #69	; 0x45
 800f490:	f43f ab60 	beq.w	800eb54 <_strtod_l+0x274>
 800f494:	2301      	movs	r3, #1
 800f496:	f7ff bb95 	b.w	800ebc4 <_strtod_l+0x2e4>
 800f49a:	bf00      	nop
 800f49c:	f3af 8000 	nop.w
 800f4a0:	ffc00000 	.word	0xffc00000
 800f4a4:	41dfffff 	.word	0x41dfffff
 800f4a8:	94a03595 	.word	0x94a03595
 800f4ac:	3fcfffff 	.word	0x3fcfffff

0800f4b0 <strtof>:
 800f4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4b4:	4f22      	ldr	r7, [pc, #136]	; (800f540 <strtof+0x90>)
 800f4b6:	460a      	mov	r2, r1
 800f4b8:	4b22      	ldr	r3, [pc, #136]	; (800f544 <strtof+0x94>)
 800f4ba:	4601      	mov	r1, r0
 800f4bc:	6838      	ldr	r0, [r7, #0]
 800f4be:	f7ff fa0f 	bl	800e8e0 <_strtod_l>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	4606      	mov	r6, r0
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	f7f1 fb15 	bl	8000af8 <__aeabi_dcmpun>
 800f4ce:	b168      	cbz	r0, 800f4ec <strtof+0x3c>
 800f4d0:	2c00      	cmp	r4, #0
 800f4d2:	481d      	ldr	r0, [pc, #116]	; (800f548 <strtof+0x98>)
 800f4d4:	da06      	bge.n	800f4e4 <strtof+0x34>
 800f4d6:	f001 ff51 	bl	801137c <nanf>
 800f4da:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800f4de:	4628      	mov	r0, r5
 800f4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e8:	f001 bf48 	b.w	801137c <nanf>
 800f4ec:	4621      	mov	r1, r4
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	f7f1 fb38 	bl	8000b64 <__aeabi_d2f>
 800f4f4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800f4f8:	4605      	mov	r5, r0
 800f4fa:	4914      	ldr	r1, [pc, #80]	; (800f54c <strtof+0x9c>)
 800f4fc:	4640      	mov	r0, r8
 800f4fe:	f7f1 fe55 	bl	80011ac <__aeabi_fcmpun>
 800f502:	2800      	cmp	r0, #0
 800f504:	d1eb      	bne.n	800f4de <strtof+0x2e>
 800f506:	4640      	mov	r0, r8
 800f508:	4910      	ldr	r1, [pc, #64]	; (800f54c <strtof+0x9c>)
 800f50a:	f7f1 fe31 	bl	8001170 <__aeabi_fcmple>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d1e5      	bne.n	800f4de <strtof+0x2e>
 800f512:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f516:	f04f 32ff 	mov.w	r2, #4294967295
 800f51a:	4630      	mov	r0, r6
 800f51c:	4621      	mov	r1, r4
 800f51e:	4b0c      	ldr	r3, [pc, #48]	; (800f550 <strtof+0xa0>)
 800f520:	f7f1 faea 	bl	8000af8 <__aeabi_dcmpun>
 800f524:	b940      	cbnz	r0, 800f538 <strtof+0x88>
 800f526:	f04f 32ff 	mov.w	r2, #4294967295
 800f52a:	4630      	mov	r0, r6
 800f52c:	4621      	mov	r1, r4
 800f52e:	4b08      	ldr	r3, [pc, #32]	; (800f550 <strtof+0xa0>)
 800f530:	f7f1 fac4 	bl	8000abc <__aeabi_dcmple>
 800f534:	2800      	cmp	r0, #0
 800f536:	d0d2      	beq.n	800f4de <strtof+0x2e>
 800f538:	2222      	movs	r2, #34	; 0x22
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	601a      	str	r2, [r3, #0]
 800f53e:	e7ce      	b.n	800f4de <strtof+0x2e>
 800f540:	20000050 	.word	0x20000050
 800f544:	200000b8 	.word	0x200000b8
 800f548:	0801325a 	.word	0x0801325a
 800f54c:	7f7fffff 	.word	0x7f7fffff
 800f550:	7fefffff 	.word	0x7fefffff

0800f554 <__strtok_r>:
 800f554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f556:	b908      	cbnz	r0, 800f55c <__strtok_r+0x8>
 800f558:	6810      	ldr	r0, [r2, #0]
 800f55a:	b188      	cbz	r0, 800f580 <__strtok_r+0x2c>
 800f55c:	4604      	mov	r4, r0
 800f55e:	460f      	mov	r7, r1
 800f560:	4620      	mov	r0, r4
 800f562:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f566:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f56a:	b91e      	cbnz	r6, 800f574 <__strtok_r+0x20>
 800f56c:	b965      	cbnz	r5, 800f588 <__strtok_r+0x34>
 800f56e:	4628      	mov	r0, r5
 800f570:	6015      	str	r5, [r2, #0]
 800f572:	e005      	b.n	800f580 <__strtok_r+0x2c>
 800f574:	42b5      	cmp	r5, r6
 800f576:	d1f6      	bne.n	800f566 <__strtok_r+0x12>
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d1f0      	bne.n	800f55e <__strtok_r+0xa>
 800f57c:	6014      	str	r4, [r2, #0]
 800f57e:	7003      	strb	r3, [r0, #0]
 800f580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f582:	461c      	mov	r4, r3
 800f584:	e00c      	b.n	800f5a0 <__strtok_r+0x4c>
 800f586:	b915      	cbnz	r5, 800f58e <__strtok_r+0x3a>
 800f588:	460e      	mov	r6, r1
 800f58a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f58e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f592:	42ab      	cmp	r3, r5
 800f594:	d1f7      	bne.n	800f586 <__strtok_r+0x32>
 800f596:	2b00      	cmp	r3, #0
 800f598:	d0f3      	beq.n	800f582 <__strtok_r+0x2e>
 800f59a:	2300      	movs	r3, #0
 800f59c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f5a0:	6014      	str	r4, [r2, #0]
 800f5a2:	e7ed      	b.n	800f580 <__strtok_r+0x2c>

0800f5a4 <strtok_r>:
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	f7ff bfd5 	b.w	800f554 <__strtok_r>
	...

0800f5ac <_strtoul_l.constprop.0>:
 800f5ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5b0:	4686      	mov	lr, r0
 800f5b2:	460d      	mov	r5, r1
 800f5b4:	4f35      	ldr	r7, [pc, #212]	; (800f68c <_strtoul_l.constprop.0+0xe0>)
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f5bc:	5de6      	ldrb	r6, [r4, r7]
 800f5be:	f016 0608 	ands.w	r6, r6, #8
 800f5c2:	d1f8      	bne.n	800f5b6 <_strtoul_l.constprop.0+0xa>
 800f5c4:	2c2d      	cmp	r4, #45	; 0x2d
 800f5c6:	d12f      	bne.n	800f628 <_strtoul_l.constprop.0+0x7c>
 800f5c8:	2601      	movs	r6, #1
 800f5ca:	782c      	ldrb	r4, [r5, #0]
 800f5cc:	1c85      	adds	r5, r0, #2
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d057      	beq.n	800f682 <_strtoul_l.constprop.0+0xd6>
 800f5d2:	2b10      	cmp	r3, #16
 800f5d4:	d109      	bne.n	800f5ea <_strtoul_l.constprop.0+0x3e>
 800f5d6:	2c30      	cmp	r4, #48	; 0x30
 800f5d8:	d107      	bne.n	800f5ea <_strtoul_l.constprop.0+0x3e>
 800f5da:	7828      	ldrb	r0, [r5, #0]
 800f5dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f5e0:	2858      	cmp	r0, #88	; 0x58
 800f5e2:	d149      	bne.n	800f678 <_strtoul_l.constprop.0+0xcc>
 800f5e4:	2310      	movs	r3, #16
 800f5e6:	786c      	ldrb	r4, [r5, #1]
 800f5e8:	3502      	adds	r5, #2
 800f5ea:	f04f 38ff 	mov.w	r8, #4294967295
 800f5ee:	fbb8 f8f3 	udiv	r8, r8, r3
 800f5f2:	2700      	movs	r7, #0
 800f5f4:	fb03 f908 	mul.w	r9, r3, r8
 800f5f8:	4638      	mov	r0, r7
 800f5fa:	ea6f 0909 	mvn.w	r9, r9
 800f5fe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f602:	f1bc 0f09 	cmp.w	ip, #9
 800f606:	d814      	bhi.n	800f632 <_strtoul_l.constprop.0+0x86>
 800f608:	4664      	mov	r4, ip
 800f60a:	42a3      	cmp	r3, r4
 800f60c:	dd22      	ble.n	800f654 <_strtoul_l.constprop.0+0xa8>
 800f60e:	2f00      	cmp	r7, #0
 800f610:	db1d      	blt.n	800f64e <_strtoul_l.constprop.0+0xa2>
 800f612:	4580      	cmp	r8, r0
 800f614:	d31b      	bcc.n	800f64e <_strtoul_l.constprop.0+0xa2>
 800f616:	d101      	bne.n	800f61c <_strtoul_l.constprop.0+0x70>
 800f618:	45a1      	cmp	r9, r4
 800f61a:	db18      	blt.n	800f64e <_strtoul_l.constprop.0+0xa2>
 800f61c:	2701      	movs	r7, #1
 800f61e:	fb00 4003 	mla	r0, r0, r3, r4
 800f622:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f626:	e7ea      	b.n	800f5fe <_strtoul_l.constprop.0+0x52>
 800f628:	2c2b      	cmp	r4, #43	; 0x2b
 800f62a:	bf04      	itt	eq
 800f62c:	782c      	ldrbeq	r4, [r5, #0]
 800f62e:	1c85      	addeq	r5, r0, #2
 800f630:	e7cd      	b.n	800f5ce <_strtoul_l.constprop.0+0x22>
 800f632:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f636:	f1bc 0f19 	cmp.w	ip, #25
 800f63a:	d801      	bhi.n	800f640 <_strtoul_l.constprop.0+0x94>
 800f63c:	3c37      	subs	r4, #55	; 0x37
 800f63e:	e7e4      	b.n	800f60a <_strtoul_l.constprop.0+0x5e>
 800f640:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f644:	f1bc 0f19 	cmp.w	ip, #25
 800f648:	d804      	bhi.n	800f654 <_strtoul_l.constprop.0+0xa8>
 800f64a:	3c57      	subs	r4, #87	; 0x57
 800f64c:	e7dd      	b.n	800f60a <_strtoul_l.constprop.0+0x5e>
 800f64e:	f04f 37ff 	mov.w	r7, #4294967295
 800f652:	e7e6      	b.n	800f622 <_strtoul_l.constprop.0+0x76>
 800f654:	2f00      	cmp	r7, #0
 800f656:	da07      	bge.n	800f668 <_strtoul_l.constprop.0+0xbc>
 800f658:	2322      	movs	r3, #34	; 0x22
 800f65a:	f04f 30ff 	mov.w	r0, #4294967295
 800f65e:	f8ce 3000 	str.w	r3, [lr]
 800f662:	b932      	cbnz	r2, 800f672 <_strtoul_l.constprop.0+0xc6>
 800f664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f668:	b106      	cbz	r6, 800f66c <_strtoul_l.constprop.0+0xc0>
 800f66a:	4240      	negs	r0, r0
 800f66c:	2a00      	cmp	r2, #0
 800f66e:	d0f9      	beq.n	800f664 <_strtoul_l.constprop.0+0xb8>
 800f670:	b107      	cbz	r7, 800f674 <_strtoul_l.constprop.0+0xc8>
 800f672:	1e69      	subs	r1, r5, #1
 800f674:	6011      	str	r1, [r2, #0]
 800f676:	e7f5      	b.n	800f664 <_strtoul_l.constprop.0+0xb8>
 800f678:	2430      	movs	r4, #48	; 0x30
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1b5      	bne.n	800f5ea <_strtoul_l.constprop.0+0x3e>
 800f67e:	2308      	movs	r3, #8
 800f680:	e7b3      	b.n	800f5ea <_strtoul_l.constprop.0+0x3e>
 800f682:	2c30      	cmp	r4, #48	; 0x30
 800f684:	d0a9      	beq.n	800f5da <_strtoul_l.constprop.0+0x2e>
 800f686:	230a      	movs	r3, #10
 800f688:	e7af      	b.n	800f5ea <_strtoul_l.constprop.0+0x3e>
 800f68a:	bf00      	nop
 800f68c:	08012e89 	.word	0x08012e89

0800f690 <strtoul>:
 800f690:	4613      	mov	r3, r2
 800f692:	460a      	mov	r2, r1
 800f694:	4601      	mov	r1, r0
 800f696:	4802      	ldr	r0, [pc, #8]	; (800f6a0 <strtoul+0x10>)
 800f698:	6800      	ldr	r0, [r0, #0]
 800f69a:	f7ff bf87 	b.w	800f5ac <_strtoul_l.constprop.0>
 800f69e:	bf00      	nop
 800f6a0:	20000050 	.word	0x20000050

0800f6a4 <_vsniprintf_r>:
 800f6a4:	b530      	push	{r4, r5, lr}
 800f6a6:	4614      	mov	r4, r2
 800f6a8:	2c00      	cmp	r4, #0
 800f6aa:	4605      	mov	r5, r0
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	b09b      	sub	sp, #108	; 0x6c
 800f6b0:	da05      	bge.n	800f6be <_vsniprintf_r+0x1a>
 800f6b2:	238b      	movs	r3, #139	; 0x8b
 800f6b4:	6003      	str	r3, [r0, #0]
 800f6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ba:	b01b      	add	sp, #108	; 0x6c
 800f6bc:	bd30      	pop	{r4, r5, pc}
 800f6be:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f6c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f6c6:	bf0c      	ite	eq
 800f6c8:	4623      	moveq	r3, r4
 800f6ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f6ce:	9302      	str	r3, [sp, #8]
 800f6d0:	9305      	str	r3, [sp, #20]
 800f6d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6d6:	9100      	str	r1, [sp, #0]
 800f6d8:	9104      	str	r1, [sp, #16]
 800f6da:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f6de:	4669      	mov	r1, sp
 800f6e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f6e2:	f001 fa47 	bl	8010b74 <_svfiprintf_r>
 800f6e6:	1c43      	adds	r3, r0, #1
 800f6e8:	bfbc      	itt	lt
 800f6ea:	238b      	movlt	r3, #139	; 0x8b
 800f6ec:	602b      	strlt	r3, [r5, #0]
 800f6ee:	2c00      	cmp	r4, #0
 800f6f0:	d0e3      	beq.n	800f6ba <_vsniprintf_r+0x16>
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	9b00      	ldr	r3, [sp, #0]
 800f6f6:	701a      	strb	r2, [r3, #0]
 800f6f8:	e7df      	b.n	800f6ba <_vsniprintf_r+0x16>
	...

0800f6fc <vsniprintf>:
 800f6fc:	b507      	push	{r0, r1, r2, lr}
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	4613      	mov	r3, r2
 800f702:	460a      	mov	r2, r1
 800f704:	4601      	mov	r1, r0
 800f706:	4803      	ldr	r0, [pc, #12]	; (800f714 <vsniprintf+0x18>)
 800f708:	6800      	ldr	r0, [r0, #0]
 800f70a:	f7ff ffcb 	bl	800f6a4 <_vsniprintf_r>
 800f70e:	b003      	add	sp, #12
 800f710:	f85d fb04 	ldr.w	pc, [sp], #4
 800f714:	20000050 	.word	0x20000050

0800f718 <std>:
 800f718:	2300      	movs	r3, #0
 800f71a:	b510      	push	{r4, lr}
 800f71c:	4604      	mov	r4, r0
 800f71e:	e9c0 3300 	strd	r3, r3, [r0]
 800f722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f726:	6083      	str	r3, [r0, #8]
 800f728:	8181      	strh	r1, [r0, #12]
 800f72a:	6643      	str	r3, [r0, #100]	; 0x64
 800f72c:	81c2      	strh	r2, [r0, #14]
 800f72e:	6183      	str	r3, [r0, #24]
 800f730:	4619      	mov	r1, r3
 800f732:	2208      	movs	r2, #8
 800f734:	305c      	adds	r0, #92	; 0x5c
 800f736:	f7ff f887 	bl	800e848 <memset>
 800f73a:	4b05      	ldr	r3, [pc, #20]	; (800f750 <std+0x38>)
 800f73c:	6224      	str	r4, [r4, #32]
 800f73e:	6263      	str	r3, [r4, #36]	; 0x24
 800f740:	4b04      	ldr	r3, [pc, #16]	; (800f754 <std+0x3c>)
 800f742:	62a3      	str	r3, [r4, #40]	; 0x28
 800f744:	4b04      	ldr	r3, [pc, #16]	; (800f758 <std+0x40>)
 800f746:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f748:	4b04      	ldr	r3, [pc, #16]	; (800f75c <std+0x44>)
 800f74a:	6323      	str	r3, [r4, #48]	; 0x30
 800f74c:	bd10      	pop	{r4, pc}
 800f74e:	bf00      	nop
 800f750:	08011385 	.word	0x08011385
 800f754:	080113a7 	.word	0x080113a7
 800f758:	080113df 	.word	0x080113df
 800f75c:	08011403 	.word	0x08011403

0800f760 <_cleanup_r>:
 800f760:	4901      	ldr	r1, [pc, #4]	; (800f768 <_cleanup_r+0x8>)
 800f762:	f000 b8af 	b.w	800f8c4 <_fwalk_reent>
 800f766:	bf00      	nop
 800f768:	08011755 	.word	0x08011755

0800f76c <__sfmoreglue>:
 800f76c:	2268      	movs	r2, #104	; 0x68
 800f76e:	b570      	push	{r4, r5, r6, lr}
 800f770:	1e4d      	subs	r5, r1, #1
 800f772:	4355      	muls	r5, r2
 800f774:	460e      	mov	r6, r1
 800f776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f77a:	f001 f92b 	bl	80109d4 <_malloc_r>
 800f77e:	4604      	mov	r4, r0
 800f780:	b140      	cbz	r0, 800f794 <__sfmoreglue+0x28>
 800f782:	2100      	movs	r1, #0
 800f784:	e9c0 1600 	strd	r1, r6, [r0]
 800f788:	300c      	adds	r0, #12
 800f78a:	60a0      	str	r0, [r4, #8]
 800f78c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f790:	f7ff f85a 	bl	800e848 <memset>
 800f794:	4620      	mov	r0, r4
 800f796:	bd70      	pop	{r4, r5, r6, pc}

0800f798 <__sfp_lock_acquire>:
 800f798:	4801      	ldr	r0, [pc, #4]	; (800f7a0 <__sfp_lock_acquire+0x8>)
 800f79a:	f000 bc1a 	b.w	800ffd2 <__retarget_lock_acquire_recursive>
 800f79e:	bf00      	nop
 800f7a0:	20000df5 	.word	0x20000df5

0800f7a4 <__sfp_lock_release>:
 800f7a4:	4801      	ldr	r0, [pc, #4]	; (800f7ac <__sfp_lock_release+0x8>)
 800f7a6:	f000 bc15 	b.w	800ffd4 <__retarget_lock_release_recursive>
 800f7aa:	bf00      	nop
 800f7ac:	20000df5 	.word	0x20000df5

0800f7b0 <__sinit_lock_acquire>:
 800f7b0:	4801      	ldr	r0, [pc, #4]	; (800f7b8 <__sinit_lock_acquire+0x8>)
 800f7b2:	f000 bc0e 	b.w	800ffd2 <__retarget_lock_acquire_recursive>
 800f7b6:	bf00      	nop
 800f7b8:	20000df6 	.word	0x20000df6

0800f7bc <__sinit_lock_release>:
 800f7bc:	4801      	ldr	r0, [pc, #4]	; (800f7c4 <__sinit_lock_release+0x8>)
 800f7be:	f000 bc09 	b.w	800ffd4 <__retarget_lock_release_recursive>
 800f7c2:	bf00      	nop
 800f7c4:	20000df6 	.word	0x20000df6

0800f7c8 <__sinit>:
 800f7c8:	b510      	push	{r4, lr}
 800f7ca:	4604      	mov	r4, r0
 800f7cc:	f7ff fff0 	bl	800f7b0 <__sinit_lock_acquire>
 800f7d0:	69a3      	ldr	r3, [r4, #24]
 800f7d2:	b11b      	cbz	r3, 800f7dc <__sinit+0x14>
 800f7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7d8:	f7ff bff0 	b.w	800f7bc <__sinit_lock_release>
 800f7dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f7e0:	6523      	str	r3, [r4, #80]	; 0x50
 800f7e2:	4b13      	ldr	r3, [pc, #76]	; (800f830 <__sinit+0x68>)
 800f7e4:	4a13      	ldr	r2, [pc, #76]	; (800f834 <__sinit+0x6c>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f7ea:	42a3      	cmp	r3, r4
 800f7ec:	bf08      	it	eq
 800f7ee:	2301      	moveq	r3, #1
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	bf08      	it	eq
 800f7f4:	61a3      	streq	r3, [r4, #24]
 800f7f6:	f000 f81f 	bl	800f838 <__sfp>
 800f7fa:	6060      	str	r0, [r4, #4]
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f000 f81b 	bl	800f838 <__sfp>
 800f802:	60a0      	str	r0, [r4, #8]
 800f804:	4620      	mov	r0, r4
 800f806:	f000 f817 	bl	800f838 <__sfp>
 800f80a:	2200      	movs	r2, #0
 800f80c:	2104      	movs	r1, #4
 800f80e:	60e0      	str	r0, [r4, #12]
 800f810:	6860      	ldr	r0, [r4, #4]
 800f812:	f7ff ff81 	bl	800f718 <std>
 800f816:	2201      	movs	r2, #1
 800f818:	2109      	movs	r1, #9
 800f81a:	68a0      	ldr	r0, [r4, #8]
 800f81c:	f7ff ff7c 	bl	800f718 <std>
 800f820:	2202      	movs	r2, #2
 800f822:	2112      	movs	r1, #18
 800f824:	68e0      	ldr	r0, [r4, #12]
 800f826:	f7ff ff77 	bl	800f718 <std>
 800f82a:	2301      	movs	r3, #1
 800f82c:	61a3      	str	r3, [r4, #24]
 800f82e:	e7d1      	b.n	800f7d4 <__sinit+0xc>
 800f830:	08012e24 	.word	0x08012e24
 800f834:	0800f761 	.word	0x0800f761

0800f838 <__sfp>:
 800f838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83a:	4607      	mov	r7, r0
 800f83c:	f7ff ffac 	bl	800f798 <__sfp_lock_acquire>
 800f840:	4b1e      	ldr	r3, [pc, #120]	; (800f8bc <__sfp+0x84>)
 800f842:	681e      	ldr	r6, [r3, #0]
 800f844:	69b3      	ldr	r3, [r6, #24]
 800f846:	b913      	cbnz	r3, 800f84e <__sfp+0x16>
 800f848:	4630      	mov	r0, r6
 800f84a:	f7ff ffbd 	bl	800f7c8 <__sinit>
 800f84e:	3648      	adds	r6, #72	; 0x48
 800f850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f854:	3b01      	subs	r3, #1
 800f856:	d503      	bpl.n	800f860 <__sfp+0x28>
 800f858:	6833      	ldr	r3, [r6, #0]
 800f85a:	b30b      	cbz	r3, 800f8a0 <__sfp+0x68>
 800f85c:	6836      	ldr	r6, [r6, #0]
 800f85e:	e7f7      	b.n	800f850 <__sfp+0x18>
 800f860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f864:	b9d5      	cbnz	r5, 800f89c <__sfp+0x64>
 800f866:	4b16      	ldr	r3, [pc, #88]	; (800f8c0 <__sfp+0x88>)
 800f868:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f86c:	60e3      	str	r3, [r4, #12]
 800f86e:	6665      	str	r5, [r4, #100]	; 0x64
 800f870:	f000 fbae 	bl	800ffd0 <__retarget_lock_init_recursive>
 800f874:	f7ff ff96 	bl	800f7a4 <__sfp_lock_release>
 800f878:	2208      	movs	r2, #8
 800f87a:	4629      	mov	r1, r5
 800f87c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f880:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f884:	6025      	str	r5, [r4, #0]
 800f886:	61a5      	str	r5, [r4, #24]
 800f888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f88c:	f7fe ffdc 	bl	800e848 <memset>
 800f890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f898:	4620      	mov	r0, r4
 800f89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f89c:	3468      	adds	r4, #104	; 0x68
 800f89e:	e7d9      	b.n	800f854 <__sfp+0x1c>
 800f8a0:	2104      	movs	r1, #4
 800f8a2:	4638      	mov	r0, r7
 800f8a4:	f7ff ff62 	bl	800f76c <__sfmoreglue>
 800f8a8:	4604      	mov	r4, r0
 800f8aa:	6030      	str	r0, [r6, #0]
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	d1d5      	bne.n	800f85c <__sfp+0x24>
 800f8b0:	f7ff ff78 	bl	800f7a4 <__sfp_lock_release>
 800f8b4:	230c      	movs	r3, #12
 800f8b6:	603b      	str	r3, [r7, #0]
 800f8b8:	e7ee      	b.n	800f898 <__sfp+0x60>
 800f8ba:	bf00      	nop
 800f8bc:	08012e24 	.word	0x08012e24
 800f8c0:	ffff0001 	.word	0xffff0001

0800f8c4 <_fwalk_reent>:
 800f8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c8:	4606      	mov	r6, r0
 800f8ca:	4688      	mov	r8, r1
 800f8cc:	2700      	movs	r7, #0
 800f8ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f8d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8d6:	f1b9 0901 	subs.w	r9, r9, #1
 800f8da:	d505      	bpl.n	800f8e8 <_fwalk_reent+0x24>
 800f8dc:	6824      	ldr	r4, [r4, #0]
 800f8de:	2c00      	cmp	r4, #0
 800f8e0:	d1f7      	bne.n	800f8d2 <_fwalk_reent+0xe>
 800f8e2:	4638      	mov	r0, r7
 800f8e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8e8:	89ab      	ldrh	r3, [r5, #12]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d907      	bls.n	800f8fe <_fwalk_reent+0x3a>
 800f8ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	d003      	beq.n	800f8fe <_fwalk_reent+0x3a>
 800f8f6:	4629      	mov	r1, r5
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	47c0      	blx	r8
 800f8fc:	4307      	orrs	r7, r0
 800f8fe:	3568      	adds	r5, #104	; 0x68
 800f900:	e7e9      	b.n	800f8d6 <_fwalk_reent+0x12>

0800f902 <rshift>:
 800f902:	6903      	ldr	r3, [r0, #16]
 800f904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f908:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f90c:	f100 0414 	add.w	r4, r0, #20
 800f910:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f914:	dd46      	ble.n	800f9a4 <rshift+0xa2>
 800f916:	f011 011f 	ands.w	r1, r1, #31
 800f91a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f91e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f922:	d10c      	bne.n	800f93e <rshift+0x3c>
 800f924:	4629      	mov	r1, r5
 800f926:	f100 0710 	add.w	r7, r0, #16
 800f92a:	42b1      	cmp	r1, r6
 800f92c:	d335      	bcc.n	800f99a <rshift+0x98>
 800f92e:	1a9b      	subs	r3, r3, r2
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	1eea      	subs	r2, r5, #3
 800f934:	4296      	cmp	r6, r2
 800f936:	bf38      	it	cc
 800f938:	2300      	movcc	r3, #0
 800f93a:	4423      	add	r3, r4
 800f93c:	e015      	b.n	800f96a <rshift+0x68>
 800f93e:	46a1      	mov	r9, r4
 800f940:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f944:	f1c1 0820 	rsb	r8, r1, #32
 800f948:	40cf      	lsrs	r7, r1
 800f94a:	f105 0e04 	add.w	lr, r5, #4
 800f94e:	4576      	cmp	r6, lr
 800f950:	46f4      	mov	ip, lr
 800f952:	d816      	bhi.n	800f982 <rshift+0x80>
 800f954:	1a9a      	subs	r2, r3, r2
 800f956:	0092      	lsls	r2, r2, #2
 800f958:	3a04      	subs	r2, #4
 800f95a:	3501      	adds	r5, #1
 800f95c:	42ae      	cmp	r6, r5
 800f95e:	bf38      	it	cc
 800f960:	2200      	movcc	r2, #0
 800f962:	18a3      	adds	r3, r4, r2
 800f964:	50a7      	str	r7, [r4, r2]
 800f966:	b107      	cbz	r7, 800f96a <rshift+0x68>
 800f968:	3304      	adds	r3, #4
 800f96a:	42a3      	cmp	r3, r4
 800f96c:	eba3 0204 	sub.w	r2, r3, r4
 800f970:	bf08      	it	eq
 800f972:	2300      	moveq	r3, #0
 800f974:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f978:	6102      	str	r2, [r0, #16]
 800f97a:	bf08      	it	eq
 800f97c:	6143      	streq	r3, [r0, #20]
 800f97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f982:	f8dc c000 	ldr.w	ip, [ip]
 800f986:	fa0c fc08 	lsl.w	ip, ip, r8
 800f98a:	ea4c 0707 	orr.w	r7, ip, r7
 800f98e:	f849 7b04 	str.w	r7, [r9], #4
 800f992:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f996:	40cf      	lsrs	r7, r1
 800f998:	e7d9      	b.n	800f94e <rshift+0x4c>
 800f99a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f99e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f9a2:	e7c2      	b.n	800f92a <rshift+0x28>
 800f9a4:	4623      	mov	r3, r4
 800f9a6:	e7e0      	b.n	800f96a <rshift+0x68>

0800f9a8 <__hexdig_fun>:
 800f9a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f9ac:	2b09      	cmp	r3, #9
 800f9ae:	d802      	bhi.n	800f9b6 <__hexdig_fun+0xe>
 800f9b0:	3820      	subs	r0, #32
 800f9b2:	b2c0      	uxtb	r0, r0
 800f9b4:	4770      	bx	lr
 800f9b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f9ba:	2b05      	cmp	r3, #5
 800f9bc:	d801      	bhi.n	800f9c2 <__hexdig_fun+0x1a>
 800f9be:	3847      	subs	r0, #71	; 0x47
 800f9c0:	e7f7      	b.n	800f9b2 <__hexdig_fun+0xa>
 800f9c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f9c6:	2b05      	cmp	r3, #5
 800f9c8:	d801      	bhi.n	800f9ce <__hexdig_fun+0x26>
 800f9ca:	3827      	subs	r0, #39	; 0x27
 800f9cc:	e7f1      	b.n	800f9b2 <__hexdig_fun+0xa>
 800f9ce:	2000      	movs	r0, #0
 800f9d0:	4770      	bx	lr
	...

0800f9d4 <__gethex>:
 800f9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d8:	b08b      	sub	sp, #44	; 0x2c
 800f9da:	9305      	str	r3, [sp, #20]
 800f9dc:	4bb2      	ldr	r3, [pc, #712]	; (800fca8 <__gethex+0x2d4>)
 800f9de:	9002      	str	r0, [sp, #8]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	468b      	mov	fp, r1
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	4690      	mov	r8, r2
 800f9e8:	9303      	str	r3, [sp, #12]
 800f9ea:	f7f0 fc27 	bl	800023c <strlen>
 800f9ee:	4682      	mov	sl, r0
 800f9f0:	9b03      	ldr	r3, [sp, #12]
 800f9f2:	f8db 2000 	ldr.w	r2, [fp]
 800f9f6:	4403      	add	r3, r0
 800f9f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f9fc:	9306      	str	r3, [sp, #24]
 800f9fe:	1c93      	adds	r3, r2, #2
 800fa00:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fa04:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fa08:	32fe      	adds	r2, #254	; 0xfe
 800fa0a:	18d1      	adds	r1, r2, r3
 800fa0c:	461f      	mov	r7, r3
 800fa0e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fa12:	9101      	str	r1, [sp, #4]
 800fa14:	2830      	cmp	r0, #48	; 0x30
 800fa16:	d0f8      	beq.n	800fa0a <__gethex+0x36>
 800fa18:	f7ff ffc6 	bl	800f9a8 <__hexdig_fun>
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d13a      	bne.n	800fa98 <__gethex+0xc4>
 800fa22:	4652      	mov	r2, sl
 800fa24:	4638      	mov	r0, r7
 800fa26:	9903      	ldr	r1, [sp, #12]
 800fa28:	f001 fcef 	bl	801140a <strncmp>
 800fa2c:	4605      	mov	r5, r0
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d166      	bne.n	800fb00 <__gethex+0x12c>
 800fa32:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fa36:	eb07 060a 	add.w	r6, r7, sl
 800fa3a:	f7ff ffb5 	bl	800f9a8 <__hexdig_fun>
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	d060      	beq.n	800fb04 <__gethex+0x130>
 800fa42:	4633      	mov	r3, r6
 800fa44:	7818      	ldrb	r0, [r3, #0]
 800fa46:	461f      	mov	r7, r3
 800fa48:	2830      	cmp	r0, #48	; 0x30
 800fa4a:	f103 0301 	add.w	r3, r3, #1
 800fa4e:	d0f9      	beq.n	800fa44 <__gethex+0x70>
 800fa50:	f7ff ffaa 	bl	800f9a8 <__hexdig_fun>
 800fa54:	2301      	movs	r3, #1
 800fa56:	fab0 f480 	clz	r4, r0
 800fa5a:	4635      	mov	r5, r6
 800fa5c:	0964      	lsrs	r4, r4, #5
 800fa5e:	9301      	str	r3, [sp, #4]
 800fa60:	463a      	mov	r2, r7
 800fa62:	4616      	mov	r6, r2
 800fa64:	7830      	ldrb	r0, [r6, #0]
 800fa66:	3201      	adds	r2, #1
 800fa68:	f7ff ff9e 	bl	800f9a8 <__hexdig_fun>
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	d1f8      	bne.n	800fa62 <__gethex+0x8e>
 800fa70:	4652      	mov	r2, sl
 800fa72:	4630      	mov	r0, r6
 800fa74:	9903      	ldr	r1, [sp, #12]
 800fa76:	f001 fcc8 	bl	801140a <strncmp>
 800fa7a:	b980      	cbnz	r0, 800fa9e <__gethex+0xca>
 800fa7c:	b94d      	cbnz	r5, 800fa92 <__gethex+0xbe>
 800fa7e:	eb06 050a 	add.w	r5, r6, sl
 800fa82:	462a      	mov	r2, r5
 800fa84:	4616      	mov	r6, r2
 800fa86:	7830      	ldrb	r0, [r6, #0]
 800fa88:	3201      	adds	r2, #1
 800fa8a:	f7ff ff8d 	bl	800f9a8 <__hexdig_fun>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	d1f8      	bne.n	800fa84 <__gethex+0xb0>
 800fa92:	1bad      	subs	r5, r5, r6
 800fa94:	00ad      	lsls	r5, r5, #2
 800fa96:	e004      	b.n	800faa2 <__gethex+0xce>
 800fa98:	2400      	movs	r4, #0
 800fa9a:	4625      	mov	r5, r4
 800fa9c:	e7e0      	b.n	800fa60 <__gethex+0x8c>
 800fa9e:	2d00      	cmp	r5, #0
 800faa0:	d1f7      	bne.n	800fa92 <__gethex+0xbe>
 800faa2:	7833      	ldrb	r3, [r6, #0]
 800faa4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800faa8:	2b50      	cmp	r3, #80	; 0x50
 800faaa:	d139      	bne.n	800fb20 <__gethex+0x14c>
 800faac:	7873      	ldrb	r3, [r6, #1]
 800faae:	2b2b      	cmp	r3, #43	; 0x2b
 800fab0:	d02a      	beq.n	800fb08 <__gethex+0x134>
 800fab2:	2b2d      	cmp	r3, #45	; 0x2d
 800fab4:	d02c      	beq.n	800fb10 <__gethex+0x13c>
 800fab6:	f04f 0900 	mov.w	r9, #0
 800faba:	1c71      	adds	r1, r6, #1
 800fabc:	7808      	ldrb	r0, [r1, #0]
 800fabe:	f7ff ff73 	bl	800f9a8 <__hexdig_fun>
 800fac2:	1e43      	subs	r3, r0, #1
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	2b18      	cmp	r3, #24
 800fac8:	d82a      	bhi.n	800fb20 <__gethex+0x14c>
 800faca:	f1a0 0210 	sub.w	r2, r0, #16
 800face:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fad2:	f7ff ff69 	bl	800f9a8 <__hexdig_fun>
 800fad6:	1e43      	subs	r3, r0, #1
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	2b18      	cmp	r3, #24
 800fadc:	d91b      	bls.n	800fb16 <__gethex+0x142>
 800fade:	f1b9 0f00 	cmp.w	r9, #0
 800fae2:	d000      	beq.n	800fae6 <__gethex+0x112>
 800fae4:	4252      	negs	r2, r2
 800fae6:	4415      	add	r5, r2
 800fae8:	f8cb 1000 	str.w	r1, [fp]
 800faec:	b1d4      	cbz	r4, 800fb24 <__gethex+0x150>
 800faee:	9b01      	ldr	r3, [sp, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	bf14      	ite	ne
 800faf4:	2700      	movne	r7, #0
 800faf6:	2706      	moveq	r7, #6
 800faf8:	4638      	mov	r0, r7
 800fafa:	b00b      	add	sp, #44	; 0x2c
 800fafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb00:	463e      	mov	r6, r7
 800fb02:	4625      	mov	r5, r4
 800fb04:	2401      	movs	r4, #1
 800fb06:	e7cc      	b.n	800faa2 <__gethex+0xce>
 800fb08:	f04f 0900 	mov.w	r9, #0
 800fb0c:	1cb1      	adds	r1, r6, #2
 800fb0e:	e7d5      	b.n	800fabc <__gethex+0xe8>
 800fb10:	f04f 0901 	mov.w	r9, #1
 800fb14:	e7fa      	b.n	800fb0c <__gethex+0x138>
 800fb16:	230a      	movs	r3, #10
 800fb18:	fb03 0202 	mla	r2, r3, r2, r0
 800fb1c:	3a10      	subs	r2, #16
 800fb1e:	e7d6      	b.n	800face <__gethex+0xfa>
 800fb20:	4631      	mov	r1, r6
 800fb22:	e7e1      	b.n	800fae8 <__gethex+0x114>
 800fb24:	4621      	mov	r1, r4
 800fb26:	1bf3      	subs	r3, r6, r7
 800fb28:	3b01      	subs	r3, #1
 800fb2a:	2b07      	cmp	r3, #7
 800fb2c:	dc0a      	bgt.n	800fb44 <__gethex+0x170>
 800fb2e:	9802      	ldr	r0, [sp, #8]
 800fb30:	f000 fa64 	bl	800fffc <_Balloc>
 800fb34:	4604      	mov	r4, r0
 800fb36:	b940      	cbnz	r0, 800fb4a <__gethex+0x176>
 800fb38:	4602      	mov	r2, r0
 800fb3a:	21de      	movs	r1, #222	; 0xde
 800fb3c:	4b5b      	ldr	r3, [pc, #364]	; (800fcac <__gethex+0x2d8>)
 800fb3e:	485c      	ldr	r0, [pc, #368]	; (800fcb0 <__gethex+0x2dc>)
 800fb40:	f001 fd58 	bl	80115f4 <__assert_func>
 800fb44:	3101      	adds	r1, #1
 800fb46:	105b      	asrs	r3, r3, #1
 800fb48:	e7ef      	b.n	800fb2a <__gethex+0x156>
 800fb4a:	f04f 0b00 	mov.w	fp, #0
 800fb4e:	f100 0914 	add.w	r9, r0, #20
 800fb52:	f1ca 0301 	rsb	r3, sl, #1
 800fb56:	f8cd 9010 	str.w	r9, [sp, #16]
 800fb5a:	f8cd b004 	str.w	fp, [sp, #4]
 800fb5e:	9308      	str	r3, [sp, #32]
 800fb60:	42b7      	cmp	r7, r6
 800fb62:	d33f      	bcc.n	800fbe4 <__gethex+0x210>
 800fb64:	9f04      	ldr	r7, [sp, #16]
 800fb66:	9b01      	ldr	r3, [sp, #4]
 800fb68:	f847 3b04 	str.w	r3, [r7], #4
 800fb6c:	eba7 0709 	sub.w	r7, r7, r9
 800fb70:	10bf      	asrs	r7, r7, #2
 800fb72:	6127      	str	r7, [r4, #16]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f000 fb33 	bl	80101e0 <__hi0bits>
 800fb7a:	017f      	lsls	r7, r7, #5
 800fb7c:	f8d8 6000 	ldr.w	r6, [r8]
 800fb80:	1a3f      	subs	r7, r7, r0
 800fb82:	42b7      	cmp	r7, r6
 800fb84:	dd62      	ble.n	800fc4c <__gethex+0x278>
 800fb86:	1bbf      	subs	r7, r7, r6
 800fb88:	4639      	mov	r1, r7
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f000 fecd 	bl	801092a <__any_on>
 800fb90:	4682      	mov	sl, r0
 800fb92:	b1a8      	cbz	r0, 800fbc0 <__gethex+0x1ec>
 800fb94:	f04f 0a01 	mov.w	sl, #1
 800fb98:	1e7b      	subs	r3, r7, #1
 800fb9a:	1159      	asrs	r1, r3, #5
 800fb9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fba0:	f003 021f 	and.w	r2, r3, #31
 800fba4:	fa0a f202 	lsl.w	r2, sl, r2
 800fba8:	420a      	tst	r2, r1
 800fbaa:	d009      	beq.n	800fbc0 <__gethex+0x1ec>
 800fbac:	4553      	cmp	r3, sl
 800fbae:	dd05      	ble.n	800fbbc <__gethex+0x1e8>
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	1eb9      	subs	r1, r7, #2
 800fbb4:	f000 feb9 	bl	801092a <__any_on>
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	d144      	bne.n	800fc46 <__gethex+0x272>
 800fbbc:	f04f 0a02 	mov.w	sl, #2
 800fbc0:	4639      	mov	r1, r7
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f7ff fe9d 	bl	800f902 <rshift>
 800fbc8:	443d      	add	r5, r7
 800fbca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fbce:	42ab      	cmp	r3, r5
 800fbd0:	da4a      	bge.n	800fc68 <__gethex+0x294>
 800fbd2:	4621      	mov	r1, r4
 800fbd4:	9802      	ldr	r0, [sp, #8]
 800fbd6:	f000 fa51 	bl	801007c <_Bfree>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fbde:	27a3      	movs	r7, #163	; 0xa3
 800fbe0:	6013      	str	r3, [r2, #0]
 800fbe2:	e789      	b.n	800faf8 <__gethex+0x124>
 800fbe4:	1e73      	subs	r3, r6, #1
 800fbe6:	9a06      	ldr	r2, [sp, #24]
 800fbe8:	9307      	str	r3, [sp, #28]
 800fbea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d019      	beq.n	800fc26 <__gethex+0x252>
 800fbf2:	f1bb 0f20 	cmp.w	fp, #32
 800fbf6:	d107      	bne.n	800fc08 <__gethex+0x234>
 800fbf8:	9b04      	ldr	r3, [sp, #16]
 800fbfa:	9a01      	ldr	r2, [sp, #4]
 800fbfc:	f843 2b04 	str.w	r2, [r3], #4
 800fc00:	9304      	str	r3, [sp, #16]
 800fc02:	2300      	movs	r3, #0
 800fc04:	469b      	mov	fp, r3
 800fc06:	9301      	str	r3, [sp, #4]
 800fc08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fc0c:	f7ff fecc 	bl	800f9a8 <__hexdig_fun>
 800fc10:	9b01      	ldr	r3, [sp, #4]
 800fc12:	f000 000f 	and.w	r0, r0, #15
 800fc16:	fa00 f00b 	lsl.w	r0, r0, fp
 800fc1a:	4303      	orrs	r3, r0
 800fc1c:	9301      	str	r3, [sp, #4]
 800fc1e:	f10b 0b04 	add.w	fp, fp, #4
 800fc22:	9b07      	ldr	r3, [sp, #28]
 800fc24:	e00d      	b.n	800fc42 <__gethex+0x26e>
 800fc26:	9a08      	ldr	r2, [sp, #32]
 800fc28:	1e73      	subs	r3, r6, #1
 800fc2a:	4413      	add	r3, r2
 800fc2c:	42bb      	cmp	r3, r7
 800fc2e:	d3e0      	bcc.n	800fbf2 <__gethex+0x21e>
 800fc30:	4618      	mov	r0, r3
 800fc32:	4652      	mov	r2, sl
 800fc34:	9903      	ldr	r1, [sp, #12]
 800fc36:	9309      	str	r3, [sp, #36]	; 0x24
 800fc38:	f001 fbe7 	bl	801140a <strncmp>
 800fc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc3e:	2800      	cmp	r0, #0
 800fc40:	d1d7      	bne.n	800fbf2 <__gethex+0x21e>
 800fc42:	461e      	mov	r6, r3
 800fc44:	e78c      	b.n	800fb60 <__gethex+0x18c>
 800fc46:	f04f 0a03 	mov.w	sl, #3
 800fc4a:	e7b9      	b.n	800fbc0 <__gethex+0x1ec>
 800fc4c:	da09      	bge.n	800fc62 <__gethex+0x28e>
 800fc4e:	1bf7      	subs	r7, r6, r7
 800fc50:	4621      	mov	r1, r4
 800fc52:	463a      	mov	r2, r7
 800fc54:	9802      	ldr	r0, [sp, #8]
 800fc56:	f000 fc29 	bl	80104ac <__lshift>
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	1bed      	subs	r5, r5, r7
 800fc5e:	f100 0914 	add.w	r9, r0, #20
 800fc62:	f04f 0a00 	mov.w	sl, #0
 800fc66:	e7b0      	b.n	800fbca <__gethex+0x1f6>
 800fc68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fc6c:	42a8      	cmp	r0, r5
 800fc6e:	dd72      	ble.n	800fd56 <__gethex+0x382>
 800fc70:	1b45      	subs	r5, r0, r5
 800fc72:	42ae      	cmp	r6, r5
 800fc74:	dc35      	bgt.n	800fce2 <__gethex+0x30e>
 800fc76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	d029      	beq.n	800fcd2 <__gethex+0x2fe>
 800fc7e:	2b03      	cmp	r3, #3
 800fc80:	d02b      	beq.n	800fcda <__gethex+0x306>
 800fc82:	2b01      	cmp	r3, #1
 800fc84:	d11c      	bne.n	800fcc0 <__gethex+0x2ec>
 800fc86:	42ae      	cmp	r6, r5
 800fc88:	d11a      	bne.n	800fcc0 <__gethex+0x2ec>
 800fc8a:	2e01      	cmp	r6, #1
 800fc8c:	d112      	bne.n	800fcb4 <__gethex+0x2e0>
 800fc8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc92:	9a05      	ldr	r2, [sp, #20]
 800fc94:	2762      	movs	r7, #98	; 0x62
 800fc96:	6013      	str	r3, [r2, #0]
 800fc98:	2301      	movs	r3, #1
 800fc9a:	6123      	str	r3, [r4, #16]
 800fc9c:	f8c9 3000 	str.w	r3, [r9]
 800fca0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fca2:	601c      	str	r4, [r3, #0]
 800fca4:	e728      	b.n	800faf8 <__gethex+0x124>
 800fca6:	bf00      	nop
 800fca8:	08013064 	.word	0x08013064
 800fcac:	08012fec 	.word	0x08012fec
 800fcb0:	08012ffd 	.word	0x08012ffd
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	1e71      	subs	r1, r6, #1
 800fcb8:	f000 fe37 	bl	801092a <__any_on>
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	d1e6      	bne.n	800fc8e <__gethex+0x2ba>
 800fcc0:	4621      	mov	r1, r4
 800fcc2:	9802      	ldr	r0, [sp, #8]
 800fcc4:	f000 f9da 	bl	801007c <_Bfree>
 800fcc8:	2300      	movs	r3, #0
 800fcca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fccc:	2750      	movs	r7, #80	; 0x50
 800fcce:	6013      	str	r3, [r2, #0]
 800fcd0:	e712      	b.n	800faf8 <__gethex+0x124>
 800fcd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d1f3      	bne.n	800fcc0 <__gethex+0x2ec>
 800fcd8:	e7d9      	b.n	800fc8e <__gethex+0x2ba>
 800fcda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1d6      	bne.n	800fc8e <__gethex+0x2ba>
 800fce0:	e7ee      	b.n	800fcc0 <__gethex+0x2ec>
 800fce2:	1e6f      	subs	r7, r5, #1
 800fce4:	f1ba 0f00 	cmp.w	sl, #0
 800fce8:	d132      	bne.n	800fd50 <__gethex+0x37c>
 800fcea:	b127      	cbz	r7, 800fcf6 <__gethex+0x322>
 800fcec:	4639      	mov	r1, r7
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f000 fe1b 	bl	801092a <__any_on>
 800fcf4:	4682      	mov	sl, r0
 800fcf6:	2101      	movs	r1, #1
 800fcf8:	117b      	asrs	r3, r7, #5
 800fcfa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fcfe:	f007 071f 	and.w	r7, r7, #31
 800fd02:	fa01 f707 	lsl.w	r7, r1, r7
 800fd06:	421f      	tst	r7, r3
 800fd08:	f04f 0702 	mov.w	r7, #2
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	4620      	mov	r0, r4
 800fd10:	bf18      	it	ne
 800fd12:	f04a 0a02 	orrne.w	sl, sl, #2
 800fd16:	1b76      	subs	r6, r6, r5
 800fd18:	f7ff fdf3 	bl	800f902 <rshift>
 800fd1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fd20:	f1ba 0f00 	cmp.w	sl, #0
 800fd24:	d048      	beq.n	800fdb8 <__gethex+0x3e4>
 800fd26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd2a:	2b02      	cmp	r3, #2
 800fd2c:	d015      	beq.n	800fd5a <__gethex+0x386>
 800fd2e:	2b03      	cmp	r3, #3
 800fd30:	d017      	beq.n	800fd62 <__gethex+0x38e>
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d109      	bne.n	800fd4a <__gethex+0x376>
 800fd36:	f01a 0f02 	tst.w	sl, #2
 800fd3a:	d006      	beq.n	800fd4a <__gethex+0x376>
 800fd3c:	f8d9 0000 	ldr.w	r0, [r9]
 800fd40:	ea4a 0a00 	orr.w	sl, sl, r0
 800fd44:	f01a 0f01 	tst.w	sl, #1
 800fd48:	d10e      	bne.n	800fd68 <__gethex+0x394>
 800fd4a:	f047 0710 	orr.w	r7, r7, #16
 800fd4e:	e033      	b.n	800fdb8 <__gethex+0x3e4>
 800fd50:	f04f 0a01 	mov.w	sl, #1
 800fd54:	e7cf      	b.n	800fcf6 <__gethex+0x322>
 800fd56:	2701      	movs	r7, #1
 800fd58:	e7e2      	b.n	800fd20 <__gethex+0x34c>
 800fd5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd5c:	f1c3 0301 	rsb	r3, r3, #1
 800fd60:	9315      	str	r3, [sp, #84]	; 0x54
 800fd62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d0f0      	beq.n	800fd4a <__gethex+0x376>
 800fd68:	f04f 0c00 	mov.w	ip, #0
 800fd6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd70:	f104 0314 	add.w	r3, r4, #20
 800fd74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fd78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd82:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fd86:	d01c      	beq.n	800fdc2 <__gethex+0x3ee>
 800fd88:	3201      	adds	r2, #1
 800fd8a:	6002      	str	r2, [r0, #0]
 800fd8c:	2f02      	cmp	r7, #2
 800fd8e:	f104 0314 	add.w	r3, r4, #20
 800fd92:	d13d      	bne.n	800fe10 <__gethex+0x43c>
 800fd94:	f8d8 2000 	ldr.w	r2, [r8]
 800fd98:	3a01      	subs	r2, #1
 800fd9a:	42b2      	cmp	r2, r6
 800fd9c:	d10a      	bne.n	800fdb4 <__gethex+0x3e0>
 800fd9e:	2201      	movs	r2, #1
 800fda0:	1171      	asrs	r1, r6, #5
 800fda2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fda6:	f006 061f 	and.w	r6, r6, #31
 800fdaa:	fa02 f606 	lsl.w	r6, r2, r6
 800fdae:	421e      	tst	r6, r3
 800fdb0:	bf18      	it	ne
 800fdb2:	4617      	movne	r7, r2
 800fdb4:	f047 0720 	orr.w	r7, r7, #32
 800fdb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fdba:	601c      	str	r4, [r3, #0]
 800fdbc:	9b05      	ldr	r3, [sp, #20]
 800fdbe:	601d      	str	r5, [r3, #0]
 800fdc0:	e69a      	b.n	800faf8 <__gethex+0x124>
 800fdc2:	4299      	cmp	r1, r3
 800fdc4:	f843 cc04 	str.w	ip, [r3, #-4]
 800fdc8:	d8d8      	bhi.n	800fd7c <__gethex+0x3a8>
 800fdca:	68a3      	ldr	r3, [r4, #8]
 800fdcc:	459b      	cmp	fp, r3
 800fdce:	db17      	blt.n	800fe00 <__gethex+0x42c>
 800fdd0:	6861      	ldr	r1, [r4, #4]
 800fdd2:	9802      	ldr	r0, [sp, #8]
 800fdd4:	3101      	adds	r1, #1
 800fdd6:	f000 f911 	bl	800fffc <_Balloc>
 800fdda:	4681      	mov	r9, r0
 800fddc:	b918      	cbnz	r0, 800fde6 <__gethex+0x412>
 800fdde:	4602      	mov	r2, r0
 800fde0:	2184      	movs	r1, #132	; 0x84
 800fde2:	4b19      	ldr	r3, [pc, #100]	; (800fe48 <__gethex+0x474>)
 800fde4:	e6ab      	b.n	800fb3e <__gethex+0x16a>
 800fde6:	6922      	ldr	r2, [r4, #16]
 800fde8:	f104 010c 	add.w	r1, r4, #12
 800fdec:	3202      	adds	r2, #2
 800fdee:	0092      	lsls	r2, r2, #2
 800fdf0:	300c      	adds	r0, #12
 800fdf2:	f7fe fd1b 	bl	800e82c <memcpy>
 800fdf6:	4621      	mov	r1, r4
 800fdf8:	9802      	ldr	r0, [sp, #8]
 800fdfa:	f000 f93f 	bl	801007c <_Bfree>
 800fdfe:	464c      	mov	r4, r9
 800fe00:	6923      	ldr	r3, [r4, #16]
 800fe02:	1c5a      	adds	r2, r3, #1
 800fe04:	6122      	str	r2, [r4, #16]
 800fe06:	2201      	movs	r2, #1
 800fe08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fe0c:	615a      	str	r2, [r3, #20]
 800fe0e:	e7bd      	b.n	800fd8c <__gethex+0x3b8>
 800fe10:	6922      	ldr	r2, [r4, #16]
 800fe12:	455a      	cmp	r2, fp
 800fe14:	dd0b      	ble.n	800fe2e <__gethex+0x45a>
 800fe16:	2101      	movs	r1, #1
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f7ff fd72 	bl	800f902 <rshift>
 800fe1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe22:	3501      	adds	r5, #1
 800fe24:	42ab      	cmp	r3, r5
 800fe26:	f6ff aed4 	blt.w	800fbd2 <__gethex+0x1fe>
 800fe2a:	2701      	movs	r7, #1
 800fe2c:	e7c2      	b.n	800fdb4 <__gethex+0x3e0>
 800fe2e:	f016 061f 	ands.w	r6, r6, #31
 800fe32:	d0fa      	beq.n	800fe2a <__gethex+0x456>
 800fe34:	4453      	add	r3, sl
 800fe36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fe3a:	f000 f9d1 	bl	80101e0 <__hi0bits>
 800fe3e:	f1c6 0620 	rsb	r6, r6, #32
 800fe42:	42b0      	cmp	r0, r6
 800fe44:	dbe7      	blt.n	800fe16 <__gethex+0x442>
 800fe46:	e7f0      	b.n	800fe2a <__gethex+0x456>
 800fe48:	08012fec 	.word	0x08012fec

0800fe4c <L_shift>:
 800fe4c:	f1c2 0208 	rsb	r2, r2, #8
 800fe50:	0092      	lsls	r2, r2, #2
 800fe52:	b570      	push	{r4, r5, r6, lr}
 800fe54:	f1c2 0620 	rsb	r6, r2, #32
 800fe58:	6843      	ldr	r3, [r0, #4]
 800fe5a:	6804      	ldr	r4, [r0, #0]
 800fe5c:	fa03 f506 	lsl.w	r5, r3, r6
 800fe60:	432c      	orrs	r4, r5
 800fe62:	40d3      	lsrs	r3, r2
 800fe64:	6004      	str	r4, [r0, #0]
 800fe66:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe6a:	4288      	cmp	r0, r1
 800fe6c:	d3f4      	bcc.n	800fe58 <L_shift+0xc>
 800fe6e:	bd70      	pop	{r4, r5, r6, pc}

0800fe70 <__match>:
 800fe70:	b530      	push	{r4, r5, lr}
 800fe72:	6803      	ldr	r3, [r0, #0]
 800fe74:	3301      	adds	r3, #1
 800fe76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe7a:	b914      	cbnz	r4, 800fe82 <__match+0x12>
 800fe7c:	6003      	str	r3, [r0, #0]
 800fe7e:	2001      	movs	r0, #1
 800fe80:	bd30      	pop	{r4, r5, pc}
 800fe82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fe8a:	2d19      	cmp	r5, #25
 800fe8c:	bf98      	it	ls
 800fe8e:	3220      	addls	r2, #32
 800fe90:	42a2      	cmp	r2, r4
 800fe92:	d0f0      	beq.n	800fe76 <__match+0x6>
 800fe94:	2000      	movs	r0, #0
 800fe96:	e7f3      	b.n	800fe80 <__match+0x10>

0800fe98 <__hexnan>:
 800fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9c:	2500      	movs	r5, #0
 800fe9e:	680b      	ldr	r3, [r1, #0]
 800fea0:	4682      	mov	sl, r0
 800fea2:	115e      	asrs	r6, r3, #5
 800fea4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fea8:	f013 031f 	ands.w	r3, r3, #31
 800feac:	bf18      	it	ne
 800feae:	3604      	addne	r6, #4
 800feb0:	1f37      	subs	r7, r6, #4
 800feb2:	46b9      	mov	r9, r7
 800feb4:	463c      	mov	r4, r7
 800feb6:	46ab      	mov	fp, r5
 800feb8:	b087      	sub	sp, #28
 800feba:	4690      	mov	r8, r2
 800febc:	6802      	ldr	r2, [r0, #0]
 800febe:	9301      	str	r3, [sp, #4]
 800fec0:	f846 5c04 	str.w	r5, [r6, #-4]
 800fec4:	9502      	str	r5, [sp, #8]
 800fec6:	7851      	ldrb	r1, [r2, #1]
 800fec8:	1c53      	adds	r3, r2, #1
 800feca:	9303      	str	r3, [sp, #12]
 800fecc:	b341      	cbz	r1, 800ff20 <__hexnan+0x88>
 800fece:	4608      	mov	r0, r1
 800fed0:	9205      	str	r2, [sp, #20]
 800fed2:	9104      	str	r1, [sp, #16]
 800fed4:	f7ff fd68 	bl	800f9a8 <__hexdig_fun>
 800fed8:	2800      	cmp	r0, #0
 800feda:	d14f      	bne.n	800ff7c <__hexnan+0xe4>
 800fedc:	9904      	ldr	r1, [sp, #16]
 800fede:	9a05      	ldr	r2, [sp, #20]
 800fee0:	2920      	cmp	r1, #32
 800fee2:	d818      	bhi.n	800ff16 <__hexnan+0x7e>
 800fee4:	9b02      	ldr	r3, [sp, #8]
 800fee6:	459b      	cmp	fp, r3
 800fee8:	dd13      	ble.n	800ff12 <__hexnan+0x7a>
 800feea:	454c      	cmp	r4, r9
 800feec:	d206      	bcs.n	800fefc <__hexnan+0x64>
 800feee:	2d07      	cmp	r5, #7
 800fef0:	dc04      	bgt.n	800fefc <__hexnan+0x64>
 800fef2:	462a      	mov	r2, r5
 800fef4:	4649      	mov	r1, r9
 800fef6:	4620      	mov	r0, r4
 800fef8:	f7ff ffa8 	bl	800fe4c <L_shift>
 800fefc:	4544      	cmp	r4, r8
 800fefe:	d950      	bls.n	800ffa2 <__hexnan+0x10a>
 800ff00:	2300      	movs	r3, #0
 800ff02:	f1a4 0904 	sub.w	r9, r4, #4
 800ff06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff0a:	461d      	mov	r5, r3
 800ff0c:	464c      	mov	r4, r9
 800ff0e:	f8cd b008 	str.w	fp, [sp, #8]
 800ff12:	9a03      	ldr	r2, [sp, #12]
 800ff14:	e7d7      	b.n	800fec6 <__hexnan+0x2e>
 800ff16:	2929      	cmp	r1, #41	; 0x29
 800ff18:	d156      	bne.n	800ffc8 <__hexnan+0x130>
 800ff1a:	3202      	adds	r2, #2
 800ff1c:	f8ca 2000 	str.w	r2, [sl]
 800ff20:	f1bb 0f00 	cmp.w	fp, #0
 800ff24:	d050      	beq.n	800ffc8 <__hexnan+0x130>
 800ff26:	454c      	cmp	r4, r9
 800ff28:	d206      	bcs.n	800ff38 <__hexnan+0xa0>
 800ff2a:	2d07      	cmp	r5, #7
 800ff2c:	dc04      	bgt.n	800ff38 <__hexnan+0xa0>
 800ff2e:	462a      	mov	r2, r5
 800ff30:	4649      	mov	r1, r9
 800ff32:	4620      	mov	r0, r4
 800ff34:	f7ff ff8a 	bl	800fe4c <L_shift>
 800ff38:	4544      	cmp	r4, r8
 800ff3a:	d934      	bls.n	800ffa6 <__hexnan+0x10e>
 800ff3c:	4623      	mov	r3, r4
 800ff3e:	f1a8 0204 	sub.w	r2, r8, #4
 800ff42:	f853 1b04 	ldr.w	r1, [r3], #4
 800ff46:	429f      	cmp	r7, r3
 800ff48:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff4c:	d2f9      	bcs.n	800ff42 <__hexnan+0xaa>
 800ff4e:	1b3b      	subs	r3, r7, r4
 800ff50:	f023 0303 	bic.w	r3, r3, #3
 800ff54:	3304      	adds	r3, #4
 800ff56:	3401      	adds	r4, #1
 800ff58:	3e03      	subs	r6, #3
 800ff5a:	42b4      	cmp	r4, r6
 800ff5c:	bf88      	it	hi
 800ff5e:	2304      	movhi	r3, #4
 800ff60:	2200      	movs	r2, #0
 800ff62:	4443      	add	r3, r8
 800ff64:	f843 2b04 	str.w	r2, [r3], #4
 800ff68:	429f      	cmp	r7, r3
 800ff6a:	d2fb      	bcs.n	800ff64 <__hexnan+0xcc>
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	b91b      	cbnz	r3, 800ff78 <__hexnan+0xe0>
 800ff70:	4547      	cmp	r7, r8
 800ff72:	d127      	bne.n	800ffc4 <__hexnan+0x12c>
 800ff74:	2301      	movs	r3, #1
 800ff76:	603b      	str	r3, [r7, #0]
 800ff78:	2005      	movs	r0, #5
 800ff7a:	e026      	b.n	800ffca <__hexnan+0x132>
 800ff7c:	3501      	adds	r5, #1
 800ff7e:	2d08      	cmp	r5, #8
 800ff80:	f10b 0b01 	add.w	fp, fp, #1
 800ff84:	dd06      	ble.n	800ff94 <__hexnan+0xfc>
 800ff86:	4544      	cmp	r4, r8
 800ff88:	d9c3      	bls.n	800ff12 <__hexnan+0x7a>
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	2501      	movs	r5, #1
 800ff8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff92:	3c04      	subs	r4, #4
 800ff94:	6822      	ldr	r2, [r4, #0]
 800ff96:	f000 000f 	and.w	r0, r0, #15
 800ff9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ff9e:	6022      	str	r2, [r4, #0]
 800ffa0:	e7b7      	b.n	800ff12 <__hexnan+0x7a>
 800ffa2:	2508      	movs	r5, #8
 800ffa4:	e7b5      	b.n	800ff12 <__hexnan+0x7a>
 800ffa6:	9b01      	ldr	r3, [sp, #4]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d0df      	beq.n	800ff6c <__hexnan+0xd4>
 800ffac:	f04f 32ff 	mov.w	r2, #4294967295
 800ffb0:	f1c3 0320 	rsb	r3, r3, #32
 800ffb4:	fa22 f303 	lsr.w	r3, r2, r3
 800ffb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ffbc:	401a      	ands	r2, r3
 800ffbe:	f846 2c04 	str.w	r2, [r6, #-4]
 800ffc2:	e7d3      	b.n	800ff6c <__hexnan+0xd4>
 800ffc4:	3f04      	subs	r7, #4
 800ffc6:	e7d1      	b.n	800ff6c <__hexnan+0xd4>
 800ffc8:	2004      	movs	r0, #4
 800ffca:	b007      	add	sp, #28
 800ffcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ffd0 <__retarget_lock_init_recursive>:
 800ffd0:	4770      	bx	lr

0800ffd2 <__retarget_lock_acquire_recursive>:
 800ffd2:	4770      	bx	lr

0800ffd4 <__retarget_lock_release_recursive>:
 800ffd4:	4770      	bx	lr

0800ffd6 <__ascii_mbtowc>:
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	b901      	cbnz	r1, 800ffdc <__ascii_mbtowc+0x6>
 800ffda:	a901      	add	r1, sp, #4
 800ffdc:	b142      	cbz	r2, 800fff0 <__ascii_mbtowc+0x1a>
 800ffde:	b14b      	cbz	r3, 800fff4 <__ascii_mbtowc+0x1e>
 800ffe0:	7813      	ldrb	r3, [r2, #0]
 800ffe2:	600b      	str	r3, [r1, #0]
 800ffe4:	7812      	ldrb	r2, [r2, #0]
 800ffe6:	1e10      	subs	r0, r2, #0
 800ffe8:	bf18      	it	ne
 800ffea:	2001      	movne	r0, #1
 800ffec:	b002      	add	sp, #8
 800ffee:	4770      	bx	lr
 800fff0:	4610      	mov	r0, r2
 800fff2:	e7fb      	b.n	800ffec <__ascii_mbtowc+0x16>
 800fff4:	f06f 0001 	mvn.w	r0, #1
 800fff8:	e7f8      	b.n	800ffec <__ascii_mbtowc+0x16>
	...

0800fffc <_Balloc>:
 800fffc:	b570      	push	{r4, r5, r6, lr}
 800fffe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010000:	4604      	mov	r4, r0
 8010002:	460d      	mov	r5, r1
 8010004:	b976      	cbnz	r6, 8010024 <_Balloc+0x28>
 8010006:	2010      	movs	r0, #16
 8010008:	f001 fc6a 	bl	80118e0 <malloc>
 801000c:	4602      	mov	r2, r0
 801000e:	6260      	str	r0, [r4, #36]	; 0x24
 8010010:	b920      	cbnz	r0, 801001c <_Balloc+0x20>
 8010012:	2166      	movs	r1, #102	; 0x66
 8010014:	4b17      	ldr	r3, [pc, #92]	; (8010074 <_Balloc+0x78>)
 8010016:	4818      	ldr	r0, [pc, #96]	; (8010078 <_Balloc+0x7c>)
 8010018:	f001 faec 	bl	80115f4 <__assert_func>
 801001c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010020:	6006      	str	r6, [r0, #0]
 8010022:	60c6      	str	r6, [r0, #12]
 8010024:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010026:	68f3      	ldr	r3, [r6, #12]
 8010028:	b183      	cbz	r3, 801004c <_Balloc+0x50>
 801002a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010032:	b9b8      	cbnz	r0, 8010064 <_Balloc+0x68>
 8010034:	2101      	movs	r1, #1
 8010036:	fa01 f605 	lsl.w	r6, r1, r5
 801003a:	1d72      	adds	r2, r6, #5
 801003c:	4620      	mov	r0, r4
 801003e:	0092      	lsls	r2, r2, #2
 8010040:	f000 fc94 	bl	801096c <_calloc_r>
 8010044:	b160      	cbz	r0, 8010060 <_Balloc+0x64>
 8010046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801004a:	e00e      	b.n	801006a <_Balloc+0x6e>
 801004c:	2221      	movs	r2, #33	; 0x21
 801004e:	2104      	movs	r1, #4
 8010050:	4620      	mov	r0, r4
 8010052:	f000 fc8b 	bl	801096c <_calloc_r>
 8010056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010058:	60f0      	str	r0, [r6, #12]
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d1e4      	bne.n	801002a <_Balloc+0x2e>
 8010060:	2000      	movs	r0, #0
 8010062:	bd70      	pop	{r4, r5, r6, pc}
 8010064:	6802      	ldr	r2, [r0, #0]
 8010066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801006a:	2300      	movs	r3, #0
 801006c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010070:	e7f7      	b.n	8010062 <_Balloc+0x66>
 8010072:	bf00      	nop
 8010074:	08013078 	.word	0x08013078
 8010078:	0801308f 	.word	0x0801308f

0801007c <_Bfree>:
 801007c:	b570      	push	{r4, r5, r6, lr}
 801007e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010080:	4605      	mov	r5, r0
 8010082:	460c      	mov	r4, r1
 8010084:	b976      	cbnz	r6, 80100a4 <_Bfree+0x28>
 8010086:	2010      	movs	r0, #16
 8010088:	f001 fc2a 	bl	80118e0 <malloc>
 801008c:	4602      	mov	r2, r0
 801008e:	6268      	str	r0, [r5, #36]	; 0x24
 8010090:	b920      	cbnz	r0, 801009c <_Bfree+0x20>
 8010092:	218a      	movs	r1, #138	; 0x8a
 8010094:	4b08      	ldr	r3, [pc, #32]	; (80100b8 <_Bfree+0x3c>)
 8010096:	4809      	ldr	r0, [pc, #36]	; (80100bc <_Bfree+0x40>)
 8010098:	f001 faac 	bl	80115f4 <__assert_func>
 801009c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100a0:	6006      	str	r6, [r0, #0]
 80100a2:	60c6      	str	r6, [r0, #12]
 80100a4:	b13c      	cbz	r4, 80100b6 <_Bfree+0x3a>
 80100a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80100a8:	6862      	ldr	r2, [r4, #4]
 80100aa:	68db      	ldr	r3, [r3, #12]
 80100ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80100b0:	6021      	str	r1, [r4, #0]
 80100b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80100b6:	bd70      	pop	{r4, r5, r6, pc}
 80100b8:	08013078 	.word	0x08013078
 80100bc:	0801308f 	.word	0x0801308f

080100c0 <__multadd>:
 80100c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c4:	4607      	mov	r7, r0
 80100c6:	460c      	mov	r4, r1
 80100c8:	461e      	mov	r6, r3
 80100ca:	2000      	movs	r0, #0
 80100cc:	690d      	ldr	r5, [r1, #16]
 80100ce:	f101 0c14 	add.w	ip, r1, #20
 80100d2:	f8dc 3000 	ldr.w	r3, [ip]
 80100d6:	3001      	adds	r0, #1
 80100d8:	b299      	uxth	r1, r3
 80100da:	fb02 6101 	mla	r1, r2, r1, r6
 80100de:	0c1e      	lsrs	r6, r3, #16
 80100e0:	0c0b      	lsrs	r3, r1, #16
 80100e2:	fb02 3306 	mla	r3, r2, r6, r3
 80100e6:	b289      	uxth	r1, r1
 80100e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80100ec:	4285      	cmp	r5, r0
 80100ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80100f2:	f84c 1b04 	str.w	r1, [ip], #4
 80100f6:	dcec      	bgt.n	80100d2 <__multadd+0x12>
 80100f8:	b30e      	cbz	r6, 801013e <__multadd+0x7e>
 80100fa:	68a3      	ldr	r3, [r4, #8]
 80100fc:	42ab      	cmp	r3, r5
 80100fe:	dc19      	bgt.n	8010134 <__multadd+0x74>
 8010100:	6861      	ldr	r1, [r4, #4]
 8010102:	4638      	mov	r0, r7
 8010104:	3101      	adds	r1, #1
 8010106:	f7ff ff79 	bl	800fffc <_Balloc>
 801010a:	4680      	mov	r8, r0
 801010c:	b928      	cbnz	r0, 801011a <__multadd+0x5a>
 801010e:	4602      	mov	r2, r0
 8010110:	21b5      	movs	r1, #181	; 0xb5
 8010112:	4b0c      	ldr	r3, [pc, #48]	; (8010144 <__multadd+0x84>)
 8010114:	480c      	ldr	r0, [pc, #48]	; (8010148 <__multadd+0x88>)
 8010116:	f001 fa6d 	bl	80115f4 <__assert_func>
 801011a:	6922      	ldr	r2, [r4, #16]
 801011c:	f104 010c 	add.w	r1, r4, #12
 8010120:	3202      	adds	r2, #2
 8010122:	0092      	lsls	r2, r2, #2
 8010124:	300c      	adds	r0, #12
 8010126:	f7fe fb81 	bl	800e82c <memcpy>
 801012a:	4621      	mov	r1, r4
 801012c:	4638      	mov	r0, r7
 801012e:	f7ff ffa5 	bl	801007c <_Bfree>
 8010132:	4644      	mov	r4, r8
 8010134:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010138:	3501      	adds	r5, #1
 801013a:	615e      	str	r6, [r3, #20]
 801013c:	6125      	str	r5, [r4, #16]
 801013e:	4620      	mov	r0, r4
 8010140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010144:	08012fec 	.word	0x08012fec
 8010148:	0801308f 	.word	0x0801308f

0801014c <__s2b>:
 801014c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010150:	4615      	mov	r5, r2
 8010152:	2209      	movs	r2, #9
 8010154:	461f      	mov	r7, r3
 8010156:	3308      	adds	r3, #8
 8010158:	460c      	mov	r4, r1
 801015a:	fb93 f3f2 	sdiv	r3, r3, r2
 801015e:	4606      	mov	r6, r0
 8010160:	2201      	movs	r2, #1
 8010162:	2100      	movs	r1, #0
 8010164:	429a      	cmp	r2, r3
 8010166:	db09      	blt.n	801017c <__s2b+0x30>
 8010168:	4630      	mov	r0, r6
 801016a:	f7ff ff47 	bl	800fffc <_Balloc>
 801016e:	b940      	cbnz	r0, 8010182 <__s2b+0x36>
 8010170:	4602      	mov	r2, r0
 8010172:	21ce      	movs	r1, #206	; 0xce
 8010174:	4b18      	ldr	r3, [pc, #96]	; (80101d8 <__s2b+0x8c>)
 8010176:	4819      	ldr	r0, [pc, #100]	; (80101dc <__s2b+0x90>)
 8010178:	f001 fa3c 	bl	80115f4 <__assert_func>
 801017c:	0052      	lsls	r2, r2, #1
 801017e:	3101      	adds	r1, #1
 8010180:	e7f0      	b.n	8010164 <__s2b+0x18>
 8010182:	9b08      	ldr	r3, [sp, #32]
 8010184:	2d09      	cmp	r5, #9
 8010186:	6143      	str	r3, [r0, #20]
 8010188:	f04f 0301 	mov.w	r3, #1
 801018c:	6103      	str	r3, [r0, #16]
 801018e:	dd16      	ble.n	80101be <__s2b+0x72>
 8010190:	f104 0909 	add.w	r9, r4, #9
 8010194:	46c8      	mov	r8, r9
 8010196:	442c      	add	r4, r5
 8010198:	f818 3b01 	ldrb.w	r3, [r8], #1
 801019c:	4601      	mov	r1, r0
 801019e:	220a      	movs	r2, #10
 80101a0:	4630      	mov	r0, r6
 80101a2:	3b30      	subs	r3, #48	; 0x30
 80101a4:	f7ff ff8c 	bl	80100c0 <__multadd>
 80101a8:	45a0      	cmp	r8, r4
 80101aa:	d1f5      	bne.n	8010198 <__s2b+0x4c>
 80101ac:	f1a5 0408 	sub.w	r4, r5, #8
 80101b0:	444c      	add	r4, r9
 80101b2:	1b2d      	subs	r5, r5, r4
 80101b4:	1963      	adds	r3, r4, r5
 80101b6:	42bb      	cmp	r3, r7
 80101b8:	db04      	blt.n	80101c4 <__s2b+0x78>
 80101ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101be:	2509      	movs	r5, #9
 80101c0:	340a      	adds	r4, #10
 80101c2:	e7f6      	b.n	80101b2 <__s2b+0x66>
 80101c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80101c8:	4601      	mov	r1, r0
 80101ca:	220a      	movs	r2, #10
 80101cc:	4630      	mov	r0, r6
 80101ce:	3b30      	subs	r3, #48	; 0x30
 80101d0:	f7ff ff76 	bl	80100c0 <__multadd>
 80101d4:	e7ee      	b.n	80101b4 <__s2b+0x68>
 80101d6:	bf00      	nop
 80101d8:	08012fec 	.word	0x08012fec
 80101dc:	0801308f 	.word	0x0801308f

080101e0 <__hi0bits>:
 80101e0:	0c02      	lsrs	r2, r0, #16
 80101e2:	0412      	lsls	r2, r2, #16
 80101e4:	4603      	mov	r3, r0
 80101e6:	b9ca      	cbnz	r2, 801021c <__hi0bits+0x3c>
 80101e8:	0403      	lsls	r3, r0, #16
 80101ea:	2010      	movs	r0, #16
 80101ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80101f0:	bf04      	itt	eq
 80101f2:	021b      	lsleq	r3, r3, #8
 80101f4:	3008      	addeq	r0, #8
 80101f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80101fa:	bf04      	itt	eq
 80101fc:	011b      	lsleq	r3, r3, #4
 80101fe:	3004      	addeq	r0, #4
 8010200:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010204:	bf04      	itt	eq
 8010206:	009b      	lsleq	r3, r3, #2
 8010208:	3002      	addeq	r0, #2
 801020a:	2b00      	cmp	r3, #0
 801020c:	db05      	blt.n	801021a <__hi0bits+0x3a>
 801020e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8010212:	f100 0001 	add.w	r0, r0, #1
 8010216:	bf08      	it	eq
 8010218:	2020      	moveq	r0, #32
 801021a:	4770      	bx	lr
 801021c:	2000      	movs	r0, #0
 801021e:	e7e5      	b.n	80101ec <__hi0bits+0xc>

08010220 <__lo0bits>:
 8010220:	6803      	ldr	r3, [r0, #0]
 8010222:	4602      	mov	r2, r0
 8010224:	f013 0007 	ands.w	r0, r3, #7
 8010228:	d00b      	beq.n	8010242 <__lo0bits+0x22>
 801022a:	07d9      	lsls	r1, r3, #31
 801022c:	d421      	bmi.n	8010272 <__lo0bits+0x52>
 801022e:	0798      	lsls	r0, r3, #30
 8010230:	bf49      	itett	mi
 8010232:	085b      	lsrmi	r3, r3, #1
 8010234:	089b      	lsrpl	r3, r3, #2
 8010236:	2001      	movmi	r0, #1
 8010238:	6013      	strmi	r3, [r2, #0]
 801023a:	bf5c      	itt	pl
 801023c:	2002      	movpl	r0, #2
 801023e:	6013      	strpl	r3, [r2, #0]
 8010240:	4770      	bx	lr
 8010242:	b299      	uxth	r1, r3
 8010244:	b909      	cbnz	r1, 801024a <__lo0bits+0x2a>
 8010246:	2010      	movs	r0, #16
 8010248:	0c1b      	lsrs	r3, r3, #16
 801024a:	b2d9      	uxtb	r1, r3
 801024c:	b909      	cbnz	r1, 8010252 <__lo0bits+0x32>
 801024e:	3008      	adds	r0, #8
 8010250:	0a1b      	lsrs	r3, r3, #8
 8010252:	0719      	lsls	r1, r3, #28
 8010254:	bf04      	itt	eq
 8010256:	091b      	lsreq	r3, r3, #4
 8010258:	3004      	addeq	r0, #4
 801025a:	0799      	lsls	r1, r3, #30
 801025c:	bf04      	itt	eq
 801025e:	089b      	lsreq	r3, r3, #2
 8010260:	3002      	addeq	r0, #2
 8010262:	07d9      	lsls	r1, r3, #31
 8010264:	d403      	bmi.n	801026e <__lo0bits+0x4e>
 8010266:	085b      	lsrs	r3, r3, #1
 8010268:	f100 0001 	add.w	r0, r0, #1
 801026c:	d003      	beq.n	8010276 <__lo0bits+0x56>
 801026e:	6013      	str	r3, [r2, #0]
 8010270:	4770      	bx	lr
 8010272:	2000      	movs	r0, #0
 8010274:	4770      	bx	lr
 8010276:	2020      	movs	r0, #32
 8010278:	4770      	bx	lr
	...

0801027c <__i2b>:
 801027c:	b510      	push	{r4, lr}
 801027e:	460c      	mov	r4, r1
 8010280:	2101      	movs	r1, #1
 8010282:	f7ff febb 	bl	800fffc <_Balloc>
 8010286:	4602      	mov	r2, r0
 8010288:	b928      	cbnz	r0, 8010296 <__i2b+0x1a>
 801028a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801028e:	4b04      	ldr	r3, [pc, #16]	; (80102a0 <__i2b+0x24>)
 8010290:	4804      	ldr	r0, [pc, #16]	; (80102a4 <__i2b+0x28>)
 8010292:	f001 f9af 	bl	80115f4 <__assert_func>
 8010296:	2301      	movs	r3, #1
 8010298:	6144      	str	r4, [r0, #20]
 801029a:	6103      	str	r3, [r0, #16]
 801029c:	bd10      	pop	{r4, pc}
 801029e:	bf00      	nop
 80102a0:	08012fec 	.word	0x08012fec
 80102a4:	0801308f 	.word	0x0801308f

080102a8 <__multiply>:
 80102a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ac:	4691      	mov	r9, r2
 80102ae:	690a      	ldr	r2, [r1, #16]
 80102b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80102b4:	460c      	mov	r4, r1
 80102b6:	429a      	cmp	r2, r3
 80102b8:	bfbe      	ittt	lt
 80102ba:	460b      	movlt	r3, r1
 80102bc:	464c      	movlt	r4, r9
 80102be:	4699      	movlt	r9, r3
 80102c0:	6927      	ldr	r7, [r4, #16]
 80102c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80102c6:	68a3      	ldr	r3, [r4, #8]
 80102c8:	6861      	ldr	r1, [r4, #4]
 80102ca:	eb07 060a 	add.w	r6, r7, sl
 80102ce:	42b3      	cmp	r3, r6
 80102d0:	b085      	sub	sp, #20
 80102d2:	bfb8      	it	lt
 80102d4:	3101      	addlt	r1, #1
 80102d6:	f7ff fe91 	bl	800fffc <_Balloc>
 80102da:	b930      	cbnz	r0, 80102ea <__multiply+0x42>
 80102dc:	4602      	mov	r2, r0
 80102de:	f240 115d 	movw	r1, #349	; 0x15d
 80102e2:	4b43      	ldr	r3, [pc, #268]	; (80103f0 <__multiply+0x148>)
 80102e4:	4843      	ldr	r0, [pc, #268]	; (80103f4 <__multiply+0x14c>)
 80102e6:	f001 f985 	bl	80115f4 <__assert_func>
 80102ea:	f100 0514 	add.w	r5, r0, #20
 80102ee:	462b      	mov	r3, r5
 80102f0:	2200      	movs	r2, #0
 80102f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80102f6:	4543      	cmp	r3, r8
 80102f8:	d321      	bcc.n	801033e <__multiply+0x96>
 80102fa:	f104 0314 	add.w	r3, r4, #20
 80102fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010302:	f109 0314 	add.w	r3, r9, #20
 8010306:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801030a:	9202      	str	r2, [sp, #8]
 801030c:	1b3a      	subs	r2, r7, r4
 801030e:	3a15      	subs	r2, #21
 8010310:	f022 0203 	bic.w	r2, r2, #3
 8010314:	3204      	adds	r2, #4
 8010316:	f104 0115 	add.w	r1, r4, #21
 801031a:	428f      	cmp	r7, r1
 801031c:	bf38      	it	cc
 801031e:	2204      	movcc	r2, #4
 8010320:	9201      	str	r2, [sp, #4]
 8010322:	9a02      	ldr	r2, [sp, #8]
 8010324:	9303      	str	r3, [sp, #12]
 8010326:	429a      	cmp	r2, r3
 8010328:	d80c      	bhi.n	8010344 <__multiply+0x9c>
 801032a:	2e00      	cmp	r6, #0
 801032c:	dd03      	ble.n	8010336 <__multiply+0x8e>
 801032e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010332:	2b00      	cmp	r3, #0
 8010334:	d059      	beq.n	80103ea <__multiply+0x142>
 8010336:	6106      	str	r6, [r0, #16]
 8010338:	b005      	add	sp, #20
 801033a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801033e:	f843 2b04 	str.w	r2, [r3], #4
 8010342:	e7d8      	b.n	80102f6 <__multiply+0x4e>
 8010344:	f8b3 a000 	ldrh.w	sl, [r3]
 8010348:	f1ba 0f00 	cmp.w	sl, #0
 801034c:	d023      	beq.n	8010396 <__multiply+0xee>
 801034e:	46a9      	mov	r9, r5
 8010350:	f04f 0c00 	mov.w	ip, #0
 8010354:	f104 0e14 	add.w	lr, r4, #20
 8010358:	f85e 2b04 	ldr.w	r2, [lr], #4
 801035c:	f8d9 1000 	ldr.w	r1, [r9]
 8010360:	fa1f fb82 	uxth.w	fp, r2
 8010364:	b289      	uxth	r1, r1
 8010366:	fb0a 110b 	mla	r1, sl, fp, r1
 801036a:	4461      	add	r1, ip
 801036c:	f8d9 c000 	ldr.w	ip, [r9]
 8010370:	0c12      	lsrs	r2, r2, #16
 8010372:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010376:	fb0a c202 	mla	r2, sl, r2, ip
 801037a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801037e:	b289      	uxth	r1, r1
 8010380:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010384:	4577      	cmp	r7, lr
 8010386:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801038a:	f849 1b04 	str.w	r1, [r9], #4
 801038e:	d8e3      	bhi.n	8010358 <__multiply+0xb0>
 8010390:	9a01      	ldr	r2, [sp, #4]
 8010392:	f845 c002 	str.w	ip, [r5, r2]
 8010396:	9a03      	ldr	r2, [sp, #12]
 8010398:	3304      	adds	r3, #4
 801039a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801039e:	f1b9 0f00 	cmp.w	r9, #0
 80103a2:	d020      	beq.n	80103e6 <__multiply+0x13e>
 80103a4:	46ae      	mov	lr, r5
 80103a6:	f04f 0a00 	mov.w	sl, #0
 80103aa:	6829      	ldr	r1, [r5, #0]
 80103ac:	f104 0c14 	add.w	ip, r4, #20
 80103b0:	f8bc b000 	ldrh.w	fp, [ip]
 80103b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80103b8:	b289      	uxth	r1, r1
 80103ba:	fb09 220b 	mla	r2, r9, fp, r2
 80103be:	4492      	add	sl, r2
 80103c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80103c4:	f84e 1b04 	str.w	r1, [lr], #4
 80103c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80103cc:	f8be 1000 	ldrh.w	r1, [lr]
 80103d0:	0c12      	lsrs	r2, r2, #16
 80103d2:	fb09 1102 	mla	r1, r9, r2, r1
 80103d6:	4567      	cmp	r7, ip
 80103d8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80103dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80103e0:	d8e6      	bhi.n	80103b0 <__multiply+0x108>
 80103e2:	9a01      	ldr	r2, [sp, #4]
 80103e4:	50a9      	str	r1, [r5, r2]
 80103e6:	3504      	adds	r5, #4
 80103e8:	e79b      	b.n	8010322 <__multiply+0x7a>
 80103ea:	3e01      	subs	r6, #1
 80103ec:	e79d      	b.n	801032a <__multiply+0x82>
 80103ee:	bf00      	nop
 80103f0:	08012fec 	.word	0x08012fec
 80103f4:	0801308f 	.word	0x0801308f

080103f8 <__pow5mult>:
 80103f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103fc:	4615      	mov	r5, r2
 80103fe:	f012 0203 	ands.w	r2, r2, #3
 8010402:	4606      	mov	r6, r0
 8010404:	460f      	mov	r7, r1
 8010406:	d007      	beq.n	8010418 <__pow5mult+0x20>
 8010408:	4c25      	ldr	r4, [pc, #148]	; (80104a0 <__pow5mult+0xa8>)
 801040a:	3a01      	subs	r2, #1
 801040c:	2300      	movs	r3, #0
 801040e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010412:	f7ff fe55 	bl	80100c0 <__multadd>
 8010416:	4607      	mov	r7, r0
 8010418:	10ad      	asrs	r5, r5, #2
 801041a:	d03d      	beq.n	8010498 <__pow5mult+0xa0>
 801041c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801041e:	b97c      	cbnz	r4, 8010440 <__pow5mult+0x48>
 8010420:	2010      	movs	r0, #16
 8010422:	f001 fa5d 	bl	80118e0 <malloc>
 8010426:	4602      	mov	r2, r0
 8010428:	6270      	str	r0, [r6, #36]	; 0x24
 801042a:	b928      	cbnz	r0, 8010438 <__pow5mult+0x40>
 801042c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010430:	4b1c      	ldr	r3, [pc, #112]	; (80104a4 <__pow5mult+0xac>)
 8010432:	481d      	ldr	r0, [pc, #116]	; (80104a8 <__pow5mult+0xb0>)
 8010434:	f001 f8de 	bl	80115f4 <__assert_func>
 8010438:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801043c:	6004      	str	r4, [r0, #0]
 801043e:	60c4      	str	r4, [r0, #12]
 8010440:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010444:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010448:	b94c      	cbnz	r4, 801045e <__pow5mult+0x66>
 801044a:	f240 2171 	movw	r1, #625	; 0x271
 801044e:	4630      	mov	r0, r6
 8010450:	f7ff ff14 	bl	801027c <__i2b>
 8010454:	2300      	movs	r3, #0
 8010456:	4604      	mov	r4, r0
 8010458:	f8c8 0008 	str.w	r0, [r8, #8]
 801045c:	6003      	str	r3, [r0, #0]
 801045e:	f04f 0900 	mov.w	r9, #0
 8010462:	07eb      	lsls	r3, r5, #31
 8010464:	d50a      	bpl.n	801047c <__pow5mult+0x84>
 8010466:	4639      	mov	r1, r7
 8010468:	4622      	mov	r2, r4
 801046a:	4630      	mov	r0, r6
 801046c:	f7ff ff1c 	bl	80102a8 <__multiply>
 8010470:	4680      	mov	r8, r0
 8010472:	4639      	mov	r1, r7
 8010474:	4630      	mov	r0, r6
 8010476:	f7ff fe01 	bl	801007c <_Bfree>
 801047a:	4647      	mov	r7, r8
 801047c:	106d      	asrs	r5, r5, #1
 801047e:	d00b      	beq.n	8010498 <__pow5mult+0xa0>
 8010480:	6820      	ldr	r0, [r4, #0]
 8010482:	b938      	cbnz	r0, 8010494 <__pow5mult+0x9c>
 8010484:	4622      	mov	r2, r4
 8010486:	4621      	mov	r1, r4
 8010488:	4630      	mov	r0, r6
 801048a:	f7ff ff0d 	bl	80102a8 <__multiply>
 801048e:	6020      	str	r0, [r4, #0]
 8010490:	f8c0 9000 	str.w	r9, [r0]
 8010494:	4604      	mov	r4, r0
 8010496:	e7e4      	b.n	8010462 <__pow5mult+0x6a>
 8010498:	4638      	mov	r0, r7
 801049a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801049e:	bf00      	nop
 80104a0:	080131e0 	.word	0x080131e0
 80104a4:	08013078 	.word	0x08013078
 80104a8:	0801308f 	.word	0x0801308f

080104ac <__lshift>:
 80104ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104b0:	460c      	mov	r4, r1
 80104b2:	4607      	mov	r7, r0
 80104b4:	4691      	mov	r9, r2
 80104b6:	6923      	ldr	r3, [r4, #16]
 80104b8:	6849      	ldr	r1, [r1, #4]
 80104ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80104be:	68a3      	ldr	r3, [r4, #8]
 80104c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80104c4:	f108 0601 	add.w	r6, r8, #1
 80104c8:	42b3      	cmp	r3, r6
 80104ca:	db0b      	blt.n	80104e4 <__lshift+0x38>
 80104cc:	4638      	mov	r0, r7
 80104ce:	f7ff fd95 	bl	800fffc <_Balloc>
 80104d2:	4605      	mov	r5, r0
 80104d4:	b948      	cbnz	r0, 80104ea <__lshift+0x3e>
 80104d6:	4602      	mov	r2, r0
 80104d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80104dc:	4b29      	ldr	r3, [pc, #164]	; (8010584 <__lshift+0xd8>)
 80104de:	482a      	ldr	r0, [pc, #168]	; (8010588 <__lshift+0xdc>)
 80104e0:	f001 f888 	bl	80115f4 <__assert_func>
 80104e4:	3101      	adds	r1, #1
 80104e6:	005b      	lsls	r3, r3, #1
 80104e8:	e7ee      	b.n	80104c8 <__lshift+0x1c>
 80104ea:	2300      	movs	r3, #0
 80104ec:	f100 0114 	add.w	r1, r0, #20
 80104f0:	f100 0210 	add.w	r2, r0, #16
 80104f4:	4618      	mov	r0, r3
 80104f6:	4553      	cmp	r3, sl
 80104f8:	db37      	blt.n	801056a <__lshift+0xbe>
 80104fa:	6920      	ldr	r0, [r4, #16]
 80104fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010500:	f104 0314 	add.w	r3, r4, #20
 8010504:	f019 091f 	ands.w	r9, r9, #31
 8010508:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801050c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010510:	d02f      	beq.n	8010572 <__lshift+0xc6>
 8010512:	468a      	mov	sl, r1
 8010514:	f04f 0c00 	mov.w	ip, #0
 8010518:	f1c9 0e20 	rsb	lr, r9, #32
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	fa02 f209 	lsl.w	r2, r2, r9
 8010522:	ea42 020c 	orr.w	r2, r2, ip
 8010526:	f84a 2b04 	str.w	r2, [sl], #4
 801052a:	f853 2b04 	ldr.w	r2, [r3], #4
 801052e:	4298      	cmp	r0, r3
 8010530:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010534:	d8f2      	bhi.n	801051c <__lshift+0x70>
 8010536:	1b03      	subs	r3, r0, r4
 8010538:	3b15      	subs	r3, #21
 801053a:	f023 0303 	bic.w	r3, r3, #3
 801053e:	3304      	adds	r3, #4
 8010540:	f104 0215 	add.w	r2, r4, #21
 8010544:	4290      	cmp	r0, r2
 8010546:	bf38      	it	cc
 8010548:	2304      	movcc	r3, #4
 801054a:	f841 c003 	str.w	ip, [r1, r3]
 801054e:	f1bc 0f00 	cmp.w	ip, #0
 8010552:	d001      	beq.n	8010558 <__lshift+0xac>
 8010554:	f108 0602 	add.w	r6, r8, #2
 8010558:	3e01      	subs	r6, #1
 801055a:	4638      	mov	r0, r7
 801055c:	4621      	mov	r1, r4
 801055e:	612e      	str	r6, [r5, #16]
 8010560:	f7ff fd8c 	bl	801007c <_Bfree>
 8010564:	4628      	mov	r0, r5
 8010566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801056a:	f842 0f04 	str.w	r0, [r2, #4]!
 801056e:	3301      	adds	r3, #1
 8010570:	e7c1      	b.n	80104f6 <__lshift+0x4a>
 8010572:	3904      	subs	r1, #4
 8010574:	f853 2b04 	ldr.w	r2, [r3], #4
 8010578:	4298      	cmp	r0, r3
 801057a:	f841 2f04 	str.w	r2, [r1, #4]!
 801057e:	d8f9      	bhi.n	8010574 <__lshift+0xc8>
 8010580:	e7ea      	b.n	8010558 <__lshift+0xac>
 8010582:	bf00      	nop
 8010584:	08012fec 	.word	0x08012fec
 8010588:	0801308f 	.word	0x0801308f

0801058c <__mcmp>:
 801058c:	4603      	mov	r3, r0
 801058e:	690a      	ldr	r2, [r1, #16]
 8010590:	6900      	ldr	r0, [r0, #16]
 8010592:	b530      	push	{r4, r5, lr}
 8010594:	1a80      	subs	r0, r0, r2
 8010596:	d10d      	bne.n	80105b4 <__mcmp+0x28>
 8010598:	3314      	adds	r3, #20
 801059a:	3114      	adds	r1, #20
 801059c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80105a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80105a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80105a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80105ac:	4295      	cmp	r5, r2
 80105ae:	d002      	beq.n	80105b6 <__mcmp+0x2a>
 80105b0:	d304      	bcc.n	80105bc <__mcmp+0x30>
 80105b2:	2001      	movs	r0, #1
 80105b4:	bd30      	pop	{r4, r5, pc}
 80105b6:	42a3      	cmp	r3, r4
 80105b8:	d3f4      	bcc.n	80105a4 <__mcmp+0x18>
 80105ba:	e7fb      	b.n	80105b4 <__mcmp+0x28>
 80105bc:	f04f 30ff 	mov.w	r0, #4294967295
 80105c0:	e7f8      	b.n	80105b4 <__mcmp+0x28>
	...

080105c4 <__mdiff>:
 80105c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c8:	460d      	mov	r5, r1
 80105ca:	4607      	mov	r7, r0
 80105cc:	4611      	mov	r1, r2
 80105ce:	4628      	mov	r0, r5
 80105d0:	4614      	mov	r4, r2
 80105d2:	f7ff ffdb 	bl	801058c <__mcmp>
 80105d6:	1e06      	subs	r6, r0, #0
 80105d8:	d111      	bne.n	80105fe <__mdiff+0x3a>
 80105da:	4631      	mov	r1, r6
 80105dc:	4638      	mov	r0, r7
 80105de:	f7ff fd0d 	bl	800fffc <_Balloc>
 80105e2:	4602      	mov	r2, r0
 80105e4:	b928      	cbnz	r0, 80105f2 <__mdiff+0x2e>
 80105e6:	f240 2132 	movw	r1, #562	; 0x232
 80105ea:	4b3a      	ldr	r3, [pc, #232]	; (80106d4 <__mdiff+0x110>)
 80105ec:	483a      	ldr	r0, [pc, #232]	; (80106d8 <__mdiff+0x114>)
 80105ee:	f001 f801 	bl	80115f4 <__assert_func>
 80105f2:	2301      	movs	r3, #1
 80105f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80105f8:	4610      	mov	r0, r2
 80105fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105fe:	bfa4      	itt	ge
 8010600:	4623      	movge	r3, r4
 8010602:	462c      	movge	r4, r5
 8010604:	4638      	mov	r0, r7
 8010606:	6861      	ldr	r1, [r4, #4]
 8010608:	bfa6      	itte	ge
 801060a:	461d      	movge	r5, r3
 801060c:	2600      	movge	r6, #0
 801060e:	2601      	movlt	r6, #1
 8010610:	f7ff fcf4 	bl	800fffc <_Balloc>
 8010614:	4602      	mov	r2, r0
 8010616:	b918      	cbnz	r0, 8010620 <__mdiff+0x5c>
 8010618:	f44f 7110 	mov.w	r1, #576	; 0x240
 801061c:	4b2d      	ldr	r3, [pc, #180]	; (80106d4 <__mdiff+0x110>)
 801061e:	e7e5      	b.n	80105ec <__mdiff+0x28>
 8010620:	f102 0814 	add.w	r8, r2, #20
 8010624:	46c2      	mov	sl, r8
 8010626:	f04f 0c00 	mov.w	ip, #0
 801062a:	6927      	ldr	r7, [r4, #16]
 801062c:	60c6      	str	r6, [r0, #12]
 801062e:	692e      	ldr	r6, [r5, #16]
 8010630:	f104 0014 	add.w	r0, r4, #20
 8010634:	f105 0914 	add.w	r9, r5, #20
 8010638:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 801063c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010640:	3410      	adds	r4, #16
 8010642:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8010646:	f859 3b04 	ldr.w	r3, [r9], #4
 801064a:	fa1f f18b 	uxth.w	r1, fp
 801064e:	448c      	add	ip, r1
 8010650:	b299      	uxth	r1, r3
 8010652:	0c1b      	lsrs	r3, r3, #16
 8010654:	ebac 0101 	sub.w	r1, ip, r1
 8010658:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801065c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010660:	b289      	uxth	r1, r1
 8010662:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8010666:	454e      	cmp	r6, r9
 8010668:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801066c:	f84a 3b04 	str.w	r3, [sl], #4
 8010670:	d8e7      	bhi.n	8010642 <__mdiff+0x7e>
 8010672:	1b73      	subs	r3, r6, r5
 8010674:	3b15      	subs	r3, #21
 8010676:	f023 0303 	bic.w	r3, r3, #3
 801067a:	3515      	adds	r5, #21
 801067c:	3304      	adds	r3, #4
 801067e:	42ae      	cmp	r6, r5
 8010680:	bf38      	it	cc
 8010682:	2304      	movcc	r3, #4
 8010684:	4418      	add	r0, r3
 8010686:	4443      	add	r3, r8
 8010688:	461e      	mov	r6, r3
 801068a:	4605      	mov	r5, r0
 801068c:	4575      	cmp	r5, lr
 801068e:	d30e      	bcc.n	80106ae <__mdiff+0xea>
 8010690:	f10e 0103 	add.w	r1, lr, #3
 8010694:	1a09      	subs	r1, r1, r0
 8010696:	f021 0103 	bic.w	r1, r1, #3
 801069a:	3803      	subs	r0, #3
 801069c:	4586      	cmp	lr, r0
 801069e:	bf38      	it	cc
 80106a0:	2100      	movcc	r1, #0
 80106a2:	4419      	add	r1, r3
 80106a4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80106a8:	b18b      	cbz	r3, 80106ce <__mdiff+0x10a>
 80106aa:	6117      	str	r7, [r2, #16]
 80106ac:	e7a4      	b.n	80105f8 <__mdiff+0x34>
 80106ae:	f855 8b04 	ldr.w	r8, [r5], #4
 80106b2:	fa1f f188 	uxth.w	r1, r8
 80106b6:	4461      	add	r1, ip
 80106b8:	140c      	asrs	r4, r1, #16
 80106ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80106be:	b289      	uxth	r1, r1
 80106c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80106c4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80106c8:	f846 1b04 	str.w	r1, [r6], #4
 80106cc:	e7de      	b.n	801068c <__mdiff+0xc8>
 80106ce:	3f01      	subs	r7, #1
 80106d0:	e7e8      	b.n	80106a4 <__mdiff+0xe0>
 80106d2:	bf00      	nop
 80106d4:	08012fec 	.word	0x08012fec
 80106d8:	0801308f 	.word	0x0801308f

080106dc <__ulp>:
 80106dc:	4b11      	ldr	r3, [pc, #68]	; (8010724 <__ulp+0x48>)
 80106de:	400b      	ands	r3, r1
 80106e0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	dd02      	ble.n	80106ee <__ulp+0x12>
 80106e8:	2000      	movs	r0, #0
 80106ea:	4619      	mov	r1, r3
 80106ec:	4770      	bx	lr
 80106ee:	425b      	negs	r3, r3
 80106f0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80106f4:	f04f 0000 	mov.w	r0, #0
 80106f8:	f04f 0100 	mov.w	r1, #0
 80106fc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010700:	da04      	bge.n	801070c <__ulp+0x30>
 8010702:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010706:	fa43 f102 	asr.w	r1, r3, r2
 801070a:	4770      	bx	lr
 801070c:	f1a2 0314 	sub.w	r3, r2, #20
 8010710:	2b1e      	cmp	r3, #30
 8010712:	bfd6      	itet	le
 8010714:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010718:	2301      	movgt	r3, #1
 801071a:	fa22 f303 	lsrle.w	r3, r2, r3
 801071e:	4618      	mov	r0, r3
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop
 8010724:	7ff00000 	.word	0x7ff00000

08010728 <__b2d>:
 8010728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801072c:	6907      	ldr	r7, [r0, #16]
 801072e:	f100 0914 	add.w	r9, r0, #20
 8010732:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8010736:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801073a:	f1a7 0804 	sub.w	r8, r7, #4
 801073e:	4630      	mov	r0, r6
 8010740:	f7ff fd4e 	bl	80101e0 <__hi0bits>
 8010744:	f1c0 0320 	rsb	r3, r0, #32
 8010748:	280a      	cmp	r0, #10
 801074a:	600b      	str	r3, [r1, #0]
 801074c:	491f      	ldr	r1, [pc, #124]	; (80107cc <__b2d+0xa4>)
 801074e:	dc17      	bgt.n	8010780 <__b2d+0x58>
 8010750:	45c1      	cmp	r9, r8
 8010752:	bf28      	it	cs
 8010754:	2200      	movcs	r2, #0
 8010756:	f1c0 0c0b 	rsb	ip, r0, #11
 801075a:	fa26 f30c 	lsr.w	r3, r6, ip
 801075e:	bf38      	it	cc
 8010760:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010764:	ea43 0501 	orr.w	r5, r3, r1
 8010768:	f100 0315 	add.w	r3, r0, #21
 801076c:	fa06 f303 	lsl.w	r3, r6, r3
 8010770:	fa22 f20c 	lsr.w	r2, r2, ip
 8010774:	ea43 0402 	orr.w	r4, r3, r2
 8010778:	4620      	mov	r0, r4
 801077a:	4629      	mov	r1, r5
 801077c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010780:	45c1      	cmp	r9, r8
 8010782:	bf2e      	itee	cs
 8010784:	2200      	movcs	r2, #0
 8010786:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801078a:	f1a7 0808 	subcc.w	r8, r7, #8
 801078e:	f1b0 030b 	subs.w	r3, r0, #11
 8010792:	d016      	beq.n	80107c2 <__b2d+0x9a>
 8010794:	f1c3 0720 	rsb	r7, r3, #32
 8010798:	fa22 f107 	lsr.w	r1, r2, r7
 801079c:	45c8      	cmp	r8, r9
 801079e:	fa06 f603 	lsl.w	r6, r6, r3
 80107a2:	ea46 0601 	orr.w	r6, r6, r1
 80107a6:	bf94      	ite	ls
 80107a8:	2100      	movls	r1, #0
 80107aa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80107ae:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80107b2:	fa02 f003 	lsl.w	r0, r2, r3
 80107b6:	40f9      	lsrs	r1, r7
 80107b8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80107bc:	ea40 0401 	orr.w	r4, r0, r1
 80107c0:	e7da      	b.n	8010778 <__b2d+0x50>
 80107c2:	4614      	mov	r4, r2
 80107c4:	ea46 0501 	orr.w	r5, r6, r1
 80107c8:	e7d6      	b.n	8010778 <__b2d+0x50>
 80107ca:	bf00      	nop
 80107cc:	3ff00000 	.word	0x3ff00000

080107d0 <__d2b>:
 80107d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80107d4:	2101      	movs	r1, #1
 80107d6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80107da:	4690      	mov	r8, r2
 80107dc:	461d      	mov	r5, r3
 80107de:	f7ff fc0d 	bl	800fffc <_Balloc>
 80107e2:	4604      	mov	r4, r0
 80107e4:	b930      	cbnz	r0, 80107f4 <__d2b+0x24>
 80107e6:	4602      	mov	r2, r0
 80107e8:	f240 310a 	movw	r1, #778	; 0x30a
 80107ec:	4b24      	ldr	r3, [pc, #144]	; (8010880 <__d2b+0xb0>)
 80107ee:	4825      	ldr	r0, [pc, #148]	; (8010884 <__d2b+0xb4>)
 80107f0:	f000 ff00 	bl	80115f4 <__assert_func>
 80107f4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80107f8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80107fc:	bb2d      	cbnz	r5, 801084a <__d2b+0x7a>
 80107fe:	9301      	str	r3, [sp, #4]
 8010800:	f1b8 0300 	subs.w	r3, r8, #0
 8010804:	d026      	beq.n	8010854 <__d2b+0x84>
 8010806:	4668      	mov	r0, sp
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	f7ff fd09 	bl	8010220 <__lo0bits>
 801080e:	9900      	ldr	r1, [sp, #0]
 8010810:	b1f0      	cbz	r0, 8010850 <__d2b+0x80>
 8010812:	9a01      	ldr	r2, [sp, #4]
 8010814:	f1c0 0320 	rsb	r3, r0, #32
 8010818:	fa02 f303 	lsl.w	r3, r2, r3
 801081c:	430b      	orrs	r3, r1
 801081e:	40c2      	lsrs	r2, r0
 8010820:	6163      	str	r3, [r4, #20]
 8010822:	9201      	str	r2, [sp, #4]
 8010824:	9b01      	ldr	r3, [sp, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	bf14      	ite	ne
 801082a:	2102      	movne	r1, #2
 801082c:	2101      	moveq	r1, #1
 801082e:	61a3      	str	r3, [r4, #24]
 8010830:	6121      	str	r1, [r4, #16]
 8010832:	b1c5      	cbz	r5, 8010866 <__d2b+0x96>
 8010834:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010838:	4405      	add	r5, r0
 801083a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801083e:	603d      	str	r5, [r7, #0]
 8010840:	6030      	str	r0, [r6, #0]
 8010842:	4620      	mov	r0, r4
 8010844:	b002      	add	sp, #8
 8010846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801084e:	e7d6      	b.n	80107fe <__d2b+0x2e>
 8010850:	6161      	str	r1, [r4, #20]
 8010852:	e7e7      	b.n	8010824 <__d2b+0x54>
 8010854:	a801      	add	r0, sp, #4
 8010856:	f7ff fce3 	bl	8010220 <__lo0bits>
 801085a:	2101      	movs	r1, #1
 801085c:	9b01      	ldr	r3, [sp, #4]
 801085e:	6121      	str	r1, [r4, #16]
 8010860:	6163      	str	r3, [r4, #20]
 8010862:	3020      	adds	r0, #32
 8010864:	e7e5      	b.n	8010832 <__d2b+0x62>
 8010866:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801086a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801086e:	6038      	str	r0, [r7, #0]
 8010870:	6918      	ldr	r0, [r3, #16]
 8010872:	f7ff fcb5 	bl	80101e0 <__hi0bits>
 8010876:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801087a:	6031      	str	r1, [r6, #0]
 801087c:	e7e1      	b.n	8010842 <__d2b+0x72>
 801087e:	bf00      	nop
 8010880:	08012fec 	.word	0x08012fec
 8010884:	0801308f 	.word	0x0801308f

08010888 <__ratio>:
 8010888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801088c:	4688      	mov	r8, r1
 801088e:	4669      	mov	r1, sp
 8010890:	4681      	mov	r9, r0
 8010892:	f7ff ff49 	bl	8010728 <__b2d>
 8010896:	460f      	mov	r7, r1
 8010898:	4604      	mov	r4, r0
 801089a:	460d      	mov	r5, r1
 801089c:	4640      	mov	r0, r8
 801089e:	a901      	add	r1, sp, #4
 80108a0:	f7ff ff42 	bl	8010728 <__b2d>
 80108a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80108a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80108ac:	468b      	mov	fp, r1
 80108ae:	eba3 0c02 	sub.w	ip, r3, r2
 80108b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80108b6:	1a9b      	subs	r3, r3, r2
 80108b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80108bc:	2b00      	cmp	r3, #0
 80108be:	bfd5      	itete	le
 80108c0:	460a      	movle	r2, r1
 80108c2:	462a      	movgt	r2, r5
 80108c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80108c8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80108cc:	bfd8      	it	le
 80108ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80108d2:	465b      	mov	r3, fp
 80108d4:	4602      	mov	r2, r0
 80108d6:	4639      	mov	r1, r7
 80108d8:	4620      	mov	r0, r4
 80108da:	f7ef ff9d 	bl	8000818 <__aeabi_ddiv>
 80108de:	b003      	add	sp, #12
 80108e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080108e4 <__copybits>:
 80108e4:	3901      	subs	r1, #1
 80108e6:	b570      	push	{r4, r5, r6, lr}
 80108e8:	1149      	asrs	r1, r1, #5
 80108ea:	6914      	ldr	r4, [r2, #16]
 80108ec:	3101      	adds	r1, #1
 80108ee:	f102 0314 	add.w	r3, r2, #20
 80108f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80108f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80108fa:	1f05      	subs	r5, r0, #4
 80108fc:	42a3      	cmp	r3, r4
 80108fe:	d30c      	bcc.n	801091a <__copybits+0x36>
 8010900:	1aa3      	subs	r3, r4, r2
 8010902:	3b11      	subs	r3, #17
 8010904:	f023 0303 	bic.w	r3, r3, #3
 8010908:	3211      	adds	r2, #17
 801090a:	42a2      	cmp	r2, r4
 801090c:	bf88      	it	hi
 801090e:	2300      	movhi	r3, #0
 8010910:	4418      	add	r0, r3
 8010912:	2300      	movs	r3, #0
 8010914:	4288      	cmp	r0, r1
 8010916:	d305      	bcc.n	8010924 <__copybits+0x40>
 8010918:	bd70      	pop	{r4, r5, r6, pc}
 801091a:	f853 6b04 	ldr.w	r6, [r3], #4
 801091e:	f845 6f04 	str.w	r6, [r5, #4]!
 8010922:	e7eb      	b.n	80108fc <__copybits+0x18>
 8010924:	f840 3b04 	str.w	r3, [r0], #4
 8010928:	e7f4      	b.n	8010914 <__copybits+0x30>

0801092a <__any_on>:
 801092a:	f100 0214 	add.w	r2, r0, #20
 801092e:	6900      	ldr	r0, [r0, #16]
 8010930:	114b      	asrs	r3, r1, #5
 8010932:	4298      	cmp	r0, r3
 8010934:	b510      	push	{r4, lr}
 8010936:	db11      	blt.n	801095c <__any_on+0x32>
 8010938:	dd0a      	ble.n	8010950 <__any_on+0x26>
 801093a:	f011 011f 	ands.w	r1, r1, #31
 801093e:	d007      	beq.n	8010950 <__any_on+0x26>
 8010940:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010944:	fa24 f001 	lsr.w	r0, r4, r1
 8010948:	fa00 f101 	lsl.w	r1, r0, r1
 801094c:	428c      	cmp	r4, r1
 801094e:	d10b      	bne.n	8010968 <__any_on+0x3e>
 8010950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010954:	4293      	cmp	r3, r2
 8010956:	d803      	bhi.n	8010960 <__any_on+0x36>
 8010958:	2000      	movs	r0, #0
 801095a:	bd10      	pop	{r4, pc}
 801095c:	4603      	mov	r3, r0
 801095e:	e7f7      	b.n	8010950 <__any_on+0x26>
 8010960:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010964:	2900      	cmp	r1, #0
 8010966:	d0f5      	beq.n	8010954 <__any_on+0x2a>
 8010968:	2001      	movs	r0, #1
 801096a:	e7f6      	b.n	801095a <__any_on+0x30>

0801096c <_calloc_r>:
 801096c:	b570      	push	{r4, r5, r6, lr}
 801096e:	fba1 5402 	umull	r5, r4, r1, r2
 8010972:	b934      	cbnz	r4, 8010982 <_calloc_r+0x16>
 8010974:	4629      	mov	r1, r5
 8010976:	f000 f82d 	bl	80109d4 <_malloc_r>
 801097a:	4606      	mov	r6, r0
 801097c:	b928      	cbnz	r0, 801098a <_calloc_r+0x1e>
 801097e:	4630      	mov	r0, r6
 8010980:	bd70      	pop	{r4, r5, r6, pc}
 8010982:	220c      	movs	r2, #12
 8010984:	2600      	movs	r6, #0
 8010986:	6002      	str	r2, [r0, #0]
 8010988:	e7f9      	b.n	801097e <_calloc_r+0x12>
 801098a:	462a      	mov	r2, r5
 801098c:	4621      	mov	r1, r4
 801098e:	f7fd ff5b 	bl	800e848 <memset>
 8010992:	e7f4      	b.n	801097e <_calloc_r+0x12>

08010994 <sbrk_aligned>:
 8010994:	b570      	push	{r4, r5, r6, lr}
 8010996:	4e0e      	ldr	r6, [pc, #56]	; (80109d0 <sbrk_aligned+0x3c>)
 8010998:	460c      	mov	r4, r1
 801099a:	6831      	ldr	r1, [r6, #0]
 801099c:	4605      	mov	r5, r0
 801099e:	b911      	cbnz	r1, 80109a6 <sbrk_aligned+0x12>
 80109a0:	f000 fcdc 	bl	801135c <_sbrk_r>
 80109a4:	6030      	str	r0, [r6, #0]
 80109a6:	4621      	mov	r1, r4
 80109a8:	4628      	mov	r0, r5
 80109aa:	f000 fcd7 	bl	801135c <_sbrk_r>
 80109ae:	1c43      	adds	r3, r0, #1
 80109b0:	d00a      	beq.n	80109c8 <sbrk_aligned+0x34>
 80109b2:	1cc4      	adds	r4, r0, #3
 80109b4:	f024 0403 	bic.w	r4, r4, #3
 80109b8:	42a0      	cmp	r0, r4
 80109ba:	d007      	beq.n	80109cc <sbrk_aligned+0x38>
 80109bc:	1a21      	subs	r1, r4, r0
 80109be:	4628      	mov	r0, r5
 80109c0:	f000 fccc 	bl	801135c <_sbrk_r>
 80109c4:	3001      	adds	r0, #1
 80109c6:	d101      	bne.n	80109cc <sbrk_aligned+0x38>
 80109c8:	f04f 34ff 	mov.w	r4, #4294967295
 80109cc:	4620      	mov	r0, r4
 80109ce:	bd70      	pop	{r4, r5, r6, pc}
 80109d0:	20000dfc 	.word	0x20000dfc

080109d4 <_malloc_r>:
 80109d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109d8:	1ccd      	adds	r5, r1, #3
 80109da:	f025 0503 	bic.w	r5, r5, #3
 80109de:	3508      	adds	r5, #8
 80109e0:	2d0c      	cmp	r5, #12
 80109e2:	bf38      	it	cc
 80109e4:	250c      	movcc	r5, #12
 80109e6:	2d00      	cmp	r5, #0
 80109e8:	4607      	mov	r7, r0
 80109ea:	db01      	blt.n	80109f0 <_malloc_r+0x1c>
 80109ec:	42a9      	cmp	r1, r5
 80109ee:	d905      	bls.n	80109fc <_malloc_r+0x28>
 80109f0:	230c      	movs	r3, #12
 80109f2:	2600      	movs	r6, #0
 80109f4:	603b      	str	r3, [r7, #0]
 80109f6:	4630      	mov	r0, r6
 80109f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109fc:	4e2e      	ldr	r6, [pc, #184]	; (8010ab8 <_malloc_r+0xe4>)
 80109fe:	f000 ff9f 	bl	8011940 <__malloc_lock>
 8010a02:	6833      	ldr	r3, [r6, #0]
 8010a04:	461c      	mov	r4, r3
 8010a06:	bb34      	cbnz	r4, 8010a56 <_malloc_r+0x82>
 8010a08:	4629      	mov	r1, r5
 8010a0a:	4638      	mov	r0, r7
 8010a0c:	f7ff ffc2 	bl	8010994 <sbrk_aligned>
 8010a10:	1c43      	adds	r3, r0, #1
 8010a12:	4604      	mov	r4, r0
 8010a14:	d14d      	bne.n	8010ab2 <_malloc_r+0xde>
 8010a16:	6834      	ldr	r4, [r6, #0]
 8010a18:	4626      	mov	r6, r4
 8010a1a:	2e00      	cmp	r6, #0
 8010a1c:	d140      	bne.n	8010aa0 <_malloc_r+0xcc>
 8010a1e:	6823      	ldr	r3, [r4, #0]
 8010a20:	4631      	mov	r1, r6
 8010a22:	4638      	mov	r0, r7
 8010a24:	eb04 0803 	add.w	r8, r4, r3
 8010a28:	f000 fc98 	bl	801135c <_sbrk_r>
 8010a2c:	4580      	cmp	r8, r0
 8010a2e:	d13a      	bne.n	8010aa6 <_malloc_r+0xd2>
 8010a30:	6821      	ldr	r1, [r4, #0]
 8010a32:	3503      	adds	r5, #3
 8010a34:	1a6d      	subs	r5, r5, r1
 8010a36:	f025 0503 	bic.w	r5, r5, #3
 8010a3a:	3508      	adds	r5, #8
 8010a3c:	2d0c      	cmp	r5, #12
 8010a3e:	bf38      	it	cc
 8010a40:	250c      	movcc	r5, #12
 8010a42:	4638      	mov	r0, r7
 8010a44:	4629      	mov	r1, r5
 8010a46:	f7ff ffa5 	bl	8010994 <sbrk_aligned>
 8010a4a:	3001      	adds	r0, #1
 8010a4c:	d02b      	beq.n	8010aa6 <_malloc_r+0xd2>
 8010a4e:	6823      	ldr	r3, [r4, #0]
 8010a50:	442b      	add	r3, r5
 8010a52:	6023      	str	r3, [r4, #0]
 8010a54:	e00e      	b.n	8010a74 <_malloc_r+0xa0>
 8010a56:	6822      	ldr	r2, [r4, #0]
 8010a58:	1b52      	subs	r2, r2, r5
 8010a5a:	d41e      	bmi.n	8010a9a <_malloc_r+0xc6>
 8010a5c:	2a0b      	cmp	r2, #11
 8010a5e:	d916      	bls.n	8010a8e <_malloc_r+0xba>
 8010a60:	1961      	adds	r1, r4, r5
 8010a62:	42a3      	cmp	r3, r4
 8010a64:	6025      	str	r5, [r4, #0]
 8010a66:	bf18      	it	ne
 8010a68:	6059      	strne	r1, [r3, #4]
 8010a6a:	6863      	ldr	r3, [r4, #4]
 8010a6c:	bf08      	it	eq
 8010a6e:	6031      	streq	r1, [r6, #0]
 8010a70:	5162      	str	r2, [r4, r5]
 8010a72:	604b      	str	r3, [r1, #4]
 8010a74:	4638      	mov	r0, r7
 8010a76:	f104 060b 	add.w	r6, r4, #11
 8010a7a:	f000 ff67 	bl	801194c <__malloc_unlock>
 8010a7e:	f026 0607 	bic.w	r6, r6, #7
 8010a82:	1d23      	adds	r3, r4, #4
 8010a84:	1af2      	subs	r2, r6, r3
 8010a86:	d0b6      	beq.n	80109f6 <_malloc_r+0x22>
 8010a88:	1b9b      	subs	r3, r3, r6
 8010a8a:	50a3      	str	r3, [r4, r2]
 8010a8c:	e7b3      	b.n	80109f6 <_malloc_r+0x22>
 8010a8e:	6862      	ldr	r2, [r4, #4]
 8010a90:	42a3      	cmp	r3, r4
 8010a92:	bf0c      	ite	eq
 8010a94:	6032      	streq	r2, [r6, #0]
 8010a96:	605a      	strne	r2, [r3, #4]
 8010a98:	e7ec      	b.n	8010a74 <_malloc_r+0xa0>
 8010a9a:	4623      	mov	r3, r4
 8010a9c:	6864      	ldr	r4, [r4, #4]
 8010a9e:	e7b2      	b.n	8010a06 <_malloc_r+0x32>
 8010aa0:	4634      	mov	r4, r6
 8010aa2:	6876      	ldr	r6, [r6, #4]
 8010aa4:	e7b9      	b.n	8010a1a <_malloc_r+0x46>
 8010aa6:	230c      	movs	r3, #12
 8010aa8:	4638      	mov	r0, r7
 8010aaa:	603b      	str	r3, [r7, #0]
 8010aac:	f000 ff4e 	bl	801194c <__malloc_unlock>
 8010ab0:	e7a1      	b.n	80109f6 <_malloc_r+0x22>
 8010ab2:	6025      	str	r5, [r4, #0]
 8010ab4:	e7de      	b.n	8010a74 <_malloc_r+0xa0>
 8010ab6:	bf00      	nop
 8010ab8:	20000df8 	.word	0x20000df8

08010abc <__ssputs_r>:
 8010abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ac0:	688e      	ldr	r6, [r1, #8]
 8010ac2:	4682      	mov	sl, r0
 8010ac4:	429e      	cmp	r6, r3
 8010ac6:	460c      	mov	r4, r1
 8010ac8:	4690      	mov	r8, r2
 8010aca:	461f      	mov	r7, r3
 8010acc:	d838      	bhi.n	8010b40 <__ssputs_r+0x84>
 8010ace:	898a      	ldrh	r2, [r1, #12]
 8010ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ad4:	d032      	beq.n	8010b3c <__ssputs_r+0x80>
 8010ad6:	6825      	ldr	r5, [r4, #0]
 8010ad8:	6909      	ldr	r1, [r1, #16]
 8010ada:	3301      	adds	r3, #1
 8010adc:	eba5 0901 	sub.w	r9, r5, r1
 8010ae0:	6965      	ldr	r5, [r4, #20]
 8010ae2:	444b      	add	r3, r9
 8010ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ae8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010aec:	106d      	asrs	r5, r5, #1
 8010aee:	429d      	cmp	r5, r3
 8010af0:	bf38      	it	cc
 8010af2:	461d      	movcc	r5, r3
 8010af4:	0553      	lsls	r3, r2, #21
 8010af6:	d531      	bpl.n	8010b5c <__ssputs_r+0xa0>
 8010af8:	4629      	mov	r1, r5
 8010afa:	f7ff ff6b 	bl	80109d4 <_malloc_r>
 8010afe:	4606      	mov	r6, r0
 8010b00:	b950      	cbnz	r0, 8010b18 <__ssputs_r+0x5c>
 8010b02:	230c      	movs	r3, #12
 8010b04:	f04f 30ff 	mov.w	r0, #4294967295
 8010b08:	f8ca 3000 	str.w	r3, [sl]
 8010b0c:	89a3      	ldrh	r3, [r4, #12]
 8010b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b12:	81a3      	strh	r3, [r4, #12]
 8010b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b18:	464a      	mov	r2, r9
 8010b1a:	6921      	ldr	r1, [r4, #16]
 8010b1c:	f7fd fe86 	bl	800e82c <memcpy>
 8010b20:	89a3      	ldrh	r3, [r4, #12]
 8010b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b2a:	81a3      	strh	r3, [r4, #12]
 8010b2c:	6126      	str	r6, [r4, #16]
 8010b2e:	444e      	add	r6, r9
 8010b30:	6026      	str	r6, [r4, #0]
 8010b32:	463e      	mov	r6, r7
 8010b34:	6165      	str	r5, [r4, #20]
 8010b36:	eba5 0509 	sub.w	r5, r5, r9
 8010b3a:	60a5      	str	r5, [r4, #8]
 8010b3c:	42be      	cmp	r6, r7
 8010b3e:	d900      	bls.n	8010b42 <__ssputs_r+0x86>
 8010b40:	463e      	mov	r6, r7
 8010b42:	4632      	mov	r2, r6
 8010b44:	4641      	mov	r1, r8
 8010b46:	6820      	ldr	r0, [r4, #0]
 8010b48:	f000 fee0 	bl	801190c <memmove>
 8010b4c:	68a3      	ldr	r3, [r4, #8]
 8010b4e:	2000      	movs	r0, #0
 8010b50:	1b9b      	subs	r3, r3, r6
 8010b52:	60a3      	str	r3, [r4, #8]
 8010b54:	6823      	ldr	r3, [r4, #0]
 8010b56:	4433      	add	r3, r6
 8010b58:	6023      	str	r3, [r4, #0]
 8010b5a:	e7db      	b.n	8010b14 <__ssputs_r+0x58>
 8010b5c:	462a      	mov	r2, r5
 8010b5e:	f000 ff43 	bl	80119e8 <_realloc_r>
 8010b62:	4606      	mov	r6, r0
 8010b64:	2800      	cmp	r0, #0
 8010b66:	d1e1      	bne.n	8010b2c <__ssputs_r+0x70>
 8010b68:	4650      	mov	r0, sl
 8010b6a:	6921      	ldr	r1, [r4, #16]
 8010b6c:	f000 fef4 	bl	8011958 <_free_r>
 8010b70:	e7c7      	b.n	8010b02 <__ssputs_r+0x46>
	...

08010b74 <_svfiprintf_r>:
 8010b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b78:	4698      	mov	r8, r3
 8010b7a:	898b      	ldrh	r3, [r1, #12]
 8010b7c:	4607      	mov	r7, r0
 8010b7e:	061b      	lsls	r3, r3, #24
 8010b80:	460d      	mov	r5, r1
 8010b82:	4614      	mov	r4, r2
 8010b84:	b09d      	sub	sp, #116	; 0x74
 8010b86:	d50e      	bpl.n	8010ba6 <_svfiprintf_r+0x32>
 8010b88:	690b      	ldr	r3, [r1, #16]
 8010b8a:	b963      	cbnz	r3, 8010ba6 <_svfiprintf_r+0x32>
 8010b8c:	2140      	movs	r1, #64	; 0x40
 8010b8e:	f7ff ff21 	bl	80109d4 <_malloc_r>
 8010b92:	6028      	str	r0, [r5, #0]
 8010b94:	6128      	str	r0, [r5, #16]
 8010b96:	b920      	cbnz	r0, 8010ba2 <_svfiprintf_r+0x2e>
 8010b98:	230c      	movs	r3, #12
 8010b9a:	603b      	str	r3, [r7, #0]
 8010b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ba0:	e0d1      	b.n	8010d46 <_svfiprintf_r+0x1d2>
 8010ba2:	2340      	movs	r3, #64	; 0x40
 8010ba4:	616b      	str	r3, [r5, #20]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8010baa:	2320      	movs	r3, #32
 8010bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010bb0:	2330      	movs	r3, #48	; 0x30
 8010bb2:	f04f 0901 	mov.w	r9, #1
 8010bb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010bba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010d60 <_svfiprintf_r+0x1ec>
 8010bbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010bc2:	4623      	mov	r3, r4
 8010bc4:	469a      	mov	sl, r3
 8010bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bca:	b10a      	cbz	r2, 8010bd0 <_svfiprintf_r+0x5c>
 8010bcc:	2a25      	cmp	r2, #37	; 0x25
 8010bce:	d1f9      	bne.n	8010bc4 <_svfiprintf_r+0x50>
 8010bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8010bd4:	d00b      	beq.n	8010bee <_svfiprintf_r+0x7a>
 8010bd6:	465b      	mov	r3, fp
 8010bd8:	4622      	mov	r2, r4
 8010bda:	4629      	mov	r1, r5
 8010bdc:	4638      	mov	r0, r7
 8010bde:	f7ff ff6d 	bl	8010abc <__ssputs_r>
 8010be2:	3001      	adds	r0, #1
 8010be4:	f000 80aa 	beq.w	8010d3c <_svfiprintf_r+0x1c8>
 8010be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bea:	445a      	add	r2, fp
 8010bec:	9209      	str	r2, [sp, #36]	; 0x24
 8010bee:	f89a 3000 	ldrb.w	r3, [sl]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	f000 80a2 	beq.w	8010d3c <_svfiprintf_r+0x1c8>
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8010bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c02:	f10a 0a01 	add.w	sl, sl, #1
 8010c06:	9304      	str	r3, [sp, #16]
 8010c08:	9307      	str	r3, [sp, #28]
 8010c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8010c10:	4654      	mov	r4, sl
 8010c12:	2205      	movs	r2, #5
 8010c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c18:	4851      	ldr	r0, [pc, #324]	; (8010d60 <_svfiprintf_r+0x1ec>)
 8010c1a:	f000 fe69 	bl	80118f0 <memchr>
 8010c1e:	9a04      	ldr	r2, [sp, #16]
 8010c20:	b9d8      	cbnz	r0, 8010c5a <_svfiprintf_r+0xe6>
 8010c22:	06d0      	lsls	r0, r2, #27
 8010c24:	bf44      	itt	mi
 8010c26:	2320      	movmi	r3, #32
 8010c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c2c:	0711      	lsls	r1, r2, #28
 8010c2e:	bf44      	itt	mi
 8010c30:	232b      	movmi	r3, #43	; 0x2b
 8010c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c36:	f89a 3000 	ldrb.w	r3, [sl]
 8010c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8010c3c:	d015      	beq.n	8010c6a <_svfiprintf_r+0xf6>
 8010c3e:	4654      	mov	r4, sl
 8010c40:	2000      	movs	r0, #0
 8010c42:	f04f 0c0a 	mov.w	ip, #10
 8010c46:	9a07      	ldr	r2, [sp, #28]
 8010c48:	4621      	mov	r1, r4
 8010c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c4e:	3b30      	subs	r3, #48	; 0x30
 8010c50:	2b09      	cmp	r3, #9
 8010c52:	d94e      	bls.n	8010cf2 <_svfiprintf_r+0x17e>
 8010c54:	b1b0      	cbz	r0, 8010c84 <_svfiprintf_r+0x110>
 8010c56:	9207      	str	r2, [sp, #28]
 8010c58:	e014      	b.n	8010c84 <_svfiprintf_r+0x110>
 8010c5a:	eba0 0308 	sub.w	r3, r0, r8
 8010c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8010c62:	4313      	orrs	r3, r2
 8010c64:	46a2      	mov	sl, r4
 8010c66:	9304      	str	r3, [sp, #16]
 8010c68:	e7d2      	b.n	8010c10 <_svfiprintf_r+0x9c>
 8010c6a:	9b03      	ldr	r3, [sp, #12]
 8010c6c:	1d19      	adds	r1, r3, #4
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	9103      	str	r1, [sp, #12]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	bfbb      	ittet	lt
 8010c76:	425b      	neglt	r3, r3
 8010c78:	f042 0202 	orrlt.w	r2, r2, #2
 8010c7c:	9307      	strge	r3, [sp, #28]
 8010c7e:	9307      	strlt	r3, [sp, #28]
 8010c80:	bfb8      	it	lt
 8010c82:	9204      	strlt	r2, [sp, #16]
 8010c84:	7823      	ldrb	r3, [r4, #0]
 8010c86:	2b2e      	cmp	r3, #46	; 0x2e
 8010c88:	d10c      	bne.n	8010ca4 <_svfiprintf_r+0x130>
 8010c8a:	7863      	ldrb	r3, [r4, #1]
 8010c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8010c8e:	d135      	bne.n	8010cfc <_svfiprintf_r+0x188>
 8010c90:	9b03      	ldr	r3, [sp, #12]
 8010c92:	3402      	adds	r4, #2
 8010c94:	1d1a      	adds	r2, r3, #4
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	9203      	str	r2, [sp, #12]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	bfb8      	it	lt
 8010c9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ca2:	9305      	str	r3, [sp, #20]
 8010ca4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010d64 <_svfiprintf_r+0x1f0>
 8010ca8:	2203      	movs	r2, #3
 8010caa:	4650      	mov	r0, sl
 8010cac:	7821      	ldrb	r1, [r4, #0]
 8010cae:	f000 fe1f 	bl	80118f0 <memchr>
 8010cb2:	b140      	cbz	r0, 8010cc6 <_svfiprintf_r+0x152>
 8010cb4:	2340      	movs	r3, #64	; 0x40
 8010cb6:	eba0 000a 	sub.w	r0, r0, sl
 8010cba:	fa03 f000 	lsl.w	r0, r3, r0
 8010cbe:	9b04      	ldr	r3, [sp, #16]
 8010cc0:	3401      	adds	r4, #1
 8010cc2:	4303      	orrs	r3, r0
 8010cc4:	9304      	str	r3, [sp, #16]
 8010cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cca:	2206      	movs	r2, #6
 8010ccc:	4826      	ldr	r0, [pc, #152]	; (8010d68 <_svfiprintf_r+0x1f4>)
 8010cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010cd2:	f000 fe0d 	bl	80118f0 <memchr>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d038      	beq.n	8010d4c <_svfiprintf_r+0x1d8>
 8010cda:	4b24      	ldr	r3, [pc, #144]	; (8010d6c <_svfiprintf_r+0x1f8>)
 8010cdc:	bb1b      	cbnz	r3, 8010d26 <_svfiprintf_r+0x1b2>
 8010cde:	9b03      	ldr	r3, [sp, #12]
 8010ce0:	3307      	adds	r3, #7
 8010ce2:	f023 0307 	bic.w	r3, r3, #7
 8010ce6:	3308      	adds	r3, #8
 8010ce8:	9303      	str	r3, [sp, #12]
 8010cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cec:	4433      	add	r3, r6
 8010cee:	9309      	str	r3, [sp, #36]	; 0x24
 8010cf0:	e767      	b.n	8010bc2 <_svfiprintf_r+0x4e>
 8010cf2:	460c      	mov	r4, r1
 8010cf4:	2001      	movs	r0, #1
 8010cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010cfa:	e7a5      	b.n	8010c48 <_svfiprintf_r+0xd4>
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	f04f 0c0a 	mov.w	ip, #10
 8010d02:	4619      	mov	r1, r3
 8010d04:	3401      	adds	r4, #1
 8010d06:	9305      	str	r3, [sp, #20]
 8010d08:	4620      	mov	r0, r4
 8010d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d0e:	3a30      	subs	r2, #48	; 0x30
 8010d10:	2a09      	cmp	r2, #9
 8010d12:	d903      	bls.n	8010d1c <_svfiprintf_r+0x1a8>
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d0c5      	beq.n	8010ca4 <_svfiprintf_r+0x130>
 8010d18:	9105      	str	r1, [sp, #20]
 8010d1a:	e7c3      	b.n	8010ca4 <_svfiprintf_r+0x130>
 8010d1c:	4604      	mov	r4, r0
 8010d1e:	2301      	movs	r3, #1
 8010d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d24:	e7f0      	b.n	8010d08 <_svfiprintf_r+0x194>
 8010d26:	ab03      	add	r3, sp, #12
 8010d28:	9300      	str	r3, [sp, #0]
 8010d2a:	462a      	mov	r2, r5
 8010d2c:	4638      	mov	r0, r7
 8010d2e:	4b10      	ldr	r3, [pc, #64]	; (8010d70 <_svfiprintf_r+0x1fc>)
 8010d30:	a904      	add	r1, sp, #16
 8010d32:	f3af 8000 	nop.w
 8010d36:	1c42      	adds	r2, r0, #1
 8010d38:	4606      	mov	r6, r0
 8010d3a:	d1d6      	bne.n	8010cea <_svfiprintf_r+0x176>
 8010d3c:	89ab      	ldrh	r3, [r5, #12]
 8010d3e:	065b      	lsls	r3, r3, #25
 8010d40:	f53f af2c 	bmi.w	8010b9c <_svfiprintf_r+0x28>
 8010d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d46:	b01d      	add	sp, #116	; 0x74
 8010d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d4c:	ab03      	add	r3, sp, #12
 8010d4e:	9300      	str	r3, [sp, #0]
 8010d50:	462a      	mov	r2, r5
 8010d52:	4638      	mov	r0, r7
 8010d54:	4b06      	ldr	r3, [pc, #24]	; (8010d70 <_svfiprintf_r+0x1fc>)
 8010d56:	a904      	add	r1, sp, #16
 8010d58:	f000 f9d4 	bl	8011104 <_printf_i>
 8010d5c:	e7eb      	b.n	8010d36 <_svfiprintf_r+0x1c2>
 8010d5e:	bf00      	nop
 8010d60:	080131ec 	.word	0x080131ec
 8010d64:	080131f2 	.word	0x080131f2
 8010d68:	080131f6 	.word	0x080131f6
 8010d6c:	00000000 	.word	0x00000000
 8010d70:	08010abd 	.word	0x08010abd

08010d74 <__sfputc_r>:
 8010d74:	6893      	ldr	r3, [r2, #8]
 8010d76:	b410      	push	{r4}
 8010d78:	3b01      	subs	r3, #1
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	6093      	str	r3, [r2, #8]
 8010d7e:	da07      	bge.n	8010d90 <__sfputc_r+0x1c>
 8010d80:	6994      	ldr	r4, [r2, #24]
 8010d82:	42a3      	cmp	r3, r4
 8010d84:	db01      	blt.n	8010d8a <__sfputc_r+0x16>
 8010d86:	290a      	cmp	r1, #10
 8010d88:	d102      	bne.n	8010d90 <__sfputc_r+0x1c>
 8010d8a:	bc10      	pop	{r4}
 8010d8c:	f000 bb52 	b.w	8011434 <__swbuf_r>
 8010d90:	6813      	ldr	r3, [r2, #0]
 8010d92:	1c58      	adds	r0, r3, #1
 8010d94:	6010      	str	r0, [r2, #0]
 8010d96:	7019      	strb	r1, [r3, #0]
 8010d98:	4608      	mov	r0, r1
 8010d9a:	bc10      	pop	{r4}
 8010d9c:	4770      	bx	lr

08010d9e <__sfputs_r>:
 8010d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010da0:	4606      	mov	r6, r0
 8010da2:	460f      	mov	r7, r1
 8010da4:	4614      	mov	r4, r2
 8010da6:	18d5      	adds	r5, r2, r3
 8010da8:	42ac      	cmp	r4, r5
 8010daa:	d101      	bne.n	8010db0 <__sfputs_r+0x12>
 8010dac:	2000      	movs	r0, #0
 8010dae:	e007      	b.n	8010dc0 <__sfputs_r+0x22>
 8010db0:	463a      	mov	r2, r7
 8010db2:	4630      	mov	r0, r6
 8010db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010db8:	f7ff ffdc 	bl	8010d74 <__sfputc_r>
 8010dbc:	1c43      	adds	r3, r0, #1
 8010dbe:	d1f3      	bne.n	8010da8 <__sfputs_r+0xa>
 8010dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010dc4 <_vfiprintf_r>:
 8010dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc8:	460d      	mov	r5, r1
 8010dca:	4614      	mov	r4, r2
 8010dcc:	4698      	mov	r8, r3
 8010dce:	4606      	mov	r6, r0
 8010dd0:	b09d      	sub	sp, #116	; 0x74
 8010dd2:	b118      	cbz	r0, 8010ddc <_vfiprintf_r+0x18>
 8010dd4:	6983      	ldr	r3, [r0, #24]
 8010dd6:	b90b      	cbnz	r3, 8010ddc <_vfiprintf_r+0x18>
 8010dd8:	f7fe fcf6 	bl	800f7c8 <__sinit>
 8010ddc:	4b89      	ldr	r3, [pc, #548]	; (8011004 <_vfiprintf_r+0x240>)
 8010dde:	429d      	cmp	r5, r3
 8010de0:	d11b      	bne.n	8010e1a <_vfiprintf_r+0x56>
 8010de2:	6875      	ldr	r5, [r6, #4]
 8010de4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010de6:	07d9      	lsls	r1, r3, #31
 8010de8:	d405      	bmi.n	8010df6 <_vfiprintf_r+0x32>
 8010dea:	89ab      	ldrh	r3, [r5, #12]
 8010dec:	059a      	lsls	r2, r3, #22
 8010dee:	d402      	bmi.n	8010df6 <_vfiprintf_r+0x32>
 8010df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010df2:	f7ff f8ee 	bl	800ffd2 <__retarget_lock_acquire_recursive>
 8010df6:	89ab      	ldrh	r3, [r5, #12]
 8010df8:	071b      	lsls	r3, r3, #28
 8010dfa:	d501      	bpl.n	8010e00 <_vfiprintf_r+0x3c>
 8010dfc:	692b      	ldr	r3, [r5, #16]
 8010dfe:	b9eb      	cbnz	r3, 8010e3c <_vfiprintf_r+0x78>
 8010e00:	4629      	mov	r1, r5
 8010e02:	4630      	mov	r0, r6
 8010e04:	f000 fb88 	bl	8011518 <__swsetup_r>
 8010e08:	b1c0      	cbz	r0, 8010e3c <_vfiprintf_r+0x78>
 8010e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e0c:	07dc      	lsls	r4, r3, #31
 8010e0e:	d50e      	bpl.n	8010e2e <_vfiprintf_r+0x6a>
 8010e10:	f04f 30ff 	mov.w	r0, #4294967295
 8010e14:	b01d      	add	sp, #116	; 0x74
 8010e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e1a:	4b7b      	ldr	r3, [pc, #492]	; (8011008 <_vfiprintf_r+0x244>)
 8010e1c:	429d      	cmp	r5, r3
 8010e1e:	d101      	bne.n	8010e24 <_vfiprintf_r+0x60>
 8010e20:	68b5      	ldr	r5, [r6, #8]
 8010e22:	e7df      	b.n	8010de4 <_vfiprintf_r+0x20>
 8010e24:	4b79      	ldr	r3, [pc, #484]	; (801100c <_vfiprintf_r+0x248>)
 8010e26:	429d      	cmp	r5, r3
 8010e28:	bf08      	it	eq
 8010e2a:	68f5      	ldreq	r5, [r6, #12]
 8010e2c:	e7da      	b.n	8010de4 <_vfiprintf_r+0x20>
 8010e2e:	89ab      	ldrh	r3, [r5, #12]
 8010e30:	0598      	lsls	r0, r3, #22
 8010e32:	d4ed      	bmi.n	8010e10 <_vfiprintf_r+0x4c>
 8010e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e36:	f7ff f8cd 	bl	800ffd4 <__retarget_lock_release_recursive>
 8010e3a:	e7e9      	b.n	8010e10 <_vfiprintf_r+0x4c>
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e40:	2320      	movs	r3, #32
 8010e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e46:	2330      	movs	r3, #48	; 0x30
 8010e48:	f04f 0901 	mov.w	r9, #1
 8010e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e50:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011010 <_vfiprintf_r+0x24c>
 8010e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e58:	4623      	mov	r3, r4
 8010e5a:	469a      	mov	sl, r3
 8010e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e60:	b10a      	cbz	r2, 8010e66 <_vfiprintf_r+0xa2>
 8010e62:	2a25      	cmp	r2, #37	; 0x25
 8010e64:	d1f9      	bne.n	8010e5a <_vfiprintf_r+0x96>
 8010e66:	ebba 0b04 	subs.w	fp, sl, r4
 8010e6a:	d00b      	beq.n	8010e84 <_vfiprintf_r+0xc0>
 8010e6c:	465b      	mov	r3, fp
 8010e6e:	4622      	mov	r2, r4
 8010e70:	4629      	mov	r1, r5
 8010e72:	4630      	mov	r0, r6
 8010e74:	f7ff ff93 	bl	8010d9e <__sfputs_r>
 8010e78:	3001      	adds	r0, #1
 8010e7a:	f000 80aa 	beq.w	8010fd2 <_vfiprintf_r+0x20e>
 8010e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e80:	445a      	add	r2, fp
 8010e82:	9209      	str	r2, [sp, #36]	; 0x24
 8010e84:	f89a 3000 	ldrb.w	r3, [sl]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	f000 80a2 	beq.w	8010fd2 <_vfiprintf_r+0x20e>
 8010e8e:	2300      	movs	r3, #0
 8010e90:	f04f 32ff 	mov.w	r2, #4294967295
 8010e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e98:	f10a 0a01 	add.w	sl, sl, #1
 8010e9c:	9304      	str	r3, [sp, #16]
 8010e9e:	9307      	str	r3, [sp, #28]
 8010ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8010ea6:	4654      	mov	r4, sl
 8010ea8:	2205      	movs	r2, #5
 8010eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eae:	4858      	ldr	r0, [pc, #352]	; (8011010 <_vfiprintf_r+0x24c>)
 8010eb0:	f000 fd1e 	bl	80118f0 <memchr>
 8010eb4:	9a04      	ldr	r2, [sp, #16]
 8010eb6:	b9d8      	cbnz	r0, 8010ef0 <_vfiprintf_r+0x12c>
 8010eb8:	06d1      	lsls	r1, r2, #27
 8010eba:	bf44      	itt	mi
 8010ebc:	2320      	movmi	r3, #32
 8010ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ec2:	0713      	lsls	r3, r2, #28
 8010ec4:	bf44      	itt	mi
 8010ec6:	232b      	movmi	r3, #43	; 0x2b
 8010ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8010ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8010ed2:	d015      	beq.n	8010f00 <_vfiprintf_r+0x13c>
 8010ed4:	4654      	mov	r4, sl
 8010ed6:	2000      	movs	r0, #0
 8010ed8:	f04f 0c0a 	mov.w	ip, #10
 8010edc:	9a07      	ldr	r2, [sp, #28]
 8010ede:	4621      	mov	r1, r4
 8010ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ee4:	3b30      	subs	r3, #48	; 0x30
 8010ee6:	2b09      	cmp	r3, #9
 8010ee8:	d94e      	bls.n	8010f88 <_vfiprintf_r+0x1c4>
 8010eea:	b1b0      	cbz	r0, 8010f1a <_vfiprintf_r+0x156>
 8010eec:	9207      	str	r2, [sp, #28]
 8010eee:	e014      	b.n	8010f1a <_vfiprintf_r+0x156>
 8010ef0:	eba0 0308 	sub.w	r3, r0, r8
 8010ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8010ef8:	4313      	orrs	r3, r2
 8010efa:	46a2      	mov	sl, r4
 8010efc:	9304      	str	r3, [sp, #16]
 8010efe:	e7d2      	b.n	8010ea6 <_vfiprintf_r+0xe2>
 8010f00:	9b03      	ldr	r3, [sp, #12]
 8010f02:	1d19      	adds	r1, r3, #4
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	9103      	str	r1, [sp, #12]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	bfbb      	ittet	lt
 8010f0c:	425b      	neglt	r3, r3
 8010f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8010f12:	9307      	strge	r3, [sp, #28]
 8010f14:	9307      	strlt	r3, [sp, #28]
 8010f16:	bfb8      	it	lt
 8010f18:	9204      	strlt	r2, [sp, #16]
 8010f1a:	7823      	ldrb	r3, [r4, #0]
 8010f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8010f1e:	d10c      	bne.n	8010f3a <_vfiprintf_r+0x176>
 8010f20:	7863      	ldrb	r3, [r4, #1]
 8010f22:	2b2a      	cmp	r3, #42	; 0x2a
 8010f24:	d135      	bne.n	8010f92 <_vfiprintf_r+0x1ce>
 8010f26:	9b03      	ldr	r3, [sp, #12]
 8010f28:	3402      	adds	r4, #2
 8010f2a:	1d1a      	adds	r2, r3, #4
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	9203      	str	r2, [sp, #12]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	bfb8      	it	lt
 8010f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f38:	9305      	str	r3, [sp, #20]
 8010f3a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8011014 <_vfiprintf_r+0x250>
 8010f3e:	2203      	movs	r2, #3
 8010f40:	4650      	mov	r0, sl
 8010f42:	7821      	ldrb	r1, [r4, #0]
 8010f44:	f000 fcd4 	bl	80118f0 <memchr>
 8010f48:	b140      	cbz	r0, 8010f5c <_vfiprintf_r+0x198>
 8010f4a:	2340      	movs	r3, #64	; 0x40
 8010f4c:	eba0 000a 	sub.w	r0, r0, sl
 8010f50:	fa03 f000 	lsl.w	r0, r3, r0
 8010f54:	9b04      	ldr	r3, [sp, #16]
 8010f56:	3401      	adds	r4, #1
 8010f58:	4303      	orrs	r3, r0
 8010f5a:	9304      	str	r3, [sp, #16]
 8010f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f60:	2206      	movs	r2, #6
 8010f62:	482d      	ldr	r0, [pc, #180]	; (8011018 <_vfiprintf_r+0x254>)
 8010f64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f68:	f000 fcc2 	bl	80118f0 <memchr>
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	d03f      	beq.n	8010ff0 <_vfiprintf_r+0x22c>
 8010f70:	4b2a      	ldr	r3, [pc, #168]	; (801101c <_vfiprintf_r+0x258>)
 8010f72:	bb1b      	cbnz	r3, 8010fbc <_vfiprintf_r+0x1f8>
 8010f74:	9b03      	ldr	r3, [sp, #12]
 8010f76:	3307      	adds	r3, #7
 8010f78:	f023 0307 	bic.w	r3, r3, #7
 8010f7c:	3308      	adds	r3, #8
 8010f7e:	9303      	str	r3, [sp, #12]
 8010f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f82:	443b      	add	r3, r7
 8010f84:	9309      	str	r3, [sp, #36]	; 0x24
 8010f86:	e767      	b.n	8010e58 <_vfiprintf_r+0x94>
 8010f88:	460c      	mov	r4, r1
 8010f8a:	2001      	movs	r0, #1
 8010f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f90:	e7a5      	b.n	8010ede <_vfiprintf_r+0x11a>
 8010f92:	2300      	movs	r3, #0
 8010f94:	f04f 0c0a 	mov.w	ip, #10
 8010f98:	4619      	mov	r1, r3
 8010f9a:	3401      	adds	r4, #1
 8010f9c:	9305      	str	r3, [sp, #20]
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fa4:	3a30      	subs	r2, #48	; 0x30
 8010fa6:	2a09      	cmp	r2, #9
 8010fa8:	d903      	bls.n	8010fb2 <_vfiprintf_r+0x1ee>
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d0c5      	beq.n	8010f3a <_vfiprintf_r+0x176>
 8010fae:	9105      	str	r1, [sp, #20]
 8010fb0:	e7c3      	b.n	8010f3a <_vfiprintf_r+0x176>
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fba:	e7f0      	b.n	8010f9e <_vfiprintf_r+0x1da>
 8010fbc:	ab03      	add	r3, sp, #12
 8010fbe:	9300      	str	r3, [sp, #0]
 8010fc0:	462a      	mov	r2, r5
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	4b16      	ldr	r3, [pc, #88]	; (8011020 <_vfiprintf_r+0x25c>)
 8010fc6:	a904      	add	r1, sp, #16
 8010fc8:	f3af 8000 	nop.w
 8010fcc:	4607      	mov	r7, r0
 8010fce:	1c78      	adds	r0, r7, #1
 8010fd0:	d1d6      	bne.n	8010f80 <_vfiprintf_r+0x1bc>
 8010fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fd4:	07d9      	lsls	r1, r3, #31
 8010fd6:	d405      	bmi.n	8010fe4 <_vfiprintf_r+0x220>
 8010fd8:	89ab      	ldrh	r3, [r5, #12]
 8010fda:	059a      	lsls	r2, r3, #22
 8010fdc:	d402      	bmi.n	8010fe4 <_vfiprintf_r+0x220>
 8010fde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010fe0:	f7fe fff8 	bl	800ffd4 <__retarget_lock_release_recursive>
 8010fe4:	89ab      	ldrh	r3, [r5, #12]
 8010fe6:	065b      	lsls	r3, r3, #25
 8010fe8:	f53f af12 	bmi.w	8010e10 <_vfiprintf_r+0x4c>
 8010fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010fee:	e711      	b.n	8010e14 <_vfiprintf_r+0x50>
 8010ff0:	ab03      	add	r3, sp, #12
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	462a      	mov	r2, r5
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	4b09      	ldr	r3, [pc, #36]	; (8011020 <_vfiprintf_r+0x25c>)
 8010ffa:	a904      	add	r1, sp, #16
 8010ffc:	f000 f882 	bl	8011104 <_printf_i>
 8011000:	e7e4      	b.n	8010fcc <_vfiprintf_r+0x208>
 8011002:	bf00      	nop
 8011004:	08012fac 	.word	0x08012fac
 8011008:	08012fcc 	.word	0x08012fcc
 801100c:	08012f8c 	.word	0x08012f8c
 8011010:	080131ec 	.word	0x080131ec
 8011014:	080131f2 	.word	0x080131f2
 8011018:	080131f6 	.word	0x080131f6
 801101c:	00000000 	.word	0x00000000
 8011020:	08010d9f 	.word	0x08010d9f

08011024 <_printf_common>:
 8011024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011028:	4616      	mov	r6, r2
 801102a:	4699      	mov	r9, r3
 801102c:	688a      	ldr	r2, [r1, #8]
 801102e:	690b      	ldr	r3, [r1, #16]
 8011030:	4607      	mov	r7, r0
 8011032:	4293      	cmp	r3, r2
 8011034:	bfb8      	it	lt
 8011036:	4613      	movlt	r3, r2
 8011038:	6033      	str	r3, [r6, #0]
 801103a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801103e:	460c      	mov	r4, r1
 8011040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011044:	b10a      	cbz	r2, 801104a <_printf_common+0x26>
 8011046:	3301      	adds	r3, #1
 8011048:	6033      	str	r3, [r6, #0]
 801104a:	6823      	ldr	r3, [r4, #0]
 801104c:	0699      	lsls	r1, r3, #26
 801104e:	bf42      	ittt	mi
 8011050:	6833      	ldrmi	r3, [r6, #0]
 8011052:	3302      	addmi	r3, #2
 8011054:	6033      	strmi	r3, [r6, #0]
 8011056:	6825      	ldr	r5, [r4, #0]
 8011058:	f015 0506 	ands.w	r5, r5, #6
 801105c:	d106      	bne.n	801106c <_printf_common+0x48>
 801105e:	f104 0a19 	add.w	sl, r4, #25
 8011062:	68e3      	ldr	r3, [r4, #12]
 8011064:	6832      	ldr	r2, [r6, #0]
 8011066:	1a9b      	subs	r3, r3, r2
 8011068:	42ab      	cmp	r3, r5
 801106a:	dc28      	bgt.n	80110be <_printf_common+0x9a>
 801106c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011070:	1e13      	subs	r3, r2, #0
 8011072:	6822      	ldr	r2, [r4, #0]
 8011074:	bf18      	it	ne
 8011076:	2301      	movne	r3, #1
 8011078:	0692      	lsls	r2, r2, #26
 801107a:	d42d      	bmi.n	80110d8 <_printf_common+0xb4>
 801107c:	4649      	mov	r1, r9
 801107e:	4638      	mov	r0, r7
 8011080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011084:	47c0      	blx	r8
 8011086:	3001      	adds	r0, #1
 8011088:	d020      	beq.n	80110cc <_printf_common+0xa8>
 801108a:	6823      	ldr	r3, [r4, #0]
 801108c:	68e5      	ldr	r5, [r4, #12]
 801108e:	f003 0306 	and.w	r3, r3, #6
 8011092:	2b04      	cmp	r3, #4
 8011094:	bf18      	it	ne
 8011096:	2500      	movne	r5, #0
 8011098:	6832      	ldr	r2, [r6, #0]
 801109a:	f04f 0600 	mov.w	r6, #0
 801109e:	68a3      	ldr	r3, [r4, #8]
 80110a0:	bf08      	it	eq
 80110a2:	1aad      	subeq	r5, r5, r2
 80110a4:	6922      	ldr	r2, [r4, #16]
 80110a6:	bf08      	it	eq
 80110a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110ac:	4293      	cmp	r3, r2
 80110ae:	bfc4      	itt	gt
 80110b0:	1a9b      	subgt	r3, r3, r2
 80110b2:	18ed      	addgt	r5, r5, r3
 80110b4:	341a      	adds	r4, #26
 80110b6:	42b5      	cmp	r5, r6
 80110b8:	d11a      	bne.n	80110f0 <_printf_common+0xcc>
 80110ba:	2000      	movs	r0, #0
 80110bc:	e008      	b.n	80110d0 <_printf_common+0xac>
 80110be:	2301      	movs	r3, #1
 80110c0:	4652      	mov	r2, sl
 80110c2:	4649      	mov	r1, r9
 80110c4:	4638      	mov	r0, r7
 80110c6:	47c0      	blx	r8
 80110c8:	3001      	adds	r0, #1
 80110ca:	d103      	bne.n	80110d4 <_printf_common+0xb0>
 80110cc:	f04f 30ff 	mov.w	r0, #4294967295
 80110d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110d4:	3501      	adds	r5, #1
 80110d6:	e7c4      	b.n	8011062 <_printf_common+0x3e>
 80110d8:	2030      	movs	r0, #48	; 0x30
 80110da:	18e1      	adds	r1, r4, r3
 80110dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80110e0:	1c5a      	adds	r2, r3, #1
 80110e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80110e6:	4422      	add	r2, r4
 80110e8:	3302      	adds	r3, #2
 80110ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80110ee:	e7c5      	b.n	801107c <_printf_common+0x58>
 80110f0:	2301      	movs	r3, #1
 80110f2:	4622      	mov	r2, r4
 80110f4:	4649      	mov	r1, r9
 80110f6:	4638      	mov	r0, r7
 80110f8:	47c0      	blx	r8
 80110fa:	3001      	adds	r0, #1
 80110fc:	d0e6      	beq.n	80110cc <_printf_common+0xa8>
 80110fe:	3601      	adds	r6, #1
 8011100:	e7d9      	b.n	80110b6 <_printf_common+0x92>
	...

08011104 <_printf_i>:
 8011104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011108:	7e0f      	ldrb	r7, [r1, #24]
 801110a:	4691      	mov	r9, r2
 801110c:	2f78      	cmp	r7, #120	; 0x78
 801110e:	4680      	mov	r8, r0
 8011110:	460c      	mov	r4, r1
 8011112:	469a      	mov	sl, r3
 8011114:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801111a:	d807      	bhi.n	801112c <_printf_i+0x28>
 801111c:	2f62      	cmp	r7, #98	; 0x62
 801111e:	d80a      	bhi.n	8011136 <_printf_i+0x32>
 8011120:	2f00      	cmp	r7, #0
 8011122:	f000 80d9 	beq.w	80112d8 <_printf_i+0x1d4>
 8011126:	2f58      	cmp	r7, #88	; 0x58
 8011128:	f000 80a4 	beq.w	8011274 <_printf_i+0x170>
 801112c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011134:	e03a      	b.n	80111ac <_printf_i+0xa8>
 8011136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801113a:	2b15      	cmp	r3, #21
 801113c:	d8f6      	bhi.n	801112c <_printf_i+0x28>
 801113e:	a101      	add	r1, pc, #4	; (adr r1, 8011144 <_printf_i+0x40>)
 8011140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011144:	0801119d 	.word	0x0801119d
 8011148:	080111b1 	.word	0x080111b1
 801114c:	0801112d 	.word	0x0801112d
 8011150:	0801112d 	.word	0x0801112d
 8011154:	0801112d 	.word	0x0801112d
 8011158:	0801112d 	.word	0x0801112d
 801115c:	080111b1 	.word	0x080111b1
 8011160:	0801112d 	.word	0x0801112d
 8011164:	0801112d 	.word	0x0801112d
 8011168:	0801112d 	.word	0x0801112d
 801116c:	0801112d 	.word	0x0801112d
 8011170:	080112bf 	.word	0x080112bf
 8011174:	080111e1 	.word	0x080111e1
 8011178:	080112a1 	.word	0x080112a1
 801117c:	0801112d 	.word	0x0801112d
 8011180:	0801112d 	.word	0x0801112d
 8011184:	080112e1 	.word	0x080112e1
 8011188:	0801112d 	.word	0x0801112d
 801118c:	080111e1 	.word	0x080111e1
 8011190:	0801112d 	.word	0x0801112d
 8011194:	0801112d 	.word	0x0801112d
 8011198:	080112a9 	.word	0x080112a9
 801119c:	682b      	ldr	r3, [r5, #0]
 801119e:	1d1a      	adds	r2, r3, #4
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	602a      	str	r2, [r5, #0]
 80111a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111ac:	2301      	movs	r3, #1
 80111ae:	e0a4      	b.n	80112fa <_printf_i+0x1f6>
 80111b0:	6820      	ldr	r0, [r4, #0]
 80111b2:	6829      	ldr	r1, [r5, #0]
 80111b4:	0606      	lsls	r6, r0, #24
 80111b6:	f101 0304 	add.w	r3, r1, #4
 80111ba:	d50a      	bpl.n	80111d2 <_printf_i+0xce>
 80111bc:	680e      	ldr	r6, [r1, #0]
 80111be:	602b      	str	r3, [r5, #0]
 80111c0:	2e00      	cmp	r6, #0
 80111c2:	da03      	bge.n	80111cc <_printf_i+0xc8>
 80111c4:	232d      	movs	r3, #45	; 0x2d
 80111c6:	4276      	negs	r6, r6
 80111c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111cc:	230a      	movs	r3, #10
 80111ce:	485e      	ldr	r0, [pc, #376]	; (8011348 <_printf_i+0x244>)
 80111d0:	e019      	b.n	8011206 <_printf_i+0x102>
 80111d2:	680e      	ldr	r6, [r1, #0]
 80111d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80111d8:	602b      	str	r3, [r5, #0]
 80111da:	bf18      	it	ne
 80111dc:	b236      	sxthne	r6, r6
 80111de:	e7ef      	b.n	80111c0 <_printf_i+0xbc>
 80111e0:	682b      	ldr	r3, [r5, #0]
 80111e2:	6820      	ldr	r0, [r4, #0]
 80111e4:	1d19      	adds	r1, r3, #4
 80111e6:	6029      	str	r1, [r5, #0]
 80111e8:	0601      	lsls	r1, r0, #24
 80111ea:	d501      	bpl.n	80111f0 <_printf_i+0xec>
 80111ec:	681e      	ldr	r6, [r3, #0]
 80111ee:	e002      	b.n	80111f6 <_printf_i+0xf2>
 80111f0:	0646      	lsls	r6, r0, #25
 80111f2:	d5fb      	bpl.n	80111ec <_printf_i+0xe8>
 80111f4:	881e      	ldrh	r6, [r3, #0]
 80111f6:	2f6f      	cmp	r7, #111	; 0x6f
 80111f8:	bf0c      	ite	eq
 80111fa:	2308      	moveq	r3, #8
 80111fc:	230a      	movne	r3, #10
 80111fe:	4852      	ldr	r0, [pc, #328]	; (8011348 <_printf_i+0x244>)
 8011200:	2100      	movs	r1, #0
 8011202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011206:	6865      	ldr	r5, [r4, #4]
 8011208:	2d00      	cmp	r5, #0
 801120a:	bfa8      	it	ge
 801120c:	6821      	ldrge	r1, [r4, #0]
 801120e:	60a5      	str	r5, [r4, #8]
 8011210:	bfa4      	itt	ge
 8011212:	f021 0104 	bicge.w	r1, r1, #4
 8011216:	6021      	strge	r1, [r4, #0]
 8011218:	b90e      	cbnz	r6, 801121e <_printf_i+0x11a>
 801121a:	2d00      	cmp	r5, #0
 801121c:	d04d      	beq.n	80112ba <_printf_i+0x1b6>
 801121e:	4615      	mov	r5, r2
 8011220:	fbb6 f1f3 	udiv	r1, r6, r3
 8011224:	fb03 6711 	mls	r7, r3, r1, r6
 8011228:	5dc7      	ldrb	r7, [r0, r7]
 801122a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801122e:	4637      	mov	r7, r6
 8011230:	42bb      	cmp	r3, r7
 8011232:	460e      	mov	r6, r1
 8011234:	d9f4      	bls.n	8011220 <_printf_i+0x11c>
 8011236:	2b08      	cmp	r3, #8
 8011238:	d10b      	bne.n	8011252 <_printf_i+0x14e>
 801123a:	6823      	ldr	r3, [r4, #0]
 801123c:	07de      	lsls	r6, r3, #31
 801123e:	d508      	bpl.n	8011252 <_printf_i+0x14e>
 8011240:	6923      	ldr	r3, [r4, #16]
 8011242:	6861      	ldr	r1, [r4, #4]
 8011244:	4299      	cmp	r1, r3
 8011246:	bfde      	ittt	le
 8011248:	2330      	movle	r3, #48	; 0x30
 801124a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801124e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011252:	1b52      	subs	r2, r2, r5
 8011254:	6122      	str	r2, [r4, #16]
 8011256:	464b      	mov	r3, r9
 8011258:	4621      	mov	r1, r4
 801125a:	4640      	mov	r0, r8
 801125c:	f8cd a000 	str.w	sl, [sp]
 8011260:	aa03      	add	r2, sp, #12
 8011262:	f7ff fedf 	bl	8011024 <_printf_common>
 8011266:	3001      	adds	r0, #1
 8011268:	d14c      	bne.n	8011304 <_printf_i+0x200>
 801126a:	f04f 30ff 	mov.w	r0, #4294967295
 801126e:	b004      	add	sp, #16
 8011270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011274:	4834      	ldr	r0, [pc, #208]	; (8011348 <_printf_i+0x244>)
 8011276:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801127a:	6829      	ldr	r1, [r5, #0]
 801127c:	6823      	ldr	r3, [r4, #0]
 801127e:	f851 6b04 	ldr.w	r6, [r1], #4
 8011282:	6029      	str	r1, [r5, #0]
 8011284:	061d      	lsls	r5, r3, #24
 8011286:	d514      	bpl.n	80112b2 <_printf_i+0x1ae>
 8011288:	07df      	lsls	r7, r3, #31
 801128a:	bf44      	itt	mi
 801128c:	f043 0320 	orrmi.w	r3, r3, #32
 8011290:	6023      	strmi	r3, [r4, #0]
 8011292:	b91e      	cbnz	r6, 801129c <_printf_i+0x198>
 8011294:	6823      	ldr	r3, [r4, #0]
 8011296:	f023 0320 	bic.w	r3, r3, #32
 801129a:	6023      	str	r3, [r4, #0]
 801129c:	2310      	movs	r3, #16
 801129e:	e7af      	b.n	8011200 <_printf_i+0xfc>
 80112a0:	6823      	ldr	r3, [r4, #0]
 80112a2:	f043 0320 	orr.w	r3, r3, #32
 80112a6:	6023      	str	r3, [r4, #0]
 80112a8:	2378      	movs	r3, #120	; 0x78
 80112aa:	4828      	ldr	r0, [pc, #160]	; (801134c <_printf_i+0x248>)
 80112ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80112b0:	e7e3      	b.n	801127a <_printf_i+0x176>
 80112b2:	0659      	lsls	r1, r3, #25
 80112b4:	bf48      	it	mi
 80112b6:	b2b6      	uxthmi	r6, r6
 80112b8:	e7e6      	b.n	8011288 <_printf_i+0x184>
 80112ba:	4615      	mov	r5, r2
 80112bc:	e7bb      	b.n	8011236 <_printf_i+0x132>
 80112be:	682b      	ldr	r3, [r5, #0]
 80112c0:	6826      	ldr	r6, [r4, #0]
 80112c2:	1d18      	adds	r0, r3, #4
 80112c4:	6961      	ldr	r1, [r4, #20]
 80112c6:	6028      	str	r0, [r5, #0]
 80112c8:	0635      	lsls	r5, r6, #24
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	d501      	bpl.n	80112d2 <_printf_i+0x1ce>
 80112ce:	6019      	str	r1, [r3, #0]
 80112d0:	e002      	b.n	80112d8 <_printf_i+0x1d4>
 80112d2:	0670      	lsls	r0, r6, #25
 80112d4:	d5fb      	bpl.n	80112ce <_printf_i+0x1ca>
 80112d6:	8019      	strh	r1, [r3, #0]
 80112d8:	2300      	movs	r3, #0
 80112da:	4615      	mov	r5, r2
 80112dc:	6123      	str	r3, [r4, #16]
 80112de:	e7ba      	b.n	8011256 <_printf_i+0x152>
 80112e0:	682b      	ldr	r3, [r5, #0]
 80112e2:	2100      	movs	r1, #0
 80112e4:	1d1a      	adds	r2, r3, #4
 80112e6:	602a      	str	r2, [r5, #0]
 80112e8:	681d      	ldr	r5, [r3, #0]
 80112ea:	6862      	ldr	r2, [r4, #4]
 80112ec:	4628      	mov	r0, r5
 80112ee:	f000 faff 	bl	80118f0 <memchr>
 80112f2:	b108      	cbz	r0, 80112f8 <_printf_i+0x1f4>
 80112f4:	1b40      	subs	r0, r0, r5
 80112f6:	6060      	str	r0, [r4, #4]
 80112f8:	6863      	ldr	r3, [r4, #4]
 80112fa:	6123      	str	r3, [r4, #16]
 80112fc:	2300      	movs	r3, #0
 80112fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011302:	e7a8      	b.n	8011256 <_printf_i+0x152>
 8011304:	462a      	mov	r2, r5
 8011306:	4649      	mov	r1, r9
 8011308:	4640      	mov	r0, r8
 801130a:	6923      	ldr	r3, [r4, #16]
 801130c:	47d0      	blx	sl
 801130e:	3001      	adds	r0, #1
 8011310:	d0ab      	beq.n	801126a <_printf_i+0x166>
 8011312:	6823      	ldr	r3, [r4, #0]
 8011314:	079b      	lsls	r3, r3, #30
 8011316:	d413      	bmi.n	8011340 <_printf_i+0x23c>
 8011318:	68e0      	ldr	r0, [r4, #12]
 801131a:	9b03      	ldr	r3, [sp, #12]
 801131c:	4298      	cmp	r0, r3
 801131e:	bfb8      	it	lt
 8011320:	4618      	movlt	r0, r3
 8011322:	e7a4      	b.n	801126e <_printf_i+0x16a>
 8011324:	2301      	movs	r3, #1
 8011326:	4632      	mov	r2, r6
 8011328:	4649      	mov	r1, r9
 801132a:	4640      	mov	r0, r8
 801132c:	47d0      	blx	sl
 801132e:	3001      	adds	r0, #1
 8011330:	d09b      	beq.n	801126a <_printf_i+0x166>
 8011332:	3501      	adds	r5, #1
 8011334:	68e3      	ldr	r3, [r4, #12]
 8011336:	9903      	ldr	r1, [sp, #12]
 8011338:	1a5b      	subs	r3, r3, r1
 801133a:	42ab      	cmp	r3, r5
 801133c:	dcf2      	bgt.n	8011324 <_printf_i+0x220>
 801133e:	e7eb      	b.n	8011318 <_printf_i+0x214>
 8011340:	2500      	movs	r5, #0
 8011342:	f104 0619 	add.w	r6, r4, #25
 8011346:	e7f5      	b.n	8011334 <_printf_i+0x230>
 8011348:	080131fd 	.word	0x080131fd
 801134c:	0801320e 	.word	0x0801320e

08011350 <nan>:
 8011350:	2000      	movs	r0, #0
 8011352:	4901      	ldr	r1, [pc, #4]	; (8011358 <nan+0x8>)
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop
 8011358:	7ff80000 	.word	0x7ff80000

0801135c <_sbrk_r>:
 801135c:	b538      	push	{r3, r4, r5, lr}
 801135e:	2300      	movs	r3, #0
 8011360:	4d05      	ldr	r5, [pc, #20]	; (8011378 <_sbrk_r+0x1c>)
 8011362:	4604      	mov	r4, r0
 8011364:	4608      	mov	r0, r1
 8011366:	602b      	str	r3, [r5, #0]
 8011368:	f7f0 fe2a 	bl	8001fc0 <_sbrk>
 801136c:	1c43      	adds	r3, r0, #1
 801136e:	d102      	bne.n	8011376 <_sbrk_r+0x1a>
 8011370:	682b      	ldr	r3, [r5, #0]
 8011372:	b103      	cbz	r3, 8011376 <_sbrk_r+0x1a>
 8011374:	6023      	str	r3, [r4, #0]
 8011376:	bd38      	pop	{r3, r4, r5, pc}
 8011378:	20000e00 	.word	0x20000e00

0801137c <nanf>:
 801137c:	4800      	ldr	r0, [pc, #0]	; (8011380 <nanf+0x4>)
 801137e:	4770      	bx	lr
 8011380:	7fc00000 	.word	0x7fc00000

08011384 <__sread>:
 8011384:	b510      	push	{r4, lr}
 8011386:	460c      	mov	r4, r1
 8011388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801138c:	f000 fb5c 	bl	8011a48 <_read_r>
 8011390:	2800      	cmp	r0, #0
 8011392:	bfab      	itete	ge
 8011394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011396:	89a3      	ldrhlt	r3, [r4, #12]
 8011398:	181b      	addge	r3, r3, r0
 801139a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801139e:	bfac      	ite	ge
 80113a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80113a2:	81a3      	strhlt	r3, [r4, #12]
 80113a4:	bd10      	pop	{r4, pc}

080113a6 <__swrite>:
 80113a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113aa:	461f      	mov	r7, r3
 80113ac:	898b      	ldrh	r3, [r1, #12]
 80113ae:	4605      	mov	r5, r0
 80113b0:	05db      	lsls	r3, r3, #23
 80113b2:	460c      	mov	r4, r1
 80113b4:	4616      	mov	r6, r2
 80113b6:	d505      	bpl.n	80113c4 <__swrite+0x1e>
 80113b8:	2302      	movs	r3, #2
 80113ba:	2200      	movs	r2, #0
 80113bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113c0:	f000 fa16 	bl	80117f0 <_lseek_r>
 80113c4:	89a3      	ldrh	r3, [r4, #12]
 80113c6:	4632      	mov	r2, r6
 80113c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80113cc:	81a3      	strh	r3, [r4, #12]
 80113ce:	4628      	mov	r0, r5
 80113d0:	463b      	mov	r3, r7
 80113d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113da:	f000 b88b 	b.w	80114f4 <_write_r>

080113de <__sseek>:
 80113de:	b510      	push	{r4, lr}
 80113e0:	460c      	mov	r4, r1
 80113e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113e6:	f000 fa03 	bl	80117f0 <_lseek_r>
 80113ea:	1c43      	adds	r3, r0, #1
 80113ec:	89a3      	ldrh	r3, [r4, #12]
 80113ee:	bf15      	itete	ne
 80113f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80113f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80113f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80113fa:	81a3      	strheq	r3, [r4, #12]
 80113fc:	bf18      	it	ne
 80113fe:	81a3      	strhne	r3, [r4, #12]
 8011400:	bd10      	pop	{r4, pc}

08011402 <__sclose>:
 8011402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011406:	f000 b913 	b.w	8011630 <_close_r>

0801140a <strncmp>:
 801140a:	4603      	mov	r3, r0
 801140c:	b510      	push	{r4, lr}
 801140e:	b172      	cbz	r2, 801142e <strncmp+0x24>
 8011410:	3901      	subs	r1, #1
 8011412:	1884      	adds	r4, r0, r2
 8011414:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011418:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801141c:	4290      	cmp	r0, r2
 801141e:	d101      	bne.n	8011424 <strncmp+0x1a>
 8011420:	42a3      	cmp	r3, r4
 8011422:	d101      	bne.n	8011428 <strncmp+0x1e>
 8011424:	1a80      	subs	r0, r0, r2
 8011426:	bd10      	pop	{r4, pc}
 8011428:	2800      	cmp	r0, #0
 801142a:	d1f3      	bne.n	8011414 <strncmp+0xa>
 801142c:	e7fa      	b.n	8011424 <strncmp+0x1a>
 801142e:	4610      	mov	r0, r2
 8011430:	e7f9      	b.n	8011426 <strncmp+0x1c>
	...

08011434 <__swbuf_r>:
 8011434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011436:	460e      	mov	r6, r1
 8011438:	4614      	mov	r4, r2
 801143a:	4605      	mov	r5, r0
 801143c:	b118      	cbz	r0, 8011446 <__swbuf_r+0x12>
 801143e:	6983      	ldr	r3, [r0, #24]
 8011440:	b90b      	cbnz	r3, 8011446 <__swbuf_r+0x12>
 8011442:	f7fe f9c1 	bl	800f7c8 <__sinit>
 8011446:	4b21      	ldr	r3, [pc, #132]	; (80114cc <__swbuf_r+0x98>)
 8011448:	429c      	cmp	r4, r3
 801144a:	d12b      	bne.n	80114a4 <__swbuf_r+0x70>
 801144c:	686c      	ldr	r4, [r5, #4]
 801144e:	69a3      	ldr	r3, [r4, #24]
 8011450:	60a3      	str	r3, [r4, #8]
 8011452:	89a3      	ldrh	r3, [r4, #12]
 8011454:	071a      	lsls	r2, r3, #28
 8011456:	d52f      	bpl.n	80114b8 <__swbuf_r+0x84>
 8011458:	6923      	ldr	r3, [r4, #16]
 801145a:	b36b      	cbz	r3, 80114b8 <__swbuf_r+0x84>
 801145c:	6923      	ldr	r3, [r4, #16]
 801145e:	6820      	ldr	r0, [r4, #0]
 8011460:	b2f6      	uxtb	r6, r6
 8011462:	1ac0      	subs	r0, r0, r3
 8011464:	6963      	ldr	r3, [r4, #20]
 8011466:	4637      	mov	r7, r6
 8011468:	4283      	cmp	r3, r0
 801146a:	dc04      	bgt.n	8011476 <__swbuf_r+0x42>
 801146c:	4621      	mov	r1, r4
 801146e:	4628      	mov	r0, r5
 8011470:	f000 f970 	bl	8011754 <_fflush_r>
 8011474:	bb30      	cbnz	r0, 80114c4 <__swbuf_r+0x90>
 8011476:	68a3      	ldr	r3, [r4, #8]
 8011478:	3001      	adds	r0, #1
 801147a:	3b01      	subs	r3, #1
 801147c:	60a3      	str	r3, [r4, #8]
 801147e:	6823      	ldr	r3, [r4, #0]
 8011480:	1c5a      	adds	r2, r3, #1
 8011482:	6022      	str	r2, [r4, #0]
 8011484:	701e      	strb	r6, [r3, #0]
 8011486:	6963      	ldr	r3, [r4, #20]
 8011488:	4283      	cmp	r3, r0
 801148a:	d004      	beq.n	8011496 <__swbuf_r+0x62>
 801148c:	89a3      	ldrh	r3, [r4, #12]
 801148e:	07db      	lsls	r3, r3, #31
 8011490:	d506      	bpl.n	80114a0 <__swbuf_r+0x6c>
 8011492:	2e0a      	cmp	r6, #10
 8011494:	d104      	bne.n	80114a0 <__swbuf_r+0x6c>
 8011496:	4621      	mov	r1, r4
 8011498:	4628      	mov	r0, r5
 801149a:	f000 f95b 	bl	8011754 <_fflush_r>
 801149e:	b988      	cbnz	r0, 80114c4 <__swbuf_r+0x90>
 80114a0:	4638      	mov	r0, r7
 80114a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114a4:	4b0a      	ldr	r3, [pc, #40]	; (80114d0 <__swbuf_r+0x9c>)
 80114a6:	429c      	cmp	r4, r3
 80114a8:	d101      	bne.n	80114ae <__swbuf_r+0x7a>
 80114aa:	68ac      	ldr	r4, [r5, #8]
 80114ac:	e7cf      	b.n	801144e <__swbuf_r+0x1a>
 80114ae:	4b09      	ldr	r3, [pc, #36]	; (80114d4 <__swbuf_r+0xa0>)
 80114b0:	429c      	cmp	r4, r3
 80114b2:	bf08      	it	eq
 80114b4:	68ec      	ldreq	r4, [r5, #12]
 80114b6:	e7ca      	b.n	801144e <__swbuf_r+0x1a>
 80114b8:	4621      	mov	r1, r4
 80114ba:	4628      	mov	r0, r5
 80114bc:	f000 f82c 	bl	8011518 <__swsetup_r>
 80114c0:	2800      	cmp	r0, #0
 80114c2:	d0cb      	beq.n	801145c <__swbuf_r+0x28>
 80114c4:	f04f 37ff 	mov.w	r7, #4294967295
 80114c8:	e7ea      	b.n	80114a0 <__swbuf_r+0x6c>
 80114ca:	bf00      	nop
 80114cc:	08012fac 	.word	0x08012fac
 80114d0:	08012fcc 	.word	0x08012fcc
 80114d4:	08012f8c 	.word	0x08012f8c

080114d8 <__ascii_wctomb>:
 80114d8:	4603      	mov	r3, r0
 80114da:	4608      	mov	r0, r1
 80114dc:	b141      	cbz	r1, 80114f0 <__ascii_wctomb+0x18>
 80114de:	2aff      	cmp	r2, #255	; 0xff
 80114e0:	d904      	bls.n	80114ec <__ascii_wctomb+0x14>
 80114e2:	228a      	movs	r2, #138	; 0x8a
 80114e4:	f04f 30ff 	mov.w	r0, #4294967295
 80114e8:	601a      	str	r2, [r3, #0]
 80114ea:	4770      	bx	lr
 80114ec:	2001      	movs	r0, #1
 80114ee:	700a      	strb	r2, [r1, #0]
 80114f0:	4770      	bx	lr
	...

080114f4 <_write_r>:
 80114f4:	b538      	push	{r3, r4, r5, lr}
 80114f6:	4604      	mov	r4, r0
 80114f8:	4608      	mov	r0, r1
 80114fa:	4611      	mov	r1, r2
 80114fc:	2200      	movs	r2, #0
 80114fe:	4d05      	ldr	r5, [pc, #20]	; (8011514 <_write_r+0x20>)
 8011500:	602a      	str	r2, [r5, #0]
 8011502:	461a      	mov	r2, r3
 8011504:	f7f0 fd10 	bl	8001f28 <_write>
 8011508:	1c43      	adds	r3, r0, #1
 801150a:	d102      	bne.n	8011512 <_write_r+0x1e>
 801150c:	682b      	ldr	r3, [r5, #0]
 801150e:	b103      	cbz	r3, 8011512 <_write_r+0x1e>
 8011510:	6023      	str	r3, [r4, #0]
 8011512:	bd38      	pop	{r3, r4, r5, pc}
 8011514:	20000e00 	.word	0x20000e00

08011518 <__swsetup_r>:
 8011518:	4b32      	ldr	r3, [pc, #200]	; (80115e4 <__swsetup_r+0xcc>)
 801151a:	b570      	push	{r4, r5, r6, lr}
 801151c:	681d      	ldr	r5, [r3, #0]
 801151e:	4606      	mov	r6, r0
 8011520:	460c      	mov	r4, r1
 8011522:	b125      	cbz	r5, 801152e <__swsetup_r+0x16>
 8011524:	69ab      	ldr	r3, [r5, #24]
 8011526:	b913      	cbnz	r3, 801152e <__swsetup_r+0x16>
 8011528:	4628      	mov	r0, r5
 801152a:	f7fe f94d 	bl	800f7c8 <__sinit>
 801152e:	4b2e      	ldr	r3, [pc, #184]	; (80115e8 <__swsetup_r+0xd0>)
 8011530:	429c      	cmp	r4, r3
 8011532:	d10f      	bne.n	8011554 <__swsetup_r+0x3c>
 8011534:	686c      	ldr	r4, [r5, #4]
 8011536:	89a3      	ldrh	r3, [r4, #12]
 8011538:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801153c:	0719      	lsls	r1, r3, #28
 801153e:	d42c      	bmi.n	801159a <__swsetup_r+0x82>
 8011540:	06dd      	lsls	r5, r3, #27
 8011542:	d411      	bmi.n	8011568 <__swsetup_r+0x50>
 8011544:	2309      	movs	r3, #9
 8011546:	6033      	str	r3, [r6, #0]
 8011548:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801154c:	f04f 30ff 	mov.w	r0, #4294967295
 8011550:	81a3      	strh	r3, [r4, #12]
 8011552:	e03e      	b.n	80115d2 <__swsetup_r+0xba>
 8011554:	4b25      	ldr	r3, [pc, #148]	; (80115ec <__swsetup_r+0xd4>)
 8011556:	429c      	cmp	r4, r3
 8011558:	d101      	bne.n	801155e <__swsetup_r+0x46>
 801155a:	68ac      	ldr	r4, [r5, #8]
 801155c:	e7eb      	b.n	8011536 <__swsetup_r+0x1e>
 801155e:	4b24      	ldr	r3, [pc, #144]	; (80115f0 <__swsetup_r+0xd8>)
 8011560:	429c      	cmp	r4, r3
 8011562:	bf08      	it	eq
 8011564:	68ec      	ldreq	r4, [r5, #12]
 8011566:	e7e6      	b.n	8011536 <__swsetup_r+0x1e>
 8011568:	0758      	lsls	r0, r3, #29
 801156a:	d512      	bpl.n	8011592 <__swsetup_r+0x7a>
 801156c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801156e:	b141      	cbz	r1, 8011582 <__swsetup_r+0x6a>
 8011570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011574:	4299      	cmp	r1, r3
 8011576:	d002      	beq.n	801157e <__swsetup_r+0x66>
 8011578:	4630      	mov	r0, r6
 801157a:	f000 f9ed 	bl	8011958 <_free_r>
 801157e:	2300      	movs	r3, #0
 8011580:	6363      	str	r3, [r4, #52]	; 0x34
 8011582:	89a3      	ldrh	r3, [r4, #12]
 8011584:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011588:	81a3      	strh	r3, [r4, #12]
 801158a:	2300      	movs	r3, #0
 801158c:	6063      	str	r3, [r4, #4]
 801158e:	6923      	ldr	r3, [r4, #16]
 8011590:	6023      	str	r3, [r4, #0]
 8011592:	89a3      	ldrh	r3, [r4, #12]
 8011594:	f043 0308 	orr.w	r3, r3, #8
 8011598:	81a3      	strh	r3, [r4, #12]
 801159a:	6923      	ldr	r3, [r4, #16]
 801159c:	b94b      	cbnz	r3, 80115b2 <__swsetup_r+0x9a>
 801159e:	89a3      	ldrh	r3, [r4, #12]
 80115a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80115a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115a8:	d003      	beq.n	80115b2 <__swsetup_r+0x9a>
 80115aa:	4621      	mov	r1, r4
 80115ac:	4630      	mov	r0, r6
 80115ae:	f000 f957 	bl	8011860 <__smakebuf_r>
 80115b2:	89a0      	ldrh	r0, [r4, #12]
 80115b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115b8:	f010 0301 	ands.w	r3, r0, #1
 80115bc:	d00a      	beq.n	80115d4 <__swsetup_r+0xbc>
 80115be:	2300      	movs	r3, #0
 80115c0:	60a3      	str	r3, [r4, #8]
 80115c2:	6963      	ldr	r3, [r4, #20]
 80115c4:	425b      	negs	r3, r3
 80115c6:	61a3      	str	r3, [r4, #24]
 80115c8:	6923      	ldr	r3, [r4, #16]
 80115ca:	b943      	cbnz	r3, 80115de <__swsetup_r+0xc6>
 80115cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80115d0:	d1ba      	bne.n	8011548 <__swsetup_r+0x30>
 80115d2:	bd70      	pop	{r4, r5, r6, pc}
 80115d4:	0781      	lsls	r1, r0, #30
 80115d6:	bf58      	it	pl
 80115d8:	6963      	ldrpl	r3, [r4, #20]
 80115da:	60a3      	str	r3, [r4, #8]
 80115dc:	e7f4      	b.n	80115c8 <__swsetup_r+0xb0>
 80115de:	2000      	movs	r0, #0
 80115e0:	e7f7      	b.n	80115d2 <__swsetup_r+0xba>
 80115e2:	bf00      	nop
 80115e4:	20000050 	.word	0x20000050
 80115e8:	08012fac 	.word	0x08012fac
 80115ec:	08012fcc 	.word	0x08012fcc
 80115f0:	08012f8c 	.word	0x08012f8c

080115f4 <__assert_func>:
 80115f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115f6:	4614      	mov	r4, r2
 80115f8:	461a      	mov	r2, r3
 80115fa:	4b09      	ldr	r3, [pc, #36]	; (8011620 <__assert_func+0x2c>)
 80115fc:	4605      	mov	r5, r0
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	68d8      	ldr	r0, [r3, #12]
 8011602:	b14c      	cbz	r4, 8011618 <__assert_func+0x24>
 8011604:	4b07      	ldr	r3, [pc, #28]	; (8011624 <__assert_func+0x30>)
 8011606:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801160a:	9100      	str	r1, [sp, #0]
 801160c:	462b      	mov	r3, r5
 801160e:	4906      	ldr	r1, [pc, #24]	; (8011628 <__assert_func+0x34>)
 8011610:	f000 f8dc 	bl	80117cc <fiprintf>
 8011614:	f000 fa2a 	bl	8011a6c <abort>
 8011618:	4b04      	ldr	r3, [pc, #16]	; (801162c <__assert_func+0x38>)
 801161a:	461c      	mov	r4, r3
 801161c:	e7f3      	b.n	8011606 <__assert_func+0x12>
 801161e:	bf00      	nop
 8011620:	20000050 	.word	0x20000050
 8011624:	0801321f 	.word	0x0801321f
 8011628:	0801322c 	.word	0x0801322c
 801162c:	0801325a 	.word	0x0801325a

08011630 <_close_r>:
 8011630:	b538      	push	{r3, r4, r5, lr}
 8011632:	2300      	movs	r3, #0
 8011634:	4d05      	ldr	r5, [pc, #20]	; (801164c <_close_r+0x1c>)
 8011636:	4604      	mov	r4, r0
 8011638:	4608      	mov	r0, r1
 801163a:	602b      	str	r3, [r5, #0]
 801163c:	f7f0 fc90 	bl	8001f60 <_close>
 8011640:	1c43      	adds	r3, r0, #1
 8011642:	d102      	bne.n	801164a <_close_r+0x1a>
 8011644:	682b      	ldr	r3, [r5, #0]
 8011646:	b103      	cbz	r3, 801164a <_close_r+0x1a>
 8011648:	6023      	str	r3, [r4, #0]
 801164a:	bd38      	pop	{r3, r4, r5, pc}
 801164c:	20000e00 	.word	0x20000e00

08011650 <__sflush_r>:
 8011650:	898a      	ldrh	r2, [r1, #12]
 8011652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011654:	4605      	mov	r5, r0
 8011656:	0710      	lsls	r0, r2, #28
 8011658:	460c      	mov	r4, r1
 801165a:	d457      	bmi.n	801170c <__sflush_r+0xbc>
 801165c:	684b      	ldr	r3, [r1, #4]
 801165e:	2b00      	cmp	r3, #0
 8011660:	dc04      	bgt.n	801166c <__sflush_r+0x1c>
 8011662:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011664:	2b00      	cmp	r3, #0
 8011666:	dc01      	bgt.n	801166c <__sflush_r+0x1c>
 8011668:	2000      	movs	r0, #0
 801166a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801166c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801166e:	2e00      	cmp	r6, #0
 8011670:	d0fa      	beq.n	8011668 <__sflush_r+0x18>
 8011672:	2300      	movs	r3, #0
 8011674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011678:	682f      	ldr	r7, [r5, #0]
 801167a:	602b      	str	r3, [r5, #0]
 801167c:	d032      	beq.n	80116e4 <__sflush_r+0x94>
 801167e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011680:	89a3      	ldrh	r3, [r4, #12]
 8011682:	075a      	lsls	r2, r3, #29
 8011684:	d505      	bpl.n	8011692 <__sflush_r+0x42>
 8011686:	6863      	ldr	r3, [r4, #4]
 8011688:	1ac0      	subs	r0, r0, r3
 801168a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801168c:	b10b      	cbz	r3, 8011692 <__sflush_r+0x42>
 801168e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011690:	1ac0      	subs	r0, r0, r3
 8011692:	2300      	movs	r3, #0
 8011694:	4602      	mov	r2, r0
 8011696:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011698:	4628      	mov	r0, r5
 801169a:	6a21      	ldr	r1, [r4, #32]
 801169c:	47b0      	blx	r6
 801169e:	1c43      	adds	r3, r0, #1
 80116a0:	89a3      	ldrh	r3, [r4, #12]
 80116a2:	d106      	bne.n	80116b2 <__sflush_r+0x62>
 80116a4:	6829      	ldr	r1, [r5, #0]
 80116a6:	291d      	cmp	r1, #29
 80116a8:	d82c      	bhi.n	8011704 <__sflush_r+0xb4>
 80116aa:	4a29      	ldr	r2, [pc, #164]	; (8011750 <__sflush_r+0x100>)
 80116ac:	40ca      	lsrs	r2, r1
 80116ae:	07d6      	lsls	r6, r2, #31
 80116b0:	d528      	bpl.n	8011704 <__sflush_r+0xb4>
 80116b2:	2200      	movs	r2, #0
 80116b4:	6062      	str	r2, [r4, #4]
 80116b6:	6922      	ldr	r2, [r4, #16]
 80116b8:	04d9      	lsls	r1, r3, #19
 80116ba:	6022      	str	r2, [r4, #0]
 80116bc:	d504      	bpl.n	80116c8 <__sflush_r+0x78>
 80116be:	1c42      	adds	r2, r0, #1
 80116c0:	d101      	bne.n	80116c6 <__sflush_r+0x76>
 80116c2:	682b      	ldr	r3, [r5, #0]
 80116c4:	b903      	cbnz	r3, 80116c8 <__sflush_r+0x78>
 80116c6:	6560      	str	r0, [r4, #84]	; 0x54
 80116c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116ca:	602f      	str	r7, [r5, #0]
 80116cc:	2900      	cmp	r1, #0
 80116ce:	d0cb      	beq.n	8011668 <__sflush_r+0x18>
 80116d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116d4:	4299      	cmp	r1, r3
 80116d6:	d002      	beq.n	80116de <__sflush_r+0x8e>
 80116d8:	4628      	mov	r0, r5
 80116da:	f000 f93d 	bl	8011958 <_free_r>
 80116de:	2000      	movs	r0, #0
 80116e0:	6360      	str	r0, [r4, #52]	; 0x34
 80116e2:	e7c2      	b.n	801166a <__sflush_r+0x1a>
 80116e4:	6a21      	ldr	r1, [r4, #32]
 80116e6:	2301      	movs	r3, #1
 80116e8:	4628      	mov	r0, r5
 80116ea:	47b0      	blx	r6
 80116ec:	1c41      	adds	r1, r0, #1
 80116ee:	d1c7      	bne.n	8011680 <__sflush_r+0x30>
 80116f0:	682b      	ldr	r3, [r5, #0]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d0c4      	beq.n	8011680 <__sflush_r+0x30>
 80116f6:	2b1d      	cmp	r3, #29
 80116f8:	d001      	beq.n	80116fe <__sflush_r+0xae>
 80116fa:	2b16      	cmp	r3, #22
 80116fc:	d101      	bne.n	8011702 <__sflush_r+0xb2>
 80116fe:	602f      	str	r7, [r5, #0]
 8011700:	e7b2      	b.n	8011668 <__sflush_r+0x18>
 8011702:	89a3      	ldrh	r3, [r4, #12]
 8011704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011708:	81a3      	strh	r3, [r4, #12]
 801170a:	e7ae      	b.n	801166a <__sflush_r+0x1a>
 801170c:	690f      	ldr	r7, [r1, #16]
 801170e:	2f00      	cmp	r7, #0
 8011710:	d0aa      	beq.n	8011668 <__sflush_r+0x18>
 8011712:	0793      	lsls	r3, r2, #30
 8011714:	bf18      	it	ne
 8011716:	2300      	movne	r3, #0
 8011718:	680e      	ldr	r6, [r1, #0]
 801171a:	bf08      	it	eq
 801171c:	694b      	ldreq	r3, [r1, #20]
 801171e:	1bf6      	subs	r6, r6, r7
 8011720:	600f      	str	r7, [r1, #0]
 8011722:	608b      	str	r3, [r1, #8]
 8011724:	2e00      	cmp	r6, #0
 8011726:	dd9f      	ble.n	8011668 <__sflush_r+0x18>
 8011728:	4633      	mov	r3, r6
 801172a:	463a      	mov	r2, r7
 801172c:	4628      	mov	r0, r5
 801172e:	6a21      	ldr	r1, [r4, #32]
 8011730:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8011734:	47e0      	blx	ip
 8011736:	2800      	cmp	r0, #0
 8011738:	dc06      	bgt.n	8011748 <__sflush_r+0xf8>
 801173a:	89a3      	ldrh	r3, [r4, #12]
 801173c:	f04f 30ff 	mov.w	r0, #4294967295
 8011740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011744:	81a3      	strh	r3, [r4, #12]
 8011746:	e790      	b.n	801166a <__sflush_r+0x1a>
 8011748:	4407      	add	r7, r0
 801174a:	1a36      	subs	r6, r6, r0
 801174c:	e7ea      	b.n	8011724 <__sflush_r+0xd4>
 801174e:	bf00      	nop
 8011750:	20400001 	.word	0x20400001

08011754 <_fflush_r>:
 8011754:	b538      	push	{r3, r4, r5, lr}
 8011756:	690b      	ldr	r3, [r1, #16]
 8011758:	4605      	mov	r5, r0
 801175a:	460c      	mov	r4, r1
 801175c:	b913      	cbnz	r3, 8011764 <_fflush_r+0x10>
 801175e:	2500      	movs	r5, #0
 8011760:	4628      	mov	r0, r5
 8011762:	bd38      	pop	{r3, r4, r5, pc}
 8011764:	b118      	cbz	r0, 801176e <_fflush_r+0x1a>
 8011766:	6983      	ldr	r3, [r0, #24]
 8011768:	b90b      	cbnz	r3, 801176e <_fflush_r+0x1a>
 801176a:	f7fe f82d 	bl	800f7c8 <__sinit>
 801176e:	4b14      	ldr	r3, [pc, #80]	; (80117c0 <_fflush_r+0x6c>)
 8011770:	429c      	cmp	r4, r3
 8011772:	d11b      	bne.n	80117ac <_fflush_r+0x58>
 8011774:	686c      	ldr	r4, [r5, #4]
 8011776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d0ef      	beq.n	801175e <_fflush_r+0xa>
 801177e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011780:	07d0      	lsls	r0, r2, #31
 8011782:	d404      	bmi.n	801178e <_fflush_r+0x3a>
 8011784:	0599      	lsls	r1, r3, #22
 8011786:	d402      	bmi.n	801178e <_fflush_r+0x3a>
 8011788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801178a:	f7fe fc22 	bl	800ffd2 <__retarget_lock_acquire_recursive>
 801178e:	4628      	mov	r0, r5
 8011790:	4621      	mov	r1, r4
 8011792:	f7ff ff5d 	bl	8011650 <__sflush_r>
 8011796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011798:	4605      	mov	r5, r0
 801179a:	07da      	lsls	r2, r3, #31
 801179c:	d4e0      	bmi.n	8011760 <_fflush_r+0xc>
 801179e:	89a3      	ldrh	r3, [r4, #12]
 80117a0:	059b      	lsls	r3, r3, #22
 80117a2:	d4dd      	bmi.n	8011760 <_fflush_r+0xc>
 80117a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117a6:	f7fe fc15 	bl	800ffd4 <__retarget_lock_release_recursive>
 80117aa:	e7d9      	b.n	8011760 <_fflush_r+0xc>
 80117ac:	4b05      	ldr	r3, [pc, #20]	; (80117c4 <_fflush_r+0x70>)
 80117ae:	429c      	cmp	r4, r3
 80117b0:	d101      	bne.n	80117b6 <_fflush_r+0x62>
 80117b2:	68ac      	ldr	r4, [r5, #8]
 80117b4:	e7df      	b.n	8011776 <_fflush_r+0x22>
 80117b6:	4b04      	ldr	r3, [pc, #16]	; (80117c8 <_fflush_r+0x74>)
 80117b8:	429c      	cmp	r4, r3
 80117ba:	bf08      	it	eq
 80117bc:	68ec      	ldreq	r4, [r5, #12]
 80117be:	e7da      	b.n	8011776 <_fflush_r+0x22>
 80117c0:	08012fac 	.word	0x08012fac
 80117c4:	08012fcc 	.word	0x08012fcc
 80117c8:	08012f8c 	.word	0x08012f8c

080117cc <fiprintf>:
 80117cc:	b40e      	push	{r1, r2, r3}
 80117ce:	b503      	push	{r0, r1, lr}
 80117d0:	4601      	mov	r1, r0
 80117d2:	ab03      	add	r3, sp, #12
 80117d4:	4805      	ldr	r0, [pc, #20]	; (80117ec <fiprintf+0x20>)
 80117d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80117da:	6800      	ldr	r0, [r0, #0]
 80117dc:	9301      	str	r3, [sp, #4]
 80117de:	f7ff faf1 	bl	8010dc4 <_vfiprintf_r>
 80117e2:	b002      	add	sp, #8
 80117e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80117e8:	b003      	add	sp, #12
 80117ea:	4770      	bx	lr
 80117ec:	20000050 	.word	0x20000050

080117f0 <_lseek_r>:
 80117f0:	b538      	push	{r3, r4, r5, lr}
 80117f2:	4604      	mov	r4, r0
 80117f4:	4608      	mov	r0, r1
 80117f6:	4611      	mov	r1, r2
 80117f8:	2200      	movs	r2, #0
 80117fa:	4d05      	ldr	r5, [pc, #20]	; (8011810 <_lseek_r+0x20>)
 80117fc:	602a      	str	r2, [r5, #0]
 80117fe:	461a      	mov	r2, r3
 8011800:	f7f0 fbd2 	bl	8001fa8 <_lseek>
 8011804:	1c43      	adds	r3, r0, #1
 8011806:	d102      	bne.n	801180e <_lseek_r+0x1e>
 8011808:	682b      	ldr	r3, [r5, #0]
 801180a:	b103      	cbz	r3, 801180e <_lseek_r+0x1e>
 801180c:	6023      	str	r3, [r4, #0]
 801180e:	bd38      	pop	{r3, r4, r5, pc}
 8011810:	20000e00 	.word	0x20000e00

08011814 <__swhatbuf_r>:
 8011814:	b570      	push	{r4, r5, r6, lr}
 8011816:	460e      	mov	r6, r1
 8011818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801181c:	4614      	mov	r4, r2
 801181e:	2900      	cmp	r1, #0
 8011820:	461d      	mov	r5, r3
 8011822:	b096      	sub	sp, #88	; 0x58
 8011824:	da08      	bge.n	8011838 <__swhatbuf_r+0x24>
 8011826:	2200      	movs	r2, #0
 8011828:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801182c:	602a      	str	r2, [r5, #0]
 801182e:	061a      	lsls	r2, r3, #24
 8011830:	d410      	bmi.n	8011854 <__swhatbuf_r+0x40>
 8011832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011836:	e00e      	b.n	8011856 <__swhatbuf_r+0x42>
 8011838:	466a      	mov	r2, sp
 801183a:	f000 f91f 	bl	8011a7c <_fstat_r>
 801183e:	2800      	cmp	r0, #0
 8011840:	dbf1      	blt.n	8011826 <__swhatbuf_r+0x12>
 8011842:	9a01      	ldr	r2, [sp, #4]
 8011844:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011848:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801184c:	425a      	negs	r2, r3
 801184e:	415a      	adcs	r2, r3
 8011850:	602a      	str	r2, [r5, #0]
 8011852:	e7ee      	b.n	8011832 <__swhatbuf_r+0x1e>
 8011854:	2340      	movs	r3, #64	; 0x40
 8011856:	2000      	movs	r0, #0
 8011858:	6023      	str	r3, [r4, #0]
 801185a:	b016      	add	sp, #88	; 0x58
 801185c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011860 <__smakebuf_r>:
 8011860:	898b      	ldrh	r3, [r1, #12]
 8011862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011864:	079d      	lsls	r5, r3, #30
 8011866:	4606      	mov	r6, r0
 8011868:	460c      	mov	r4, r1
 801186a:	d507      	bpl.n	801187c <__smakebuf_r+0x1c>
 801186c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011870:	6023      	str	r3, [r4, #0]
 8011872:	6123      	str	r3, [r4, #16]
 8011874:	2301      	movs	r3, #1
 8011876:	6163      	str	r3, [r4, #20]
 8011878:	b002      	add	sp, #8
 801187a:	bd70      	pop	{r4, r5, r6, pc}
 801187c:	466a      	mov	r2, sp
 801187e:	ab01      	add	r3, sp, #4
 8011880:	f7ff ffc8 	bl	8011814 <__swhatbuf_r>
 8011884:	9900      	ldr	r1, [sp, #0]
 8011886:	4605      	mov	r5, r0
 8011888:	4630      	mov	r0, r6
 801188a:	f7ff f8a3 	bl	80109d4 <_malloc_r>
 801188e:	b948      	cbnz	r0, 80118a4 <__smakebuf_r+0x44>
 8011890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011894:	059a      	lsls	r2, r3, #22
 8011896:	d4ef      	bmi.n	8011878 <__smakebuf_r+0x18>
 8011898:	f023 0303 	bic.w	r3, r3, #3
 801189c:	f043 0302 	orr.w	r3, r3, #2
 80118a0:	81a3      	strh	r3, [r4, #12]
 80118a2:	e7e3      	b.n	801186c <__smakebuf_r+0xc>
 80118a4:	4b0d      	ldr	r3, [pc, #52]	; (80118dc <__smakebuf_r+0x7c>)
 80118a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80118a8:	89a3      	ldrh	r3, [r4, #12]
 80118aa:	6020      	str	r0, [r4, #0]
 80118ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118b0:	81a3      	strh	r3, [r4, #12]
 80118b2:	9b00      	ldr	r3, [sp, #0]
 80118b4:	6120      	str	r0, [r4, #16]
 80118b6:	6163      	str	r3, [r4, #20]
 80118b8:	9b01      	ldr	r3, [sp, #4]
 80118ba:	b15b      	cbz	r3, 80118d4 <__smakebuf_r+0x74>
 80118bc:	4630      	mov	r0, r6
 80118be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118c2:	f000 f8ed 	bl	8011aa0 <_isatty_r>
 80118c6:	b128      	cbz	r0, 80118d4 <__smakebuf_r+0x74>
 80118c8:	89a3      	ldrh	r3, [r4, #12]
 80118ca:	f023 0303 	bic.w	r3, r3, #3
 80118ce:	f043 0301 	orr.w	r3, r3, #1
 80118d2:	81a3      	strh	r3, [r4, #12]
 80118d4:	89a0      	ldrh	r0, [r4, #12]
 80118d6:	4305      	orrs	r5, r0
 80118d8:	81a5      	strh	r5, [r4, #12]
 80118da:	e7cd      	b.n	8011878 <__smakebuf_r+0x18>
 80118dc:	0800f761 	.word	0x0800f761

080118e0 <malloc>:
 80118e0:	4b02      	ldr	r3, [pc, #8]	; (80118ec <malloc+0xc>)
 80118e2:	4601      	mov	r1, r0
 80118e4:	6818      	ldr	r0, [r3, #0]
 80118e6:	f7ff b875 	b.w	80109d4 <_malloc_r>
 80118ea:	bf00      	nop
 80118ec:	20000050 	.word	0x20000050

080118f0 <memchr>:
 80118f0:	4603      	mov	r3, r0
 80118f2:	b510      	push	{r4, lr}
 80118f4:	b2c9      	uxtb	r1, r1
 80118f6:	4402      	add	r2, r0
 80118f8:	4293      	cmp	r3, r2
 80118fa:	4618      	mov	r0, r3
 80118fc:	d101      	bne.n	8011902 <memchr+0x12>
 80118fe:	2000      	movs	r0, #0
 8011900:	e003      	b.n	801190a <memchr+0x1a>
 8011902:	7804      	ldrb	r4, [r0, #0]
 8011904:	3301      	adds	r3, #1
 8011906:	428c      	cmp	r4, r1
 8011908:	d1f6      	bne.n	80118f8 <memchr+0x8>
 801190a:	bd10      	pop	{r4, pc}

0801190c <memmove>:
 801190c:	4288      	cmp	r0, r1
 801190e:	b510      	push	{r4, lr}
 8011910:	eb01 0402 	add.w	r4, r1, r2
 8011914:	d902      	bls.n	801191c <memmove+0x10>
 8011916:	4284      	cmp	r4, r0
 8011918:	4623      	mov	r3, r4
 801191a:	d807      	bhi.n	801192c <memmove+0x20>
 801191c:	1e43      	subs	r3, r0, #1
 801191e:	42a1      	cmp	r1, r4
 8011920:	d008      	beq.n	8011934 <memmove+0x28>
 8011922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011926:	f803 2f01 	strb.w	r2, [r3, #1]!
 801192a:	e7f8      	b.n	801191e <memmove+0x12>
 801192c:	4601      	mov	r1, r0
 801192e:	4402      	add	r2, r0
 8011930:	428a      	cmp	r2, r1
 8011932:	d100      	bne.n	8011936 <memmove+0x2a>
 8011934:	bd10      	pop	{r4, pc}
 8011936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801193a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801193e:	e7f7      	b.n	8011930 <memmove+0x24>

08011940 <__malloc_lock>:
 8011940:	4801      	ldr	r0, [pc, #4]	; (8011948 <__malloc_lock+0x8>)
 8011942:	f7fe bb46 	b.w	800ffd2 <__retarget_lock_acquire_recursive>
 8011946:	bf00      	nop
 8011948:	20000df4 	.word	0x20000df4

0801194c <__malloc_unlock>:
 801194c:	4801      	ldr	r0, [pc, #4]	; (8011954 <__malloc_unlock+0x8>)
 801194e:	f7fe bb41 	b.w	800ffd4 <__retarget_lock_release_recursive>
 8011952:	bf00      	nop
 8011954:	20000df4 	.word	0x20000df4

08011958 <_free_r>:
 8011958:	b538      	push	{r3, r4, r5, lr}
 801195a:	4605      	mov	r5, r0
 801195c:	2900      	cmp	r1, #0
 801195e:	d040      	beq.n	80119e2 <_free_r+0x8a>
 8011960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011964:	1f0c      	subs	r4, r1, #4
 8011966:	2b00      	cmp	r3, #0
 8011968:	bfb8      	it	lt
 801196a:	18e4      	addlt	r4, r4, r3
 801196c:	f7ff ffe8 	bl	8011940 <__malloc_lock>
 8011970:	4a1c      	ldr	r2, [pc, #112]	; (80119e4 <_free_r+0x8c>)
 8011972:	6813      	ldr	r3, [r2, #0]
 8011974:	b933      	cbnz	r3, 8011984 <_free_r+0x2c>
 8011976:	6063      	str	r3, [r4, #4]
 8011978:	6014      	str	r4, [r2, #0]
 801197a:	4628      	mov	r0, r5
 801197c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011980:	f7ff bfe4 	b.w	801194c <__malloc_unlock>
 8011984:	42a3      	cmp	r3, r4
 8011986:	d908      	bls.n	801199a <_free_r+0x42>
 8011988:	6820      	ldr	r0, [r4, #0]
 801198a:	1821      	adds	r1, r4, r0
 801198c:	428b      	cmp	r3, r1
 801198e:	bf01      	itttt	eq
 8011990:	6819      	ldreq	r1, [r3, #0]
 8011992:	685b      	ldreq	r3, [r3, #4]
 8011994:	1809      	addeq	r1, r1, r0
 8011996:	6021      	streq	r1, [r4, #0]
 8011998:	e7ed      	b.n	8011976 <_free_r+0x1e>
 801199a:	461a      	mov	r2, r3
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	b10b      	cbz	r3, 80119a4 <_free_r+0x4c>
 80119a0:	42a3      	cmp	r3, r4
 80119a2:	d9fa      	bls.n	801199a <_free_r+0x42>
 80119a4:	6811      	ldr	r1, [r2, #0]
 80119a6:	1850      	adds	r0, r2, r1
 80119a8:	42a0      	cmp	r0, r4
 80119aa:	d10b      	bne.n	80119c4 <_free_r+0x6c>
 80119ac:	6820      	ldr	r0, [r4, #0]
 80119ae:	4401      	add	r1, r0
 80119b0:	1850      	adds	r0, r2, r1
 80119b2:	4283      	cmp	r3, r0
 80119b4:	6011      	str	r1, [r2, #0]
 80119b6:	d1e0      	bne.n	801197a <_free_r+0x22>
 80119b8:	6818      	ldr	r0, [r3, #0]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	4401      	add	r1, r0
 80119be:	6011      	str	r1, [r2, #0]
 80119c0:	6053      	str	r3, [r2, #4]
 80119c2:	e7da      	b.n	801197a <_free_r+0x22>
 80119c4:	d902      	bls.n	80119cc <_free_r+0x74>
 80119c6:	230c      	movs	r3, #12
 80119c8:	602b      	str	r3, [r5, #0]
 80119ca:	e7d6      	b.n	801197a <_free_r+0x22>
 80119cc:	6820      	ldr	r0, [r4, #0]
 80119ce:	1821      	adds	r1, r4, r0
 80119d0:	428b      	cmp	r3, r1
 80119d2:	bf01      	itttt	eq
 80119d4:	6819      	ldreq	r1, [r3, #0]
 80119d6:	685b      	ldreq	r3, [r3, #4]
 80119d8:	1809      	addeq	r1, r1, r0
 80119da:	6021      	streq	r1, [r4, #0]
 80119dc:	6063      	str	r3, [r4, #4]
 80119de:	6054      	str	r4, [r2, #4]
 80119e0:	e7cb      	b.n	801197a <_free_r+0x22>
 80119e2:	bd38      	pop	{r3, r4, r5, pc}
 80119e4:	20000df8 	.word	0x20000df8

080119e8 <_realloc_r>:
 80119e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ec:	4680      	mov	r8, r0
 80119ee:	4614      	mov	r4, r2
 80119f0:	460e      	mov	r6, r1
 80119f2:	b921      	cbnz	r1, 80119fe <_realloc_r+0x16>
 80119f4:	4611      	mov	r1, r2
 80119f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119fa:	f7fe bfeb 	b.w	80109d4 <_malloc_r>
 80119fe:	b92a      	cbnz	r2, 8011a0c <_realloc_r+0x24>
 8011a00:	f7ff ffaa 	bl	8011958 <_free_r>
 8011a04:	4625      	mov	r5, r4
 8011a06:	4628      	mov	r0, r5
 8011a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a0c:	f000 f858 	bl	8011ac0 <_malloc_usable_size_r>
 8011a10:	4284      	cmp	r4, r0
 8011a12:	4607      	mov	r7, r0
 8011a14:	d802      	bhi.n	8011a1c <_realloc_r+0x34>
 8011a16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011a1a:	d812      	bhi.n	8011a42 <_realloc_r+0x5a>
 8011a1c:	4621      	mov	r1, r4
 8011a1e:	4640      	mov	r0, r8
 8011a20:	f7fe ffd8 	bl	80109d4 <_malloc_r>
 8011a24:	4605      	mov	r5, r0
 8011a26:	2800      	cmp	r0, #0
 8011a28:	d0ed      	beq.n	8011a06 <_realloc_r+0x1e>
 8011a2a:	42bc      	cmp	r4, r7
 8011a2c:	4622      	mov	r2, r4
 8011a2e:	4631      	mov	r1, r6
 8011a30:	bf28      	it	cs
 8011a32:	463a      	movcs	r2, r7
 8011a34:	f7fc fefa 	bl	800e82c <memcpy>
 8011a38:	4631      	mov	r1, r6
 8011a3a:	4640      	mov	r0, r8
 8011a3c:	f7ff ff8c 	bl	8011958 <_free_r>
 8011a40:	e7e1      	b.n	8011a06 <_realloc_r+0x1e>
 8011a42:	4635      	mov	r5, r6
 8011a44:	e7df      	b.n	8011a06 <_realloc_r+0x1e>
	...

08011a48 <_read_r>:
 8011a48:	b538      	push	{r3, r4, r5, lr}
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	4608      	mov	r0, r1
 8011a4e:	4611      	mov	r1, r2
 8011a50:	2200      	movs	r2, #0
 8011a52:	4d05      	ldr	r5, [pc, #20]	; (8011a68 <_read_r+0x20>)
 8011a54:	602a      	str	r2, [r5, #0]
 8011a56:	461a      	mov	r2, r3
 8011a58:	f7f0 fa49 	bl	8001eee <_read>
 8011a5c:	1c43      	adds	r3, r0, #1
 8011a5e:	d102      	bne.n	8011a66 <_read_r+0x1e>
 8011a60:	682b      	ldr	r3, [r5, #0]
 8011a62:	b103      	cbz	r3, 8011a66 <_read_r+0x1e>
 8011a64:	6023      	str	r3, [r4, #0]
 8011a66:	bd38      	pop	{r3, r4, r5, pc}
 8011a68:	20000e00 	.word	0x20000e00

08011a6c <abort>:
 8011a6c:	2006      	movs	r0, #6
 8011a6e:	b508      	push	{r3, lr}
 8011a70:	f000 f856 	bl	8011b20 <raise>
 8011a74:	2001      	movs	r0, #1
 8011a76:	f7f0 fa30 	bl	8001eda <_exit>
	...

08011a7c <_fstat_r>:
 8011a7c:	b538      	push	{r3, r4, r5, lr}
 8011a7e:	2300      	movs	r3, #0
 8011a80:	4d06      	ldr	r5, [pc, #24]	; (8011a9c <_fstat_r+0x20>)
 8011a82:	4604      	mov	r4, r0
 8011a84:	4608      	mov	r0, r1
 8011a86:	4611      	mov	r1, r2
 8011a88:	602b      	str	r3, [r5, #0]
 8011a8a:	f7f0 fa74 	bl	8001f76 <_fstat>
 8011a8e:	1c43      	adds	r3, r0, #1
 8011a90:	d102      	bne.n	8011a98 <_fstat_r+0x1c>
 8011a92:	682b      	ldr	r3, [r5, #0]
 8011a94:	b103      	cbz	r3, 8011a98 <_fstat_r+0x1c>
 8011a96:	6023      	str	r3, [r4, #0]
 8011a98:	bd38      	pop	{r3, r4, r5, pc}
 8011a9a:	bf00      	nop
 8011a9c:	20000e00 	.word	0x20000e00

08011aa0 <_isatty_r>:
 8011aa0:	b538      	push	{r3, r4, r5, lr}
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	4d05      	ldr	r5, [pc, #20]	; (8011abc <_isatty_r+0x1c>)
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	4608      	mov	r0, r1
 8011aaa:	602b      	str	r3, [r5, #0]
 8011aac:	f7f0 fa72 	bl	8001f94 <_isatty>
 8011ab0:	1c43      	adds	r3, r0, #1
 8011ab2:	d102      	bne.n	8011aba <_isatty_r+0x1a>
 8011ab4:	682b      	ldr	r3, [r5, #0]
 8011ab6:	b103      	cbz	r3, 8011aba <_isatty_r+0x1a>
 8011ab8:	6023      	str	r3, [r4, #0]
 8011aba:	bd38      	pop	{r3, r4, r5, pc}
 8011abc:	20000e00 	.word	0x20000e00

08011ac0 <_malloc_usable_size_r>:
 8011ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ac4:	1f18      	subs	r0, r3, #4
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	bfbc      	itt	lt
 8011aca:	580b      	ldrlt	r3, [r1, r0]
 8011acc:	18c0      	addlt	r0, r0, r3
 8011ace:	4770      	bx	lr

08011ad0 <_raise_r>:
 8011ad0:	291f      	cmp	r1, #31
 8011ad2:	b538      	push	{r3, r4, r5, lr}
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	460d      	mov	r5, r1
 8011ad8:	d904      	bls.n	8011ae4 <_raise_r+0x14>
 8011ada:	2316      	movs	r3, #22
 8011adc:	6003      	str	r3, [r0, #0]
 8011ade:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae2:	bd38      	pop	{r3, r4, r5, pc}
 8011ae4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ae6:	b112      	cbz	r2, 8011aee <_raise_r+0x1e>
 8011ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011aec:	b94b      	cbnz	r3, 8011b02 <_raise_r+0x32>
 8011aee:	4620      	mov	r0, r4
 8011af0:	f000 f830 	bl	8011b54 <_getpid_r>
 8011af4:	462a      	mov	r2, r5
 8011af6:	4601      	mov	r1, r0
 8011af8:	4620      	mov	r0, r4
 8011afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011afe:	f000 b817 	b.w	8011b30 <_kill_r>
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d00a      	beq.n	8011b1c <_raise_r+0x4c>
 8011b06:	1c59      	adds	r1, r3, #1
 8011b08:	d103      	bne.n	8011b12 <_raise_r+0x42>
 8011b0a:	2316      	movs	r3, #22
 8011b0c:	6003      	str	r3, [r0, #0]
 8011b0e:	2001      	movs	r0, #1
 8011b10:	e7e7      	b.n	8011ae2 <_raise_r+0x12>
 8011b12:	2400      	movs	r4, #0
 8011b14:	4628      	mov	r0, r5
 8011b16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b1a:	4798      	blx	r3
 8011b1c:	2000      	movs	r0, #0
 8011b1e:	e7e0      	b.n	8011ae2 <_raise_r+0x12>

08011b20 <raise>:
 8011b20:	4b02      	ldr	r3, [pc, #8]	; (8011b2c <raise+0xc>)
 8011b22:	4601      	mov	r1, r0
 8011b24:	6818      	ldr	r0, [r3, #0]
 8011b26:	f7ff bfd3 	b.w	8011ad0 <_raise_r>
 8011b2a:	bf00      	nop
 8011b2c:	20000050 	.word	0x20000050

08011b30 <_kill_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	2300      	movs	r3, #0
 8011b34:	4d06      	ldr	r5, [pc, #24]	; (8011b50 <_kill_r+0x20>)
 8011b36:	4604      	mov	r4, r0
 8011b38:	4608      	mov	r0, r1
 8011b3a:	4611      	mov	r1, r2
 8011b3c:	602b      	str	r3, [r5, #0]
 8011b3e:	f7f0 f9bc 	bl	8001eba <_kill>
 8011b42:	1c43      	adds	r3, r0, #1
 8011b44:	d102      	bne.n	8011b4c <_kill_r+0x1c>
 8011b46:	682b      	ldr	r3, [r5, #0]
 8011b48:	b103      	cbz	r3, 8011b4c <_kill_r+0x1c>
 8011b4a:	6023      	str	r3, [r4, #0]
 8011b4c:	bd38      	pop	{r3, r4, r5, pc}
 8011b4e:	bf00      	nop
 8011b50:	20000e00 	.word	0x20000e00

08011b54 <_getpid_r>:
 8011b54:	f7f0 b9aa 	b.w	8001eac <_getpid>

08011b58 <_init>:
 8011b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b5a:	bf00      	nop
 8011b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b5e:	bc08      	pop	{r3}
 8011b60:	469e      	mov	lr, r3
 8011b62:	4770      	bx	lr

08011b64 <_fini>:
 8011b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b66:	bf00      	nop
 8011b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b6a:	bc08      	pop	{r3}
 8011b6c:	469e      	mov	lr, r3
 8011b6e:	4770      	bx	lr
