
asia_hosanna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a30  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016ec  08011c18  08011c18  00021c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013304  08013304  00030224  2**0
                  CONTENTS
  4 .ARM          00000000  08013304  08013304  00030224  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013304  08013304  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013304  08013304  00023304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013308  08013308  00023308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0801330c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be8  20000224  08013530  00030224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e0c  08013530  00030e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c91f  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004895  00000000  00000000  0004cb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00051408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00052d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002099f  00000000  00000000  00054420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002258b  00000000  00000000  00074dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9cee  00000000  00000000  0009734a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141038  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b10  00000000  00000000  00141088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000224 	.word	0x20000224
 8000204:	00000000 	.word	0x00000000
 8000208:	08011c00 	.word	0x08011c00

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000228 	.word	0x20000228
 8000224:	08011c00 	.word	0x08011c00

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_d2f>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b6c:	bf24      	itt	cs
 8000b6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b76:	d90d      	bls.n	8000b94 <__aeabi_d2f+0x30>
 8000b78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b8c:	bf08      	it	eq
 8000b8e:	f020 0001 	biceq.w	r0, r0, #1
 8000b92:	4770      	bx	lr
 8000b94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b98:	d121      	bne.n	8000bde <__aeabi_d2f+0x7a>
 8000b9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9e:	bfbc      	itt	lt
 8000ba0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	4770      	bxlt	lr
 8000ba6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000baa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bae:	f1c2 0218 	rsb	r2, r2, #24
 8000bb2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bba:	fa20 f002 	lsr.w	r0, r0, r2
 8000bbe:	bf18      	it	ne
 8000bc0:	f040 0001 	orrne.w	r0, r0, #1
 8000bc4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bcc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd0:	ea40 000c 	orr.w	r0, r0, ip
 8000bd4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bdc:	e7cc      	b.n	8000b78 <__aeabi_d2f+0x14>
 8000bde:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be2:	d107      	bne.n	8000bf4 <__aeabi_d2f+0x90>
 8000be4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be8:	bf1e      	ittt	ne
 8000bea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf2:	4770      	bxne	lr
 8000bf4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_frsub>:
 8000c04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	e002      	b.n	8000c10 <__addsf3>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fsub>:
 8000c0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c10 <__addsf3>:
 8000c10:	0042      	lsls	r2, r0, #1
 8000c12:	bf1f      	itttt	ne
 8000c14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c18:	ea92 0f03 	teqne	r2, r3
 8000c1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c24:	d06a      	beq.n	8000cfc <__addsf3+0xec>
 8000c26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2e:	bfc1      	itttt	gt
 8000c30:	18d2      	addgt	r2, r2, r3
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	4048      	eorgt	r0, r1
 8000c36:	4041      	eorgt	r1, r0
 8000c38:	bfb8      	it	lt
 8000c3a:	425b      	neglt	r3, r3
 8000c3c:	2b19      	cmp	r3, #25
 8000c3e:	bf88      	it	hi
 8000c40:	4770      	bxhi	lr
 8000c42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4240      	negne	r0, r0
 8000c52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5e:	bf18      	it	ne
 8000c60:	4249      	negne	r1, r1
 8000c62:	ea92 0f03 	teq	r2, r3
 8000c66:	d03f      	beq.n	8000ce8 <__addsf3+0xd8>
 8000c68:	f1a2 0201 	sub.w	r2, r2, #1
 8000c6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c70:	eb10 000c 	adds.w	r0, r0, ip
 8000c74:	f1c3 0320 	rsb	r3, r3, #32
 8000c78:	fa01 f103 	lsl.w	r1, r1, r3
 8000c7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	d502      	bpl.n	8000c88 <__addsf3+0x78>
 8000c82:	4249      	negs	r1, r1
 8000c84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c8c:	d313      	bcc.n	8000cb6 <__addsf3+0xa6>
 8000c8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c92:	d306      	bcc.n	8000ca2 <__addsf3+0x92>
 8000c94:	0840      	lsrs	r0, r0, #1
 8000c96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c9a:	f102 0201 	add.w	r2, r2, #1
 8000c9e:	2afe      	cmp	r2, #254	; 0xfe
 8000ca0:	d251      	bcs.n	8000d46 <__addsf3+0x136>
 8000ca2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000caa:	bf08      	it	eq
 8000cac:	f020 0001 	biceq.w	r0, r0, #1
 8000cb0:	ea40 0003 	orr.w	r0, r0, r3
 8000cb4:	4770      	bx	lr
 8000cb6:	0049      	lsls	r1, r1, #1
 8000cb8:	eb40 0000 	adc.w	r0, r0, r0
 8000cbc:	3a01      	subs	r2, #1
 8000cbe:	bf28      	it	cs
 8000cc0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc4:	d2ed      	bcs.n	8000ca2 <__addsf3+0x92>
 8000cc6:	fab0 fc80 	clz	ip, r0
 8000cca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cce:	ebb2 020c 	subs.w	r2, r2, ip
 8000cd2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd6:	bfaa      	itet	ge
 8000cd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cdc:	4252      	neglt	r2, r2
 8000cde:	4318      	orrge	r0, r3
 8000ce0:	bfbc      	itt	lt
 8000ce2:	40d0      	lsrlt	r0, r2
 8000ce4:	4318      	orrlt	r0, r3
 8000ce6:	4770      	bx	lr
 8000ce8:	f092 0f00 	teq	r2, #0
 8000cec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cf0:	bf06      	itte	eq
 8000cf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf6:	3201      	addeq	r2, #1
 8000cf8:	3b01      	subne	r3, #1
 8000cfa:	e7b5      	b.n	8000c68 <__addsf3+0x58>
 8000cfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d04:	bf18      	it	ne
 8000d06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0a:	d021      	beq.n	8000d50 <__addsf3+0x140>
 8000d0c:	ea92 0f03 	teq	r2, r3
 8000d10:	d004      	beq.n	8000d1c <__addsf3+0x10c>
 8000d12:	f092 0f00 	teq	r2, #0
 8000d16:	bf08      	it	eq
 8000d18:	4608      	moveq	r0, r1
 8000d1a:	4770      	bx	lr
 8000d1c:	ea90 0f01 	teq	r0, r1
 8000d20:	bf1c      	itt	ne
 8000d22:	2000      	movne	r0, #0
 8000d24:	4770      	bxne	lr
 8000d26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d2a:	d104      	bne.n	8000d36 <__addsf3+0x126>
 8000d2c:	0040      	lsls	r0, r0, #1
 8000d2e:	bf28      	it	cs
 8000d30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d3a:	bf3c      	itt	cc
 8000d3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d40:	4770      	bxcc	lr
 8000d42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4e:	4770      	bx	lr
 8000d50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d54:	bf16      	itet	ne
 8000d56:	4608      	movne	r0, r1
 8000d58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d5c:	4601      	movne	r1, r0
 8000d5e:	0242      	lsls	r2, r0, #9
 8000d60:	bf06      	itte	eq
 8000d62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d66:	ea90 0f01 	teqeq	r0, r1
 8000d6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_ui2f>:
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e004      	b.n	8000d80 <__aeabi_i2f+0x8>
 8000d76:	bf00      	nop

08000d78 <__aeabi_i2f>:
 8000d78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d7c:	bf48      	it	mi
 8000d7e:	4240      	negmi	r0, r0
 8000d80:	ea5f 0c00 	movs.w	ip, r0
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d8c:	4601      	mov	r1, r0
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	e01c      	b.n	8000dce <__aeabi_l2f+0x2a>

08000d94 <__aeabi_ul2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e00a      	b.n	8000db8 <__aeabi_l2f+0x14>
 8000da2:	bf00      	nop

08000da4 <__aeabi_l2f>:
 8000da4:	ea50 0201 	orrs.w	r2, r0, r1
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000db0:	d502      	bpl.n	8000db8 <__aeabi_l2f+0x14>
 8000db2:	4240      	negs	r0, r0
 8000db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db8:	ea5f 0c01 	movs.w	ip, r1
 8000dbc:	bf02      	ittt	eq
 8000dbe:	4684      	moveq	ip, r0
 8000dc0:	4601      	moveq	r1, r0
 8000dc2:	2000      	moveq	r0, #0
 8000dc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc8:	bf08      	it	eq
 8000dca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dd2:	fabc f28c 	clz	r2, ip
 8000dd6:	3a08      	subs	r2, #8
 8000dd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ddc:	db10      	blt.n	8000e00 <__aeabi_l2f+0x5c>
 8000dde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de2:	4463      	add	r3, ip
 8000de4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de8:	f1c2 0220 	rsb	r2, r2, #32
 8000dec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000df0:	fa20 f202 	lsr.w	r2, r0, r2
 8000df4:	eb43 0002 	adc.w	r0, r3, r2
 8000df8:	bf08      	it	eq
 8000dfa:	f020 0001 	biceq.w	r0, r0, #1
 8000dfe:	4770      	bx	lr
 8000e00:	f102 0220 	add.w	r2, r2, #32
 8000e04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e08:	f1c2 0220 	rsb	r2, r2, #32
 8000e0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e10:	fa21 f202 	lsr.w	r2, r1, r2
 8000e14:	eb43 0002 	adc.w	r0, r3, r2
 8000e18:	bf08      	it	eq
 8000e1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fmul>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d06f      	beq.n	8000f18 <__aeabi_fmul+0xf8>
 8000e38:	441a      	add	r2, r3
 8000e3a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3e:	0240      	lsls	r0, r0, #9
 8000e40:	bf18      	it	ne
 8000e42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e46:	d01e      	beq.n	8000e86 <__aeabi_fmul+0x66>
 8000e48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e54:	fba0 3101 	umull	r3, r1, r0, r1
 8000e58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e60:	bf3e      	ittt	cc
 8000e62:	0049      	lslcc	r1, r1, #1
 8000e64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e68:	005b      	lslcc	r3, r3, #1
 8000e6a:	ea40 0001 	orr.w	r0, r0, r1
 8000e6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e72:	2afd      	cmp	r2, #253	; 0xfd
 8000e74:	d81d      	bhi.n	8000eb2 <__aeabi_fmul+0x92>
 8000e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7e:	bf08      	it	eq
 8000e80:	f020 0001 	biceq.w	r0, r0, #1
 8000e84:	4770      	bx	lr
 8000e86:	f090 0f00 	teq	r0, #0
 8000e8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8e:	bf08      	it	eq
 8000e90:	0249      	lsleq	r1, r1, #9
 8000e92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e9a:	3a7f      	subs	r2, #127	; 0x7f
 8000e9c:	bfc2      	ittt	gt
 8000e9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea6:	4770      	bxgt	lr
 8000ea8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	3a01      	subs	r2, #1
 8000eb2:	dc5d      	bgt.n	8000f70 <__aeabi_fmul+0x150>
 8000eb4:	f112 0f19 	cmn.w	r2, #25
 8000eb8:	bfdc      	itt	le
 8000eba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ebe:	4770      	bxle	lr
 8000ec0:	f1c2 0200 	rsb	r2, r2, #0
 8000ec4:	0041      	lsls	r1, r0, #1
 8000ec6:	fa21 f102 	lsr.w	r1, r1, r2
 8000eca:	f1c2 0220 	rsb	r2, r2, #32
 8000ece:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ed2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed6:	f140 0000 	adc.w	r0, r0, #0
 8000eda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ede:	bf08      	it	eq
 8000ee0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee4:	4770      	bx	lr
 8000ee6:	f092 0f00 	teq	r2, #0
 8000eea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0040      	lsleq	r0, r0, #1
 8000ef2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef6:	3a01      	subeq	r2, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fmul+0xce>
 8000efa:	ea40 000c 	orr.w	r0, r0, ip
 8000efe:	f093 0f00 	teq	r3, #0
 8000f02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0049      	lsleq	r1, r1, #1
 8000f0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0e:	3b01      	subeq	r3, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fmul+0xe6>
 8000f12:	ea41 010c 	orr.w	r1, r1, ip
 8000f16:	e78f      	b.n	8000e38 <__aeabi_fmul+0x18>
 8000f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	bf18      	it	ne
 8000f22:	ea93 0f0c 	teqne	r3, ip
 8000f26:	d00a      	beq.n	8000f3e <__aeabi_fmul+0x11e>
 8000f28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f2c:	bf18      	it	ne
 8000f2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f32:	d1d8      	bne.n	8000ee6 <__aeabi_fmul+0xc6>
 8000f34:	ea80 0001 	eor.w	r0, r0, r1
 8000f38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f3c:	4770      	bx	lr
 8000f3e:	f090 0f00 	teq	r0, #0
 8000f42:	bf17      	itett	ne
 8000f44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f48:	4608      	moveq	r0, r1
 8000f4a:	f091 0f00 	teqne	r1, #0
 8000f4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f52:	d014      	beq.n	8000f7e <__aeabi_fmul+0x15e>
 8000f54:	ea92 0f0c 	teq	r2, ip
 8000f58:	d101      	bne.n	8000f5e <__aeabi_fmul+0x13e>
 8000f5a:	0242      	lsls	r2, r0, #9
 8000f5c:	d10f      	bne.n	8000f7e <__aeabi_fmul+0x15e>
 8000f5e:	ea93 0f0c 	teq	r3, ip
 8000f62:	d103      	bne.n	8000f6c <__aeabi_fmul+0x14c>
 8000f64:	024b      	lsls	r3, r1, #9
 8000f66:	bf18      	it	ne
 8000f68:	4608      	movne	r0, r1
 8000f6a:	d108      	bne.n	8000f7e <__aeabi_fmul+0x15e>
 8000f6c:	ea80 0001 	eor.w	r0, r0, r1
 8000f70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f7c:	4770      	bx	lr
 8000f7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f86:	4770      	bx	lr

08000f88 <__aeabi_fdiv>:
 8000f88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f90:	bf1e      	ittt	ne
 8000f92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f96:	ea92 0f0c 	teqne	r2, ip
 8000f9a:	ea93 0f0c 	teqne	r3, ip
 8000f9e:	d069      	beq.n	8001074 <__aeabi_fdiv+0xec>
 8000fa0:	eba2 0203 	sub.w	r2, r2, r3
 8000fa4:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa8:	0249      	lsls	r1, r1, #9
 8000faa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fae:	d037      	beq.n	8001020 <__aeabi_fdiv+0x98>
 8000fb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	bf38      	it	cc
 8000fc4:	005b      	lslcc	r3, r3, #1
 8000fc6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	bf24      	itt	cs
 8000fd2:	1a5b      	subcs	r3, r3, r1
 8000fd4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fdc:	bf24      	itt	cs
 8000fde:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fe2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fea:	bf24      	itt	cs
 8000fec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ff0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff8:	bf24      	itt	cs
 8000ffa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	bf18      	it	ne
 8001006:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800100a:	d1e0      	bne.n	8000fce <__aeabi_fdiv+0x46>
 800100c:	2afd      	cmp	r2, #253	; 0xfd
 800100e:	f63f af50 	bhi.w	8000eb2 <__aeabi_fmul+0x92>
 8001012:	428b      	cmp	r3, r1
 8001014:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001018:	bf08      	it	eq
 800101a:	f020 0001 	biceq.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001024:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001028:	327f      	adds	r2, #127	; 0x7f
 800102a:	bfc2      	ittt	gt
 800102c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001030:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001034:	4770      	bxgt	lr
 8001036:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	3a01      	subs	r2, #1
 8001040:	e737      	b.n	8000eb2 <__aeabi_fmul+0x92>
 8001042:	f092 0f00 	teq	r2, #0
 8001046:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800104a:	bf02      	ittt	eq
 800104c:	0040      	lsleq	r0, r0, #1
 800104e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001052:	3a01      	subeq	r2, #1
 8001054:	d0f9      	beq.n	800104a <__aeabi_fdiv+0xc2>
 8001056:	ea40 000c 	orr.w	r0, r0, ip
 800105a:	f093 0f00 	teq	r3, #0
 800105e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001062:	bf02      	ittt	eq
 8001064:	0049      	lsleq	r1, r1, #1
 8001066:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800106a:	3b01      	subeq	r3, #1
 800106c:	d0f9      	beq.n	8001062 <__aeabi_fdiv+0xda>
 800106e:	ea41 010c 	orr.w	r1, r1, ip
 8001072:	e795      	b.n	8000fa0 <__aeabi_fdiv+0x18>
 8001074:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001078:	ea92 0f0c 	teq	r2, ip
 800107c:	d108      	bne.n	8001090 <__aeabi_fdiv+0x108>
 800107e:	0242      	lsls	r2, r0, #9
 8001080:	f47f af7d 	bne.w	8000f7e <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	f47f af70 	bne.w	8000f6c <__aeabi_fmul+0x14c>
 800108c:	4608      	mov	r0, r1
 800108e:	e776      	b.n	8000f7e <__aeabi_fmul+0x15e>
 8001090:	ea93 0f0c 	teq	r3, ip
 8001094:	d104      	bne.n	80010a0 <__aeabi_fdiv+0x118>
 8001096:	024b      	lsls	r3, r1, #9
 8001098:	f43f af4c 	beq.w	8000f34 <__aeabi_fmul+0x114>
 800109c:	4608      	mov	r0, r1
 800109e:	e76e      	b.n	8000f7e <__aeabi_fmul+0x15e>
 80010a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a4:	bf18      	it	ne
 80010a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010aa:	d1ca      	bne.n	8001042 <__aeabi_fdiv+0xba>
 80010ac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010b0:	f47f af5c 	bne.w	8000f6c <__aeabi_fmul+0x14c>
 80010b4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b8:	f47f af3c 	bne.w	8000f34 <__aeabi_fmul+0x114>
 80010bc:	e75f      	b.n	8000f7e <__aeabi_fmul+0x15e>
 80010be:	bf00      	nop

080010c0 <__gesf2>:
 80010c0:	f04f 3cff 	mov.w	ip, #4294967295
 80010c4:	e006      	b.n	80010d4 <__cmpsf2+0x4>
 80010c6:	bf00      	nop

080010c8 <__lesf2>:
 80010c8:	f04f 0c01 	mov.w	ip, #1
 80010cc:	e002      	b.n	80010d4 <__cmpsf2+0x4>
 80010ce:	bf00      	nop

080010d0 <__cmpsf2>:
 80010d0:	f04f 0c01 	mov.w	ip, #1
 80010d4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e4:	bf18      	it	ne
 80010e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ea:	d011      	beq.n	8001110 <__cmpsf2+0x40>
 80010ec:	b001      	add	sp, #4
 80010ee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010f2:	bf18      	it	ne
 80010f4:	ea90 0f01 	teqne	r0, r1
 80010f8:	bf58      	it	pl
 80010fa:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fe:	bf88      	it	hi
 8001100:	17c8      	asrhi	r0, r1, #31
 8001102:	bf38      	it	cc
 8001104:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001108:	bf18      	it	ne
 800110a:	f040 0001 	orrne.w	r0, r0, #1
 800110e:	4770      	bx	lr
 8001110:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001114:	d102      	bne.n	800111c <__cmpsf2+0x4c>
 8001116:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800111a:	d105      	bne.n	8001128 <__cmpsf2+0x58>
 800111c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001120:	d1e4      	bne.n	80010ec <__cmpsf2+0x1c>
 8001122:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001126:	d0e1      	beq.n	80010ec <__cmpsf2+0x1c>
 8001128:	f85d 0b04 	ldr.w	r0, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <__aeabi_cfrcmple>:
 8001130:	4684      	mov	ip, r0
 8001132:	4608      	mov	r0, r1
 8001134:	4661      	mov	r1, ip
 8001136:	e7ff      	b.n	8001138 <__aeabi_cfcmpeq>

08001138 <__aeabi_cfcmpeq>:
 8001138:	b50f      	push	{r0, r1, r2, r3, lr}
 800113a:	f7ff ffc9 	bl	80010d0 <__cmpsf2>
 800113e:	2800      	cmp	r0, #0
 8001140:	bf48      	it	mi
 8001142:	f110 0f00 	cmnmi.w	r0, #0
 8001146:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001148 <__aeabi_fcmpeq>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff fff4 	bl	8001138 <__aeabi_cfcmpeq>
 8001150:	bf0c      	ite	eq
 8001152:	2001      	moveq	r0, #1
 8001154:	2000      	movne	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmplt>:
 800115c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001160:	f7ff ffea 	bl	8001138 <__aeabi_cfcmpeq>
 8001164:	bf34      	ite	cc
 8001166:	2001      	movcc	r0, #1
 8001168:	2000      	movcs	r0, #0
 800116a:	f85d fb08 	ldr.w	pc, [sp], #8
 800116e:	bf00      	nop

08001170 <__aeabi_fcmple>:
 8001170:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001174:	f7ff ffe0 	bl	8001138 <__aeabi_cfcmpeq>
 8001178:	bf94      	ite	ls
 800117a:	2001      	movls	r0, #1
 800117c:	2000      	movhi	r0, #0
 800117e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001182:	bf00      	nop

08001184 <__aeabi_fcmpge>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff ffd2 	bl	8001130 <__aeabi_cfrcmple>
 800118c:	bf94      	ite	ls
 800118e:	2001      	movls	r0, #1
 8001190:	2000      	movhi	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmpgt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffc8 	bl	8001130 <__aeabi_cfrcmple>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmpun>:
 80011ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011b8:	d102      	bne.n	80011c0 <__aeabi_fcmpun+0x14>
 80011ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011be:	d108      	bne.n	80011d2 <__aeabi_fcmpun+0x26>
 80011c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011c4:	d102      	bne.n	80011cc <__aeabi_fcmpun+0x20>
 80011c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011ca:	d102      	bne.n	80011d2 <__aeabi_fcmpun+0x26>
 80011cc:	f04f 0000 	mov.w	r0, #0
 80011d0:	4770      	bx	lr
 80011d2:	f04f 0001 	mov.w	r0, #1
 80011d6:	4770      	bx	lr

080011d8 <__aeabi_f2uiz>:
 80011d8:	0042      	lsls	r2, r0, #1
 80011da:	d20e      	bcs.n	80011fa <__aeabi_f2uiz+0x22>
 80011dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011e0:	d30b      	bcc.n	80011fa <__aeabi_f2uiz+0x22>
 80011e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ea:	d409      	bmi.n	8001200 <__aeabi_f2uiz+0x28>
 80011ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011f4:	fa23 f002 	lsr.w	r0, r3, r2
 80011f8:	4770      	bx	lr
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4770      	bx	lr
 8001200:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001204:	d101      	bne.n	800120a <__aeabi_f2uiz+0x32>
 8001206:	0242      	lsls	r2, r0, #9
 8001208:	d102      	bne.n	8001210 <__aeabi_f2uiz+0x38>
 800120a:	f04f 30ff 	mov.w	r0, #4294967295
 800120e:	4770      	bx	lr
 8001210:	f04f 0000 	mov.w	r0, #0
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <__aeabi_d2lz>:
 8001218:	b538      	push	{r3, r4, r5, lr}
 800121a:	4605      	mov	r5, r0
 800121c:	460c      	mov	r4, r1
 800121e:	2200      	movs	r2, #0
 8001220:	2300      	movs	r3, #0
 8001222:	4628      	mov	r0, r5
 8001224:	4621      	mov	r1, r4
 8001226:	f7ff fc3f 	bl	8000aa8 <__aeabi_dcmplt>
 800122a:	b928      	cbnz	r0, 8001238 <__aeabi_d2lz+0x20>
 800122c:	4628      	mov	r0, r5
 800122e:	4621      	mov	r1, r4
 8001230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001234:	f000 b80a 	b.w	800124c <__aeabi_d2ulz>
 8001238:	4628      	mov	r0, r5
 800123a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800123e:	f000 f805 	bl	800124c <__aeabi_d2ulz>
 8001242:	4240      	negs	r0, r0
 8001244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001248:	bd38      	pop	{r3, r4, r5, pc}
 800124a:	bf00      	nop

0800124c <__aeabi_d2ulz>:
 800124c:	b5d0      	push	{r4, r6, r7, lr}
 800124e:	2200      	movs	r2, #0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <__aeabi_d2ulz+0x34>)
 8001252:	4606      	mov	r6, r0
 8001254:	460f      	mov	r7, r1
 8001256:	f7ff f9b5 	bl	80005c4 <__aeabi_dmul>
 800125a:	f7ff fc63 	bl	8000b24 <__aeabi_d2uiz>
 800125e:	4604      	mov	r4, r0
 8001260:	f7ff f936 	bl	80004d0 <__aeabi_ui2d>
 8001264:	2200      	movs	r2, #0
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <__aeabi_d2ulz+0x38>)
 8001268:	f7ff f9ac 	bl	80005c4 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4630      	mov	r0, r6
 8001272:	4639      	mov	r1, r7
 8001274:	f7fe ffee 	bl	8000254 <__aeabi_dsub>
 8001278:	f7ff fc54 	bl	8000b24 <__aeabi_d2uiz>
 800127c:	4621      	mov	r1, r4
 800127e:	bdd0      	pop	{r4, r6, r7, pc}
 8001280:	3df00000 	.word	0x3df00000
 8001284:	41f00000 	.word	0x41f00000

08001288 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <MX_ADC1_Init+0xcc>)
 800129a:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <MX_ADC1_Init+0xd0>)
 800129c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012c2:	2204      	movs	r2, #4
 80012c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c6:	4823      	ldr	r0, [pc, #140]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012c8:	f007 f9aa 	bl	8008620 <HAL_ADC_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80012d2:	f000 fb6e 	bl	80019b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012da:	2301      	movs	r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80012de:	2305      	movs	r3, #5
 80012e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	481b      	ldr	r0, [pc, #108]	; (8001354 <MX_ADC1_Init+0xcc>)
 80012e8:	f007 fb7e 	bl	80089e8 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012f2:	f000 fb5e 	bl	80019b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4814      	ldr	r0, [pc, #80]	; (8001354 <MX_ADC1_Init+0xcc>)
 8001304:	f007 fb70 	bl	80089e8 <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800130e:	f000 fb50 	bl	80019b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001312:	2302      	movs	r3, #2
 8001314:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001316:	2303      	movs	r3, #3
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_ADC1_Init+0xcc>)
 8001320:	f007 fb62 	bl	80089e8 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800132a:	f000 fb42 	bl	80019b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800132e:	2303      	movs	r3, #3
 8001330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001332:	2304      	movs	r3, #4
 8001334:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_ADC1_Init+0xcc>)
 800133c:	f007 fb54 	bl	80089e8 <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001346:	f000 fb34 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000240 	.word	0x20000240
 8001358:	40012400 	.word	0x40012400

0800135c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <HAL_ADC_MspInit+0xbc>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d149      	bne.n	8001410 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_ADC_MspInit+0xc0>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a26      	ldr	r2, [pc, #152]	; (800141c <HAL_ADC_MspInit+0xc0>)
 8001382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_ADC_MspInit+0xc0>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_ADC_MspInit+0xc0>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <HAL_ADC_MspInit+0xc0>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_ADC_MspInit+0xc0>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013ac:	230f      	movs	r3, #15
 80013ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b0:	2303      	movs	r3, #3
 80013b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4819      	ldr	r0, [pc, #100]	; (8001420 <HAL_ADC_MspInit+0xc4>)
 80013bc:	f009 fa8a 	bl	800a8d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013c2:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HAL_ADC_MspInit+0xcc>)
 80013c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013ea:	2220      	movs	r2, #32
 80013ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013f6:	f008 fd71 	bl	8009edc <HAL_DMA_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001400:	f000 fad7 	bl	80019b2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 8001408:	621a      	str	r2, [r3, #32]
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40012400 	.word	0x40012400
 800141c:	40021000 	.word	0x40021000
 8001420:	40010800 	.word	0x40010800
 8001424:	20000270 	.word	0x20000270
 8001428:	40020008 	.word	0x40020008

0800142c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_CAN_Init+0x64>)
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <MX_CAN_Init+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_CAN_Init+0x64>)
 8001438:	2208      	movs	r2, #8
 800143a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_CAN_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_CAN_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_CAN_Init+0x64>)
 800144a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800144e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_CAN_Init+0x64>)
 8001452:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001456:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MX_CAN_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_CAN_Init+0x64>)
 8001460:	2201      	movs	r2, #1
 8001462:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <MX_CAN_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_CAN_Init+0x64>)
 800146c:	2201      	movs	r2, #1
 800146e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MX_CAN_Init+0x64>)
 8001472:	2200      	movs	r2, #0
 8001474:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_CAN_Init+0x64>)
 8001478:	2200      	movs	r2, #0
 800147a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_CAN_Init+0x64>)
 800147e:	f007 fcac 	bl	8008dda <HAL_CAN_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001488:	f000 fa93 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200002b4 	.word	0x200002b4
 8001494:	40006400 	.word	0x40006400

08001498 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a2c      	ldr	r2, [pc, #176]	; (8001564 <HAL_CAN_MspInit+0xcc>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d151      	bne.n	800155c <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c2:	61d3      	str	r3, [r2, #28]
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a24      	ldr	r2, [pc, #144]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_CAN_MspInit+0xd0>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	481b      	ldr	r0, [pc, #108]	; (800156c <HAL_CAN_MspInit+0xd4>)
 80014fe:	f009 f9e9 	bl	800a8d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	4815      	ldr	r0, [pc, #84]	; (800156c <HAL_CAN_MspInit+0xd4>)
 8001518:	f009 f9dc 	bl	800a8d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 10, 10);
 800151c:	220a      	movs	r2, #10
 800151e:	210a      	movs	r1, #10
 8001520:	2013      	movs	r0, #19
 8001522:	f008 fb9e 	bl	8009c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001526:	2013      	movs	r0, #19
 8001528:	f008 fbb7 	bl	8009c9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 10, 10);
 800152c:	220a      	movs	r2, #10
 800152e:	210a      	movs	r1, #10
 8001530:	2014      	movs	r0, #20
 8001532:	f008 fb96 	bl	8009c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001536:	2014      	movs	r0, #20
 8001538:	f008 fbaf 	bl	8009c9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 10, 10);
 800153c:	220a      	movs	r2, #10
 800153e:	210a      	movs	r1, #10
 8001540:	2015      	movs	r0, #21
 8001542:	f008 fb8e 	bl	8009c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001546:	2015      	movs	r0, #21
 8001548:	f008 fba7 	bl	8009c9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 10, 10);
 800154c:	220a      	movs	r2, #10
 800154e:	210a      	movs	r1, #10
 8001550:	2016      	movs	r0, #22
 8001552:	f008 fb86 	bl	8009c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001556:	2016      	movs	r0, #22
 8001558:	f008 fb9f 	bl	8009c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40006400 	.word	0x40006400
 8001568:	40021000 	.word	0x40021000
 800156c:	40010800 	.word	0x40010800

08001570 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001576:	463b      	mov	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_DAC_Init+0x60>)
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <MX_DAC_Init+0x64>)
 8001582:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <MX_DAC_Init+0x60>)
 8001586:	f008 fbb0 	bl	8009cea <HAL_DAC_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001590:	f000 fa0f 	bl	80019b2 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	4619      	mov	r1, r3
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <MX_DAC_Init+0x60>)
 80015a4:	f008 fc42 	bl	8009e2c <HAL_DAC_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015ae:	f000 fa00 	bl	80019b2 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	2210      	movs	r2, #16
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_DAC_Init+0x60>)
 80015ba:	f008 fc37 	bl	8009e2c <HAL_DAC_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80015c4:	f000 f9f5 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200002dc 	.word	0x200002dc
 80015d4:	40007400 	.word	0x40007400

080015d8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_DAC_MspInit+0x6c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d121      	bne.n	800163c <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_DAC_MspInit+0x70>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_DAC_MspInit+0x70>)
 80015fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001602:	61d3      	str	r3, [r2, #28]
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_DAC_MspInit+0x70>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_DAC_MspInit+0x70>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <HAL_DAC_MspInit+0x70>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_DAC_MspInit+0x70>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001628:	2330      	movs	r3, #48	; 0x30
 800162a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162c:	2303      	movs	r3, #3
 800162e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <HAL_DAC_MspInit+0x74>)
 8001638:	f009 f94c 	bl	800a8d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40007400 	.word	0x40007400
 8001648:	40021000 	.word	0x40021000
 800164c:	40010800 	.word	0x40010800

08001650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <MX_DMA_Init+0x90>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <MX_DMA_Init+0x90>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6153      	str	r3, [r2, #20]
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <MX_DMA_Init+0x90>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_DMA_Init+0x90>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <MX_DMA_Init+0x90>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_DMA_Init+0x90>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	200b      	movs	r0, #11
 800168c:	f008 fae9 	bl	8009c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001690:	200b      	movs	r0, #11
 8001692:	f008 fb02 	bl	8009c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	200d      	movs	r0, #13
 800169c:	f008 fae1 	bl	8009c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016a0:	200d      	movs	r0, #13
 80016a2:	f008 fafa 	bl	8009c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	200f      	movs	r0, #15
 80016ac:	f008 fad9 	bl	8009c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016b0:	200f      	movs	r0, #15
 80016b2:	f008 faf2 	bl	8009c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2010      	movs	r0, #16
 80016bc:	f008 fad1 	bl	8009c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80016c0:	2010      	movs	r0, #16
 80016c2:	f008 faea 	bl	8009c9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	203a      	movs	r0, #58	; 0x3a
 80016cc:	f008 fac9 	bl	8009c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80016d0:	203a      	movs	r0, #58	; 0x3a
 80016d2:	f008 fae2 	bl	8009c9a <HAL_NVIC_EnableIRQ>

}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_I2C1_Init+0x50>)
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <MX_I2C1_Init+0x54>)
 80016ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_I2C1_Init+0x50>)
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <MX_I2C1_Init+0x58>)
 80016f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_I2C1_Init+0x50>)
 8001702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <MX_I2C1_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_I2C1_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_I2C1_Init+0x50>)
 8001722:	f009 fb7f 	bl	800ae24 <HAL_I2C_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800172c:	f000 f941 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200002f0 	.word	0x200002f0
 8001738:	40005400 	.word	0x40005400
 800173c:	000186a0 	.word	0x000186a0

08001740 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <HAL_I2C_MspInit+0x70>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d123      	bne.n	80017a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001778:	23c0      	movs	r3, #192	; 0xc0
 800177a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177c:	2312      	movs	r3, #18
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2302      	movs	r3, #2
 8001782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4619      	mov	r1, r3
 800178a:	480b      	ldr	r0, [pc, #44]	; (80017b8 <HAL_I2C_MspInit+0x78>)
 800178c:	f009 f8a2 	bl	800a8d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179a:	61d3      	str	r3, [r2, #28]
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40005400 	.word	0x40005400
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010c00 	.word	0x40010c00

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80017c0:	f006 fea8 	bl	8008514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c4:	f000 f898 	bl	80018f8 <SystemClock_Config>
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
 //MX_GPIO_Init();
  GPIO_Configuration();
 80017c8:	f003 fba0 	bl	8004f0c <GPIO_Configuration>
  MX_DMA_Init();
 80017cc:	f7ff ff40 	bl	8001650 <MX_DMA_Init>
  MX_CAN_Init();
 80017d0:	f7ff fe2c 	bl	800142c <MX_CAN_Init>
  MX_DAC_Init();
 80017d4:	f7ff fecc 	bl	8001570 <MX_DAC_Init>
  MX_I2C1_Init();
 80017d8:	f7ff ff84 	bl	80016e4 <MX_I2C1_Init>
  MX_TIM4_Init();
 80017dc:	f000 fc78 	bl	80020d0 <MX_TIM4_Init>
  MX_UART4_Init();
 80017e0:	f000 fd7e 	bl	80022e0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80017e4:	f000 fda6 	bl	8002334 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80017e8:	f000 fdce 	bl	8002388 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017ec:	f000 fdf6 	bl	80023dc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80017f0:	f000 fc20 	bl	8002034 <MX_TIM3_Init>
  MX_ADC1_Init();
 80017f4:	f7ff fd48 	bl	8001288 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  bsp_can_init();
 80017f8:	f005 ff2e 	bl	8007658 <bsp_can_init>
  cliInit();
 80017fc:	f001 fcc4 	bl	8003188 <cliInit>
  uartInit();
 8001800:	f001 fab2 	bl	8002d68 <uartInit>
  uartOpen(_DEF_UART2, 115200);  // UART
 8001804:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001808:	2001      	movs	r0, #1
 800180a:	f001 fac7 	bl	8002d9c <uartOpen>
  cliOpen(_DEF_UART2, 115200);
 800180e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001812:	2001      	movs	r0, #1
 8001814:	f001 fd54 	bl	80032c0 <cliOpen>
  bsp_adc_init();
 8001818:	f001 f974 	bl	8002b04 <bsp_adc_init>

  HAL_GPIO_WritePin(GPIOB, GPIO_I2C_WP, GPIO_PIN_RESET); 
 800181c:	2200      	movs	r2, #0
 800181e:	2120      	movs	r1, #32
 8001820:	482a      	ldr	r0, [pc, #168]	; (80018cc <main+0x110>)
 8001822:	f009 face 	bl	800adc2 <HAL_GPIO_WritePin>
  init_set_read();
 8001826:	f005 fcad 	bl	8007184 <init_set_read>
 

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800182a:	2100      	movs	r1, #0
 800182c:	4828      	ldr	r0, [pc, #160]	; (80018d0 <main+0x114>)
 800182e:	f008 fa7e 	bl	8009d2e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001832:	2110      	movs	r1, #16
 8001834:	4826      	ldr	r0, [pc, #152]	; (80018d0 <main+0x114>)
 8001836:	f008 fa7a 	bl	8009d2e <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 800183a:	2300      	movs	r3, #0
 800183c:	2208      	movs	r2, #8
 800183e:	2100      	movs	r1, #0
 8001840:	4823      	ldr	r0, [pc, #140]	; (80018d0 <main+0x114>)
 8001842:	f008 faca 	bl	8009dda <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, 0);
 8001846:	2300      	movs	r3, #0
 8001848:	2208      	movs	r2, #8
 800184a:	2110      	movs	r1, #16
 800184c:	4820      	ldr	r0, [pc, #128]	; (80018d0 <main+0x114>)
 800184e:	f008 fac4 	bl	8009dda <HAL_DAC_SetValue>

  HAL_TIM_Base_Start_IT (&htim3); // 1ms 
 8001852:	4820      	ldr	r0, [pc, #128]	; (80018d4 <main+0x118>)
 8001854:	f00b f856 	bl	800c904 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim4); // PWM OUT PUT 
 8001858:	481f      	ldr	r0, [pc, #124]	; (80018d8 <main+0x11c>)
 800185a:	f00b f853 	bl	800c904 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800185e:	210c      	movs	r1, #12
 8001860:	481d      	ldr	r0, [pc, #116]	; (80018d8 <main+0x11c>)
 8001862:	f00b f907 	bl	800ca74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001866:	2108      	movs	r1, #8
 8001868:	481b      	ldr	r0, [pc, #108]	; (80018d8 <main+0x11c>)
 800186a:	f00b f903 	bl	800ca74 <HAL_TIM_PWM_Start>

  Var_Init();
 800186e:	f006 fd53 	bl	8008318 <Var_Init>
  init_set();
 8001872:	f006 fe1f 	bl	80084b4 <init_set>
  Init_DrvPortSet();
 8001876:	f005 fbb9 	bl	8006fec <Init_DrvPortSet>
  HAL_Delay(300);
 800187a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800187e:	f006 feab 	bl	80085d8 <HAL_Delay>
  INIT_Check();
 8001882:	f006 fc51 	bl	8008128 <INIT_Check>

  u16_RFMNChkCnt = 2000;			/* 약 1000ms 동안 RFR Main 신호가 없으면 All Motor Stop */
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <main+0x120>)
 8001888:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800188c:	801a      	strh	r2, [r3, #0]
  u32_SysRunTime = 0;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <main+0x124>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
  CAN_RcvCount = 0;
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <main+0x128>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
  canDTIntime = 2000;	
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <main+0x12c>)
 800189c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018a0:	801a      	strh	r2, [r3, #0]
  u2DTInTime = 2000;	
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <main+0x130>)
 80018a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018a8:	801a      	strh	r2, [r3, #0]
  crash_Cnt = 50;			
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <main+0x134>)
 80018ac:	2232      	movs	r2, #50	; 0x32
 80018ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */
  cliPrintf(">> SYS_ON \r\n");
 80018b0:	4810      	ldr	r0, [pc, #64]	; (80018f4 <main+0x138>)
 80018b2:	f002 f9cf 	bl	8003c54 <cliPrintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {  
    
    User_Interface();
 80018b6:	f004 fd1b 	bl	80062f0 <User_Interface>
    Motor_Control();
 80018ba:	f005 fbc9 	bl	8007050 <Motor_Control>
    Timer_Event();
 80018be:	f005 fea5 	bl	800760c <Timer_Event>
    Comm_Check();
 80018c2:	f003 fae7 	bl	8004e94 <Comm_Check>
    cliMain();
 80018c6:	f001 fdb3 	bl	8003430 <cliMain>
    User_Interface();
 80018ca:	e7f4      	b.n	80018b6 <main+0xfa>
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	200002dc 	.word	0x200002dc
 80018d4:	20000364 	.word	0x20000364
 80018d8:	200003ac 	.word	0x200003ac
 80018dc:	20000d3c 	.word	0x20000d3c
 80018e0:	20000d04 	.word	0x20000d04
 80018e4:	20000d4c 	.word	0x20000d4c
 80018e8:	20000d56 	.word	0x20000d56
 80018ec:	20000d3a 	.word	0x20000d3a
 80018f0:	20000d58 	.word	0x20000d58
 80018f4:	08011c18 	.word	0x08011c18

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b096      	sub	sp, #88	; 0x58
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001902:	2228      	movs	r2, #40	; 0x28
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f00c fff2 	bl	800e8f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800192c:	2301      	movs	r3, #1
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193a:	2301      	movs	r3, #1
 800193c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193e:	2302      	movs	r3, #2
 8001940:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001946:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001948:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800194c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001952:	4618      	mov	r0, r3
 8001954:	f00a fac0 	bl	800bed8 <HAL_RCC_OscConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800195e:	f000 f828 	bl	80019b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001962:	230f      	movs	r3, #15
 8001964:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001966:	2302      	movs	r3, #2
 8001968:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800196e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	2102      	movs	r1, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f00a fd2c 	bl	800c3dc <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800198a:	f000 f812 	bl	80019b2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800198e:	2302      	movs	r3, #2
 8001990:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001996:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4618      	mov	r0, r3
 800199c:	f00a feac 	bl	800c6f8 <HAL_RCCEx_PeriphCLKConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80019a6:	f000 f804 	bl	80019b2 <Error_Handler>
  }
}
 80019aa:	bf00      	nop
 80019ac:	3758      	adds	r7, #88	; 0x58
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b6:	b672      	cpsid	i
}
 80019b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ba:	e7fe      	b.n	80019ba <Error_Handler+0x8>

080019bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_MspInit+0x5c>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_MspInit+0x5c>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6193      	str	r3, [r2, #24]
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_MspInit+0x5c>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_MspInit+0x5c>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_MspInit+0x5c>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_MspInit+0x5c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_MspInit+0x60>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_MspInit+0x60>)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000

08001a20 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001a66:	f006 fd9b 	bl	80085a0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <DMA1_Channel1_IRQHandler+0x10>)
 8001a76:	f008 fcc3 	bl	800a400 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000270 	.word	0x20000270

08001a84 <DMA1_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA1 channel3 global interrupt.
 */
void DMA1_Channel3_IRQHandler(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

	/* USER CODE END DMA1_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <DMA1_Channel3_IRQHandler+0x10>)
 8001a8a:	f008 fcb9 	bl	800a400 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

	/* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200005e0 	.word	0x200005e0

08001a98 <DMA1_Channel5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

	/* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <DMA1_Channel5_IRQHandler+0x10>)
 8001a9e:	f008 fcaf 	bl	800a400 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

	/* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000558 	.word	0x20000558

08001aac <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <DMA1_Channel6_IRQHandler+0x10>)
 8001ab2:	f008 fca5 	bl	800a400 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000059c 	.word	0x2000059c

08001ac0 <USB_HP_CAN1_TX_IRQHandler>:

/**
 * @brief This function handles USB high priority or CAN TX interrupts.
 */
void USB_HP_CAN1_TX_IRQHandler(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

	/* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001ac6:	f007 fda5 	bl	8009614 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

	/* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002b4 	.word	0x200002b4

08001ad4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
 * @brief This function handles USB low priority or CAN RX0 interrupts.
 */
/// 여기가 찐 CAN RX
void USB_LP_CAN1_RX0_IRQHandler(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	CanRxMsg CanRxData;
	
	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8001ada:	483a      	ldr	r0, [pc, #232]	; (8001bc4 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8001adc:	f007 fd9a 	bl	8009614 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader, &CanRxData.Data);
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	330b      	adds	r3, #11
 8001ae4:	4a38      	ldr	r2, [pc, #224]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4836      	ldr	r0, [pc, #216]	; (8001bc4 <USB_LP_CAN1_RX0_IRQHandler+0xf0>)
 8001aea:	f007 fc4d 	bl	8009388 <HAL_CAN_GetRxMessage>

	#if 1 // 나이사님 ver 
	if((rxHeader.StdId == 0x123)&&(rxHeader.IDE == CAN_ID_STD)&&(rxHeader.DLC == 2))
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f240 1223 	movw	r2, #291	; 0x123
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d126      	bne.n	8001b48 <USB_LP_CAN1_RX0_IRQHandler+0x74>
 8001afa:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d122      	bne.n	8001b48 <USB_LP_CAN1_RX0_IRQHandler+0x74>
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d11e      	bne.n	8001b48 <USB_LP_CAN1_RX0_IRQHandler+0x74>
	{
		CAN_RxData[0] = CanRxData.Data[0];	/* Line ���� �� ����, ���� Command */
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <USB_LP_CAN1_RX0_IRQHandler+0xf8>)
 8001b0e:	701a      	strb	r2, [r3, #0]
		CAN_RxData[1] = CanRxData.Data[1];	/* Ready Byte */
 8001b10:	7c3a      	ldrb	r2, [r7, #16]
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <USB_LP_CAN1_RX0_IRQHandler+0xf8>)
 8001b14:	705a      	strb	r2, [r3, #1]

		Received_canID = rxHeader.StdId;
 8001b16:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a2d      	ldr	r2, [pc, #180]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001b1c:	6013      	str	r3, [r2, #0]
		Received_canIDType = rxHeader.IDE;
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <USB_LP_CAN1_RX0_IRQHandler+0x100>)
 8001b26:	701a      	strb	r2, [r3, #0]
		Received_canDLC = rxHeader.DLC;
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <USB_LP_CAN1_RX0_IRQHandler+0x104>)
 8001b30:	701a      	strb	r2, [r3, #0]
		canDTIntime = 2000; 		/* nck-1222 */
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <USB_LP_CAN1_RX0_IRQHandler+0x108>)
 8001b34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b38:	801a      	strh	r2, [r3, #0]
		uCommStatusFlag |= f_canDTIn;
 8001b3a:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <USB_LP_CAN1_RX0_IRQHandler+0x10c>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <USB_LP_CAN1_RX0_IRQHandler+0x10c>)
 8001b46:	801a      	strh	r2, [r3, #0]
	}
	if((rxHeader.StdId == 0x500)&&(rxHeader.IDE == CAN_ID_STD)&&(rxHeader.DLC == 8))
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b50:	d134      	bne.n	8001bbc <USB_LP_CAN1_RX0_IRQHandler+0xe8>
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d130      	bne.n	8001bbc <USB_LP_CAN1_RX0_IRQHandler+0xe8>
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d12c      	bne.n	8001bbc <USB_LP_CAN1_RX0_IRQHandler+0xe8>
	{
		CAN_RxData_Error[0] = CanRxData.Data[0];	
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <USB_LP_CAN1_RX0_IRQHandler+0x110>)
 8001b66:	701a      	strb	r2, [r3, #0]
		CAN_RxData_Error[1] = CanRxData.Data[1];
 8001b68:	7c3a      	ldrb	r2, [r7, #16]
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <USB_LP_CAN1_RX0_IRQHandler+0x110>)
 8001b6c:	705a      	strb	r2, [r3, #1]
		CAN_RxData_Error[2] = CanRxData.Data[2];	
 8001b6e:	7c7a      	ldrb	r2, [r7, #17]
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <USB_LP_CAN1_RX0_IRQHandler+0x110>)
 8001b72:	709a      	strb	r2, [r3, #2]

		CAN_RX_FND_Error[0] = CanRxData.Data[0];	
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <USB_LP_CAN1_RX0_IRQHandler+0x114>)
 8001b78:	701a      	strb	r2, [r3, #0]
		CAN_RX_FND_Error[1] = CanRxData.Data[1];
 8001b7a:	7c3a      	ldrb	r2, [r7, #16]
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <USB_LP_CAN1_RX0_IRQHandler+0x114>)
 8001b7e:	705a      	strb	r2, [r3, #1]
		CAN_RX_FND_Error[2] = CanRxData.Data[2];	
 8001b80:	7c7a      	ldrb	r2, [r7, #17]
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <USB_LP_CAN1_RX0_IRQHandler+0x114>)
 8001b84:	709a      	strb	r2, [r3, #2]
		CAN_RxData_Error[4] = CanRxData.Data[4];	
		CAN_RxData_Error[5] = CanRxData.Data[5];
		CAN_RxData_Error[6] = CanRxData.Data[6];	
		CAN_RxData_Error[7] = CanRxData.Data[7];	
		#endif 
		can1_Trans8b(0x03);
 8001b86:	2003      	movs	r0, #3
 8001b88:	f005 fbc4 	bl	8007314 <can1_Trans8b>
		can1_Trans8b(0x04);
 8001b8c:	2004      	movs	r0, #4
 8001b8e:	f005 fbc1 	bl	8007314 <can1_Trans8b>
	
		Received_canID = rxHeader.StdId;
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0xfc>)
 8001b98:	6013      	str	r3, [r2, #0]
		Received_canIDType = rxHeader.IDE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <USB_LP_CAN1_RX0_IRQHandler+0x100>)
 8001ba2:	701a      	strb	r2, [r3, #0]
		Received_canDLC = rxHeader.DLC;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <USB_LP_CAN1_RX0_IRQHandler+0xf4>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <USB_LP_CAN1_RX0_IRQHandler+0x104>)
 8001bac:	701a      	strb	r2, [r3, #0]
		
		uCommStatusFlag |= f_canERIn;
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <USB_LP_CAN1_RX0_IRQHandler+0x10c>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <USB_LP_CAN1_RX0_IRQHandler+0x10c>)
 8001bba:	801a      	strh	r2, [r3, #0]
	#endif 



	/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200002b4 	.word	0x200002b4
 8001bc8:	20000344 	.word	0x20000344
 8001bcc:	20000d64 	.word	0x20000d64
 8001bd0:	20000d50 	.word	0x20000d50
 8001bd4:	20000d54 	.word	0x20000d54
 8001bd8:	20000d55 	.word	0x20000d55
 8001bdc:	20000d56 	.word	0x20000d56
 8001be0:	20000d00 	.word	0x20000d00
 8001be4:	20000d68 	.word	0x20000d68
 8001be8:	20000d70 	.word	0x20000d70

08001bec <CAN1_RX1_IRQHandler>:

/**
 * @brief This function handles CAN RX1 interrupt.
 */
void CAN1_RX1_IRQHandler(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX1_IRQn 0 */

	/* USER CODE END CAN1_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <CAN1_RX1_IRQHandler+0x10>)
 8001bf2:	f007 fd0f 	bl	8009614 <HAL_CAN_IRQHandler>


}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200002b4 	.word	0x200002b4

08001c00 <CAN1_SCE_IRQHandler>:

/**
 * @brief This function handles CAN SCE interrupt.
 */
void CAN1_SCE_IRQHandler(void) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_SCE_IRQn 0 */

	/* USER CODE END CAN1_SCE_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <CAN1_SCE_IRQHandler+0x10>)
 8001c06:	f007 fd05 	bl	8009614 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_SCE_IRQn 1 */

	/* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200002b4 	.word	0x200002b4

08001c14 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	ms_cnt++;
 8001c18:	4b71      	ldr	r3, [pc, #452]	; (8001de0 <TIM3_IRQHandler+0x1cc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	4a70      	ldr	r2, [pc, #448]	; (8001de0 <TIM3_IRQHandler+0x1cc>)
 8001c20:	6013      	str	r3, [r2, #0]
	if ((ms_cnt % dac_max_value) == 0)
 8001c22:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <TIM3_IRQHandler+0x1cc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6f      	ldr	r2, [pc, #444]	; (8001de4 <TIM3_IRQHandler+0x1d0>)
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c2e:	fb01 f202 	mul.w	r2, r1, r2
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d106      	bne.n	8001c46 <TIM3_IRQHandler+0x32>
		uTimerFlag |= TIM_10ms;
 8001c38:	4b6b      	ldr	r3, [pc, #428]	; (8001de8 <TIM3_IRQHandler+0x1d4>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b69      	ldr	r3, [pc, #420]	; (8001de8 <TIM3_IRQHandler+0x1d4>)
 8001c44:	801a      	strh	r2, [r3, #0]
	if ((ms_cnt % 30) == 0)
 8001c46:	4b66      	ldr	r3, [pc, #408]	; (8001de0 <TIM3_IRQHandler+0x1cc>)
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	4b68      	ldr	r3, [pc, #416]	; (8001dec <TIM3_IRQHandler+0x1d8>)
 8001c4c:	fba3 2301 	umull	r2, r3, r3, r1
 8001c50:	091a      	lsrs	r2, r3, #4
 8001c52:	4613      	mov	r3, r2
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	1aca      	subs	r2, r1, r3
 8001c5c:	2a00      	cmp	r2, #0
 8001c5e:	d106      	bne.n	8001c6e <TIM3_IRQHandler+0x5a>
		uTimerFlag |= TIM_30ms;
 8001c60:	4b61      	ldr	r3, [pc, #388]	; (8001de8 <TIM3_IRQHandler+0x1d4>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <TIM3_IRQHandler+0x1d4>)
 8001c6c:	801a      	strh	r2, [r3, #0]
	if ((ms_cnt % 100) == 0)
 8001c6e:	4b5c      	ldr	r3, [pc, #368]	; (8001de0 <TIM3_IRQHandler+0x1cc>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b5f      	ldr	r3, [pc, #380]	; (8001df0 <TIM3_IRQHandler+0x1dc>)
 8001c74:	fba3 1302 	umull	r1, r3, r3, r2
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	2164      	movs	r1, #100	; 0x64
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <TIM3_IRQHandler+0x80>
		uTimerFlag |= TIM_100ms;
 8001c86:	4b58      	ldr	r3, [pc, #352]	; (8001de8 <TIM3_IRQHandler+0x1d4>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	f043 0310 	orr.w	r3, r3, #16
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	4b55      	ldr	r3, [pc, #340]	; (8001de8 <TIM3_IRQHandler+0x1d4>)
 8001c92:	801a      	strh	r2, [r3, #0]
	if ((ms_cnt % 200) == 0)
 8001c94:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <TIM3_IRQHandler+0x1cc>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <TIM3_IRQHandler+0x1dc>)
 8001c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c9e:	099b      	lsrs	r3, r3, #6
 8001ca0:	21c8      	movs	r1, #200	; 0xc8
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d106      	bne.n	8001cba <TIM3_IRQHandler+0xa6>
		uTimerFlag |= TIM_200ms;
 8001cac:	4b4e      	ldr	r3, [pc, #312]	; (8001de8 <TIM3_IRQHandler+0x1d4>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	f043 0320 	orr.w	r3, r3, #32
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <TIM3_IRQHandler+0x1d4>)
 8001cb8:	801a      	strh	r2, [r3, #0]
	if ((ms_cnt % 500) == 0)
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <TIM3_IRQHandler+0x1cc>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <TIM3_IRQHandler+0x1e0>)
 8001cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d106      	bne.n	8001ce2 <TIM3_IRQHandler+0xce>
		uTimerFlag |= TIM_500ms;
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <TIM3_IRQHandler+0x1d4>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <TIM3_IRQHandler+0x1d4>)
 8001ce0:	801a      	strh	r2, [r3, #0]


	if (Local_Key.lK_ChatCnt)
 8001ce2:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <TIM3_IRQHandler+0x1e4>)
 8001ce4:	88db      	ldrh	r3, [r3, #6]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <TIM3_IRQHandler+0xe2>
		--Local_Key.lK_ChatCnt;
 8001cea:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <TIM3_IRQHandler+0x1e4>)
 8001cec:	88db      	ldrh	r3, [r3, #6]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <TIM3_IRQHandler+0x1e4>)
 8001cf4:	80da      	strh	r2, [r3, #6]
	if (RFR_Key.rK_ChatCnt)
 8001cf6:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <TIM3_IRQHandler+0x1e8>)
 8001cf8:	88db      	ldrh	r3, [r3, #6]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <TIM3_IRQHandler+0xf6>
		--RFR_Key.rK_ChatCnt;
 8001cfe:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <TIM3_IRQHandler+0x1e8>)
 8001d00:	88db      	ldrh	r3, [r3, #6]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <TIM3_IRQHandler+0x1e8>)
 8001d08:	80da      	strh	r2, [r3, #6]
	if (DMotorWaitime)
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <TIM3_IRQHandler+0x1ec>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <TIM3_IRQHandler+0x10a>
		--DMotorWaitime;
 8001d12:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <TIM3_IRQHandler+0x1ec>)
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <TIM3_IRQHandler+0x1ec>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	if (SMotorWaitime)
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <TIM3_IRQHandler+0x1f0>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <TIM3_IRQHandler+0x11e>
		--SMotorWaitime;
 8001d26:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <TIM3_IRQHandler+0x1f0>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <TIM3_IRQHandler+0x1f0>)
 8001d30:	801a      	strh	r2, [r3, #0]
	if (PumpWaittime)
 8001d32:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <TIM3_IRQHandler+0x1f4>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <TIM3_IRQHandler+0x132>
		--PumpWaittime; /* PUMP */
 8001d3a:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <TIM3_IRQHandler+0x1f4>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <TIM3_IRQHandler+0x1f4>)
 8001d44:	801a      	strh	r2, [r3, #0]
	if (FanWaittime)
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <TIM3_IRQHandler+0x1f8>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <TIM3_IRQHandler+0x146>
		--FanWaittime; /* FAN */
 8001d4e:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <TIM3_IRQHandler+0x1f8>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <TIM3_IRQHandler+0x1f8>)
 8001d58:	801a      	strh	r2, [r3, #0]
	if (canDTIntime)
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <TIM3_IRQHandler+0x1fc>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <TIM3_IRQHandler+0x15a>
		--canDTIntime; 
 8001d62:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <TIM3_IRQHandler+0x1fc>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <TIM3_IRQHandler+0x1fc>)
 8001d6c:	801a      	strh	r2, [r3, #0]
	//if(u2Init_time)	--u2Init_time;
	if (u2DTInTime)
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <TIM3_IRQHandler+0x200>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <TIM3_IRQHandler+0x16e>
		--u2DTInTime;
 8001d76:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <TIM3_IRQHandler+0x200>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <TIM3_IRQHandler+0x200>)
 8001d80:	801a      	strh	r2, [r3, #0]
	//if(uMainWait_tm)	--uMainWait_tm;
	if (u16_RFMNChkCnt)
 8001d82:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <TIM3_IRQHandler+0x204>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <TIM3_IRQHandler+0x182>
		--u16_RFMNChkCnt;
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <TIM3_IRQHandler+0x204>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <TIM3_IRQHandler+0x204>)
 8001d94:	801a      	strh	r2, [r3, #0]
	if (LKSeqDlyTime)
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <TIM3_IRQHandler+0x208>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <TIM3_IRQHandler+0x196>
		--LKSeqDlyTime;
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <TIM3_IRQHandler+0x208>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <TIM3_IRQHandler+0x208>)
 8001da8:	801a      	strh	r2, [r3, #0]
	if ( Bcon_dly)
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <TIM3_IRQHandler+0x20c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <TIM3_IRQHandler+0x1a8>
		--Bcon_dly;
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <TIM3_IRQHandler+0x20c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <TIM3_IRQHandler+0x20c>)
 8001dba:	6013      	str	r3, [r2, #0]
	if ( RTK_check_flag )
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <TIM3_IRQHandler+0x210>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <TIM3_IRQHandler+0x1c2>
	{
		if ( RTK_check_dly )
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <TIM3_IRQHandler+0x214>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <TIM3_IRQHandler+0x1c2>
		--RTK_check_dly;
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <TIM3_IRQHandler+0x214>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <TIM3_IRQHandler+0x214>)
 8001dd4:	6013      	str	r3, [r2, #0]
	}
	

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8001dd6:	4815      	ldr	r0, [pc, #84]	; (8001e2c <TIM3_IRQHandler+0x218>)
 8001dd8:	f00a ff06 	bl	800cbe8 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000d60 	.word	0x20000d60
 8001de4:	2000002c 	.word	0x2000002c
 8001de8:	20000cf4 	.word	0x20000cf4
 8001dec:	88888889 	.word	0x88888889
 8001df0:	51eb851f 	.word	0x51eb851f
 8001df4:	10624dd3 	.word	0x10624dd3
 8001df8:	20000cdc 	.word	0x20000cdc
 8001dfc:	20000ce8 	.word	0x20000ce8
 8001e00:	20000d20 	.word	0x20000d20
 8001e04:	20000d22 	.word	0x20000d22
 8001e08:	20000d24 	.word	0x20000d24
 8001e0c:	20000d26 	.word	0x20000d26
 8001e10:	20000d56 	.word	0x20000d56
 8001e14:	20000d3a 	.word	0x20000d3a
 8001e18:	20000d3c 	.word	0x20000d3c
 8001e1c:	20000d5a 	.word	0x20000d5a
 8001e20:	20000df0 	.word	0x20000df0
 8001e24:	20000cd8 	.word	0x20000cd8
 8001e28:	20000cd4 	.word	0x20000cd4
 8001e2c:	20000364 	.word	0x20000364

08001e30 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <TIM4_IRQHandler+0x10>)
 8001e36:	f00a fed7 	bl	800cbe8 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200003ac 	.word	0x200003ac

08001e44 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <USART1_IRQHandler+0x10>)
 8001e4a:	f00b fe13 	bl	800da74 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000043c 	.word	0x2000043c

08001e58 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <USART2_IRQHandler+0x10>)
 8001e5e:	f00b fe09 	bl	800da74 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000484 	.word	0x20000484

08001e6c <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <USART3_IRQHandler+0x10>)
 8001e72:	f00b fdff 	bl	800da74 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200004cc 	.word	0x200004cc

08001e80 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */

	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <UART4_IRQHandler+0x10>)
 8001e86:	f00b fdf5 	bl	800da74 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200003f4 	.word	0x200003f4

08001e94 <DMA2_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA2 channel3 global interrupt.
 */
void DMA2_Channel3_IRQHandler(void) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

	/* USER CODE END DMA2_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <DMA2_Channel3_IRQHandler+0x10>)
 8001e9a:	f008 fab1 	bl	800a400 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

	/* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000514 	.word	0x20000514

08001ea8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return 1;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <_kill>:

int _kill(int pid, int sig)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ec0:	f00c fcde 	bl	800e880 <__errno>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2216      	movs	r2, #22
 8001ec8:	601a      	str	r2, [r3, #0]
  return -1;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <_exit>:

void _exit (int status)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ede:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffe7 	bl	8001eb6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ee8:	e7fe      	b.n	8001ee8 <_exit+0x12>

08001eea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e00a      	b.n	8001f12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001efc:	f3af 8000 	nop.w
 8001f00:	4601      	mov	r1, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	60ba      	str	r2, [r7, #8]
 8001f08:	b2ca      	uxtb	r2, r1
 8001f0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	dbf0      	blt.n	8001efc <_read+0x12>
  }

  return len;
 8001f1a:	687b      	ldr	r3, [r7, #4]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	e009      	b.n	8001f4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	60ba      	str	r2, [r7, #8]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3301      	adds	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	dbf1      	blt.n	8001f36 <_write+0x12>
  }
  return len;
 8001f52:	687b      	ldr	r3, [r7, #4]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_close>:

int _close(int file)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f82:	605a      	str	r2, [r3, #4]
  return 0;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <_isatty>:

int _isatty(int file)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f98:	2301      	movs	r3, #1
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f00c fc48 	bl	800e880 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2000c000 	.word	0x2000c000
 800201c:	00000400 	.word	0x00000400
 8002020:	20000360 	.word	0x20000360
 8002024:	20000e10 	.word	0x20000e10

08002028 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002048:	463b      	mov	r3, r7
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <MX_TIM3_Init+0x94>)
 8002052:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <MX_TIM3_Init+0x98>)
 8002054:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <MX_TIM3_Init+0x94>)
 8002058:	f240 22cf 	movw	r2, #719	; 0x2cf
 800205c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <MX_TIM3_Init+0x94>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <MX_TIM3_Init+0x94>)
 8002066:	2263      	movs	r2, #99	; 0x63
 8002068:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <MX_TIM3_Init+0x94>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <MX_TIM3_Init+0x94>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002076:	4814      	ldr	r0, [pc, #80]	; (80020c8 <MX_TIM3_Init+0x94>)
 8002078:	f00a fbf4 	bl	800c864 <HAL_TIM_Base_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002082:	f7ff fc96 	bl	80019b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4619      	mov	r1, r3
 8002092:	480d      	ldr	r0, [pc, #52]	; (80020c8 <MX_TIM3_Init+0x94>)
 8002094:	f00a ff72 	bl	800cf7c <HAL_TIM_ConfigClockSource>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800209e:	f7ff fc88 	bl	80019b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020aa:	463b      	mov	r3, r7
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	; (80020c8 <MX_TIM3_Init+0x94>)
 80020b0:	f00b fb38 	bl	800d724 <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80020ba:	f7ff fc7a 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000364 	.word	0x20000364
 80020cc:	40000400 	.word	0x40000400

080020d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08e      	sub	sp, #56	; 0x38
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
 80020fc:	615a      	str	r2, [r3, #20]
 80020fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002100:	4b32      	ldr	r3, [pc, #200]	; (80021cc <MX_TIM4_Init+0xfc>)
 8002102:	4a33      	ldr	r2, [pc, #204]	; (80021d0 <MX_TIM4_Init+0x100>)
 8002104:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8002106:	4b31      	ldr	r3, [pc, #196]	; (80021cc <MX_TIM4_Init+0xfc>)
 8002108:	2247      	movs	r2, #71	; 0x47
 800210a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210c:	4b2f      	ldr	r3, [pc, #188]	; (80021cc <MX_TIM4_Init+0xfc>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002112:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <MX_TIM4_Init+0xfc>)
 8002114:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002118:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <MX_TIM4_Init+0xfc>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002120:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <MX_TIM4_Init+0xfc>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002126:	4829      	ldr	r0, [pc, #164]	; (80021cc <MX_TIM4_Init+0xfc>)
 8002128:	f00a fb9c 	bl	800c864 <HAL_TIM_Base_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002132:	f7ff fc3e 	bl	80019b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800213c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002140:	4619      	mov	r1, r3
 8002142:	4822      	ldr	r0, [pc, #136]	; (80021cc <MX_TIM4_Init+0xfc>)
 8002144:	f00a ff1a 	bl	800cf7c <HAL_TIM_ConfigClockSource>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800214e:	f7ff fc30 	bl	80019b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002152:	481e      	ldr	r0, [pc, #120]	; (80021cc <MX_TIM4_Init+0xfc>)
 8002154:	f00a fc36 	bl	800c9c4 <HAL_TIM_PWM_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800215e:	f7ff fc28 	bl	80019b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800216a:	f107 0320 	add.w	r3, r7, #32
 800216e:	4619      	mov	r1, r3
 8002170:	4816      	ldr	r0, [pc, #88]	; (80021cc <MX_TIM4_Init+0xfc>)
 8002172:	f00b fad7 	bl	800d724 <HAL_TIMEx_MasterConfigSynchronization>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800217c:	f7ff fc19 	bl	80019b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002180:	2360      	movs	r3, #96	; 0x60
 8002182:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	2208      	movs	r2, #8
 8002194:	4619      	mov	r1, r3
 8002196:	480d      	ldr	r0, [pc, #52]	; (80021cc <MX_TIM4_Init+0xfc>)
 8002198:	f00a fe2e 	bl	800cdf8 <HAL_TIM_PWM_ConfigChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80021a2:	f7ff fc06 	bl	80019b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	220c      	movs	r2, #12
 80021aa:	4619      	mov	r1, r3
 80021ac:	4807      	ldr	r0, [pc, #28]	; (80021cc <MX_TIM4_Init+0xfc>)
 80021ae:	f00a fe23 	bl	800cdf8 <HAL_TIM_PWM_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80021b8:	f7ff fbfb 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021bc:	4803      	ldr	r0, [pc, #12]	; (80021cc <MX_TIM4_Init+0xfc>)
 80021be:	f000 f84b 	bl	8002258 <HAL_TIM_MspPostInit>

}
 80021c2:	bf00      	nop
 80021c4:	3738      	adds	r7, #56	; 0x38
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200003ac 	.word	0x200003ac
 80021d0:	40000800 	.word	0x40000800

080021d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1a      	ldr	r2, [pc, #104]	; (800224c <HAL_TIM_Base_MspInit+0x78>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d114      	bne.n	8002210 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_TIM_Base_MspInit+0x7c>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_TIM_Base_MspInit+0x7c>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	61d3      	str	r3, [r2, #28]
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_TIM_Base_MspInit+0x7c>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	201d      	movs	r0, #29
 8002204:	f007 fd2d 	bl	8009c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002208:	201d      	movs	r0, #29
 800220a:	f007 fd46 	bl	8009c9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800220e:	e018      	b.n	8002242 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <HAL_TIM_Base_MspInit+0x80>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d113      	bne.n	8002242 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_TIM_Base_MspInit+0x7c>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <HAL_TIM_Base_MspInit+0x7c>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	61d3      	str	r3, [r2, #28]
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_TIM_Base_MspInit+0x7c>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2100      	movs	r1, #0
 8002236:	201e      	movs	r0, #30
 8002238:	f007 fd13 	bl	8009c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800223c:	201e      	movs	r0, #30
 800223e:	f007 fd2c 	bl	8009c9a <HAL_NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40000400 	.word	0x40000400
 8002250:	40021000 	.word	0x40021000
 8002254:	40000800 	.word	0x40000800

08002258 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_TIM_MspPostInit+0x78>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d126      	bne.n	80022c6 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <HAL_TIM_MspPostInit+0x7c>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <HAL_TIM_MspPostInit+0x7c>)
 800227e:	f043 0320 	orr.w	r3, r3, #32
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_TIM_MspPostInit+0x7c>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002290:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002294:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2302      	movs	r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	4619      	mov	r1, r3
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <HAL_TIM_MspPostInit+0x80>)
 80022a6:	f008 fb15 	bl	800a8d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_TIM_MspPostInit+0x84>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	4a06      	ldr	r2, [pc, #24]	; (80022dc <HAL_TIM_MspPostInit+0x84>)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40000800 	.word	0x40000800
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40011400 	.word	0x40011400
 80022dc:	40010000 	.word	0x40010000

080022e0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <MX_UART4_Init+0x4c>)
 80022e6:	4a12      	ldr	r2, [pc, #72]	; (8002330 <MX_UART4_Init+0x50>)
 80022e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <MX_UART4_Init+0x4c>)
 80022ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <MX_UART4_Init+0x4c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <MX_UART4_Init+0x4c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <MX_UART4_Init+0x4c>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <MX_UART4_Init+0x4c>)
 8002306:	220c      	movs	r2, #12
 8002308:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <MX_UART4_Init+0x4c>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <MX_UART4_Init+0x4c>)
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002316:	4805      	ldr	r0, [pc, #20]	; (800232c <MX_UART4_Init+0x4c>)
 8002318:	f00b fa82 	bl	800d820 <HAL_UART_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002322:	f7ff fb46 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200003f4 	.word	0x200003f4
 8002330:	40004c00 	.word	0x40004c00

08002334 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <MX_USART1_UART_Init+0x4c>)
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <MX_USART1_UART_Init+0x50>)
 800233c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <MX_USART1_UART_Init+0x4c>)
 8002340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_USART1_UART_Init+0x4c>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <MX_USART1_UART_Init+0x4c>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <MX_USART1_UART_Init+0x4c>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <MX_USART1_UART_Init+0x4c>)
 800235a:	220c      	movs	r2, #12
 800235c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <MX_USART1_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <MX_USART1_UART_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_USART1_UART_Init+0x4c>)
 800236c:	f00b fa58 	bl	800d820 <HAL_UART_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002376:	f7ff fb1c 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000043c 	.word	0x2000043c
 8002384:	40013800 	.word	0x40013800

08002388 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <MX_USART2_UART_Init+0x50>)
 8002390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 8002394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023ae:	220c      	movs	r2, #12
 80023b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023c0:	f00b fa2e 	bl	800d820 <HAL_UART_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ca:	f7ff faf2 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000484 	.word	0x20000484
 80023d8:	40004400 	.word	0x40004400

080023dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_USART3_UART_Init+0x4c>)
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <MX_USART3_UART_Init+0x50>)
 80023e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <MX_USART3_UART_Init+0x4c>)
 80023e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_USART3_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_USART3_UART_Init+0x4c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <MX_USART3_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_USART3_UART_Init+0x4c>)
 8002402:	220c      	movs	r2, #12
 8002404:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <MX_USART3_UART_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_USART3_UART_Init+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_USART3_UART_Init+0x4c>)
 8002414:	f00b fa04 	bl	800d820 <HAL_UART_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800241e:	f7ff fac8 	bl	80019b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200004cc 	.word	0x200004cc
 800242c:	40004800 	.word	0x40004800

08002430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b090      	sub	sp, #64	; 0x40
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a9e      	ldr	r2, [pc, #632]	; (80026c4 <HAL_UART_MspInit+0x294>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d160      	bne.n	8002512 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002450:	4b9d      	ldr	r3, [pc, #628]	; (80026c8 <HAL_UART_MspInit+0x298>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4a9c      	ldr	r2, [pc, #624]	; (80026c8 <HAL_UART_MspInit+0x298>)
 8002456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800245a:	61d3      	str	r3, [r2, #28]
 800245c:	4b9a      	ldr	r3, [pc, #616]	; (80026c8 <HAL_UART_MspInit+0x298>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002468:	4b97      	ldr	r3, [pc, #604]	; (80026c8 <HAL_UART_MspInit+0x298>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a96      	ldr	r2, [pc, #600]	; (80026c8 <HAL_UART_MspInit+0x298>)
 800246e:	f043 0310 	orr.w	r3, r3, #16
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b94      	ldr	r3, [pc, #592]	; (80026c8 <HAL_UART_MspInit+0x298>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002492:	4619      	mov	r1, r3
 8002494:	488d      	ldr	r0, [pc, #564]	; (80026cc <HAL_UART_MspInit+0x29c>)
 8002496:	f008 fa1d 	bl	800a8d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800249a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a0:	2300      	movs	r3, #0
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ac:	4619      	mov	r1, r3
 80024ae:	4887      	ldr	r0, [pc, #540]	; (80026cc <HAL_UART_MspInit+0x29c>)
 80024b0:	f008 fa10 	bl	800a8d4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 80024b4:	4b86      	ldr	r3, [pc, #536]	; (80026d0 <HAL_UART_MspInit+0x2a0>)
 80024b6:	4a87      	ldr	r2, [pc, #540]	; (80026d4 <HAL_UART_MspInit+0x2a4>)
 80024b8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ba:	4b85      	ldr	r3, [pc, #532]	; (80026d0 <HAL_UART_MspInit+0x2a0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c0:	4b83      	ldr	r3, [pc, #524]	; (80026d0 <HAL_UART_MspInit+0x2a0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024c6:	4b82      	ldr	r3, [pc, #520]	; (80026d0 <HAL_UART_MspInit+0x2a0>)
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024cc:	4b80      	ldr	r3, [pc, #512]	; (80026d0 <HAL_UART_MspInit+0x2a0>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d2:	4b7f      	ldr	r3, [pc, #508]	; (80026d0 <HAL_UART_MspInit+0x2a0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80024d8:	4b7d      	ldr	r3, [pc, #500]	; (80026d0 <HAL_UART_MspInit+0x2a0>)
 80024da:	2220      	movs	r2, #32
 80024dc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024de:	4b7c      	ldr	r3, [pc, #496]	; (80026d0 <HAL_UART_MspInit+0x2a0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80024e4:	487a      	ldr	r0, [pc, #488]	; (80026d0 <HAL_UART_MspInit+0x2a0>)
 80024e6:	f007 fcf9 	bl	8009edc <HAL_DMA_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80024f0:	f7ff fa5f 	bl	80019b2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a76      	ldr	r2, [pc, #472]	; (80026d0 <HAL_UART_MspInit+0x2a0>)
 80024f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80024fa:	4a75      	ldr	r2, [pc, #468]	; (80026d0 <HAL_UART_MspInit+0x2a0>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	2100      	movs	r1, #0
 8002504:	2034      	movs	r0, #52	; 0x34
 8002506:	f007 fbac 	bl	8009c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800250a:	2034      	movs	r0, #52	; 0x34
 800250c:	f007 fbc5 	bl	8009c9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002510:	e159      	b.n	80027c6 <HAL_UART_MspInit+0x396>
  else if(uartHandle->Instance==USART1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a70      	ldr	r2, [pc, #448]	; (80026d8 <HAL_UART_MspInit+0x2a8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d160      	bne.n	80025de <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART1_CLK_ENABLE();
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_UART_MspInit+0x298>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <HAL_UART_MspInit+0x298>)
 8002522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_UART_MspInit+0x298>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002530:	623b      	str	r3, [r7, #32]
 8002532:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	4b64      	ldr	r3, [pc, #400]	; (80026c8 <HAL_UART_MspInit+0x298>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <HAL_UART_MspInit+0x298>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6193      	str	r3, [r2, #24]
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <HAL_UART_MspInit+0x298>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800254c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255e:	4619      	mov	r1, r3
 8002560:	485e      	ldr	r0, [pc, #376]	; (80026dc <HAL_UART_MspInit+0x2ac>)
 8002562:	f008 f9b7 	bl	800a8d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256c:	2300      	movs	r3, #0
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002578:	4619      	mov	r1, r3
 800257a:	4858      	ldr	r0, [pc, #352]	; (80026dc <HAL_UART_MspInit+0x2ac>)
 800257c:	f008 f9aa 	bl	800a8d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002580:	4b57      	ldr	r3, [pc, #348]	; (80026e0 <HAL_UART_MspInit+0x2b0>)
 8002582:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <HAL_UART_MspInit+0x2b4>)
 8002584:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002586:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <HAL_UART_MspInit+0x2b0>)
 8002588:	2200      	movs	r2, #0
 800258a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800258c:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <HAL_UART_MspInit+0x2b0>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002592:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_UART_MspInit+0x2b0>)
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002598:	4b51      	ldr	r3, [pc, #324]	; (80026e0 <HAL_UART_MspInit+0x2b0>)
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800259e:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <HAL_UART_MspInit+0x2b0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80025a4:	4b4e      	ldr	r3, [pc, #312]	; (80026e0 <HAL_UART_MspInit+0x2b0>)
 80025a6:	2220      	movs	r2, #32
 80025a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025aa:	4b4d      	ldr	r3, [pc, #308]	; (80026e0 <HAL_UART_MspInit+0x2b0>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025b0:	484b      	ldr	r0, [pc, #300]	; (80026e0 <HAL_UART_MspInit+0x2b0>)
 80025b2:	f007 fc93 	bl	8009edc <HAL_DMA_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_MspInit+0x190>
      Error_Handler();
 80025bc:	f7ff f9f9 	bl	80019b2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a47      	ldr	r2, [pc, #284]	; (80026e0 <HAL_UART_MspInit+0x2b0>)
 80025c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80025c6:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <HAL_UART_MspInit+0x2b0>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	2025      	movs	r0, #37	; 0x25
 80025d2:	f007 fb46 	bl	8009c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025d6:	2025      	movs	r0, #37	; 0x25
 80025d8:	f007 fb5f 	bl	8009c9a <HAL_NVIC_EnableIRQ>
}
 80025dc:	e0f3      	b.n	80027c6 <HAL_UART_MspInit+0x396>
  else if(uartHandle->Instance==USART2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a41      	ldr	r2, [pc, #260]	; (80026e8 <HAL_UART_MspInit+0x2b8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	f040 8089 	bne.w	80026fc <HAL_UART_MspInit+0x2cc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <HAL_UART_MspInit+0x298>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4a36      	ldr	r2, [pc, #216]	; (80026c8 <HAL_UART_MspInit+0x298>)
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f4:	61d3      	str	r3, [r2, #28]
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <HAL_UART_MspInit+0x298>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002602:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_UART_MspInit+0x298>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	4a30      	ldr	r2, [pc, #192]	; (80026c8 <HAL_UART_MspInit+0x298>)
 8002608:	f043 0320 	orr.w	r3, r3, #32
 800260c:	6193      	str	r3, [r2, #24]
 800260e:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <HAL_UART_MspInit+0x298>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800261a:	2320      	movs	r3, #32
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262a:	4619      	mov	r1, r3
 800262c:	482f      	ldr	r0, [pc, #188]	; (80026ec <HAL_UART_MspInit+0x2bc>)
 800262e:	f008 f951 	bl	800a8d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002632:	2340      	movs	r3, #64	; 0x40
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002636:	2300      	movs	r3, #0
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800263e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002642:	4619      	mov	r1, r3
 8002644:	4829      	ldr	r0, [pc, #164]	; (80026ec <HAL_UART_MspInit+0x2bc>)
 8002646:	f008 f945 	bl	800a8d4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART2_ENABLE();
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_UART_MspInit+0x2c0>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002652:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265a:	f043 0308 	orr.w	r3, r3, #8
 800265e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002660:	4a23      	ldr	r2, [pc, #140]	; (80026f0 <HAL_UART_MspInit+0x2c0>)
 8002662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002664:	6053      	str	r3, [r2, #4]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <HAL_UART_MspInit+0x2c4>)
 8002668:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <HAL_UART_MspInit+0x2c8>)
 800266a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800266c:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_UART_MspInit+0x2c4>)
 800266e:	2200      	movs	r2, #0
 8002670:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_UART_MspInit+0x2c4>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <HAL_UART_MspInit+0x2c4>)
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_UART_MspInit+0x2c4>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_UART_MspInit+0x2c4>)
 8002686:	2200      	movs	r2, #0
 8002688:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_UART_MspInit+0x2c4>)
 800268c:	2220      	movs	r2, #32
 800268e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <HAL_UART_MspInit+0x2c4>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002696:	4817      	ldr	r0, [pc, #92]	; (80026f4 <HAL_UART_MspInit+0x2c4>)
 8002698:	f007 fc20 	bl	8009edc <HAL_DMA_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_UART_MspInit+0x276>
      Error_Handler();
 80026a2:	f7ff f986 	bl	80019b2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <HAL_UART_MspInit+0x2c4>)
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80026ac:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_UART_MspInit+0x2c4>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	2026      	movs	r0, #38	; 0x26
 80026b8:	f007 fad3 	bl	8009c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026bc:	2026      	movs	r0, #38	; 0x26
 80026be:	f007 faec 	bl	8009c9a <HAL_NVIC_EnableIRQ>
}
 80026c2:	e080      	b.n	80027c6 <HAL_UART_MspInit+0x396>
 80026c4:	40004c00 	.word	0x40004c00
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40011000 	.word	0x40011000
 80026d0:	20000514 	.word	0x20000514
 80026d4:	40020430 	.word	0x40020430
 80026d8:	40013800 	.word	0x40013800
 80026dc:	40010800 	.word	0x40010800
 80026e0:	20000558 	.word	0x20000558
 80026e4:	40020058 	.word	0x40020058
 80026e8:	40004400 	.word	0x40004400
 80026ec:	40011400 	.word	0x40011400
 80026f0:	40010000 	.word	0x40010000
 80026f4:	2000059c 	.word	0x2000059c
 80026f8:	4002006c 	.word	0x4002006c
  else if(uartHandle->Instance==USART3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a33      	ldr	r2, [pc, #204]	; (80027d0 <HAL_UART_MspInit+0x3a0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d15f      	bne.n	80027c6 <HAL_UART_MspInit+0x396>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002706:	4b33      	ldr	r3, [pc, #204]	; (80027d4 <HAL_UART_MspInit+0x3a4>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a32      	ldr	r2, [pc, #200]	; (80027d4 <HAL_UART_MspInit+0x3a4>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002710:	61d3      	str	r3, [r2, #28]
 8002712:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <HAL_UART_MspInit+0x3a4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_UART_MspInit+0x3a4>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	4a2c      	ldr	r2, [pc, #176]	; (80027d4 <HAL_UART_MspInit+0x3a4>)
 8002724:	f043 0308 	orr.w	r3, r3, #8
 8002728:	6193      	str	r3, [r2, #24]
 800272a:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_UART_MspInit+0x3a4>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002748:	4619      	mov	r1, r3
 800274a:	4823      	ldr	r0, [pc, #140]	; (80027d8 <HAL_UART_MspInit+0x3a8>)
 800274c:	f008 f8c2 	bl	800a8d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002756:	2300      	movs	r3, #0
 8002758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002762:	4619      	mov	r1, r3
 8002764:	481c      	ldr	r0, [pc, #112]	; (80027d8 <HAL_UART_MspInit+0x3a8>)
 8002766:	f008 f8b5 	bl	800a8d4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800276a:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <HAL_UART_MspInit+0x3ac>)
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_UART_MspInit+0x3b0>)
 800276e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002770:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <HAL_UART_MspInit+0x3ac>)
 8002772:	2200      	movs	r2, #0
 8002774:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_UART_MspInit+0x3ac>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800277c:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_UART_MspInit+0x3ac>)
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <HAL_UART_MspInit+0x3ac>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_UART_MspInit+0x3ac>)
 800278a:	2200      	movs	r2, #0
 800278c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <HAL_UART_MspInit+0x3ac>)
 8002790:	2220      	movs	r2, #32
 8002792:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_UART_MspInit+0x3ac>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800279a:	4810      	ldr	r0, [pc, #64]	; (80027dc <HAL_UART_MspInit+0x3ac>)
 800279c:	f007 fb9e 	bl	8009edc <HAL_DMA_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_UART_MspInit+0x37a>
      Error_Handler();
 80027a6:	f7ff f904 	bl	80019b2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <HAL_UART_MspInit+0x3ac>)
 80027ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_UART_MspInit+0x3ac>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	2027      	movs	r0, #39	; 0x27
 80027bc:	f007 fa51 	bl	8009c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027c0:	2027      	movs	r0, #39	; 0x27
 80027c2:	f007 fa6a 	bl	8009c9a <HAL_NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3740      	adds	r7, #64	; 0x40
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40004800 	.word	0x40004800
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40010c00 	.word	0x40010c00
 80027dc:	200005e0 	.word	0x200005e0
 80027e0:	40020030 	.word	0x40020030

080027e4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART4)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a31      	ldr	r2, [pc, #196]	; (80028b8 <HAL_UART_MspDeInit+0xd4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d113      	bne.n	800281e <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <HAL_UART_MspDeInit+0xd8>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a30      	ldr	r2, [pc, #192]	; (80028bc <HAL_UART_MspDeInit+0xd8>)
 80027fc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002800:	61d3      	str	r3, [r2, #28]

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8002802:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002806:	482e      	ldr	r0, [pc, #184]	; (80028c0 <HAL_UART_MspDeInit+0xdc>)
 8002808:	f008 f9f8 	bl	800abfc <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002810:	4618      	mov	r0, r3
 8002812:	f007 fbd9 	bl	8009fc8 <HAL_DMA_DeInit>

    /* UART4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8002816:	2034      	movs	r0, #52	; 0x34
 8002818:	f007 fa4d 	bl	8009cb6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 800281c:	e048      	b.n	80028b0 <HAL_UART_MspDeInit+0xcc>
  else if(uartHandle->Instance==USART1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a28      	ldr	r2, [pc, #160]	; (80028c4 <HAL_UART_MspDeInit+0xe0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d113      	bne.n	8002850 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART1_CLK_DISABLE();
 8002828:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_UART_MspDeInit+0xd8>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4a23      	ldr	r2, [pc, #140]	; (80028bc <HAL_UART_MspDeInit+0xd8>)
 800282e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002832:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002834:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002838:	4823      	ldr	r0, [pc, #140]	; (80028c8 <HAL_UART_MspDeInit+0xe4>)
 800283a:	f008 f9df 	bl	800abfc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002842:	4618      	mov	r0, r3
 8002844:	f007 fbc0 	bl	8009fc8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002848:	2025      	movs	r0, #37	; 0x25
 800284a:	f007 fa34 	bl	8009cb6 <HAL_NVIC_DisableIRQ>
}
 800284e:	e02f      	b.n	80028b0 <HAL_UART_MspDeInit+0xcc>
  else if(uartHandle->Instance==USART2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_UART_MspDeInit+0xe8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d112      	bne.n	8002880 <HAL_UART_MspDeInit+0x9c>
    __HAL_RCC_USART2_CLK_DISABLE();
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_UART_MspDeInit+0xd8>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_UART_MspDeInit+0xd8>)
 8002860:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002864:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 8002866:	2160      	movs	r1, #96	; 0x60
 8002868:	4819      	ldr	r0, [pc, #100]	; (80028d0 <HAL_UART_MspDeInit+0xec>)
 800286a:	f008 f9c7 	bl	800abfc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	4618      	mov	r0, r3
 8002874:	f007 fba8 	bl	8009fc8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002878:	2026      	movs	r0, #38	; 0x26
 800287a:	f007 fa1c 	bl	8009cb6 <HAL_NVIC_DisableIRQ>
}
 800287e:	e017      	b.n	80028b0 <HAL_UART_MspDeInit+0xcc>
  else if(uartHandle->Instance==USART3)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <HAL_UART_MspDeInit+0xf0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d112      	bne.n	80028b0 <HAL_UART_MspDeInit+0xcc>
    __HAL_RCC_USART3_CLK_DISABLE();
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <HAL_UART_MspDeInit+0xd8>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <HAL_UART_MspDeInit+0xd8>)
 8002890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002894:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8002896:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800289a:	480f      	ldr	r0, [pc, #60]	; (80028d8 <HAL_UART_MspDeInit+0xf4>)
 800289c:	f008 f9ae 	bl	800abfc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a4:	4618      	mov	r0, r3
 80028a6:	f007 fb8f 	bl	8009fc8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80028aa:	2027      	movs	r0, #39	; 0x27
 80028ac:	f007 fa03 	bl	8009cb6 <HAL_NVIC_DisableIRQ>
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40004c00 	.word	0x40004c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40013800 	.word	0x40013800
 80028c8:	40010800 	.word	0x40010800
 80028cc:	40004400 	.word	0x40004400
 80028d0:	40011400 	.word	0x40011400
 80028d4:	40004800 	.word	0x40004800
 80028d8:	40010c00 	.word	0x40010c00

080028dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028dc:	f7ff fba4 	bl	8002028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480b      	ldr	r0, [pc, #44]	; (8002910 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028e2:	490c      	ldr	r1, [pc, #48]	; (8002914 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028e4:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a09      	ldr	r2, [pc, #36]	; (800291c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028f8:	4c09      	ldr	r4, [pc, #36]	; (8002920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002906:	f00b ffc1 	bl	800e88c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290a:	f7fe ff57 	bl	80017bc <main>
  bx lr
 800290e:	4770      	bx	lr
  ldr r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002914:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002918:	0801330c 	.word	0x0801330c
  ldr r2, =_sbss
 800291c:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8002920:	20000e0c 	.word	0x20000e0c

08002924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002924:	e7fe      	b.n	8002924 <ADC1_2_IRQHandler>

08002926 <at24_HAL_WriteBytes>:
  * @param	pData	     : Pointer to data buffer
  * @param  TxBufferSize : Amount of data you wanna Write
  * @retval
  */
int at24_HAL_WriteBytes(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress, uint8_t *pData,uint16_t TxBufferSize)
{
 8002926:	b590      	push	{r4, r7, lr}
 8002928:	b089      	sub	sp, #36	; 0x24
 800292a:	af04      	add	r7, sp, #16
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	817b      	strh	r3, [r7, #10]
 8002934:	4613      	mov	r3, r2
 8002936:	813b      	strh	r3, [r7, #8]
	 * You know that the most of the EEprom address start with 0xA0
	 * give MemAddress for the location you want to write to
	 * give Data buffer so it can write Data on this location
	 */
	//Note that this function works properly to 31 bytes
	if(MemAddress+TxBufferSize > 16)
 8002938:	893a      	ldrh	r2, [r7, #8]
 800293a:	8c3b      	ldrh	r3, [r7, #32]
 800293c:	4413      	add	r3, r2
 800293e:	2b10      	cmp	r3, #16
 8002940:	dd4f      	ble.n	80029e2 <at24_HAL_WriteBytes+0xbc>
	{
		//Write to 16bytes
		while(HAL_I2C_Mem_Write(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)16-MemAddress,1000)!= HAL_OK);
 8002942:	bf00      	nop
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	893b      	ldrh	r3, [r7, #8]
 8002948:	f1c3 0310 	rsb	r3, r3, #16
 800294c:	b29b      	uxth	r3, r3
 800294e:	893a      	ldrh	r2, [r7, #8]
 8002950:	8979      	ldrh	r1, [r7, #10]
 8002952:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002956:	9402      	str	r4, [sp, #8]
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2301      	movs	r3, #1
 8002960:	f008 fba4 	bl	800b0ac <HAL_I2C_Mem_Write>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ec      	bne.n	8002944 <at24_HAL_WriteBytes+0x1e>
		//write remaining bytes
		*pData = *pData + (16-MemAddress);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	893b      	ldrh	r3, [r7, #8]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3310      	adds	r3, #16
 8002978:	b2da      	uxtb	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	701a      	strb	r2, [r3, #0]
		while(HAL_I2C_Mem_Write(hi2c,(uint16_t)DevAddress,(uint16_t)16,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)((MemAddress+TxBufferSize)-16),1000)!= HAL_OK);
 800297e:	bf00      	nop
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	893a      	ldrh	r2, [r7, #8]
 8002984:	8c3b      	ldrh	r3, [r7, #32]
 8002986:	4413      	add	r3, r2
 8002988:	b29b      	uxth	r3, r3
 800298a:	3b10      	subs	r3, #16
 800298c:	b29b      	uxth	r3, r3
 800298e:	8979      	ldrh	r1, [r7, #10]
 8002990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002994:	9202      	str	r2, [sp, #8]
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2301      	movs	r3, #1
 800299e:	2210      	movs	r2, #16
 80029a0:	f008 fb84 	bl	800b0ac <HAL_I2C_Mem_Write>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1ea      	bne.n	8002980 <at24_HAL_WriteBytes+0x5a>
 80029aa:	e02e      	b.n	8002a0a <at24_HAL_WriteBytes+0xe4>
	else
	{
			while( (TxBufferSize-16)>0 )
			{
				//if your data is more than 16 bytes,you are here
				 while(HAL_I2C_Mem_Write(&hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)16,1000)!= HAL_OK);
 80029ac:	bf00      	nop
 80029ae:	893a      	ldrh	r2, [r7, #8]
 80029b0:	8979      	ldrh	r1, [r7, #10]
 80029b2:	f107 000c 	add.w	r0, r7, #12
 80029b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ba:	9302      	str	r3, [sp, #8]
 80029bc:	2310      	movs	r3, #16
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2301      	movs	r3, #1
 80029c6:	f008 fb71 	bl	800b0ac <HAL_I2C_Mem_Write>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ee      	bne.n	80029ae <at24_HAL_WriteBytes+0x88>
				 TxBufferSize-=16;
 80029d0:	8c3b      	ldrh	r3, [r7, #32]
 80029d2:	3b10      	subs	r3, #16
 80029d4:	843b      	strh	r3, [r7, #32]
				 pData+=16;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3310      	adds	r3, #16
 80029da:	607b      	str	r3, [r7, #4]
				 MemAddress+=16;
 80029dc:	893b      	ldrh	r3, [r7, #8]
 80029de:	3310      	adds	r3, #16
 80029e0:	813b      	strh	r3, [r7, #8]
			while( (TxBufferSize-16)>0 )
 80029e2:	8c3b      	ldrh	r3, [r7, #32]
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d8e1      	bhi.n	80029ac <at24_HAL_WriteBytes+0x86>
			}
			//remaining data
			while(HAL_I2C_Mem_Write(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)TxBufferSize,1000)!= HAL_OK);
 80029e8:	bf00      	nop
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	893a      	ldrh	r2, [r7, #8]
 80029ee:	8979      	ldrh	r1, [r7, #10]
 80029f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f4:	9302      	str	r3, [sp, #8]
 80029f6:	8c3b      	ldrh	r3, [r7, #32]
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2301      	movs	r3, #1
 8002a00:	f008 fb54 	bl	800b0ac <HAL_I2C_Mem_Write>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1ef      	bne.n	80029ea <at24_HAL_WriteBytes+0xc4>
	}
	return 1;
 8002a0a:	2301      	movs	r3, #1
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd90      	pop	{r4, r7, pc}

08002a14 <at24_HAL_ReadBytes>:


int at24_HAL_ReadBytes(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress, uint8_t *pData,uint16_t RxBufferSize)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af04      	add	r7, sp, #16
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	817b      	strh	r3, [r7, #10]
 8002a22:	4613      	mov	r3, r2
 8002a24:	813b      	strh	r3, [r7, #8]
	 * get the MemAddress for the location you want to write data on it
	 * get the Data buffer so it can write Data on this location
	 */
	//Note that this function works properly to 31bytes

			while( (RxBufferSize-16)>0 )
 8002a26:	e021      	b.n	8002a6c <at24_HAL_ReadBytes+0x58>
			{
				//if your data is more than 16 bytes,you are here
				TimeOut = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
				 while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)16,1000)!= HAL_OK && TimeOut < 10)
 8002a2c:	e002      	b.n	8002a34 <at24_HAL_ReadBytes+0x20>
				 {
						TimeOut++;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
				 while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)16,1000)!= HAL_OK && TimeOut < 10)
 8002a34:	893a      	ldrh	r2, [r7, #8]
 8002a36:	8979      	ldrh	r1, [r7, #10]
 8002a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3c:	9302      	str	r3, [sp, #8]
 8002a3e:	2310      	movs	r3, #16
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2301      	movs	r3, #1
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f008 fc29 	bl	800b2a0 <HAL_I2C_Mem_Read>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <at24_HAL_ReadBytes+0x46>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b09      	cmp	r3, #9
 8002a58:	dde9      	ble.n	8002a2e <at24_HAL_ReadBytes+0x1a>
				 }

				 RxBufferSize-=16;
 8002a5a:	8c3b      	ldrh	r3, [r7, #32]
 8002a5c:	3b10      	subs	r3, #16
 8002a5e:	843b      	strh	r3, [r7, #32]
				 pData+=16;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3310      	adds	r3, #16
 8002a64:	607b      	str	r3, [r7, #4]
				 MemAddress+=16;
 8002a66:	893b      	ldrh	r3, [r7, #8]
 8002a68:	3310      	adds	r3, #16
 8002a6a:	813b      	strh	r3, [r7, #8]
			while( (RxBufferSize-16)>0 )
 8002a6c:	8c3b      	ldrh	r3, [r7, #32]
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d8da      	bhi.n	8002a28 <at24_HAL_ReadBytes+0x14>
			}
//			//remaining data
			TimeOut = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
			while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)RxBufferSize,1000)!= HAL_OK && TimeOut < 10)
 8002a76:	e002      	b.n	8002a7e <at24_HAL_ReadBytes+0x6a>
			{
				TimeOut++;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
			while(HAL_I2C_Mem_Read(hi2c,(uint16_t)DevAddress,(uint16_t)MemAddress,I2C_MEMADD_SIZE_8BIT,pData,(uint16_t)RxBufferSize,1000)!= HAL_OK && TimeOut < 10)
 8002a7e:	893a      	ldrh	r2, [r7, #8]
 8002a80:	8979      	ldrh	r1, [r7, #10]
 8002a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a86:	9302      	str	r3, [sp, #8]
 8002a88:	8c3b      	ldrh	r3, [r7, #32]
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2301      	movs	r3, #1
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f008 fc04 	bl	800b2a0 <HAL_I2C_Mem_Read>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <at24_HAL_ReadBytes+0x90>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b09      	cmp	r3, #9
 8002aa2:	dde9      	ble.n	8002a78 <at24_HAL_ReadBytes+0x64>
			}

	return 1;
 8002aa4:	2301      	movs	r3, #1
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <ADC_DMA_AVERAGE>:
uint8_t remote_value;

void get_remote_val();

uint16_t ADC_DMA_AVERAGE(int channel)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum;
	int i;
	
	adc_sum = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
	if(channel < NUMBER_ADC_CHANNEL )
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	dc14      	bgt.n	8002aec <ADC_DMA_AVERAGE+0x3c>
	{
		for(i=0; i<NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL; i++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	e00d      	b.n	8002ae4 <ADC_DMA_AVERAGE+0x34>
			adc_sum += ADC_DMA_BUFF[channel+i*NUMBER_ADC_CHANNEL];
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	009a      	lsls	r2, r3, #2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4413      	add	r3, r2
 8002ad0:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <ADC_DMA_AVERAGE+0x50>)
 8002ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
		for(i=0; i<NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL; i++)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b07      	cmp	r3, #7
 8002ae8:	ddee      	ble.n	8002ac8 <ADC_DMA_AVERAGE+0x18>
 8002aea:	e001      	b.n	8002af0 <ADC_DMA_AVERAGE+0x40>
	}
	else
		return 1;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e002      	b.n	8002af6 <ADC_DMA_AVERAGE+0x46>
	
	return adc_sum/NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	08db      	lsrs	r3, r3, #3
 8002af4:	b29b      	uxth	r3, r3
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	20000624 	.word	0x20000624

08002b04 <bsp_adc_init>:


uint32_t adc_value[3];

void bsp_adc_init()
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_DMA_BUFF, NUMBER_ADC_CHANNEL * NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL);
 8002b08:	2220      	movs	r2, #32
 8002b0a:	4903      	ldr	r1, [pc, #12]	; (8002b18 <bsp_adc_init+0x14>)
 8002b0c:	4803      	ldr	r0, [pc, #12]	; (8002b1c <bsp_adc_init+0x18>)
 8002b0e:	f005 fe71 	bl	80087f4 <HAL_ADC_Start_DMA>
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000624 	.word	0x20000624
 8002b1c:	20000240 	.word	0x20000240

08002b20 <get_adc_value>:

void get_adc_value()
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
	get_remote_val();
 8002b24:	f000 f8a4 	bl	8002c70 <get_remote_val>
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <map_function>:




float map_function(float x, float in_min, float in_max, float out_min, float out_max) 
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7fe f865 	bl	8000c0c <__aeabi_fsub>
 8002b42:	4603      	mov	r3, r0
 8002b44:	461c      	mov	r4, r3
 8002b46:	6839      	ldr	r1, [r7, #0]
 8002b48:	6a38      	ldr	r0, [r7, #32]
 8002b4a:	f7fe f85f 	bl	8000c0c <__aeabi_fsub>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4619      	mov	r1, r3
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7fe f964 	bl	8000e20 <__aeabi_fmul>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461c      	mov	r4, r3
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe f854 	bl	8000c0c <__aeabi_fsub>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4619      	mov	r1, r3
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7fe fa0d 	bl	8000f88 <__aeabi_fdiv>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6839      	ldr	r1, [r7, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe f84c 	bl	8000c10 <__addsf3>
 8002b78:	4603      	mov	r3, r0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}

08002b82 <multiMap>:


float multiMap(float val, float* _in, float* _out, uint16_t size){
 8002b82:	b590      	push	{r4, r7, lr}
 8002b84:	b089      	sub	sp, #36	; 0x24
 8002b86:	af02      	add	r7, sp, #8
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	807b      	strh	r3, [r7, #2]
    if (val <= _in[0]) return _out[0];
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f7fe faea 	bl	8001170 <__aeabi_fcmple>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <multiMap+0x26>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	e05c      	b.n	8002c62 <multiMap+0xe0>
    if (val >= _in[size-1]) return _out[size-1];
 8002ba8:	887b      	ldrh	r3, [r7, #2]
 8002baa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7fe fae2 	bl	8001184 <__aeabi_fcmpge>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <multiMap+0x56>
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e044      	b.n	8002c62 <multiMap+0xe0>
    uint8_t pos = 1; 
 8002bd8:	2301      	movs	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
    while(val > _in[pos]) pos++;
 8002bdc:	e002      	b.n	8002be4 <multiMap+0x62>
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	3301      	adds	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	4413      	add	r3, r2
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7fe fad1 	bl	8001198 <__aeabi_fcmpgt>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <multiMap+0x5c>
    if (val == _in[pos]) return _out[pos];
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	4413      	add	r3, r2
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7fe fa9d 	bl	8001148 <__aeabi_fcmpeq>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <multiMap+0x9e>
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	e020      	b.n	8002c62 <multiMap+0xe0>
    return map_function(val, _in[pos-1], _in[pos], _out[pos-1], _out[pos]);
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c26:	3b01      	subs	r3, #1
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	4413      	add	r3, r2
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c40:	3b01      	subs	r3, #1
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	681c      	ldr	r4, [r3, #0]
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	4623      	mov	r3, r4
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff ff66 	bl	8002b2c <map_function>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd90      	pop	{r4, r7, pc}
 8002c6a:	0000      	movs	r0, r0
 8002c6c:	0000      	movs	r0, r0
	...

08002c70 <get_remote_val>:



void get_remote_val()
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	V_Battery = ((60.5 * ADC_DMA_AVERAGE(0))/4095)-1; 
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7ff ff1b 	bl	8002ab0 <ADC_DMA_AVERAGE>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc37 	bl	80004f0 <__aeabi_i2d>
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <get_remote_val+0xd8>)
 8002c88:	f7fd fc9c 	bl	80005c4 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	a32a      	add	r3, pc, #168	; (adr r3, 8002d40 <get_remote_val+0xd0>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f7fd fdbd 	bl	8000818 <__aeabi_ddiv>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <get_remote_val+0xdc>)
 8002cac:	f7fd fad2 	bl	8000254 <__aeabi_dsub>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fd ff54 	bl	8000b64 <__aeabi_d2f>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <get_remote_val+0xe0>)
 8002cc0:	6013      	str	r3, [r2, #0]
    outValue = multiMap(ADC_DMA_AVERAGE(1), &remoteAdc, &remoteMpa, Speed_MAX_SIZE);
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f7ff fef4 	bl	8002ab0 <ADC_DMA_AVERAGE>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe f850 	bl	8000d70 <__aeabi_ui2f>
 8002cd0:	2305      	movs	r3, #5
 8002cd2:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <get_remote_val+0xe4>)
 8002cd4:	4920      	ldr	r1, [pc, #128]	; (8002d58 <get_remote_val+0xe8>)
 8002cd6:	f7ff ff54 	bl	8002b82 <multiMap>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <get_remote_val+0xec>)
 8002cde:	6013      	str	r3, [r2, #0]
	remote_value = (uint8_t)outValue ;
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <get_remote_val+0xec>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe fa77 	bl	80011d8 <__aeabi_f2uiz>
 8002cea:	4603      	mov	r3, r0
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <get_remote_val+0xf0>)
 8002cf0:	701a      	strb	r2, [r3, #0]
	
	if(remote_value <= 120)
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <get_remote_val+0xf0>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b78      	cmp	r3, #120	; 0x78
 8002cf8:	d803      	bhi.n	8002d02 <get_remote_val+0x92>
		DRV_Speed = 1;
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <get_remote_val+0xf4>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
		DRV_Speed = 4;
	else
		DRV_Speed = 5;


}
 8002d00:	e01a      	b.n	8002d38 <get_remote_val+0xc8>
	else if(remote_value <= 140)
 8002d02:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <get_remote_val+0xf0>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b8c      	cmp	r3, #140	; 0x8c
 8002d08:	d803      	bhi.n	8002d12 <get_remote_val+0xa2>
		DRV_Speed = 2;
 8002d0a:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <get_remote_val+0xf4>)
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
}
 8002d10:	e012      	b.n	8002d38 <get_remote_val+0xc8>
	else if(remote_value <= 160)
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <get_remote_val+0xf0>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2ba0      	cmp	r3, #160	; 0xa0
 8002d18:	d803      	bhi.n	8002d22 <get_remote_val+0xb2>
		DRV_Speed = 3;
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <get_remote_val+0xf4>)
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	701a      	strb	r2, [r3, #0]
}
 8002d20:	e00a      	b.n	8002d38 <get_remote_val+0xc8>
	else if(remote_value <= 180)
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <get_remote_val+0xf0>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2bb4      	cmp	r3, #180	; 0xb4
 8002d28:	d803      	bhi.n	8002d32 <get_remote_val+0xc2>
		DRV_Speed = 4;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <get_remote_val+0xf4>)
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	701a      	strb	r2, [r3, #0]
}
 8002d30:	e002      	b.n	8002d38 <get_remote_val+0xc8>
		DRV_Speed = 5;
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <get_remote_val+0xf4>)
 8002d34:	2205      	movs	r2, #5
 8002d36:	701a      	strb	r2, [r3, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	f3af 8000 	nop.w
 8002d40:	00000000 	.word	0x00000000
 8002d44:	40affe00 	.word	0x40affe00
 8002d48:	404e4000 	.word	0x404e4000
 8002d4c:	3ff00000 	.word	0x3ff00000
 8002d50:	20000034 	.word	0x20000034
 8002d54:	20000004 	.word	0x20000004
 8002d58:	20000018 	.word	0x20000018
 8002d5c:	20000664 	.word	0x20000664
 8002d60:	20000668 	.word	0x20000668
 8002d64:	20000038 	.word	0x20000038

08002d68 <uartInit>:
extern DMA_HandleTypeDef hdma_usart2_rx;



bool uartInit(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	e007      	b.n	8002d84 <uartInit+0x1c>
  {
    is_open[i] = false;
 8002d74:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <uartInit+0x30>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3301      	adds	r3, #1
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	ddf4      	ble.n	8002d74 <uartInit+0xc>
  }


  return true;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	2000066c 	.word	0x2000066c

08002d9c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002da8:	2300      	movs	r3, #0
 8002daa:	75fb      	strb	r3, [r7, #23]


  switch(ch)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <uartOpen+0x1c>
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d06e      	beq.n	8002e94 <uartOpen+0xf8>
 8002db6:	e0db      	b.n	8002f70 <uartOpen+0x1d4>
  {
    case _DEF_UART1:
    {
      huart2.Instance         = USART2;
 8002db8:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <uartOpen+0x1e0>)
 8002dba:	4a71      	ldr	r2, [pc, #452]	; (8002f80 <uartOpen+0x1e4>)
 8002dbc:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate    = baud;
 8002dbe:	4a6f      	ldr	r2, [pc, #444]	; (8002f7c <uartOpen+0x1e0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength  = UART_WORDLENGTH_8B;
 8002dc4:	4b6d      	ldr	r3, [pc, #436]	; (8002f7c <uartOpen+0x1e0>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits    = UART_STOPBITS_1;
 8002dca:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <uartOpen+0x1e0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity      = UART_PARITY_NONE;
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <uartOpen+0x1e0>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode        = UART_MODE_TX_RX;
 8002dd6:	4b69      	ldr	r3, [pc, #420]	; (8002f7c <uartOpen+0x1e0>)
 8002dd8:	220c      	movs	r2, #12
 8002dda:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8002ddc:	4b67      	ldr	r3, [pc, #412]	; (8002f7c <uartOpen+0x1e0>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling= UART_OVERSAMPLING_16;
 8002de2:	4b66      	ldr	r3, [pc, #408]	; (8002f7c <uartOpen+0x1e0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart2);
 8002de8:	4864      	ldr	r0, [pc, #400]	; (8002f7c <uartOpen+0x1e0>)
 8002dea:	f00a fd69 	bl	800d8c0 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf_ch1[0], 256);
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	4a64      	ldr	r2, [pc, #400]	; (8002f84 <uartOpen+0x1e8>)
 8002df4:	4413      	add	r3, r2
 8002df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dfa:	4963      	ldr	r1, [pc, #396]	; (8002f88 <uartOpen+0x1ec>)
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 f953 	bl	80070a8 <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8002e02:	4b62      	ldr	r3, [pc, #392]	; (8002f8c <uartOpen+0x1f0>)
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	4a61      	ldr	r2, [pc, #388]	; (8002f8c <uartOpen+0x1f0>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6153      	str	r3, [r2, #20]
 8002e0e:	4b5f      	ldr	r3, [pc, #380]	; (8002f8c <uartOpen+0x1f0>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
      HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	2010      	movs	r0, #16
 8002e20:	f006 ff1f 	bl	8009c62 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002e24:	2010      	movs	r0, #16
 8002e26:	f006 ff38 	bl	8009c9a <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e2a:	4854      	ldr	r0, [pc, #336]	; (8002f7c <uartOpen+0x1e0>)
 8002e2c:	f00a fcf8 	bl	800d820 <HAL_UART_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <uartOpen+0xa0>
      {
        ret = false;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
    }
    break;
 8002e3a:	e099      	b.n	8002f70 <uartOpen+0x1d4>
        ret = true;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	4a53      	ldr	r2, [pc, #332]	; (8002f90 <uartOpen+0x1f4>)
 8002e44:	2101      	movs	r1, #1
 8002e46:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf_ch1[0], 256) != HAL_OK)
 8002e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e4c:	494e      	ldr	r1, [pc, #312]	; (8002f88 <uartOpen+0x1ec>)
 8002e4e:	484b      	ldr	r0, [pc, #300]	; (8002f7c <uartOpen+0x1e0>)
 8002e50:	f00a fdeb 	bl	800da2a <HAL_UART_Receive_DMA>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <uartOpen+0xc2>
          ret = false;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	4a48      	ldr	r2, [pc, #288]	; (8002f84 <uartOpen+0x1e8>)
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	4413      	add	r3, r2
 8002e66:	3308      	adds	r3, #8
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <uartOpen+0x1f8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	1a8a      	subs	r2, r1, r2
 8002e74:	4943      	ldr	r1, [pc, #268]	; (8002f84 <uartOpen+0x1e8>)
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	440b      	add	r3, r1
 8002e7a:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8002e7c:	79fa      	ldrb	r2, [r7, #7]
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	4940      	ldr	r1, [pc, #256]	; (8002f84 <uartOpen+0x1e8>)
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	440a      	add	r2, r1
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	493e      	ldr	r1, [pc, #248]	; (8002f84 <uartOpen+0x1e8>)
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3304      	adds	r3, #4
 8002e90:	601a      	str	r2, [r3, #0]
    break;
 8002e92:	e06d      	b.n	8002f70 <uartOpen+0x1d4>

    case _DEF_UART2:
    {
      huart1.Instance         = USART1;
 8002e94:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <uartOpen+0x1fc>)
 8002e96:	4a41      	ldr	r2, [pc, #260]	; (8002f9c <uartOpen+0x200>)
 8002e98:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 8002e9a:	4a3f      	ldr	r2, [pc, #252]	; (8002f98 <uartOpen+0x1fc>)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8002ea0:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <uartOpen+0x1fc>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits    = UART_STOPBITS_1;
 8002ea6:	4b3c      	ldr	r3, [pc, #240]	; (8002f98 <uartOpen+0x1fc>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity      = UART_PARITY_NONE;
 8002eac:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <uartOpen+0x1fc>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode        = UART_MODE_TX_RX;
 8002eb2:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <uartOpen+0x1fc>)
 8002eb4:	220c      	movs	r2, #12
 8002eb6:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8002eb8:	4b37      	ldr	r3, [pc, #220]	; (8002f98 <uartOpen+0x1fc>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8002ebe:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <uartOpen+0x1fc>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8002ec4:	4834      	ldr	r0, [pc, #208]	; (8002f98 <uartOpen+0x1fc>)
 8002ec6:	f00a fcfb 	bl	800d8c0 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf_ch2[0], 256);
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	4a2d      	ldr	r2, [pc, #180]	; (8002f84 <uartOpen+0x1e8>)
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed6:	4932      	ldr	r1, [pc, #200]	; (8002fa0 <uartOpen+0x204>)
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f004 f8e5 	bl	80070a8 <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <uartOpen+0x1f0>)
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4a2a      	ldr	r2, [pc, #168]	; (8002f8c <uartOpen+0x1f0>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6153      	str	r3, [r2, #20]
 8002eea:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <uartOpen+0x1f0>)
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	200f      	movs	r0, #15
 8002efc:	f006 feb1 	bl	8009c62 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002f00:	200f      	movs	r0, #15
 8002f02:	f006 feca 	bl	8009c9a <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f06:	4824      	ldr	r0, [pc, #144]	; (8002f98 <uartOpen+0x1fc>)
 8002f08:	f00a fc8a 	bl	800d820 <HAL_UART_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <uartOpen+0x17c>
      {
        ret = false;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
    }
      
    break;
 8002f16:	e02a      	b.n	8002f6e <uartOpen+0x1d2>
        ret = true;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <uartOpen+0x1f4>)
 8002f20:	2101      	movs	r1, #1
 8002f22:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf_ch2[0], 256) != HAL_OK)
 8002f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f28:	491d      	ldr	r1, [pc, #116]	; (8002fa0 <uartOpen+0x204>)
 8002f2a:	481b      	ldr	r0, [pc, #108]	; (8002f98 <uartOpen+0x1fc>)
 8002f2c:	f00a fd7d 	bl	800da2a <HAL_UART_Receive_DMA>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <uartOpen+0x19e>
          ret = false;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <uartOpen+0x1e8>)
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	4413      	add	r3, r2
 8002f42:	3308      	adds	r3, #8
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <uartOpen+0x208>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	1a8a      	subs	r2, r1, r2
 8002f50:	490c      	ldr	r1, [pc, #48]	; (8002f84 <uartOpen+0x1e8>)
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	440b      	add	r3, r1
 8002f56:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8002f58:	79fa      	ldrb	r2, [r7, #7]
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	4909      	ldr	r1, [pc, #36]	; (8002f84 <uartOpen+0x1e8>)
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	440a      	add	r2, r1
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	4907      	ldr	r1, [pc, #28]	; (8002f84 <uartOpen+0x1e8>)
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	440b      	add	r3, r1
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	601a      	str	r2, [r3, #0]
    break;
 8002f6e:	bf00      	nop
  }

  return ret;
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000484 	.word	0x20000484
 8002f80:	40004400 	.word	0x40004400
 8002f84:	20000670 	.word	0x20000670
 8002f88:	20000690 	.word	0x20000690
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	2000066c 	.word	0x2000066c
 8002f94:	2000059c 	.word	0x2000059c
 8002f98:	2000043c 	.word	0x2000043c
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	20000790 	.word	0x20000790
 8002fa4:	20000558 	.word	0x20000558

08002fa8 <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <uartAvailable+0x1a>
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d018      	beq.n	8002ff2 <uartAvailable+0x4a>
 8002fc0:	e02f      	b.n	8003022 <uartAvailable+0x7a>
  {
    case _DEF_UART1:
    {
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR);
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <uartAvailable+0x84>)
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4413      	add	r3, r2
 8002fca:	3308      	adds	r3, #8
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <uartAvailable+0x88>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	1a8a      	subs	r2, r1, r2
 8002fd8:	4914      	ldr	r1, [pc, #80]	; (800302c <uartAvailable+0x84>)
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	440b      	add	r3, r1
 8002fde:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	4a11      	ldr	r2, [pc, #68]	; (800302c <uartAvailable+0x84>)
 8002fe6:	4413      	add	r3, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 f8b3 	bl	8007154 <qbufferAvailable>
 8002fee:	60f8      	str	r0, [r7, #12]
    }
    break;
 8002ff0:	e017      	b.n	8003022 <uartAvailable+0x7a>

    case _DEF_UART2:
    {
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	; (800302c <uartAvailable+0x84>)
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	6819      	ldr	r1, [r3, #0]
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <uartAvailable+0x8c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	1a8a      	subs	r2, r1, r2
 8003008:	4908      	ldr	r1, [pc, #32]	; (800302c <uartAvailable+0x84>)
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	440b      	add	r3, r1
 800300e:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4a05      	ldr	r2, [pc, #20]	; (800302c <uartAvailable+0x84>)
 8003016:	4413      	add	r3, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f004 f89b 	bl	8007154 <qbufferAvailable>
 800301e:	60f8      	str	r0, [r7, #12]
    }
    break;
 8003020:	bf00      	nop
  
  }

  return ret;
 8003022:	68fb      	ldr	r3, [r7, #12]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000670 	.word	0x20000670
 8003030:	2000059c 	.word	0x2000059c
 8003034:	20000558 	.word	0x20000558

08003038 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <uartRead+0x1a>
 800304c:	2b01      	cmp	r3, #1
 800304e:	d008      	beq.n	8003062 <uartRead+0x2a>
 8003050:	e00f      	b.n	8003072 <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8003052:	f107 030f 	add.w	r3, r7, #15
 8003056:	2201      	movs	r2, #1
 8003058:	4619      	mov	r1, r3
 800305a:	4808      	ldr	r0, [pc, #32]	; (800307c <uartRead+0x44>)
 800305c:	f004 f83e 	bl	80070dc <qbufferRead>
      break;
 8003060:	e007      	b.n	8003072 <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8003062:	f107 030f 	add.w	r3, r7, #15
 8003066:	2201      	movs	r2, #1
 8003068:	4619      	mov	r1, r3
 800306a:	4805      	ldr	r0, [pc, #20]	; (8003080 <uartRead+0x48>)
 800306c:	f004 f836 	bl	80070dc <qbufferRead>
      break;
 8003070:	bf00      	nop
  }

  return ret;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000670 	.word	0x20000670
 8003080:	20000680 	.word	0x20000680

08003084 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <uartWrite+0x1e>
 800309c:	2b01      	cmp	r3, #1
 800309e:	d00f      	beq.n	80030c0 <uartWrite+0x3c>
 80030a0:	e020      	b.n	80030e4 <uartWrite+0x60>
  {
    case _DEF_UART1:
    {
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	2364      	movs	r3, #100	; 0x64
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	4811      	ldr	r0, [pc, #68]	; (80030f0 <uartWrite+0x6c>)
 80030ac:	f00a fc3a 	bl	800d924 <HAL_UART_Transmit>
 80030b0:	4603      	mov	r3, r0
 80030b2:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d111      	bne.n	80030de <uartWrite+0x5a>
      {
        ret = length;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	617b      	str	r3, [r7, #20]
      }
    }
    break;
 80030be:	e00e      	b.n	80030de <uartWrite+0x5a>

    case _DEF_UART2:
    {
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	2364      	movs	r3, #100	; 0x64
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	4809      	ldr	r0, [pc, #36]	; (80030f0 <uartWrite+0x6c>)
 80030ca:	f00a fc2b 	bl	800d924 <HAL_UART_Transmit>
 80030ce:	4603      	mov	r3, r0
 80030d0:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <uartWrite+0x5e>
      {
        ret = length;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	617b      	str	r3, [r7, #20]
      }
    }
    break;
 80030dc:	e001      	b.n	80030e2 <uartWrite+0x5e>
    break;
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <uartWrite+0x60>
    break;
 80030e2:	bf00      	nop
  }

  return ret;
 80030e4:	697b      	ldr	r3, [r7, #20]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2000043c 	.word	0x2000043c

080030f4 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80030f4:	b40e      	push	{r1, r2, r3}
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b0c7      	sub	sp, #284	; 0x11c
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4602      	mov	r2, r0
 80030fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003102:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003106:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003108:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800310c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003110:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003114:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8003116:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800311a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800311e:	f107 0010 	add.w	r0, r7, #16
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800312c:	f00c fb3a 	bl	800f7a4 <vsniprintf>
 8003130:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8003134:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003138:	f107 0110 	add.w	r1, r7, #16
 800313c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003140:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ff9c 	bl	8003084 <uartWrite>
 800314c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8003150:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003154:	4618      	mov	r0, r3
 8003156:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800315a:	46bd      	mov	sp, r7
 800315c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003160:	b003      	add	sp, #12
 8003162:	4770      	bx	lr

08003164 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  return 0;
 800317e:	bf00      	nop

}
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <cliInit>:





bool cliInit(void) {
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
	cli_node.is_open = false;
 800318c:	4b2f      	ldr	r3, [pc, #188]	; (800324c <cliInit+0xc4>)
 800318e:	2200      	movs	r2, #0
 8003190:	721a      	strb	r2, [r3, #8]
	cli_node.is_log = false;
 8003192:	4b2e      	ldr	r3, [pc, #184]	; (800324c <cliInit+0xc4>)
 8003194:	2200      	movs	r2, #0
 8003196:	725a      	strb	r2, [r3, #9]
	cli_node.state = CLI_RX_IDLE;
 8003198:	4b2c      	ldr	r3, [pc, #176]	; (800324c <cliInit+0xc4>)
 800319a:	2200      	movs	r2, #0
 800319c:	741a      	strb	r2, [r3, #16]

	cli_node.hist_line_i = 0;
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <cliInit+0xc4>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	cli_node.hist_line_last = 0;
 80031a6:	4b29      	ldr	r3, [pc, #164]	; (800324c <cliInit+0xc4>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	cli_node.hist_line_count = 0;
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <cliInit+0xc4>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	cli_node.hist_line_new = false;
 80031b6:	4b25      	ldr	r3, [pc, #148]	; (800324c <cliInit+0xc4>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

	cli_node.cmd_args.getData = cliArgsGetData;
 80031be:	4b23      	ldr	r3, [pc, #140]	; (800324c <cliInit+0xc4>)
 80031c0:	4a23      	ldr	r2, [pc, #140]	; (8003250 <cliInit+0xc8>)
 80031c2:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
	cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <cliInit+0xc4>)
 80031c8:	4a22      	ldr	r2, [pc, #136]	; (8003254 <cliInit+0xcc>)
 80031ca:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	cli_node.cmd_args.getStr = cliArgsGetStr;
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <cliInit+0xc4>)
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <cliInit+0xd0>)
 80031d2:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
	cli_node.cmd_args.isStr = cliArgsIsStr;
 80031d6:	4b1d      	ldr	r3, [pc, #116]	; (800324c <cliInit+0xc4>)
 80031d8:	4a20      	ldr	r2, [pc, #128]	; (800325c <cliInit+0xd4>)
 80031da:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

	cliLineClean(&cli_node);
 80031de:	481b      	ldr	r0, [pc, #108]	; (800324c <cliInit+0xc4>)
 80031e0:	f000 fbae 	bl	8003940 <cliLineClean>
// 조향모터 , 주행모터 , 저속, 중속, type 
	cliAdd("help", cliShowList);
 80031e4:	491e      	ldr	r1, [pc, #120]	; (8003260 <cliInit+0xd8>)
 80031e6:	481f      	ldr	r0, [pc, #124]	; (8003264 <cliInit+0xdc>)
 80031e8:	f000 fe28 	bl	8003e3c <cliAdd>
	cliAdd("drv", cli_drv_sqc); // 주행 curtis / dmcs
 80031ec:	491e      	ldr	r1, [pc, #120]	; (8003268 <cliInit+0xe0>)
 80031ee:	481f      	ldr	r0, [pc, #124]	; (800326c <cliInit+0xe4>)
 80031f0:	f000 fe24 	bl	8003e3c <cliAdd>
	cliAdd("sentype", cli_sentype_sqc); // 센서타입 
 80031f4:	491e      	ldr	r1, [pc, #120]	; (8003270 <cliInit+0xe8>)
 80031f6:	481f      	ldr	r0, [pc, #124]	; (8003274 <cliInit+0xec>)
 80031f8:	f000 fe20 	bl	8003e3c <cliAdd>
	cliAdd("speed", cli_speed_offset_sqc); // idle speed offset
 80031fc:	491e      	ldr	r1, [pc, #120]	; (8003278 <cliInit+0xf0>)
 80031fe:	481f      	ldr	r0, [pc, #124]	; (800327c <cliInit+0xf4>)
 8003200:	f000 fe1c 	bl	8003e3c <cliAdd>
	cliAdd("low", cli_speed_low_sqc); // 자율주행 저속
 8003204:	491e      	ldr	r1, [pc, #120]	; (8003280 <cliInit+0xf8>)
 8003206:	481f      	ldr	r0, [pc, #124]	; (8003284 <cliInit+0xfc>)
 8003208:	f000 fe18 	bl	8003e3c <cliAdd>
	cliAdd("high", cli_speed_high_sqc); // 자율주행 고속
 800320c:	491e      	ldr	r1, [pc, #120]	; (8003288 <cliInit+0x100>)
 800320e:	481f      	ldr	r0, [pc, #124]	; (800328c <cliInit+0x104>)
 8003210:	f000 fe14 	bl	8003e3c <cliAdd>
	cliAdd("remote", cli_remote_sqc); // 리모컨 종류 jeico / rfmaster	
 8003214:	491e      	ldr	r1, [pc, #120]	; (8003290 <cliInit+0x108>)
 8003216:	481f      	ldr	r0, [pc, #124]	; (8003294 <cliInit+0x10c>)
 8003218:	f000 fe10 	bl	8003e3c <cliAdd>
	cliAdd("bat", cli_battery_sqc); // 배터리타입 
 800321c:	491e      	ldr	r1, [pc, #120]	; (8003298 <cliInit+0x110>)
 800321e:	481f      	ldr	r0, [pc, #124]	; (800329c <cliInit+0x114>)
 8003220:	f000 fe0c 	bl	8003e3c <cliAdd>
	cliAdd("valve", cli_valve_sqc); // 후적밸브
 8003224:	491e      	ldr	r1, [pc, #120]	; (80032a0 <cliInit+0x118>)
 8003226:	481f      	ldr	r0, [pc, #124]	; (80032a4 <cliInit+0x11c>)
 8003228:	f000 fe08 	bl	8003e3c <cliAdd>
	cliAdd("rtk", cli_rtk_sqc); // 후적밸브
 800322c:	491e      	ldr	r1, [pc, #120]	; (80032a8 <cliInit+0x120>)
 800322e:	481f      	ldr	r0, [pc, #124]	; (80032ac <cliInit+0x124>)
 8003230:	f000 fe04 	bl	8003e3c <cliAdd>
	cliAdd("info", cli_info_sqc); // 설정값 정보
 8003234:	491e      	ldr	r1, [pc, #120]	; (80032b0 <cliInit+0x128>)
 8003236:	481f      	ldr	r0, [pc, #124]	; (80032b4 <cliInit+0x12c>)
 8003238:	f000 fe00 	bl	8003e3c <cliAdd>
	cliAdd("save", cli_eep_save_sqc); // 설정값 저장
 800323c:	491e      	ldr	r1, [pc, #120]	; (80032b8 <cliInit+0x130>)
 800323e:	481f      	ldr	r0, [pc, #124]	; (80032bc <cliInit+0x134>)
 8003240:	f000 fdfc 	bl	8003e3c <cliAdd>
	return true;
 8003244:	2301      	movs	r3, #1
}
 8003246:	4618      	mov	r0, r3
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000890 	.word	0x20000890
 8003250:	08003d05 	.word	0x08003d05
 8003254:	08003d55 	.word	0x08003d55
 8003258:	08003da5 	.word	0x08003da5
 800325c:	08003de9 	.word	0x08003de9
 8003260:	08003ed1 	.word	0x08003ed1
 8003264:	08011c28 	.word	0x08011c28
 8003268:	08003f6d 	.word	0x08003f6d
 800326c:	08011c30 	.word	0x08011c30
 8003270:	0800408d 	.word	0x0800408d
 8003274:	08011c34 	.word	0x08011c34
 8003278:	080041ad 	.word	0x080041ad
 800327c:	08011c3c 	.word	0x08011c3c
 8003280:	080042b5 	.word	0x080042b5
 8003284:	08011c44 	.word	0x08011c44
 8003288:	080043bd 	.word	0x080043bd
 800328c:	08011c48 	.word	0x08011c48
 8003290:	080044c5 	.word	0x080044c5
 8003294:	08011c50 	.word	0x08011c50
 8003298:	080045d9 	.word	0x080045d9
 800329c:	08011c58 	.word	0x08011c58
 80032a0:	080046ed 	.word	0x080046ed
 80032a4:	08011c5c 	.word	0x08011c5c
 80032a8:	08004801 	.word	0x08004801
 80032ac:	08011c64 	.word	0x08011c64
 80032b0:	08004915 	.word	0x08004915
 80032b4:	08011c68 	.word	0x08011c68
 80032b8:	08004a55 	.word	0x08004a55
 80032bc:	08011c70 	.word	0x08011c70

080032c0 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
	cli_node.ch = ch;
 80032cc:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <cliOpen+0x38>)
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	7013      	strb	r3, [r2, #0]
	cli_node.baud = baud;
 80032d2:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <cliOpen+0x38>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6053      	str	r3, [r2, #4]

	cli_node.is_open = uartOpen(ch, baud);
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	6839      	ldr	r1, [r7, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fd5d 	bl	8002d9c <uartOpen>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <cliOpen+0x38>)
 80032e8:	721a      	strb	r2, [r3, #8]

	return cli_node.is_open;
 80032ea:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <cliOpen+0x38>)
 80032ec:	7a1b      	ldrb	r3, [r3, #8]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000890 	.word	0x20000890

080032fc <cliShowLog>:
bool cliLogClose(void) {
	cli_node.is_log = false;
	return true;
}

void cliShowLog(cli_t *p_cli) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	if (cli_node.is_log == true) {
 8003304:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <cliShowLog+0xdc>)
 8003306:	7a5b      	ldrb	r3, [r3, #9]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d061      	beq.n	80033d0 <cliShowLog+0xd4>
		uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7a98      	ldrb	r0, [r3, #10]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003316:	461a      	mov	r2, r3
 8003318:	4930      	ldr	r1, [pc, #192]	; (80033dc <cliShowLog+0xe0>)
 800331a:	f7ff feeb 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7a98      	ldrb	r0, [r3, #10]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8003328:	461a      	mov	r2, r3
 800332a:	492d      	ldr	r1, [pc, #180]	; (80033e0 <cliShowLog+0xe4>)
 800332c:	f7ff fee2 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	7a98      	ldrb	r0, [r3, #10]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800333a:	461a      	mov	r2, r3
 800333c:	4929      	ldr	r1, [pc, #164]	; (80033e4 <cliShowLog+0xe8>)
 800333e:	f7ff fed9 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7a98      	ldrb	r0, [r3, #10]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800334c:	461a      	mov	r2, r3
 800334e:	4926      	ldr	r1, [pc, #152]	; (80033e8 <cliShowLog+0xec>)
 8003350:	f7ff fed0 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7a98      	ldrb	r0, [r3, #10]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800335e:	461a      	mov	r2, r3
 8003360:	4922      	ldr	r1, [pc, #136]	; (80033ec <cliShowLog+0xf0>)
 8003362:	f7ff fec7 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7a98      	ldrb	r0, [r3, #10]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003370:	461a      	mov	r2, r3
 8003372:	491f      	ldr	r1, [pc, #124]	; (80033f0 <cliShowLog+0xf4>)
 8003374:	f7ff febe 	bl	80030f4 <uartPrintf>
		uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7a98      	ldrb	r0, [r3, #10]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8003382:	461a      	mov	r2, r3
 8003384:	491b      	ldr	r1, [pc, #108]	; (80033f4 <cliShowLog+0xf8>)
 8003386:	f7ff feb5 	bl	80030f4 <uartPrintf>

		for (int i = 0; i < p_cli->hist_line_count; i++) {
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e012      	b.n	80033b6 <cliShowLog+0xba>
			uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	7a98      	ldrb	r0, [r3, #10]
					p_cli->line_buf[i].buf);
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4613      	mov	r3, r2
 8003398:	015b      	lsls	r3, r3, #5
 800339a:	4413      	add	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
			uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i,
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4913      	ldr	r1, [pc, #76]	; (80033f8 <cliShowLog+0xfc>)
 80033ac:	f7ff fea2 	bl	80030f4 <uartPrintf>
		for (int i = 0; i < p_cli->hist_line_count; i++) {
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3301      	adds	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80033bc:	461a      	mov	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4293      	cmp	r3, r2
 80033c2:	dbe5      	blt.n	8003390 <cliShowLog+0x94>
		}
		uartPrintf(p_cli->log_ch, "\n");
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7a9b      	ldrb	r3, [r3, #10]
 80033c8:	490c      	ldr	r1, [pc, #48]	; (80033fc <cliShowLog+0x100>)
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fe92 	bl	80030f4 <uartPrintf>
	}
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20000890 	.word	0x20000890
 80033dc:	08011c78 	.word	0x08011c78
 80033e0:	08011c88 	.word	0x08011c88
 80033e4:	08011c98 	.word	0x08011c98
 80033e8:	08011ca8 	.word	0x08011ca8
 80033ec:	08011cb8 	.word	0x08011cb8
 80033f0:	08011cc8 	.word	0x08011cc8
 80033f4:	08011cd8 	.word	0x08011cd8
 80033f8:	08011ce8 	.word	0x08011ce8
 80033fc:	08011cf8 	.word	0x08011cf8

08003400 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	uartPrintf(p_cli->ch, "\n\r");
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4906      	ldr	r1, [pc, #24]	; (8003428 <cliShowPrompt+0x28>)
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fe70 	bl	80030f4 <uartPrintf>
	uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	4904      	ldr	r1, [pc, #16]	; (800342c <cliShowPrompt+0x2c>)
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fe6a 	bl	80030f4 <uartPrintf>
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	08011cfc 	.word	0x08011cfc
 800342c:	08011d00 	.word	0x08011d00

08003430 <cliMain>:

bool cliMain(void) {
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
	if (cli_node.is_open != true) {
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <cliMain+0x40>)
 8003436:	7a1b      	ldrb	r3, [r3, #8]
 8003438:	f083 0301 	eor.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <cliMain+0x16>
		return false;
 8003442:	2300      	movs	r3, #0
 8003444:	e012      	b.n	800346c <cliMain+0x3c>
	}

	if (uartAvailable(cli_node.ch) > 0) {
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <cliMain+0x40>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fdac 	bl	8002fa8 <uartAvailable>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <cliMain+0x3a>
		cliUpdate(&cli_node, uartRead(cli_node.ch));
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <cliMain+0x40>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fdec 	bl	8003038 <uartRead>
 8003460:	4603      	mov	r3, r0
 8003462:	4619      	mov	r1, r3
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <cliMain+0x40>)
 8003466:	f000 f805 	bl	8003474 <cliUpdate>
	}

	return true;
 800346a:	2301      	movs	r3, #1
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000890 	.word	0x20000890

08003474 <cliUpdate>:

uint32_t cliWrite(uint8_t *p_data, uint32_t length) {
	return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	; 0x30
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	70fb      	strb	r3, [r7, #3]
	bool ret = false;
 8003480:	2300      	movs	r3, #0
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t tx_buf[8];
	cli_line_t *line;

	line = &p_cli->line;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800348c:	61fb      	str	r3, [r7, #28]

	if (p_cli->state == CLI_RX_IDLE) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7c1b      	ldrb	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 8168 	bne.w	8003768 <cliUpdate+0x2f4>
		switch (rx_data) {
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	2b7f      	cmp	r3, #127	; 0x7f
 800349c:	d02a      	beq.n	80034f4 <cliUpdate+0x80>
 800349e:	2b7f      	cmp	r3, #127	; 0x7f
 80034a0:	f300 80da 	bgt.w	8003658 <cliUpdate+0x1e4>
 80034a4:	2b1b      	cmp	r3, #27
 80034a6:	d021      	beq.n	80034ec <cliUpdate+0x78>
 80034a8:	2b1b      	cmp	r3, #27
 80034aa:	f300 80d5 	bgt.w	8003658 <cliUpdate+0x1e4>
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d062      	beq.n	8003578 <cliUpdate+0x104>
 80034b2:	2b0d      	cmp	r3, #13
 80034b4:	f040 80d0 	bne.w	8003658 <cliUpdate+0x1e4>
		// 엔터
		//
		case CLI_KEY_ENTER:
			if (line->count > 0) {
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <cliUpdate+0x5a>
				cliLineAdd(p_cli);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa55 	bl	8003972 <cliLineAdd>
				cliRunCmd(p_cli);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fb21 	bl	8003b10 <cliRunCmd>
			}

			line->count = 0;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			line->cursor = 0;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			line->buf[0] = 0;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
			cliShowPrompt(p_cli);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff8b 	bl	8003400 <cliShowPrompt>
			break;
 80034ea:	e144      	b.n	8003776 <cliUpdate+0x302>

		case CLI_KEY_ESC:
			p_cli->state = CLI_RX_SP1;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	741a      	strb	r2, [r3, #16]
			break;
 80034f2:	e140      	b.n	8003776 <cliUpdate+0x302>

			// DEL
			//
		case CLI_KEY_DEL:
			if (line->cursor < line->count) {
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003500:	429a      	cmp	r2, r3
 8003502:	f080 8133 	bcs.w	800376c <cliUpdate+0x2f8>
				uint8_t mov_len;

				mov_len = line->count - line->cursor;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	76fb      	strb	r3, [r7, #27]
				for (int i = 1; i < mov_len; i++) {
 8003516:	2301      	movs	r3, #1
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800351a:	e013      	b.n	8003544 <cliUpdate+0xd0>
					line->buf[line->cursor + i - 1] =
							line->buf[line->cursor + i];
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003522:	461a      	mov	r2, r3
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	441a      	add	r2, r3
					line->buf[line->cursor + i - 1] =
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800352e:	4619      	mov	r1, r3
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	440b      	add	r3, r1
 8003534:	3b01      	subs	r3, #1
							line->buf[line->cursor + i];
 8003536:	69f9      	ldr	r1, [r7, #28]
 8003538:	5c89      	ldrb	r1, [r1, r2]
					line->buf[line->cursor + i - 1] =
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	54d1      	strb	r1, [r2, r3]
				for (int i = 1; i < mov_len; i++) {
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	3301      	adds	r3, #1
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003544:	7efb      	ldrb	r3, [r7, #27]
 8003546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003548:	429a      	cmp	r2, r3
 800354a:	dbe7      	blt.n	800351c <cliUpdate+0xa8>
				}

				line->count--;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003552:	3b01      	subs	r3, #1
 8003554:	b2da      	uxtb	r2, r3
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
				line->buf[line->count] = 0;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003562:	461a      	mov	r2, r3
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

				uartPrintf(p_cli->ch, "\x1B[1P");
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	498e      	ldr	r1, [pc, #568]	; (80037a8 <cliUpdate+0x334>)
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fdbf 	bl	80030f4 <uartPrintf>
			}
			break;
 8003576:	e0f9      	b.n	800376c <cliUpdate+0x2f8>

			// 백스페이스
			//
		case CLI_KEY_BACK:
			if (line->count > 0 && line->cursor > 0) {
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800357e:	2b00      	cmp	r3, #0
 8003580:	d055      	beq.n	800362e <cliUpdate+0x1ba>
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003588:	2b00      	cmp	r3, #0
 800358a:	d050      	beq.n	800362e <cliUpdate+0x1ba>
				if (line->cursor == line->count) {
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003598:	429a      	cmp	r2, r3
 800359a:	d10e      	bne.n	80035ba <cliUpdate+0x146>
					line->count--;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
					line->buf[line->count] = 0;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035b2:	461a      	mov	r2, r3
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]
				}

				if (line->cursor < line->count) {
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d231      	bcs.n	800362e <cliUpdate+0x1ba>
					uint8_t mov_len;

					mov_len = line->count - line->cursor;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	76bb      	strb	r3, [r7, #26]

					for (int i = 0; i < mov_len; i++) {
 80035da:	2300      	movs	r3, #0
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035de:	e013      	b.n	8003608 <cliUpdate+0x194>
						line->buf[line->cursor + i - 1] = line->buf[line->cursor
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e6:	461a      	mov	r2, r3
								+ i];
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	441a      	add	r2, r3
						line->buf[line->cursor + i - 1] = line->buf[line->cursor
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f2:	4619      	mov	r1, r3
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	440b      	add	r3, r1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	69f9      	ldr	r1, [r7, #28]
 80035fc:	5c89      	ldrb	r1, [r1, r2]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < mov_len; i++) {
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	3301      	adds	r3, #1
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
 8003608:	7ebb      	ldrb	r3, [r7, #26]
 800360a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800360c:	429a      	cmp	r2, r3
 800360e:	dbe7      	blt.n	80035e0 <cliUpdate+0x16c>
					}

					line->count--;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003616:	3b01      	subs	r3, #1
 8003618:	b2da      	uxtb	r2, r3
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
					line->buf[line->count] = 0;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003626:	461a      	mov	r2, r3
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]
				}
			}

			if (line->cursor > 0) {
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 809b 	beq.w	8003770 <cliUpdate+0x2fc>
				line->cursor--;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003640:	3b01      	subs	r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
				uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	4957      	ldr	r1, [pc, #348]	; (80037ac <cliUpdate+0x338>)
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fd4f 	bl	80030f4 <uartPrintf>
			}
			break;
 8003656:	e08b      	b.n	8003770 <cliUpdate+0x2fc>

		default:
			if ((line->count + 1) < line->buf_len) {
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800365e:	3301      	adds	r3, #1
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8003666:	4293      	cmp	r3, r2
 8003668:	f280 8084 	bge.w	8003774 <cliUpdate+0x300>
				if (line->cursor == line->count) {
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003678:	429a      	cmp	r2, r3
 800367a:	d124      	bne.n	80036c6 <cliUpdate+0x252>
					uartWrite(p_cli->ch, &rx_data, 1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	1cf9      	adds	r1, r7, #3
 8003682:	2201      	movs	r2, #1
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fcfd 	bl	8003084 <uartWrite>

					line->buf[line->cursor] = rx_data;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003690:	461a      	mov	r2, r3
 8003692:	78f9      	ldrb	r1, [r7, #3]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	5499      	strb	r1, [r3, r2]
					line->count++;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800369e:	3301      	adds	r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
					line->cursor++;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ae:	3301      	adds	r3, #1
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
					line->buf[line->count] = 0;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036be:	461a      	mov	r2, r3
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2100      	movs	r1, #0
 80036c4:	5499      	strb	r1, [r3, r2]
				}
				if (line->cursor < line->count) {
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d24e      	bcs.n	8003774 <cliUpdate+0x300>
					uint8_t mov_len;

					mov_len = line->count - line->cursor;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	767b      	strb	r3, [r7, #25]
					for (int i = 0; i < mov_len; i++) {
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ea:	e013      	b.n	8003714 <cliUpdate+0x2a0>
						line->buf[line->count - i] = line->buf[line->count - i
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036f2:	461a      	mov	r2, r3
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	1ad3      	subs	r3, r2, r3
								- 1];
 80036f8:	1e5a      	subs	r2, r3, #1
						line->buf[line->count - i] = line->buf[line->count - i
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003700:	4619      	mov	r1, r3
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	1acb      	subs	r3, r1, r3
 8003706:	69f9      	ldr	r1, [r7, #28]
 8003708:	5c89      	ldrb	r1, [r1, r2]
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < mov_len; i++) {
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	3301      	adds	r3, #1
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
 8003714:	7e7b      	ldrb	r3, [r7, #25]
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	429a      	cmp	r2, r3
 800371a:	dbe7      	blt.n	80036ec <cliUpdate+0x278>
					}
					line->buf[line->cursor] = rx_data;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003722:	461a      	mov	r2, r3
 8003724:	78f9      	ldrb	r1, [r7, #3]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	5499      	strb	r1, [r3, r2]
					line->count++;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003730:	3301      	adds	r3, #1
 8003732:	b2da      	uxtb	r2, r3
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
					line->cursor++;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003740:	3301      	adds	r3, #1
 8003742:	b2da      	uxtb	r2, r3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
					line->buf[line->count] = 0;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003750:	461a      	mov	r2, r3
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

					uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	4914      	ldr	r1, [pc, #80]	; (80037b0 <cliUpdate+0x33c>)
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fcc7 	bl	80030f4 <uartPrintf>
				}
			}
			break;
 8003766:	e005      	b.n	8003774 <cliUpdate+0x300>
		}
	}
 8003768:	bf00      	nop
 800376a:	e004      	b.n	8003776 <cliUpdate+0x302>
			break;
 800376c:	bf00      	nop
 800376e:	e002      	b.n	8003776 <cliUpdate+0x302>
			break;
 8003770:	bf00      	nop
 8003772:	e000      	b.n	8003776 <cliUpdate+0x302>
			break;
 8003774:	bf00      	nop

	switch (p_cli->state) {
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7c1b      	ldrb	r3, [r3, #16]
 800377a:	3b01      	subs	r3, #1
 800377c:	2b03      	cmp	r3, #3
 800377e:	f200 80d2 	bhi.w	8003926 <cliUpdate+0x4b2>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <cliUpdate+0x314>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	08003799 	.word	0x08003799
 800378c:	080037a1 	.word	0x080037a1
 8003790:	080037b5 	.word	0x080037b5
 8003794:	0800391d 	.word	0x0800391d
	case CLI_RX_SP1:
		p_cli->state = CLI_RX_SP2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	741a      	strb	r2, [r3, #16]
		break;
 800379e:	e0c2      	b.n	8003926 <cliUpdate+0x4b2>

	case CLI_RX_SP2:
		p_cli->state = CLI_RX_SP3;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2203      	movs	r2, #3
 80037a4:	741a      	strb	r2, [r3, #16]
		break;
 80037a6:	e0be      	b.n	8003926 <cliUpdate+0x4b2>
 80037a8:	08011d08 	.word	0x08011d08
 80037ac:	08011d10 	.word	0x08011d10
 80037b0:	08011d18 	.word	0x08011d18

	case CLI_RX_SP3:
		p_cli->state = CLI_RX_IDLE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	741a      	strb	r2, [r3, #16]

		if (rx_data == CLI_KEY_LEFT) {
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	2b44      	cmp	r3, #68	; 0x44
 80037be:	d11a      	bne.n	80037f6 <cliUpdate+0x382>
			if (line->cursor > 0) {
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d015      	beq.n	80037f6 <cliUpdate+0x382>
				line->cursor--;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
				tx_buf[0] = 0x1B;
 80037da:	231b      	movs	r3, #27
 80037dc:	733b      	strb	r3, [r7, #12]
				tx_buf[1] = 0x5B;
 80037de:	235b      	movs	r3, #91	; 0x5b
 80037e0:	737b      	strb	r3, [r7, #13]
				tx_buf[2] = rx_data;
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	73bb      	strb	r3, [r7, #14]
				uartWrite(p_cli->ch, tx_buf, 3);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	f107 010c 	add.w	r1, r7, #12
 80037ee:	2203      	movs	r2, #3
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fc47 	bl	8003084 <uartWrite>
			}
		}

		if (rx_data == CLI_KEY_RIGHT) {
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	2b43      	cmp	r3, #67	; 0x43
 80037fa:	d11d      	bne.n	8003838 <cliUpdate+0x3c4>
			if (line->cursor < line->count) {
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003808:	429a      	cmp	r2, r3
 800380a:	d215      	bcs.n	8003838 <cliUpdate+0x3c4>
				line->cursor++;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003812:	3301      	adds	r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

				tx_buf[0] = 0x1B;
 800381c:	231b      	movs	r3, #27
 800381e:	733b      	strb	r3, [r7, #12]
				tx_buf[1] = 0x5B;
 8003820:	235b      	movs	r3, #91	; 0x5b
 8003822:	737b      	strb	r3, [r7, #13]
				tx_buf[2] = rx_data;
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	73bb      	strb	r3, [r7, #14]
				uartWrite(p_cli->ch, tx_buf, 3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	f107 010c 	add.w	r1, r7, #12
 8003830:	2203      	movs	r2, #3
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fc26 	bl	8003084 <uartWrite>
			}
		}

		if (rx_data == CLI_KEY_UP) {
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	2b41      	cmp	r3, #65	; 0x41
 800383c:	d10c      	bne.n	8003858 <cliUpdate+0x3e4>
			cliLineChange(p_cli, true);
 800383e:	2101      	movs	r1, #1
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f8db 	bl	80039fc <cliLineChange>
			uartPrintf(p_cli->ch, (char*) p_cli->line.buf);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f7ff fc4e 	bl	80030f4 <uartPrintf>
		}

		if (rx_data == CLI_KEY_DOWN) {
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	2b42      	cmp	r3, #66	; 0x42
 800385c:	d10c      	bne.n	8003878 <cliUpdate+0x404>
			cliLineChange(p_cli, false);
 800385e:	2100      	movs	r1, #0
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8cb 	bl	80039fc <cliLineChange>
			uartPrintf(p_cli->ch, (char*) p_cli->line.buf);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f7ff fc3e 	bl	80030f4 <uartPrintf>
		}

		if (rx_data == CLI_KEY_HOME) {
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	2b31      	cmp	r3, #49	; 0x31
 800387c:	d10f      	bne.n	800389e <cliUpdate+0x42a>
			uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7818      	ldrb	r0, [r3, #0]
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003888:	461a      	mov	r2, r3
 800388a:	492b      	ldr	r1, [pc, #172]	; (8003938 <cliUpdate+0x4c4>)
 800388c:	f7ff fc32 	bl	80030f4 <uartPrintf>
			line->cursor = 0;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			p_cli->state = CLI_RX_SP4;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2204      	movs	r2, #4
 800389c:	741a      	strb	r2, [r3, #16]
		}

		if (rx_data == CLI_KEY_END) {
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	2b34      	cmp	r3, #52	; 0x34
 80038a2:	d13f      	bne.n	8003924 <cliUpdate+0x4b0>
			uint16_t mov_len;

			if (line->cursor < line->count) {
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d210      	bcs.n	80038d6 <cliUpdate+0x462>
				mov_len = line->count - line->cursor;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	82fb      	strh	r3, [r7, #22]
				uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	8afa      	ldrh	r2, [r7, #22]
 80038ce:	491b      	ldr	r1, [pc, #108]	; (800393c <cliUpdate+0x4c8>)
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fc0f 	bl	80030f4 <uartPrintf>
			}
			if (line->cursor > line->count) {
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d910      	bls.n	8003908 <cliUpdate+0x494>
				mov_len = line->cursor - line->count;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	82fb      	strh	r3, [r7, #22]
				uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	8afa      	ldrh	r2, [r7, #22]
 8003900:	490d      	ldr	r1, [pc, #52]	; (8003938 <cliUpdate+0x4c4>)
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fbf6 	bl	80030f4 <uartPrintf>
			}
			line->cursor = line->count;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			p_cli->state = CLI_RX_SP4;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2204      	movs	r2, #4
 8003918:	741a      	strb	r2, [r3, #16]
		}
		break;
 800391a:	e003      	b.n	8003924 <cliUpdate+0x4b0>

	case CLI_RX_SP4:
		p_cli->state = CLI_RX_IDLE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	741a      	strb	r2, [r3, #16]
		break;
 8003922:	e000      	b.n	8003926 <cliUpdate+0x4b2>
		break;
 8003924:	bf00      	nop
	}

	cliShowLog(p_cli);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff fce8 	bl	80032fc <cliShowLog>

	return ret;
 800392c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003930:	4618      	mov	r0, r3
 8003932:	3730      	adds	r7, #48	; 0x30
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	08011d24 	.word	0x08011d24
 800393c:	08011d2c 	.word	0x08011d2c

08003940 <cliLineClean>:

void cliLineClean(cli_t *p_cli) {
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	p_cli->line.count = 0;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	p_cli->line.cursor = 0;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	223f      	movs	r2, #63	; 0x3f
 800395c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
	p_cli->line.buf[0] = 0;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr

08003972 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli) {
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]

	p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003980:	461a      	mov	r2, r3
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	015b      	lsls	r3, r3, #5
 8003988:	4413      	add	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	440b      	add	r3, r1
 8003990:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4610      	mov	r0, r2
 8003998:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800399c:	2243      	movs	r2, #67	; 0x43
 800399e:	4619      	mov	r1, r3
 80039a0:	f00a ff98 	bl	800e8d4 <memcpy>

	if (p_cli->hist_line_count < CLI_LINE_HIS_MAX) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d807      	bhi.n	80039be <cliLineAdd+0x4c>
		p_cli->hist_line_count++;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80039b4:	3301      	adds	r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	}

	p_cli->hist_line_i = p_cli->hist_line_last;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80039c4:	b25a      	sxtb	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80039d2:	3301      	adds	r3, #1
 80039d4:	425a      	negs	r2, r3
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	f002 0203 	and.w	r2, r2, #3
 80039de:	bf58      	it	pl
 80039e0:	4253      	negpl	r3, r2
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	p_cli->hist_line_new = true;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	70fb      	strb	r3, [r7, #3]
	uint8_t change_i;

	if (p_cli->hist_line_count == 0) {
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d076      	beq.n	8003b00 <cliLineChange+0x104>
		return;
	}

	if (p_cli->line.cursor > 0) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <cliLineChange+0x32>
		uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	7818      	ldrb	r0, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003a26:	461a      	mov	r2, r3
 8003a28:	4937      	ldr	r1, [pc, #220]	; (8003b08 <cliLineChange+0x10c>)
 8003a2a:	f7ff fb63 	bl	80030f4 <uartPrintf>
	}
	if (p_cli->line.count > 0) {
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <cliLineChange+0x4e>
		uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7818      	ldrb	r0, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8003a42:	461a      	mov	r2, r3
 8003a44:	4931      	ldr	r1, [pc, #196]	; (8003b0c <cliLineChange+0x110>)
 8003a46:	f7ff fb55 	bl	80030f4 <uartPrintf>
	}

	if (key_up == true) {
 8003a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d125      	bne.n	8003a9e <cliLineChange+0xa2>
		if (p_cli->hist_line_new == true) {
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d006      	beq.n	8003a6a <cliLineChange+0x6e>
			p_cli->hist_line_i = p_cli->hist_line_last;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003a62:	b25a      	sxtb	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
		}
		p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003a70:	461a      	mov	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8003a78:	4413      	add	r3, r2
 8003a7a:	3b01      	subs	r3, #1
				% p_cli->hist_line_count;
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8003a82:	fb93 f1f2 	sdiv	r1, r3, r2
 8003a86:	fb01 f202 	mul.w	r2, r1, r2
 8003a8a:	1a9b      	subs	r3, r3, r2
		p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1)
 8003a8c:	b25a      	sxtb	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
		change_i = p_cli->hist_line_i;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	e013      	b.n	8003ac6 <cliLineChange+0xca>
	} else {
		p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8003aac:	fb93 f1f2 	sdiv	r1, r3, r2
 8003ab0:	fb01 f202 	mul.w	r2, r1, r2
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	b25a      	sxtb	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
		change_i = p_cli->hist_line_i;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8003ac4:	73fb      	strb	r3, [r7, #15]
	}

	p_cli->line = p_cli->line_buf[change_i];
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	015b      	lsls	r3, r3, #5
 8003ad0:	4413      	add	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4403      	add	r3, r0
 8003ad8:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8003adc:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	2243      	movs	r2, #67	; 0x43
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f00a fef5 	bl	800e8d4 <memcpy>
	p_cli->line.cursor = p_cli->line.count;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

	p_cli->hist_line_new = false;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8003afe:	e000      	b.n	8003b02 <cliLineChange+0x106>
		return;
 8003b00:	bf00      	nop
}
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08011d24 	.word	0x08011d24
 8003b0c:	08011d34 	.word	0x08011d34

08003b10 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	72fb      	strb	r3, [r7, #11]

	if (cliParseArgs(p_cli) == true) {
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f851 	bl	8003bc4 <cliParseArgs>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d046      	beq.n	8003bb6 <cliRunCmd+0xa6>
		cliPrintf("\r\n");
 8003b28:	4825      	ldr	r0, [pc, #148]	; (8003bc0 <cliRunCmd+0xb0>)
 8003b2a:	f000 f893 	bl	8003c54 <cliPrintf>

		cliToUpper(p_cli->argv[0]);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f8b1 	bl	8003c9c <cliToUpper>

		for (int i = 0; i < p_cli->cmd_count; i++) {
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e033      	b.n	8003ba8 <cliRunCmd+0x98>
			if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4413      	add	r3, r2
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f7fc fb64 	bl	8000228 <strcmp>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11d      	bne.n	8003ba2 <cliRunCmd+0x92>
				p_cli->cmd_args.argc = p_cli->argc - 1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
				p_cli->cmd_args.argv = &p_cli->argv[1];
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
				p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4798      	blx	r3
				break;
 8003ba0:	e009      	b.n	8003bb6 <cliRunCmd+0xa6>
		for (int i = 0; i < p_cli->cmd_count; i++) {
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	dbc4      	blt.n	8003b40 <cliRunCmd+0x30>
			}
		}
	}

	return ret;
 8003bb6:	7afb      	ldrb	r3, [r7, #11]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	08011d3c 	.word	0x08011d3c

08003bc4 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	77fb      	strb	r3, [r7, #31]
	char *tok;
	char *next_ptr;
	uint16_t argc = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	82fb      	strh	r3, [r7, #22]
	static const char *delim = " \f\n\r\t\v";
	char *cmdline;
	char **argv;

	p_cli->argc = 0;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

	cmdline = (char*) p_cli->line.buf;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8003be2:	613b      	str	r3, [r7, #16]
	argv = p_cli->argv;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8003bea:	60fb      	str	r3, [r7, #12]

	argv[argc] = NULL;
 8003bec:	8afb      	ldrh	r3, [r7, #22]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

	for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 8003bf8:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <cliParseArgs+0x8c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f107 0208 	add.w	r2, r7, #8
 8003c00:	4619      	mov	r1, r3
 8003c02:	6938      	ldr	r0, [r7, #16]
 8003c04:	f00b fd22 	bl	800f64c <strtok_r>
 8003c08:	61b8      	str	r0, [r7, #24]
 8003c0a:	e010      	b.n	8003c2e <cliParseArgs+0x6a>
			tok = strtok_r(NULL, delim, &next_ptr)) {
		argv[argc++] = tok;
 8003c0c:	8afb      	ldrh	r3, [r7, #22]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	82fa      	strh	r2, [r7, #22]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	601a      	str	r2, [r3, #0]
			tok = strtok_r(NULL, delim, &next_ptr)) {
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <cliParseArgs+0x8c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f107 0208 	add.w	r2, r7, #8
 8003c24:	4619      	mov	r1, r3
 8003c26:	2000      	movs	r0, #0
 8003c28:	f00b fd10 	bl	800f64c <strtok_r>
 8003c2c:	61b8      	str	r0, [r7, #24]
	for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1eb      	bne.n	8003c0c <cliParseArgs+0x48>
	}

	p_cli->argc = argc;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8afa      	ldrh	r2, [r7, #22]
 8003c38:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

	if (argc > 0) {
 8003c3c:	8afb      	ldrh	r3, [r7, #22]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <cliParseArgs+0x82>
		ret = true;
 8003c42:	2301      	movs	r3, #1
 8003c44:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 8003c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000030 	.word	0x20000030

08003c54 <cliPrintf>:

void cliPrintf(const char *fmt, ...) {
 8003c54:	b40f      	push	{r0, r1, r2, r3}
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
	va_list arg;
	va_start(arg, fmt);
 8003c5c:	f107 031c 	add.w	r3, r7, #28
 8003c60:	607b      	str	r3, [r7, #4]
	int32_t len;
	cli_t *p_cli = &cli_node;
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <cliPrintf+0x44>)
 8003c64:	60fb      	str	r3, [r7, #12]

	len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f103 0011 	add.w	r0, r3, #17
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c74:	f00b fd96 	bl	800f7a4 <vsniprintf>
 8003c78:	60b8      	str	r0, [r7, #8]
	va_end(arg);

	uartWrite(p_cli->ch, (uint8_t*) p_cli->print_buffer, len);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	7818      	ldrb	r0, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3311      	adds	r3, #17
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7ff f9fd 	bl	8003084 <uartWrite>
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c94:	b004      	add	sp, #16
 8003c96:	4770      	bx	lr
 8003c98:	20000890 	.word	0x20000890

08003c9c <cliToUpper>:

void cliToUpper(char *str) {
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint8_t str_ch;

	for (i = 0; i < CLI_CMD_NAME_MAX; i++) {
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	81fb      	strh	r3, [r7, #14]
 8003ca8:	e018      	b.n	8003cdc <cliToUpper+0x40>
		str_ch = str[i];
 8003caa:	89fb      	ldrh	r3, [r7, #14]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	737b      	strb	r3, [r7, #13]

		if (str_ch == 0) {
 8003cb4:	7b7b      	ldrb	r3, [r7, #13]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d014      	beq.n	8003ce4 <cliToUpper+0x48>
			break;
		}

		if ((str_ch >= 'a') && (str_ch <= 'z')) {
 8003cba:	7b7b      	ldrb	r3, [r7, #13]
 8003cbc:	2b60      	cmp	r3, #96	; 0x60
 8003cbe:	d905      	bls.n	8003ccc <cliToUpper+0x30>
 8003cc0:	7b7b      	ldrb	r3, [r7, #13]
 8003cc2:	2b7a      	cmp	r3, #122	; 0x7a
 8003cc4:	d802      	bhi.n	8003ccc <cliToUpper+0x30>
			str_ch = str_ch - 'a' + 'A';
 8003cc6:	7b7b      	ldrb	r3, [r7, #13]
 8003cc8:	3b20      	subs	r3, #32
 8003cca:	737b      	strb	r3, [r7, #13]
		}
		str[i] = str_ch;
 8003ccc:	89fb      	ldrh	r3, [r7, #14]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	7b7a      	ldrb	r2, [r7, #13]
 8003cd4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < CLI_CMD_NAME_MAX; i++) {
 8003cd6:	89fb      	ldrh	r3, [r7, #14]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	81fb      	strh	r3, [r7, #14]
 8003cdc:	89fb      	ldrh	r3, [r7, #14]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	d9e3      	bls.n	8003caa <cliToUpper+0xe>
 8003ce2:	e000      	b.n	8003ce6 <cliToUpper+0x4a>
			break;
 8003ce4:	bf00      	nop
	}

	if (i == CLI_CMD_NAME_MAX) {
 8003ce6:	89fb      	ldrh	r3, [r7, #14]
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d105      	bne.n	8003cf8 <cliToUpper+0x5c>
		str[i - 1] = 0;
 8003cec:	89fb      	ldrh	r3, [r7, #14]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
	}
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
	...

08003d04 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
	int32_t ret = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
	cli_t *p_cli = &cli_node;
 8003d12:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <cliArgsGetData+0x4c>)
 8003d14:	60bb      	str	r3, [r7, #8]

	if (index >= p_cli->cmd_args.argc) {
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d301      	bcc.n	8003d28 <cliArgsGetData+0x24>
		return 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e00e      	b.n	8003d46 <cliArgsGetData+0x42>
	}

	ret = (int32_t) strtoul((const char*) p_cli->cmd_args.argv[index],
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f00b fcfc 	bl	800f738 <strtoul>
 8003d40:	4603      	mov	r3, r0
 8003d42:	60fb      	str	r3, [r7, #12]
			(char**) NULL, (int) 0);

	return ret;
 8003d44:	68fb      	ldr	r3, [r7, #12]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000890 	.word	0x20000890

08003d54 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
	float ret = 0.0;
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
	cli_t *p_cli = &cli_node;
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <cliArgsGetFloat+0x4c>)
 8003d66:	60bb      	str	r3, [r7, #8]

	if (index >= p_cli->cmd_args.argc) {
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <cliArgsGetFloat+0x28>
		return 0;
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e00c      	b.n	8003d96 <cliArgsGetFloat+0x42>
	}

	ret = (float) strtof((const char*) p_cli->cmd_args.argv[index],
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f00b fbe3 	bl	800f558 <strtof>
 8003d92:	60f8      	str	r0, [r7, #12]
			(char**) NULL);

	return ret;
 8003d94:	68fb      	ldr	r3, [r7, #12]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000890 	.word	0x20000890

08003da4 <cliArgsGetStr>:

char* cliArgsGetStr(uint8_t index) {
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	71fb      	strb	r3, [r7, #7]
	char *ret = NULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
	cli_t *p_cli = &cli_node;
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <cliArgsGetStr+0x40>)
 8003db4:	60bb      	str	r3, [r7, #8]

	if (index >= p_cli->cmd_args.argc) {
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d301      	bcc.n	8003dc8 <cliArgsGetStr+0x24>
		return 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e008      	b.n	8003dda <cliArgsGetStr+0x36>
	}

	ret = p_cli->cmd_args.argv[index];
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

	return ret;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	20000890 	.word	0x20000890

08003de8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	6039      	str	r1, [r7, #0]
 8003df2:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]
	cli_t *p_cli = &cli_node;
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <cliArgsIsStr+0x50>)
 8003dfa:	60bb      	str	r3, [r7, #8]

	if (index >= p_cli->cmd_args.argc) {
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d301      	bcc.n	8003e0e <cliArgsIsStr+0x26>
		return 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e010      	b.n	8003e30 <cliArgsIsStr+0x48>
	}

	if (strcmp(p_str, p_cli->cmd_args.argv[index]) == 0) {
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6838      	ldr	r0, [r7, #0]
 8003e20:	f7fc fa02 	bl	8000228 <strcmp>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <cliArgsIsStr+0x46>
		ret = true;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000890 	.word	0x20000890

08003e3c <cliAdd>:
	} else {
		return false;
	}
}

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t*)) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
	bool ret = true;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
	cli_t *p_cli = &cli_node;
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <cliAdd+0x90>)
 8003e4c:	613b      	str	r3, [r7, #16]
	uint16_t index;

	if (p_cli->cmd_count >= CLI_CMD_LIST_MAX) {
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8003e54:	2b0f      	cmp	r3, #15
 8003e56:	d901      	bls.n	8003e5c <cliAdd+0x20>
		return false;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e032      	b.n	8003ec2 <cliAdd+0x86>
	}

	index = p_cli->cmd_count;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8003e62:	81fb      	strh	r3, [r7, #14]

	strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8003e64:	89fa      	ldrh	r2, [r7, #14]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f00a fd58 	bl	800e930 <strcpy>
	p_cli->cmd_list[index].cmd_func = p_func;
 8003e80:	89fa      	ldrh	r2, [r7, #14]
 8003e82:	6939      	ldr	r1, [r7, #16]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	601a      	str	r2, [r3, #0]

	cliToUpper(p_cli->cmd_list[index].cmd_str);
 8003e96:	89fa      	ldrh	r2, [r7, #14]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fef6 	bl	8003c9c <cliToUpper>

	p_cli->cmd_count++;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

	return ret;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000890 	.word	0x20000890

08003ed0 <cliShowList>:

void cliShowList(cli_args_t *args) 
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	cli_t *p_cli = &cli_node;
 8003ed8:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <cliShowList+0x7c>)
 8003eda:	60bb      	str	r3, [r7, #8]

	cliPrintf("\r\n");
 8003edc:	481c      	ldr	r0, [pc, #112]	; (8003f50 <cliShowList+0x80>)
 8003ede:	f7ff feb9 	bl	8003c54 <cliPrintf>
	cliPrintf("%s========= CMD LIST =========\r\n",C_YLLW);
 8003ee2:	491c      	ldr	r1, [pc, #112]	; (8003f54 <cliShowList+0x84>)
 8003ee4:	481c      	ldr	r0, [pc, #112]	; (8003f58 <cliShowList+0x88>)
 8003ee6:	f7ff feb5 	bl	8003c54 <cliPrintf>
	cliPrintf("%s",C_NRML);
 8003eea:	491c      	ldr	r1, [pc, #112]	; (8003f5c <cliShowList+0x8c>)
 8003eec:	481c      	ldr	r0, [pc, #112]	; (8003f60 <cliShowList+0x90>)
 8003eee:	f7ff feb1 	bl	8003c54 <cliPrintf>

	for (int i = 0; i < p_cli->cmd_count; i++) 
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	e015      	b.n	8003f24 <cliShowList+0x54>
	{
		cliPrintf("            ");
 8003ef8:	481a      	ldr	r0, [pc, #104]	; (8003f64 <cliShowList+0x94>)
 8003efa:	f7ff feab 	bl	8003c54 <cliPrintf>
		cliPrintf(p_cli->cmd_list[i].cmd_str);
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	4413      	add	r3, r2
 8003f10:	3304      	adds	r3, #4
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fe9e 	bl	8003c54 <cliPrintf>
		cliPrintf("\r\n");
 8003f18:	480d      	ldr	r0, [pc, #52]	; (8003f50 <cliShowList+0x80>)
 8003f1a:	f7ff fe9b 	bl	8003c54 <cliPrintf>
	for (int i = 0; i < p_cli->cmd_count; i++) 
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3301      	adds	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	dbe2      	blt.n	8003ef8 <cliShowList+0x28>
	}

	cliPrintf("%s============================\r\n",C_YLLW);
 8003f32:	4908      	ldr	r1, [pc, #32]	; (8003f54 <cliShowList+0x84>)
 8003f34:	480c      	ldr	r0, [pc, #48]	; (8003f68 <cliShowList+0x98>)
 8003f36:	f7ff fe8d 	bl	8003c54 <cliPrintf>
	cliPrintf("%s",C_NRML);
 8003f3a:	4908      	ldr	r1, [pc, #32]	; (8003f5c <cliShowList+0x8c>)
 8003f3c:	4808      	ldr	r0, [pc, #32]	; (8003f60 <cliShowList+0x90>)
 8003f3e:	f7ff fe89 	bl	8003c54 <cliPrintf>
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000890 	.word	0x20000890
 8003f50:	08011d3c 	.word	0x08011d3c
 8003f54:	08011d40 	.word	0x08011d40
 8003f58:	08011d48 	.word	0x08011d48
 8003f5c:	08011d6c 	.word	0x08011d6c
 8003f60:	08011d74 	.word	0x08011d74
 8003f64:	08011d78 	.word	0x08011d78
 8003f68:	08011d88 	.word	0x08011d88

08003f6c <cli_drv_sqc>:


void cli_drv_sqc(cli_args_t *args) 
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	unsigned int *addr;
	int argc = args->argc;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d11c      	bne.n	8003fc2 <cli_drv_sqc+0x56>
	{
		cliPrintf("%s======== DRV MOTOR TYPE SELECT =========\r\n",C_RED);
 8003f88:	4931      	ldr	r1, [pc, #196]	; (8004050 <cli_drv_sqc+0xe4>)
 8003f8a:	4832      	ldr	r0, [pc, #200]	; (8004054 <cli_drv_sqc+0xe8>)
 8003f8c:	f7ff fe62 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8003f90:	4931      	ldr	r1, [pc, #196]	; (8004058 <cli_drv_sqc+0xec>)
 8003f92:	4832      	ldr	r0, [pc, #200]	; (800405c <cli_drv_sqc+0xf0>)
 8003f94:	f7ff fe5e 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 8003f98:	4831      	ldr	r0, [pc, #196]	; (8004060 <cli_drv_sqc+0xf4>)
 8003f9a:	f7ff fe5b 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  CURTIS TPYE \r\n");
 8003f9e:	4831      	ldr	r0, [pc, #196]	; (8004064 <cli_drv_sqc+0xf8>)
 8003fa0:	f7ff fe58 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  DMCS   TPYE \r\n");
 8003fa4:	4830      	ldr	r0, [pc, #192]	; (8004068 <cli_drv_sqc+0xfc>)
 8003fa6:	f7ff fe55 	bl	8003c54 <cliPrintf>
		cliPrintf("      EX) drv 1  -> CURTIS TYPE SET \r\n");
 8003faa:	4830      	ldr	r0, [pc, #192]	; (800406c <cli_drv_sqc+0x100>)
 8003fac:	f7ff fe52 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 8003fb0:	4927      	ldr	r1, [pc, #156]	; (8004050 <cli_drv_sqc+0xe4>)
 8003fb2:	482f      	ldr	r0, [pc, #188]	; (8004070 <cli_drv_sqc+0x104>)
 8003fb4:	f7ff fe4e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8003fb8:	4927      	ldr	r1, [pc, #156]	; (8004058 <cli_drv_sqc+0xec>)
 8003fba:	4828      	ldr	r0, [pc, #160]	; (800405c <cli_drv_sqc+0xf0>)
 8003fbc:	f7ff fe4a 	bl	8003c54 <cliPrintf>
		return;
 8003fc0:	e042      	b.n	8004048 <cli_drv_sqc+0xdc>
	}


	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f00b fbb4 	bl	800f738 <strtoul>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	60fb      	str	r3, [r7, #12]
	if (addr == 1) // ch
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d113      	bne.n	8004002 <cli_drv_sqc+0x96>
	{
		load_value.Motor_type = 1;
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <cli_drv_sqc+0x108>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8003fe0:	4925      	ldr	r1, [pc, #148]	; (8004078 <cli_drv_sqc+0x10c>)
 8003fe2:	4823      	ldr	r0, [pc, #140]	; (8004070 <cli_drv_sqc+0x104>)
 8003fe4:	f7ff fe36 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET CURTIS TYPE ===========\r\n",C_YLLW);
 8003fe8:	4923      	ldr	r1, [pc, #140]	; (8004078 <cli_drv_sqc+0x10c>)
 8003fea:	4824      	ldr	r0, [pc, #144]	; (800407c <cli_drv_sqc+0x110>)
 8003fec:	f7ff fe32 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8003ff0:	4921      	ldr	r1, [pc, #132]	; (8004078 <cli_drv_sqc+0x10c>)
 8003ff2:	481f      	ldr	r0, [pc, #124]	; (8004070 <cli_drv_sqc+0x104>)
 8003ff4:	f7ff fe2e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8003ff8:	4917      	ldr	r1, [pc, #92]	; (8004058 <cli_drv_sqc+0xec>)
 8003ffa:	4818      	ldr	r0, [pc, #96]	; (800405c <cli_drv_sqc+0xf0>)
 8003ffc:	f7ff fe2a 	bl	8003c54 <cliPrintf>
 8004000:	e022      	b.n	8004048 <cli_drv_sqc+0xdc>
	}
	else if ( addr == 2)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d113      	bne.n	8004030 <cli_drv_sqc+0xc4>
	{
		load_value.Motor_type = 2;
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <cli_drv_sqc+0x108>)
 800400a:	2202      	movs	r2, #2
 800400c:	701a      	strb	r2, [r3, #0]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800400e:	491a      	ldr	r1, [pc, #104]	; (8004078 <cli_drv_sqc+0x10c>)
 8004010:	4817      	ldr	r0, [pc, #92]	; (8004070 <cli_drv_sqc+0x104>)
 8004012:	f7ff fe1f 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET DMCS TYPE ===========\r\n",C_YLLW);
 8004016:	4918      	ldr	r1, [pc, #96]	; (8004078 <cli_drv_sqc+0x10c>)
 8004018:	4819      	ldr	r0, [pc, #100]	; (8004080 <cli_drv_sqc+0x114>)
 800401a:	f7ff fe1b 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800401e:	4916      	ldr	r1, [pc, #88]	; (8004078 <cli_drv_sqc+0x10c>)
 8004020:	4813      	ldr	r0, [pc, #76]	; (8004070 <cli_drv_sqc+0x104>)
 8004022:	f7ff fe17 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004026:	490c      	ldr	r1, [pc, #48]	; (8004058 <cli_drv_sqc+0xec>)
 8004028:	480c      	ldr	r0, [pc, #48]	; (800405c <cli_drv_sqc+0xf0>)
 800402a:	f7ff fe13 	bl	8003c54 <cliPrintf>
 800402e:	e00b      	b.n	8004048 <cli_drv_sqc+0xdc>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 8004030:	4907      	ldr	r1, [pc, #28]	; (8004050 <cli_drv_sqc+0xe4>)
 8004032:	4814      	ldr	r0, [pc, #80]	; (8004084 <cli_drv_sqc+0x118>)
 8004034:	f7ff fe0e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 8004038:	4905      	ldr	r1, [pc, #20]	; (8004050 <cli_drv_sqc+0xe4>)
 800403a:	4813      	ldr	r0, [pc, #76]	; (8004088 <cli_drv_sqc+0x11c>)
 800403c:	f7ff fe0a 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004040:	4905      	ldr	r1, [pc, #20]	; (8004058 <cli_drv_sqc+0xec>)
 8004042:	4806      	ldr	r0, [pc, #24]	; (800405c <cli_drv_sqc+0xf0>)
 8004044:	f7ff fe06 	bl	8003c54 <cliPrintf>
	}

}
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	08011dac 	.word	0x08011dac
 8004054:	08011db4 	.word	0x08011db4
 8004058:	08011d6c 	.word	0x08011d6c
 800405c:	08011d74 	.word	0x08011d74
 8004060:	08011de4 	.word	0x08011de4
 8004064:	08011e08 	.word	0x08011e08
 8004068:	08011e2c 	.word	0x08011e2c
 800406c:	08011e50 	.word	0x08011e50
 8004070:	08011e78 	.word	0x08011e78
 8004074:	20000ddc 	.word	0x20000ddc
 8004078:	08011d40 	.word	0x08011d40
 800407c:	08011ea8 	.word	0x08011ea8
 8004080:	08011ed4 	.word	0x08011ed4
 8004084:	08011f00 	.word	0x08011f00
 8004088:	08011f24 	.word	0x08011f24

0800408c <cli_sentype_sqc>:


void cli_sentype_sqc(cli_args_t *args)  // NPN PNP
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	
	unsigned int *addr;
	int argc = args->argc;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11c      	bne.n	80040e2 <cli_sentype_sqc+0x56>
	{
		cliPrintf("%s======== STR SENSOR TYPE SELECT =========\r\n",C_RED);
 80040a8:	4931      	ldr	r1, [pc, #196]	; (8004170 <cli_sentype_sqc+0xe4>)
 80040aa:	4832      	ldr	r0, [pc, #200]	; (8004174 <cli_sentype_sqc+0xe8>)
 80040ac:	f7ff fdd2 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80040b0:	4931      	ldr	r1, [pc, #196]	; (8004178 <cli_sentype_sqc+0xec>)
 80040b2:	4832      	ldr	r0, [pc, #200]	; (800417c <cli_sentype_sqc+0xf0>)
 80040b4:	f7ff fdce 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 80040b8:	4831      	ldr	r0, [pc, #196]	; (8004180 <cli_sentype_sqc+0xf4>)
 80040ba:	f7ff fdcb 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  NPN   TPYE \r\n");
 80040be:	4831      	ldr	r0, [pc, #196]	; (8004184 <cli_sentype_sqc+0xf8>)
 80040c0:	f7ff fdc8 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  PNP   TPYE \r\n");
 80040c4:	4830      	ldr	r0, [pc, #192]	; (8004188 <cli_sentype_sqc+0xfc>)
 80040c6:	f7ff fdc5 	bl	8003c54 <cliPrintf>
		cliPrintf("      EX) type 1  -> NPN TYPE SET \r\n");
 80040ca:	4830      	ldr	r0, [pc, #192]	; (800418c <cli_sentype_sqc+0x100>)
 80040cc:	f7ff fdc2 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 80040d0:	4927      	ldr	r1, [pc, #156]	; (8004170 <cli_sentype_sqc+0xe4>)
 80040d2:	482f      	ldr	r0, [pc, #188]	; (8004190 <cli_sentype_sqc+0x104>)
 80040d4:	f7ff fdbe 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80040d8:	4927      	ldr	r1, [pc, #156]	; (8004178 <cli_sentype_sqc+0xec>)
 80040da:	4828      	ldr	r0, [pc, #160]	; (800417c <cli_sentype_sqc+0xf0>)
 80040dc:	f7ff fdba 	bl	8003c54 <cliPrintf>
		return;
 80040e0:	e042      	b.n	8004168 <cli_sentype_sqc+0xdc>
	}


	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f00b fb24 	bl	800f738 <strtoul>
 80040f0:	4603      	mov	r3, r0
 80040f2:	60fb      	str	r3, [r7, #12]
	if (addr == 1) // ch
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d113      	bne.n	8004122 <cli_sentype_sqc+0x96>
	{

		load_value.Sensor_type = 2;
 80040fa:	4b26      	ldr	r3, [pc, #152]	; (8004194 <cli_sentype_sqc+0x108>)
 80040fc:	2202      	movs	r2, #2
 80040fe:	705a      	strb	r2, [r3, #1]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004100:	4925      	ldr	r1, [pc, #148]	; (8004198 <cli_sentype_sqc+0x10c>)
 8004102:	4823      	ldr	r0, [pc, #140]	; (8004190 <cli_sentype_sqc+0x104>)
 8004104:	f7ff fda6 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET NPN TYPE ===========\r\n",C_YLLW);
 8004108:	4923      	ldr	r1, [pc, #140]	; (8004198 <cli_sentype_sqc+0x10c>)
 800410a:	4824      	ldr	r0, [pc, #144]	; (800419c <cli_sentype_sqc+0x110>)
 800410c:	f7ff fda2 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004110:	4921      	ldr	r1, [pc, #132]	; (8004198 <cli_sentype_sqc+0x10c>)
 8004112:	481f      	ldr	r0, [pc, #124]	; (8004190 <cli_sentype_sqc+0x104>)
 8004114:	f7ff fd9e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004118:	4917      	ldr	r1, [pc, #92]	; (8004178 <cli_sentype_sqc+0xec>)
 800411a:	4818      	ldr	r0, [pc, #96]	; (800417c <cli_sentype_sqc+0xf0>)
 800411c:	f7ff fd9a 	bl	8003c54 <cliPrintf>
 8004120:	e022      	b.n	8004168 <cli_sentype_sqc+0xdc>
	}
	else if ( addr == 2)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d113      	bne.n	8004150 <cli_sentype_sqc+0xc4>
	{
		load_value.Sensor_type = 1;
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <cli_sentype_sqc+0x108>)
 800412a:	2201      	movs	r2, #1
 800412c:	705a      	strb	r2, [r3, #1]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800412e:	491a      	ldr	r1, [pc, #104]	; (8004198 <cli_sentype_sqc+0x10c>)
 8004130:	4817      	ldr	r0, [pc, #92]	; (8004190 <cli_sentype_sqc+0x104>)
 8004132:	f7ff fd8f 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET PNP TYPE ===========\r\n",C_YLLW);
 8004136:	4918      	ldr	r1, [pc, #96]	; (8004198 <cli_sentype_sqc+0x10c>)
 8004138:	4819      	ldr	r0, [pc, #100]	; (80041a0 <cli_sentype_sqc+0x114>)
 800413a:	f7ff fd8b 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800413e:	4916      	ldr	r1, [pc, #88]	; (8004198 <cli_sentype_sqc+0x10c>)
 8004140:	4813      	ldr	r0, [pc, #76]	; (8004190 <cli_sentype_sqc+0x104>)
 8004142:	f7ff fd87 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004146:	490c      	ldr	r1, [pc, #48]	; (8004178 <cli_sentype_sqc+0xec>)
 8004148:	480c      	ldr	r0, [pc, #48]	; (800417c <cli_sentype_sqc+0xf0>)
 800414a:	f7ff fd83 	bl	8003c54 <cliPrintf>
 800414e:	e00b      	b.n	8004168 <cli_sentype_sqc+0xdc>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 8004150:	4907      	ldr	r1, [pc, #28]	; (8004170 <cli_sentype_sqc+0xe4>)
 8004152:	4814      	ldr	r0, [pc, #80]	; (80041a4 <cli_sentype_sqc+0x118>)
 8004154:	f7ff fd7e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 8004158:	4905      	ldr	r1, [pc, #20]	; (8004170 <cli_sentype_sqc+0xe4>)
 800415a:	4813      	ldr	r0, [pc, #76]	; (80041a8 <cli_sentype_sqc+0x11c>)
 800415c:	f7ff fd7a 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004160:	4905      	ldr	r1, [pc, #20]	; (8004178 <cli_sentype_sqc+0xec>)
 8004162:	4806      	ldr	r0, [pc, #24]	; (800417c <cli_sentype_sqc+0xf0>)
 8004164:	f7ff fd76 	bl	8003c54 <cliPrintf>
	}
}
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	08011dac 	.word	0x08011dac
 8004174:	08011f50 	.word	0x08011f50
 8004178:	08011d6c 	.word	0x08011d6c
 800417c:	08011d74 	.word	0x08011d74
 8004180:	08011de4 	.word	0x08011de4
 8004184:	08011f80 	.word	0x08011f80
 8004188:	08011fa4 	.word	0x08011fa4
 800418c:	08011fc8 	.word	0x08011fc8
 8004190:	08011e78 	.word	0x08011e78
 8004194:	20000ddc 	.word	0x20000ddc
 8004198:	08011d40 	.word	0x08011d40
 800419c:	08011ff0 	.word	0x08011ff0
 80041a0:	08012018 	.word	0x08012018
 80041a4:	08011f00 	.word	0x08011f00
 80041a8:	08011f24 	.word	0x08011f24

080041ac <cli_speed_offset_sqc>:

void cli_speed_offset_sqc(cli_args_t *args) 
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	uint8_t temp = 10;
 80041b4:	230a      	movs	r3, #10
 80041b6:	75fb      	strb	r3, [r7, #23]
	
	unsigned int *addr;
	int argc = args->argc;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	613b      	str	r3, [r7, #16]
	char **argv = args->argv;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	60fb      	str	r3, [r7, #12]

	if (args->argc < 1) 
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d120      	bne.n	800420e <cli_speed_offset_sqc+0x62>
	{
		cliPrintf("%s======== AUTO SPEED TYPE SELECT =========\r\n",C_RED);
 80041cc:	492b      	ldr	r1, [pc, #172]	; (800427c <cli_speed_offset_sqc+0xd0>)
 80041ce:	482c      	ldr	r0, [pc, #176]	; (8004280 <cli_speed_offset_sqc+0xd4>)
 80041d0:	f7ff fd40 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80041d4:	492b      	ldr	r1, [pc, #172]	; (8004284 <cli_speed_offset_sqc+0xd8>)
 80041d6:	482c      	ldr	r0, [pc, #176]	; (8004288 <cli_speed_offset_sqc+0xdc>)
 80041d8:	f7ff fd3c 	bl	8003c54 <cliPrintf>
		cliPrintf("%s      >> CURRENT SPEED OFFSET = %d \r\n",C_AQUA,temp);
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	461a      	mov	r2, r3
 80041e0:	492a      	ldr	r1, [pc, #168]	; (800428c <cli_speed_offset_sqc+0xe0>)
 80041e2:	482b      	ldr	r0, [pc, #172]	; (8004290 <cli_speed_offset_sqc+0xe4>)
 80041e4:	f7ff fd36 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80041e8:	4926      	ldr	r1, [pc, #152]	; (8004284 <cli_speed_offset_sqc+0xd8>)
 80041ea:	4827      	ldr	r0, [pc, #156]	; (8004288 <cli_speed_offset_sqc+0xdc>)
 80041ec:	f7ff fd32 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose 1 - 20 RANGE \r\n");
 80041f0:	4828      	ldr	r0, [pc, #160]	; (8004294 <cli_speed_offset_sqc+0xe8>)
 80041f2:	f7ff fd2f 	bl	8003c54 <cliPrintf>
		cliPrintf("      EX) speed 10  -> SPEED OFFSET 10 SET \r\n");
 80041f6:	4828      	ldr	r0, [pc, #160]	; (8004298 <cli_speed_offset_sqc+0xec>)
 80041f8:	f7ff fd2c 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 80041fc:	491f      	ldr	r1, [pc, #124]	; (800427c <cli_speed_offset_sqc+0xd0>)
 80041fe:	4827      	ldr	r0, [pc, #156]	; (800429c <cli_speed_offset_sqc+0xf0>)
 8004200:	f7ff fd28 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004204:	491f      	ldr	r1, [pc, #124]	; (8004284 <cli_speed_offset_sqc+0xd8>)
 8004206:	4820      	ldr	r0, [pc, #128]	; (8004288 <cli_speed_offset_sqc+0xdc>)
 8004208:	f7ff fd24 	bl	8003c54 <cliPrintf>
		return;
 800420c:	e032      	b.n	8004274 <cli_speed_offset_sqc+0xc8>
	}


	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f00b fa8e 	bl	800f738 <strtoul>
 800421c:	4603      	mov	r3, r0
 800421e:	60bb      	str	r3, [r7, #8]
	if (addr>=1 && addr<=20) 
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d01a      	beq.n	800425c <cli_speed_offset_sqc+0xb0>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b14      	cmp	r3, #20
 800422a:	d817      	bhi.n	800425c <cli_speed_offset_sqc+0xb0>
	{
		load_value.IDLE_SPD = addr;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	b2da      	uxtb	r2, r3
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <cli_speed_offset_sqc+0xf4>)
 8004232:	711a      	strb	r2, [r3, #4]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004234:	491b      	ldr	r1, [pc, #108]	; (80042a4 <cli_speed_offset_sqc+0xf8>)
 8004236:	4819      	ldr	r0, [pc, #100]	; (800429c <cli_speed_offset_sqc+0xf0>)
 8004238:	f7ff fd0c 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========= SET SPD OFFSET = %d ==========\r\n",C_YLLW,load_value.IDLE_SPD);
 800423c:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <cli_speed_offset_sqc+0xf4>)
 800423e:	791b      	ldrb	r3, [r3, #4]
 8004240:	461a      	mov	r2, r3
 8004242:	4918      	ldr	r1, [pc, #96]	; (80042a4 <cli_speed_offset_sqc+0xf8>)
 8004244:	4818      	ldr	r0, [pc, #96]	; (80042a8 <cli_speed_offset_sqc+0xfc>)
 8004246:	f7ff fd05 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800424a:	4916      	ldr	r1, [pc, #88]	; (80042a4 <cli_speed_offset_sqc+0xf8>)
 800424c:	4813      	ldr	r0, [pc, #76]	; (800429c <cli_speed_offset_sqc+0xf0>)
 800424e:	f7ff fd01 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004252:	490c      	ldr	r1, [pc, #48]	; (8004284 <cli_speed_offset_sqc+0xd8>)
 8004254:	480c      	ldr	r0, [pc, #48]	; (8004288 <cli_speed_offset_sqc+0xdc>)
 8004256:	f7ff fcfd 	bl	8003c54 <cliPrintf>
 800425a:	e00b      	b.n	8004274 <cli_speed_offset_sqc+0xc8>
	}
	
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 800425c:	4907      	ldr	r1, [pc, #28]	; (800427c <cli_speed_offset_sqc+0xd0>)
 800425e:	4813      	ldr	r0, [pc, #76]	; (80042ac <cli_speed_offset_sqc+0x100>)
 8004260:	f7ff fcf8 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 8004264:	4905      	ldr	r1, [pc, #20]	; (800427c <cli_speed_offset_sqc+0xd0>)
 8004266:	4812      	ldr	r0, [pc, #72]	; (80042b0 <cli_speed_offset_sqc+0x104>)
 8004268:	f7ff fcf4 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800426c:	4905      	ldr	r1, [pc, #20]	; (8004284 <cli_speed_offset_sqc+0xd8>)
 800426e:	4806      	ldr	r0, [pc, #24]	; (8004288 <cli_speed_offset_sqc+0xdc>)
 8004270:	f7ff fcf0 	bl	8003c54 <cliPrintf>
	}
}
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	08011dac 	.word	0x08011dac
 8004280:	08012040 	.word	0x08012040
 8004284:	08011d6c 	.word	0x08011d6c
 8004288:	08011d74 	.word	0x08011d74
 800428c:	08012070 	.word	0x08012070
 8004290:	08012078 	.word	0x08012078
 8004294:	080120a0 	.word	0x080120a0
 8004298:	080120c8 	.word	0x080120c8
 800429c:	08011e78 	.word	0x08011e78
 80042a0:	20000ddc 	.word	0x20000ddc
 80042a4:	08011d40 	.word	0x08011d40
 80042a8:	080120f8 	.word	0x080120f8
 80042ac:	08011f00 	.word	0x08011f00
 80042b0:	08011f24 	.word	0x08011f24

080042b4 <cli_speed_low_sqc>:


void cli_speed_low_sqc(cli_args_t *args) 
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	uint8_t temp = 100;
 80042bc:	2364      	movs	r3, #100	; 0x64
 80042be:	75fb      	strb	r3, [r7, #23]
	unsigned int *addr;
	int argc = args->argc;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	613b      	str	r3, [r7, #16]
	char **argv = args->argv;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]

	if (args->argc < 1) 
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d120      	bne.n	8004316 <cli_speed_low_sqc+0x62>
	{
		cliPrintf("%s======== AUTO SPEED TYPE SELECT =========\r\n",C_RED);
 80042d4:	492b      	ldr	r1, [pc, #172]	; (8004384 <cli_speed_low_sqc+0xd0>)
 80042d6:	482c      	ldr	r0, [pc, #176]	; (8004388 <cli_speed_low_sqc+0xd4>)
 80042d8:	f7ff fcbc 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80042dc:	492b      	ldr	r1, [pc, #172]	; (800438c <cli_speed_low_sqc+0xd8>)
 80042de:	482c      	ldr	r0, [pc, #176]	; (8004390 <cli_speed_low_sqc+0xdc>)
 80042e0:	f7ff fcb8 	bl	8003c54 <cliPrintf>
		cliPrintf("%s      >> CURRENT L SPEED = %d \r\n",C_AQUA,temp);
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	461a      	mov	r2, r3
 80042e8:	492a      	ldr	r1, [pc, #168]	; (8004394 <cli_speed_low_sqc+0xe0>)
 80042ea:	482b      	ldr	r0, [pc, #172]	; (8004398 <cli_speed_low_sqc+0xe4>)
 80042ec:	f7ff fcb2 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80042f0:	4926      	ldr	r1, [pc, #152]	; (800438c <cli_speed_low_sqc+0xd8>)
 80042f2:	4827      	ldr	r0, [pc, #156]	; (8004390 <cli_speed_low_sqc+0xdc>)
 80042f4:	f7ff fcae 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose 90 - 150 RANGE \r\n");
 80042f8:	4828      	ldr	r0, [pc, #160]	; (800439c <cli_speed_low_sqc+0xe8>)
 80042fa:	f7ff fcab 	bl	8003c54 <cliPrintf>
		cliPrintf("      EX) low 120  -> low SPEED 120 SET \r\n");
 80042fe:	4828      	ldr	r0, [pc, #160]	; (80043a0 <cli_speed_low_sqc+0xec>)
 8004300:	f7ff fca8 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 8004304:	491f      	ldr	r1, [pc, #124]	; (8004384 <cli_speed_low_sqc+0xd0>)
 8004306:	4827      	ldr	r0, [pc, #156]	; (80043a4 <cli_speed_low_sqc+0xf0>)
 8004308:	f7ff fca4 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800430c:	491f      	ldr	r1, [pc, #124]	; (800438c <cli_speed_low_sqc+0xd8>)
 800430e:	4820      	ldr	r0, [pc, #128]	; (8004390 <cli_speed_low_sqc+0xdc>)
 8004310:	f7ff fca0 	bl	8003c54 <cliPrintf>
		return;
 8004314:	e032      	b.n	800437c <cli_speed_low_sqc+0xc8>
	}

	
	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2200      	movs	r2, #0
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f00b fa0a 	bl	800f738 <strtoul>
 8004324:	4603      	mov	r3, r0
 8004326:	60bb      	str	r3, [r7, #8]
	if (addr>=90 && addr<=150) 
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b59      	cmp	r3, #89	; 0x59
 800432c:	d91a      	bls.n	8004364 <cli_speed_low_sqc+0xb0>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b96      	cmp	r3, #150	; 0x96
 8004332:	d817      	bhi.n	8004364 <cli_speed_low_sqc+0xb0>
	{
		load_value.ATD_LOW_SPD = addr;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <cli_speed_low_sqc+0xf4>)
 800433a:	715a      	strb	r2, [r3, #5]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800433c:	491b      	ldr	r1, [pc, #108]	; (80043ac <cli_speed_low_sqc+0xf8>)
 800433e:	4819      	ldr	r0, [pc, #100]	; (80043a4 <cli_speed_low_sqc+0xf0>)
 8004340:	f7ff fc88 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========= SET L SPD OFFSET = %d ==========\r\n",C_YLLW,load_value.ATD_LOW_SPD);
 8004344:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <cli_speed_low_sqc+0xf4>)
 8004346:	795b      	ldrb	r3, [r3, #5]
 8004348:	461a      	mov	r2, r3
 800434a:	4918      	ldr	r1, [pc, #96]	; (80043ac <cli_speed_low_sqc+0xf8>)
 800434c:	4818      	ldr	r0, [pc, #96]	; (80043b0 <cli_speed_low_sqc+0xfc>)
 800434e:	f7ff fc81 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004352:	4916      	ldr	r1, [pc, #88]	; (80043ac <cli_speed_low_sqc+0xf8>)
 8004354:	4813      	ldr	r0, [pc, #76]	; (80043a4 <cli_speed_low_sqc+0xf0>)
 8004356:	f7ff fc7d 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800435a:	490c      	ldr	r1, [pc, #48]	; (800438c <cli_speed_low_sqc+0xd8>)
 800435c:	480c      	ldr	r0, [pc, #48]	; (8004390 <cli_speed_low_sqc+0xdc>)
 800435e:	f7ff fc79 	bl	8003c54 <cliPrintf>
 8004362:	e00b      	b.n	800437c <cli_speed_low_sqc+0xc8>
	}
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 8004364:	4907      	ldr	r1, [pc, #28]	; (8004384 <cli_speed_low_sqc+0xd0>)
 8004366:	4813      	ldr	r0, [pc, #76]	; (80043b4 <cli_speed_low_sqc+0x100>)
 8004368:	f7ff fc74 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 800436c:	4905      	ldr	r1, [pc, #20]	; (8004384 <cli_speed_low_sqc+0xd0>)
 800436e:	4812      	ldr	r0, [pc, #72]	; (80043b8 <cli_speed_low_sqc+0x104>)
 8004370:	f7ff fc70 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004374:	4905      	ldr	r1, [pc, #20]	; (800438c <cli_speed_low_sqc+0xd8>)
 8004376:	4806      	ldr	r0, [pc, #24]	; (8004390 <cli_speed_low_sqc+0xdc>)
 8004378:	f7ff fc6c 	bl	8003c54 <cliPrintf>
	}

}
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	08011dac 	.word	0x08011dac
 8004388:	08012040 	.word	0x08012040
 800438c:	08011d6c 	.word	0x08011d6c
 8004390:	08011d74 	.word	0x08011d74
 8004394:	08012070 	.word	0x08012070
 8004398:	08012128 	.word	0x08012128
 800439c:	0801214c 	.word	0x0801214c
 80043a0:	08012178 	.word	0x08012178
 80043a4:	08011e78 	.word	0x08011e78
 80043a8:	20000ddc 	.word	0x20000ddc
 80043ac:	08011d40 	.word	0x08011d40
 80043b0:	080121a4 	.word	0x080121a4
 80043b4:	08011f00 	.word	0x08011f00
 80043b8:	08011f24 	.word	0x08011f24

080043bc <cli_speed_high_sqc>:


void cli_speed_high_sqc(cli_args_t *args) 
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	uint8_t temp = 120;
 80043c4:	2378      	movs	r3, #120	; 0x78
 80043c6:	75fb      	strb	r3, [r7, #23]
	
	unsigned int *addr;
	int argc = args->argc;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	613b      	str	r3, [r7, #16]
	char **argv = args->argv;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	60fb      	str	r3, [r7, #12]

	if (args->argc < 1) 
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d120      	bne.n	800441e <cli_speed_high_sqc+0x62>
	{
		cliPrintf("%s======== AUTO SPEED TYPE SELECT =========\r\n",C_RED);
 80043dc:	492b      	ldr	r1, [pc, #172]	; (800448c <cli_speed_high_sqc+0xd0>)
 80043de:	482c      	ldr	r0, [pc, #176]	; (8004490 <cli_speed_high_sqc+0xd4>)
 80043e0:	f7ff fc38 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80043e4:	492b      	ldr	r1, [pc, #172]	; (8004494 <cli_speed_high_sqc+0xd8>)
 80043e6:	482c      	ldr	r0, [pc, #176]	; (8004498 <cli_speed_high_sqc+0xdc>)
 80043e8:	f7ff fc34 	bl	8003c54 <cliPrintf>
		cliPrintf("%s      >> CURRENT H SPEED = %d \r\n",C_AQUA,temp);
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	461a      	mov	r2, r3
 80043f0:	492a      	ldr	r1, [pc, #168]	; (800449c <cli_speed_high_sqc+0xe0>)
 80043f2:	482b      	ldr	r0, [pc, #172]	; (80044a0 <cli_speed_high_sqc+0xe4>)
 80043f4:	f7ff fc2e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80043f8:	4926      	ldr	r1, [pc, #152]	; (8004494 <cli_speed_high_sqc+0xd8>)
 80043fa:	4827      	ldr	r0, [pc, #156]	; (8004498 <cli_speed_high_sqc+0xdc>)
 80043fc:	f7ff fc2a 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose 90 - 150 RANGE \r\n");
 8004400:	4828      	ldr	r0, [pc, #160]	; (80044a4 <cli_speed_high_sqc+0xe8>)
 8004402:	f7ff fc27 	bl	8003c54 <cliPrintf>
		cliPrintf("      EX) high 140  -> high SPEED 140 SET \r\n");
 8004406:	4828      	ldr	r0, [pc, #160]	; (80044a8 <cli_speed_high_sqc+0xec>)
 8004408:	f7ff fc24 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 800440c:	491f      	ldr	r1, [pc, #124]	; (800448c <cli_speed_high_sqc+0xd0>)
 800440e:	4827      	ldr	r0, [pc, #156]	; (80044ac <cli_speed_high_sqc+0xf0>)
 8004410:	f7ff fc20 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004414:	491f      	ldr	r1, [pc, #124]	; (8004494 <cli_speed_high_sqc+0xd8>)
 8004416:	4820      	ldr	r0, [pc, #128]	; (8004498 <cli_speed_high_sqc+0xdc>)
 8004418:	f7ff fc1c 	bl	8003c54 <cliPrintf>
		return;
 800441c:	e032      	b.n	8004484 <cli_speed_high_sqc+0xc8>
	}


	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f00b f986 	bl	800f738 <strtoul>
 800442c:	4603      	mov	r3, r0
 800442e:	60bb      	str	r3, [r7, #8]

	if (addr>=90 && addr<=150) 
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b59      	cmp	r3, #89	; 0x59
 8004434:	d91a      	bls.n	800446c <cli_speed_high_sqc+0xb0>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b96      	cmp	r3, #150	; 0x96
 800443a:	d817      	bhi.n	800446c <cli_speed_high_sqc+0xb0>
	{
		load_value.ATD_HIGH_SPD = addr;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	b2da      	uxtb	r2, r3
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <cli_speed_high_sqc+0xf4>)
 8004442:	719a      	strb	r2, [r3, #6]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004444:	491b      	ldr	r1, [pc, #108]	; (80044b4 <cli_speed_high_sqc+0xf8>)
 8004446:	4819      	ldr	r0, [pc, #100]	; (80044ac <cli_speed_high_sqc+0xf0>)
 8004448:	f7ff fc04 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========= SET H SPD OFFSET = %d ==========\r\n",C_YLLW,load_value.ATD_HIGH_SPD);
 800444c:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <cli_speed_high_sqc+0xf4>)
 800444e:	799b      	ldrb	r3, [r3, #6]
 8004450:	461a      	mov	r2, r3
 8004452:	4918      	ldr	r1, [pc, #96]	; (80044b4 <cli_speed_high_sqc+0xf8>)
 8004454:	4818      	ldr	r0, [pc, #96]	; (80044b8 <cli_speed_high_sqc+0xfc>)
 8004456:	f7ff fbfd 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800445a:	4916      	ldr	r1, [pc, #88]	; (80044b4 <cli_speed_high_sqc+0xf8>)
 800445c:	4813      	ldr	r0, [pc, #76]	; (80044ac <cli_speed_high_sqc+0xf0>)
 800445e:	f7ff fbf9 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004462:	490c      	ldr	r1, [pc, #48]	; (8004494 <cli_speed_high_sqc+0xd8>)
 8004464:	480c      	ldr	r0, [pc, #48]	; (8004498 <cli_speed_high_sqc+0xdc>)
 8004466:	f7ff fbf5 	bl	8003c54 <cliPrintf>
 800446a:	e00b      	b.n	8004484 <cli_speed_high_sqc+0xc8>
	}
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 800446c:	4907      	ldr	r1, [pc, #28]	; (800448c <cli_speed_high_sqc+0xd0>)
 800446e:	4813      	ldr	r0, [pc, #76]	; (80044bc <cli_speed_high_sqc+0x100>)
 8004470:	f7ff fbf0 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 8004474:	4905      	ldr	r1, [pc, #20]	; (800448c <cli_speed_high_sqc+0xd0>)
 8004476:	4812      	ldr	r0, [pc, #72]	; (80044c0 <cli_speed_high_sqc+0x104>)
 8004478:	f7ff fbec 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800447c:	4905      	ldr	r1, [pc, #20]	; (8004494 <cli_speed_high_sqc+0xd8>)
 800447e:	4806      	ldr	r0, [pc, #24]	; (8004498 <cli_speed_high_sqc+0xdc>)
 8004480:	f7ff fbe8 	bl	8003c54 <cliPrintf>
	}
}
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	08011dac 	.word	0x08011dac
 8004490:	08012040 	.word	0x08012040
 8004494:	08011d6c 	.word	0x08011d6c
 8004498:	08011d74 	.word	0x08011d74
 800449c:	08012070 	.word	0x08012070
 80044a0:	080121d4 	.word	0x080121d4
 80044a4:	0801214c 	.word	0x0801214c
 80044a8:	080121f8 	.word	0x080121f8
 80044ac:	08011e78 	.word	0x08011e78
 80044b0:	20000ddc 	.word	0x20000ddc
 80044b4:	08011d40 	.word	0x08011d40
 80044b8:	08012228 	.word	0x08012228
 80044bc:	08011f00 	.word	0x08011f00
 80044c0:	08011f24 	.word	0x08011f24

080044c4 <cli_remote_sqc>:


void cli_remote_sqc(cli_args_t *args) 
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	
	unsigned int *addr;
	int argc = args->argc;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d119      	bne.n	8004514 <cli_remote_sqc+0x50>
	{
		cliPrintf("%s======== REMOTE TYPE SELECT =========\r\n",C_RED);
 80044e0:	492f      	ldr	r1, [pc, #188]	; (80045a0 <cli_remote_sqc+0xdc>)
 80044e2:	4830      	ldr	r0, [pc, #192]	; (80045a4 <cli_remote_sqc+0xe0>)
 80044e4:	f7ff fbb6 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80044e8:	492f      	ldr	r1, [pc, #188]	; (80045a8 <cli_remote_sqc+0xe4>)
 80044ea:	4830      	ldr	r0, [pc, #192]	; (80045ac <cli_remote_sqc+0xe8>)
 80044ec:	f7ff fbb2 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 80044f0:	482f      	ldr	r0, [pc, #188]	; (80045b0 <cli_remote_sqc+0xec>)
 80044f2:	f7ff fbaf 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  RF MATSER   TPYE \r\n");
 80044f6:	482f      	ldr	r0, [pc, #188]	; (80045b4 <cli_remote_sqc+0xf0>)
 80044f8:	f7ff fbac 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  JEICO TPYE \r\n");
 80044fc:	482e      	ldr	r0, [pc, #184]	; (80045b8 <cli_remote_sqc+0xf4>)
 80044fe:	f7ff fba9 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 8004502:	4927      	ldr	r1, [pc, #156]	; (80045a0 <cli_remote_sqc+0xdc>)
 8004504:	482d      	ldr	r0, [pc, #180]	; (80045bc <cli_remote_sqc+0xf8>)
 8004506:	f7ff fba5 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800450a:	4927      	ldr	r1, [pc, #156]	; (80045a8 <cli_remote_sqc+0xe4>)
 800450c:	4827      	ldr	r0, [pc, #156]	; (80045ac <cli_remote_sqc+0xe8>)
 800450e:	f7ff fba1 	bl	8003c54 <cliPrintf>
		return;
 8004512:	e042      	b.n	800459a <cli_remote_sqc+0xd6>
	}


	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f00b f90b 	bl	800f738 <strtoul>
 8004522:	4603      	mov	r3, r0
 8004524:	60fb      	str	r3, [r7, #12]

	if (addr == 1) // ch
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d113      	bne.n	8004554 <cli_remote_sqc+0x90>
	{
		load_value.Remote_type = 1;
 800452c:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <cli_remote_sqc+0xfc>)
 800452e:	2201      	movs	r2, #1
 8004530:	709a      	strb	r2, [r3, #2]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004532:	4924      	ldr	r1, [pc, #144]	; (80045c4 <cli_remote_sqc+0x100>)
 8004534:	4821      	ldr	r0, [pc, #132]	; (80045bc <cli_remote_sqc+0xf8>)
 8004536:	f7ff fb8d 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET RF_MASTER TYPE ===========\r\n",C_YLLW);
 800453a:	4922      	ldr	r1, [pc, #136]	; (80045c4 <cli_remote_sqc+0x100>)
 800453c:	4822      	ldr	r0, [pc, #136]	; (80045c8 <cli_remote_sqc+0x104>)
 800453e:	f7ff fb89 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004542:	4920      	ldr	r1, [pc, #128]	; (80045c4 <cli_remote_sqc+0x100>)
 8004544:	481d      	ldr	r0, [pc, #116]	; (80045bc <cli_remote_sqc+0xf8>)
 8004546:	f7ff fb85 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800454a:	4917      	ldr	r1, [pc, #92]	; (80045a8 <cli_remote_sqc+0xe4>)
 800454c:	4817      	ldr	r0, [pc, #92]	; (80045ac <cli_remote_sqc+0xe8>)
 800454e:	f7ff fb81 	bl	8003c54 <cliPrintf>
 8004552:	e022      	b.n	800459a <cli_remote_sqc+0xd6>
	}
	else if ( addr == 2)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d113      	bne.n	8004582 <cli_remote_sqc+0xbe>
	{
		load_value.Remote_type = 2;
 800455a:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <cli_remote_sqc+0xfc>)
 800455c:	2202      	movs	r2, #2
 800455e:	709a      	strb	r2, [r3, #2]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004560:	4918      	ldr	r1, [pc, #96]	; (80045c4 <cli_remote_sqc+0x100>)
 8004562:	4816      	ldr	r0, [pc, #88]	; (80045bc <cli_remote_sqc+0xf8>)
 8004564:	f7ff fb76 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET JEICO TYPE ===========\r\n",C_YLLW);
 8004568:	4916      	ldr	r1, [pc, #88]	; (80045c4 <cli_remote_sqc+0x100>)
 800456a:	4818      	ldr	r0, [pc, #96]	; (80045cc <cli_remote_sqc+0x108>)
 800456c:	f7ff fb72 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004570:	4914      	ldr	r1, [pc, #80]	; (80045c4 <cli_remote_sqc+0x100>)
 8004572:	4812      	ldr	r0, [pc, #72]	; (80045bc <cli_remote_sqc+0xf8>)
 8004574:	f7ff fb6e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004578:	490b      	ldr	r1, [pc, #44]	; (80045a8 <cli_remote_sqc+0xe4>)
 800457a:	480c      	ldr	r0, [pc, #48]	; (80045ac <cli_remote_sqc+0xe8>)
 800457c:	f7ff fb6a 	bl	8003c54 <cliPrintf>
 8004580:	e00b      	b.n	800459a <cli_remote_sqc+0xd6>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 8004582:	4907      	ldr	r1, [pc, #28]	; (80045a0 <cli_remote_sqc+0xdc>)
 8004584:	4812      	ldr	r0, [pc, #72]	; (80045d0 <cli_remote_sqc+0x10c>)
 8004586:	f7ff fb65 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 800458a:	4905      	ldr	r1, [pc, #20]	; (80045a0 <cli_remote_sqc+0xdc>)
 800458c:	4811      	ldr	r0, [pc, #68]	; (80045d4 <cli_remote_sqc+0x110>)
 800458e:	f7ff fb61 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004592:	4905      	ldr	r1, [pc, #20]	; (80045a8 <cli_remote_sqc+0xe4>)
 8004594:	4805      	ldr	r0, [pc, #20]	; (80045ac <cli_remote_sqc+0xe8>)
 8004596:	f7ff fb5d 	bl	8003c54 <cliPrintf>
	}
}
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	08011dac 	.word	0x08011dac
 80045a4:	08012258 	.word	0x08012258
 80045a8:	08011d6c 	.word	0x08011d6c
 80045ac:	08011d74 	.word	0x08011d74
 80045b0:	08011de4 	.word	0x08011de4
 80045b4:	08012284 	.word	0x08012284
 80045b8:	080122ac 	.word	0x080122ac
 80045bc:	08011e78 	.word	0x08011e78
 80045c0:	20000ddc 	.word	0x20000ddc
 80045c4:	08011d40 	.word	0x08011d40
 80045c8:	080122d0 	.word	0x080122d0
 80045cc:	08012300 	.word	0x08012300
 80045d0:	08011f00 	.word	0x08011f00
 80045d4:	08011f24 	.word	0x08011f24

080045d8 <cli_battery_sqc>:

void cli_battery_sqc(cli_args_t *args) 
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	
	unsigned int *addr;
	int argc = args->argc;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d119      	bne.n	8004628 <cli_battery_sqc+0x50>
	{
		cliPrintf("%s======== BATTERY TYPE SELECT =========\r\n",C_RED);
 80045f4:	492f      	ldr	r1, [pc, #188]	; (80046b4 <cli_battery_sqc+0xdc>)
 80045f6:	4830      	ldr	r0, [pc, #192]	; (80046b8 <cli_battery_sqc+0xe0>)
 80045f8:	f7ff fb2c 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80045fc:	492f      	ldr	r1, [pc, #188]	; (80046bc <cli_battery_sqc+0xe4>)
 80045fe:	4830      	ldr	r0, [pc, #192]	; (80046c0 <cli_battery_sqc+0xe8>)
 8004600:	f7ff fb28 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 8004604:	482f      	ldr	r0, [pc, #188]	; (80046c4 <cli_battery_sqc+0xec>)
 8004606:	f7ff fb25 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  ATLAS   TPYE \r\n");
 800460a:	482f      	ldr	r0, [pc, #188]	; (80046c8 <cli_battery_sqc+0xf0>)
 800460c:	f7ff fb22 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  LONGIST  TPYE \r\n");
 8004610:	482e      	ldr	r0, [pc, #184]	; (80046cc <cli_battery_sqc+0xf4>)
 8004612:	f7ff fb1f 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 8004616:	4927      	ldr	r1, [pc, #156]	; (80046b4 <cli_battery_sqc+0xdc>)
 8004618:	482d      	ldr	r0, [pc, #180]	; (80046d0 <cli_battery_sqc+0xf8>)
 800461a:	f7ff fb1b 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800461e:	4927      	ldr	r1, [pc, #156]	; (80046bc <cli_battery_sqc+0xe4>)
 8004620:	4827      	ldr	r0, [pc, #156]	; (80046c0 <cli_battery_sqc+0xe8>)
 8004622:	f7ff fb17 	bl	8003c54 <cliPrintf>
		return;
 8004626:	e042      	b.n	80046ae <cli_battery_sqc+0xd6>
	}
	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2200      	movs	r2, #0
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f00b f881 	bl	800f738 <strtoul>
 8004636:	4603      	mov	r3, r0
 8004638:	60fb      	str	r3, [r7, #12]
	

	if (addr == 1) // ch
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d113      	bne.n	8004668 <cli_battery_sqc+0x90>
	{
		load_value.Battery_type = 1;
 8004640:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <cli_battery_sqc+0xfc>)
 8004642:	2201      	movs	r2, #1
 8004644:	70da      	strb	r2, [r3, #3]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004646:	4924      	ldr	r1, [pc, #144]	; (80046d8 <cli_battery_sqc+0x100>)
 8004648:	4821      	ldr	r0, [pc, #132]	; (80046d0 <cli_battery_sqc+0xf8>)
 800464a:	f7ff fb03 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET ATLAS TYPE ===========\r\n",C_YLLW);
 800464e:	4922      	ldr	r1, [pc, #136]	; (80046d8 <cli_battery_sqc+0x100>)
 8004650:	4822      	ldr	r0, [pc, #136]	; (80046dc <cli_battery_sqc+0x104>)
 8004652:	f7ff faff 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004656:	4920      	ldr	r1, [pc, #128]	; (80046d8 <cli_battery_sqc+0x100>)
 8004658:	481d      	ldr	r0, [pc, #116]	; (80046d0 <cli_battery_sqc+0xf8>)
 800465a:	f7ff fafb 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800465e:	4917      	ldr	r1, [pc, #92]	; (80046bc <cli_battery_sqc+0xe4>)
 8004660:	4817      	ldr	r0, [pc, #92]	; (80046c0 <cli_battery_sqc+0xe8>)
 8004662:	f7ff faf7 	bl	8003c54 <cliPrintf>
 8004666:	e022      	b.n	80046ae <cli_battery_sqc+0xd6>
	}
	else if ( addr == 2)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d113      	bne.n	8004696 <cli_battery_sqc+0xbe>
	{	
		load_value.Battery_type = 2;
 800466e:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <cli_battery_sqc+0xfc>)
 8004670:	2202      	movs	r2, #2
 8004672:	70da      	strb	r2, [r3, #3]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004674:	4918      	ldr	r1, [pc, #96]	; (80046d8 <cli_battery_sqc+0x100>)
 8004676:	4816      	ldr	r0, [pc, #88]	; (80046d0 <cli_battery_sqc+0xf8>)
 8004678:	f7ff faec 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET LONGIST TYPE ===========\r\n",C_YLLW);
 800467c:	4916      	ldr	r1, [pc, #88]	; (80046d8 <cli_battery_sqc+0x100>)
 800467e:	4818      	ldr	r0, [pc, #96]	; (80046e0 <cli_battery_sqc+0x108>)
 8004680:	f7ff fae8 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004684:	4914      	ldr	r1, [pc, #80]	; (80046d8 <cli_battery_sqc+0x100>)
 8004686:	4812      	ldr	r0, [pc, #72]	; (80046d0 <cli_battery_sqc+0xf8>)
 8004688:	f7ff fae4 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 800468c:	490b      	ldr	r1, [pc, #44]	; (80046bc <cli_battery_sqc+0xe4>)
 800468e:	480c      	ldr	r0, [pc, #48]	; (80046c0 <cli_battery_sqc+0xe8>)
 8004690:	f7ff fae0 	bl	8003c54 <cliPrintf>
 8004694:	e00b      	b.n	80046ae <cli_battery_sqc+0xd6>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 8004696:	4907      	ldr	r1, [pc, #28]	; (80046b4 <cli_battery_sqc+0xdc>)
 8004698:	4812      	ldr	r0, [pc, #72]	; (80046e4 <cli_battery_sqc+0x10c>)
 800469a:	f7ff fadb 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 800469e:	4905      	ldr	r1, [pc, #20]	; (80046b4 <cli_battery_sqc+0xdc>)
 80046a0:	4811      	ldr	r0, [pc, #68]	; (80046e8 <cli_battery_sqc+0x110>)
 80046a2:	f7ff fad7 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80046a6:	4905      	ldr	r1, [pc, #20]	; (80046bc <cli_battery_sqc+0xe4>)
 80046a8:	4805      	ldr	r0, [pc, #20]	; (80046c0 <cli_battery_sqc+0xe8>)
 80046aa:	f7ff fad3 	bl	8003c54 <cliPrintf>
	}


	
}
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	08011dac 	.word	0x08011dac
 80046b8:	0801232c 	.word	0x0801232c
 80046bc:	08011d6c 	.word	0x08011d6c
 80046c0:	08011d74 	.word	0x08011d74
 80046c4:	08011de4 	.word	0x08011de4
 80046c8:	08012358 	.word	0x08012358
 80046cc:	0801237c 	.word	0x0801237c
 80046d0:	08011e78 	.word	0x08011e78
 80046d4:	20000ddc 	.word	0x20000ddc
 80046d8:	08011d40 	.word	0x08011d40
 80046dc:	080123a4 	.word	0x080123a4
 80046e0:	080123d0 	.word	0x080123d0
 80046e4:	08011f00 	.word	0x08011f00
 80046e8:	08011f24 	.word	0x08011f24

080046ec <cli_valve_sqc>:

void cli_valve_sqc(cli_args_t *args) 
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
	
	unsigned int *addr;
	int argc = args->argc;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d119      	bne.n	800473c <cli_valve_sqc+0x50>
	{
		cliPrintf("%s======== VALVE TYPE SELECT =========\r\n",C_RED);
 8004708:	492f      	ldr	r1, [pc, #188]	; (80047c8 <cli_valve_sqc+0xdc>)
 800470a:	4830      	ldr	r0, [pc, #192]	; (80047cc <cli_valve_sqc+0xe0>)
 800470c:	f7ff faa2 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004710:	492f      	ldr	r1, [pc, #188]	; (80047d0 <cli_valve_sqc+0xe4>)
 8004712:	4830      	ldr	r0, [pc, #192]	; (80047d4 <cli_valve_sqc+0xe8>)
 8004714:	f7ff fa9e 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 8004718:	482f      	ldr	r0, [pc, #188]	; (80047d8 <cli_valve_sqc+0xec>)
 800471a:	f7ff fa9b 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  VALVE   TPYE \r\n");
 800471e:	482f      	ldr	r0, [pc, #188]	; (80047dc <cli_valve_sqc+0xf0>)
 8004720:	f7ff fa98 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  NONE    TPYE \r\n");
 8004724:	482e      	ldr	r0, [pc, #184]	; (80047e0 <cli_valve_sqc+0xf4>)
 8004726:	f7ff fa95 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 800472a:	4927      	ldr	r1, [pc, #156]	; (80047c8 <cli_valve_sqc+0xdc>)
 800472c:	482d      	ldr	r0, [pc, #180]	; (80047e4 <cli_valve_sqc+0xf8>)
 800472e:	f7ff fa91 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004732:	4927      	ldr	r1, [pc, #156]	; (80047d0 <cli_valve_sqc+0xe4>)
 8004734:	4827      	ldr	r0, [pc, #156]	; (80047d4 <cli_valve_sqc+0xe8>)
 8004736:	f7ff fa8d 	bl	8003c54 <cliPrintf>
		return;
 800473a:	e042      	b.n	80047c2 <cli_valve_sqc+0xd6>
	}
	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2200      	movs	r2, #0
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f00a fff7 	bl	800f738 <strtoul>
 800474a:	4603      	mov	r3, r0
 800474c:	60fb      	str	r3, [r7, #12]
	

	if (addr == 1) // ch
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d113      	bne.n	800477c <cli_valve_sqc+0x90>
	{
		load_value.Spray_type = 1;
 8004754:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <cli_valve_sqc+0xfc>)
 8004756:	2201      	movs	r2, #1
 8004758:	71da      	strb	r2, [r3, #7]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800475a:	4924      	ldr	r1, [pc, #144]	; (80047ec <cli_valve_sqc+0x100>)
 800475c:	4821      	ldr	r0, [pc, #132]	; (80047e4 <cli_valve_sqc+0xf8>)
 800475e:	f7ff fa79 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET VALVE TYPE ===========\r\n",C_YLLW);
 8004762:	4922      	ldr	r1, [pc, #136]	; (80047ec <cli_valve_sqc+0x100>)
 8004764:	4822      	ldr	r0, [pc, #136]	; (80047f0 <cli_valve_sqc+0x104>)
 8004766:	f7ff fa75 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800476a:	4920      	ldr	r1, [pc, #128]	; (80047ec <cli_valve_sqc+0x100>)
 800476c:	481d      	ldr	r0, [pc, #116]	; (80047e4 <cli_valve_sqc+0xf8>)
 800476e:	f7ff fa71 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004772:	4917      	ldr	r1, [pc, #92]	; (80047d0 <cli_valve_sqc+0xe4>)
 8004774:	4817      	ldr	r0, [pc, #92]	; (80047d4 <cli_valve_sqc+0xe8>)
 8004776:	f7ff fa6d 	bl	8003c54 <cliPrintf>
 800477a:	e022      	b.n	80047c2 <cli_valve_sqc+0xd6>
	}
	else if ( addr == 2)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d113      	bne.n	80047aa <cli_valve_sqc+0xbe>
	{	
		load_value.Spray_type = 2;
 8004782:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <cli_valve_sqc+0xfc>)
 8004784:	2202      	movs	r2, #2
 8004786:	71da      	strb	r2, [r3, #7]
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004788:	4918      	ldr	r1, [pc, #96]	; (80047ec <cli_valve_sqc+0x100>)
 800478a:	4816      	ldr	r0, [pc, #88]	; (80047e4 <cli_valve_sqc+0xf8>)
 800478c:	f7ff fa62 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET NONE TYPE ===========\r\n",C_YLLW);
 8004790:	4916      	ldr	r1, [pc, #88]	; (80047ec <cli_valve_sqc+0x100>)
 8004792:	4818      	ldr	r0, [pc, #96]	; (80047f4 <cli_valve_sqc+0x108>)
 8004794:	f7ff fa5e 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 8004798:	4914      	ldr	r1, [pc, #80]	; (80047ec <cli_valve_sqc+0x100>)
 800479a:	4812      	ldr	r0, [pc, #72]	; (80047e4 <cli_valve_sqc+0xf8>)
 800479c:	f7ff fa5a 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80047a0:	490b      	ldr	r1, [pc, #44]	; (80047d0 <cli_valve_sqc+0xe4>)
 80047a2:	480c      	ldr	r0, [pc, #48]	; (80047d4 <cli_valve_sqc+0xe8>)
 80047a4:	f7ff fa56 	bl	8003c54 <cliPrintf>
 80047a8:	e00b      	b.n	80047c2 <cli_valve_sqc+0xd6>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 80047aa:	4907      	ldr	r1, [pc, #28]	; (80047c8 <cli_valve_sqc+0xdc>)
 80047ac:	4812      	ldr	r0, [pc, #72]	; (80047f8 <cli_valve_sqc+0x10c>)
 80047ae:	f7ff fa51 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 80047b2:	4905      	ldr	r1, [pc, #20]	; (80047c8 <cli_valve_sqc+0xdc>)
 80047b4:	4811      	ldr	r0, [pc, #68]	; (80047fc <cli_valve_sqc+0x110>)
 80047b6:	f7ff fa4d 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80047ba:	4905      	ldr	r1, [pc, #20]	; (80047d0 <cli_valve_sqc+0xe4>)
 80047bc:	4805      	ldr	r0, [pc, #20]	; (80047d4 <cli_valve_sqc+0xe8>)
 80047be:	f7ff fa49 	bl	8003c54 <cliPrintf>
	}


	
}
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	08011dac 	.word	0x08011dac
 80047cc:	080123fc 	.word	0x080123fc
 80047d0:	08011d6c 	.word	0x08011d6c
 80047d4:	08011d74 	.word	0x08011d74
 80047d8:	08011de4 	.word	0x08011de4
 80047dc:	08012428 	.word	0x08012428
 80047e0:	0801244c 	.word	0x0801244c
 80047e4:	08011e78 	.word	0x08011e78
 80047e8:	20000ddc 	.word	0x20000ddc
 80047ec:	08011d40 	.word	0x08011d40
 80047f0:	08012470 	.word	0x08012470
 80047f4:	0801249c 	.word	0x0801249c
 80047f8:	08011f00 	.word	0x08011f00
 80047fc:	08011f24 	.word	0x08011f24

08004800 <cli_rtk_sqc>:


void cli_rtk_sqc(cli_args_t *args) 
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	
	unsigned int *addr;
	

	int argc = args->argc;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	617b      	str	r3, [r7, #20]
	char **argv = args->argv;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	613b      	str	r3, [r7, #16]

	if (args->argc < 1) 
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d119      	bne.n	8004850 <cli_rtk_sqc+0x50>
	{
		cliPrintf("%s======== RTK TYPE SELECT =========\r\n",C_RED);
 800481c:	492f      	ldr	r1, [pc, #188]	; (80048dc <cli_rtk_sqc+0xdc>)
 800481e:	4830      	ldr	r0, [pc, #192]	; (80048e0 <cli_rtk_sqc+0xe0>)
 8004820:	f7ff fa18 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004824:	492f      	ldr	r1, [pc, #188]	; (80048e4 <cli_rtk_sqc+0xe4>)
 8004826:	4830      	ldr	r0, [pc, #192]	; (80048e8 <cli_rtk_sqc+0xe8>)
 8004828:	f7ff fa14 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> YOU CAN choose TWO TYPE \r\n");
 800482c:	482f      	ldr	r0, [pc, #188]	; (80048ec <cli_rtk_sqc+0xec>)
 800482e:	f7ff fa11 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  1  RTK   TPYE \r\n");
 8004832:	482f      	ldr	r0, [pc, #188]	; (80048f0 <cli_rtk_sqc+0xf0>)
 8004834:	f7ff fa0e 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> NUMBER  2  LINE  TPYE \r\n");
 8004838:	482e      	ldr	r0, [pc, #184]	; (80048f4 <cli_rtk_sqc+0xf4>)
 800483a:	f7ff fa0b 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_RED);
 800483e:	4927      	ldr	r1, [pc, #156]	; (80048dc <cli_rtk_sqc+0xdc>)
 8004840:	482d      	ldr	r0, [pc, #180]	; (80048f8 <cli_rtk_sqc+0xf8>)
 8004842:	f7ff fa07 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004846:	4927      	ldr	r1, [pc, #156]	; (80048e4 <cli_rtk_sqc+0xe4>)
 8004848:	4827      	ldr	r0, [pc, #156]	; (80048e8 <cli_rtk_sqc+0xe8>)
 800484a:	f7ff fa03 	bl	8003c54 <cliPrintf>
		return;
 800484e:	e042      	b.n	80048d6 <cli_rtk_sqc+0xd6>
	}
	addr = (unsigned int*) strtoul((const char*) argv[0], (char**) NULL,(int) 0);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2200      	movs	r2, #0
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f00a ff6d 	bl	800f738 <strtoul>
 800485e:	4603      	mov	r3, r0
 8004860:	60fb      	str	r3, [r7, #12]
	

	if (addr == 1) // ch
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d113      	bne.n	8004890 <cli_rtk_sqc+0x90>
	{
		load_value.rtk_type = 1;
 8004868:	4b24      	ldr	r3, [pc, #144]	; (80048fc <cli_rtk_sqc+0xfc>)
 800486a:	2201      	movs	r2, #1
 800486c:	721a      	strb	r2, [r3, #8]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800486e:	4924      	ldr	r1, [pc, #144]	; (8004900 <cli_rtk_sqc+0x100>)
 8004870:	4821      	ldr	r0, [pc, #132]	; (80048f8 <cli_rtk_sqc+0xf8>)
 8004872:	f7ff f9ef 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET RTK TYPE ===========\r\n",C_YLLW);
 8004876:	4922      	ldr	r1, [pc, #136]	; (8004900 <cli_rtk_sqc+0x100>)
 8004878:	4822      	ldr	r0, [pc, #136]	; (8004904 <cli_rtk_sqc+0x104>)
 800487a:	f7ff f9eb 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 800487e:	4920      	ldr	r1, [pc, #128]	; (8004900 <cli_rtk_sqc+0x100>)
 8004880:	481d      	ldr	r0, [pc, #116]	; (80048f8 <cli_rtk_sqc+0xf8>)
 8004882:	f7ff f9e7 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004886:	4917      	ldr	r1, [pc, #92]	; (80048e4 <cli_rtk_sqc+0xe4>)
 8004888:	4817      	ldr	r0, [pc, #92]	; (80048e8 <cli_rtk_sqc+0xe8>)
 800488a:	f7ff f9e3 	bl	8003c54 <cliPrintf>
 800488e:	e022      	b.n	80048d6 <cli_rtk_sqc+0xd6>
	}
	else if ( addr == 2)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d113      	bne.n	80048be <cli_rtk_sqc+0xbe>
	{	
		load_value.rtk_type = 2;
 8004896:	4b19      	ldr	r3, [pc, #100]	; (80048fc <cli_rtk_sqc+0xfc>)
 8004898:	2202      	movs	r2, #2
 800489a:	721a      	strb	r2, [r3, #8]
		cliPrintf("%s========================================\r\n",C_YLLW);
 800489c:	4918      	ldr	r1, [pc, #96]	; (8004900 <cli_rtk_sqc+0x100>)
 800489e:	4816      	ldr	r0, [pc, #88]	; (80048f8 <cli_rtk_sqc+0xf8>)
 80048a0:	f7ff f9d8 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========== SET LINE TYPE ===========\r\n",C_YLLW);
 80048a4:	4916      	ldr	r1, [pc, #88]	; (8004900 <cli_rtk_sqc+0x100>)
 80048a6:	4818      	ldr	r0, [pc, #96]	; (8004908 <cli_rtk_sqc+0x108>)
 80048a8:	f7ff f9d4 	bl	8003c54 <cliPrintf>
		cliPrintf("%s========================================\r\n",C_YLLW);
 80048ac:	4914      	ldr	r1, [pc, #80]	; (8004900 <cli_rtk_sqc+0x100>)
 80048ae:	4812      	ldr	r0, [pc, #72]	; (80048f8 <cli_rtk_sqc+0xf8>)
 80048b0:	f7ff f9d0 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80048b4:	490b      	ldr	r1, [pc, #44]	; (80048e4 <cli_rtk_sqc+0xe4>)
 80048b6:	480c      	ldr	r0, [pc, #48]	; (80048e8 <cli_rtk_sqc+0xe8>)
 80048b8:	f7ff f9cc 	bl	8003c54 <cliPrintf>
 80048bc:	e00b      	b.n	80048d6 <cli_rtk_sqc+0xd6>
	} 
	else 
	{
		cliPrintf("%s======== CHECK NUMBER =========\r\n",C_RED);
 80048be:	4907      	ldr	r1, [pc, #28]	; (80048dc <cli_rtk_sqc+0xdc>)
 80048c0:	4812      	ldr	r0, [pc, #72]	; (800490c <cli_rtk_sqc+0x10c>)
 80048c2:	f7ff f9c7 	bl	8003c54 <cliPrintf>
		cliPrintf("%s======== NOT INVALID NUMBER =========\r\n",C_RED);
 80048c6:	4905      	ldr	r1, [pc, #20]	; (80048dc <cli_rtk_sqc+0xdc>)
 80048c8:	4811      	ldr	r0, [pc, #68]	; (8004910 <cli_rtk_sqc+0x110>)
 80048ca:	f7ff f9c3 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80048ce:	4905      	ldr	r1, [pc, #20]	; (80048e4 <cli_rtk_sqc+0xe4>)
 80048d0:	4805      	ldr	r0, [pc, #20]	; (80048e8 <cli_rtk_sqc+0xe8>)
 80048d2:	f7ff f9bf 	bl	8003c54 <cliPrintf>
	}


	
}
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	08011dac 	.word	0x08011dac
 80048e0:	080124c8 	.word	0x080124c8
 80048e4:	08011d6c 	.word	0x08011d6c
 80048e8:	08011d74 	.word	0x08011d74
 80048ec:	08011de4 	.word	0x08011de4
 80048f0:	080124f0 	.word	0x080124f0
 80048f4:	08012514 	.word	0x08012514
 80048f8:	08011e78 	.word	0x08011e78
 80048fc:	20000ddc 	.word	0x20000ddc
 8004900:	08011d40 	.word	0x08011d40
 8004904:	08012538 	.word	0x08012538
 8004908:	08012560 	.word	0x08012560
 800490c:	08011f00 	.word	0x08011f00
 8004910:	08011f24 	.word	0x08011f24

08004914 <cli_info_sqc>:

void cli_info_sqc(cli_args_t *args) 
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	int argc = args->argc;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	60fb      	str	r3, [r7, #12]

	if (args->argc < 1) 
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d164      	bne.n	80049f4 <cli_info_sqc+0xe0>
	{
		cliPrintf("%s====== CHECK YOUR SETTTING INFO =======\r\n",C_YLLW);
 800492a:	4934      	ldr	r1, [pc, #208]	; (80049fc <cli_info_sqc+0xe8>)
 800492c:	4834      	ldr	r0, [pc, #208]	; (8004a00 <cli_info_sqc+0xec>)
 800492e:	f7ff f991 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_GREN);
 8004932:	4934      	ldr	r1, [pc, #208]	; (8004a04 <cli_info_sqc+0xf0>)
 8004934:	4834      	ldr	r0, [pc, #208]	; (8004a08 <cli_info_sqc+0xf4>)
 8004936:	f7ff f98d 	bl	8003c54 <cliPrintf>
		if (load_value.Motor_type == 1 )
 800493a:	4b34      	ldr	r3, [pc, #208]	; (8004a0c <cli_info_sqc+0xf8>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d103      	bne.n	800494a <cli_info_sqc+0x36>
			cliPrintf("      >> DRV MOTOR TYPE    = CURTIS \r\n");
 8004942:	4833      	ldr	r0, [pc, #204]	; (8004a10 <cli_info_sqc+0xfc>)
 8004944:	f7ff f986 	bl	8003c54 <cliPrintf>
 8004948:	e002      	b.n	8004950 <cli_info_sqc+0x3c>
		else
			cliPrintf("      >> DRV MOTOR TYPE    = DMCS \r\n");
 800494a:	4832      	ldr	r0, [pc, #200]	; (8004a14 <cli_info_sqc+0x100>)
 800494c:	f7ff f982 	bl	8003c54 <cliPrintf>
		if (load_value.Sensor_type == 1 )
 8004950:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <cli_info_sqc+0xf8>)
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d103      	bne.n	8004960 <cli_info_sqc+0x4c>
			cliPrintf("      >> STR SENSOR TPYE   = PNP\r\n");
 8004958:	482f      	ldr	r0, [pc, #188]	; (8004a18 <cli_info_sqc+0x104>)
 800495a:	f7ff f97b 	bl	8003c54 <cliPrintf>
 800495e:	e002      	b.n	8004966 <cli_info_sqc+0x52>
		else
			cliPrintf("      >> STR SENSOR TPYE   = NPN\r\n");	
 8004960:	482e      	ldr	r0, [pc, #184]	; (8004a1c <cli_info_sqc+0x108>)
 8004962:	f7ff f977 	bl	8003c54 <cliPrintf>
		if ( load_value.Remote_type == 1 )
 8004966:	4b29      	ldr	r3, [pc, #164]	; (8004a0c <cli_info_sqc+0xf8>)
 8004968:	789b      	ldrb	r3, [r3, #2]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d103      	bne.n	8004976 <cli_info_sqc+0x62>
			cliPrintf("      >> REMOTE TPYE       = RF_MASTER\r\n");
 800496e:	482c      	ldr	r0, [pc, #176]	; (8004a20 <cli_info_sqc+0x10c>)
 8004970:	f7ff f970 	bl	8003c54 <cliPrintf>
 8004974:	e002      	b.n	800497c <cli_info_sqc+0x68>
		else
			cliPrintf("      >> REMOTE TPYE       = JEICO\r\n");
 8004976:	482b      	ldr	r0, [pc, #172]	; (8004a24 <cli_info_sqc+0x110>)
 8004978:	f7ff f96c 	bl	8003c54 <cliPrintf>
		if ( load_value.Battery_type == 1 )
 800497c:	4b23      	ldr	r3, [pc, #140]	; (8004a0c <cli_info_sqc+0xf8>)
 800497e:	78db      	ldrb	r3, [r3, #3]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d103      	bne.n	800498c <cli_info_sqc+0x78>
			cliPrintf("      >> BATTERY TPYE      = ATLAS\r\n");
 8004984:	4828      	ldr	r0, [pc, #160]	; (8004a28 <cli_info_sqc+0x114>)
 8004986:	f7ff f965 	bl	8003c54 <cliPrintf>
 800498a:	e002      	b.n	8004992 <cli_info_sqc+0x7e>
		else 
			cliPrintf("      >> BATTERY TPYE      = LONGIST\r\n");
 800498c:	4827      	ldr	r0, [pc, #156]	; (8004a2c <cli_info_sqc+0x118>)
 800498e:	f7ff f961 	bl	8003c54 <cliPrintf>
		if ( load_value.Spray_type == 1)
 8004992:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <cli_info_sqc+0xf8>)
 8004994:	79db      	ldrb	r3, [r3, #7]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d103      	bne.n	80049a2 <cli_info_sqc+0x8e>
			cliPrintf("      >> VALVE TYPE        = VALVE\r\n");
 800499a:	4825      	ldr	r0, [pc, #148]	; (8004a30 <cli_info_sqc+0x11c>)
 800499c:	f7ff f95a 	bl	8003c54 <cliPrintf>
 80049a0:	e002      	b.n	80049a8 <cli_info_sqc+0x94>
		else
			cliPrintf("      >> VALVE TYPE        = NONE\r\n");
 80049a2:	4824      	ldr	r0, [pc, #144]	; (8004a34 <cli_info_sqc+0x120>)
 80049a4:	f7ff f956 	bl	8003c54 <cliPrintf>
		if ( load_value.rtk_type == 1)
 80049a8:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <cli_info_sqc+0xf8>)
 80049aa:	7a1b      	ldrb	r3, [r3, #8]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d103      	bne.n	80049b8 <cli_info_sqc+0xa4>
			cliPrintf("      >> RTK TYPE          = RTK\r\n");
 80049b0:	4821      	ldr	r0, [pc, #132]	; (8004a38 <cli_info_sqc+0x124>)
 80049b2:	f7ff f94f 	bl	8003c54 <cliPrintf>
 80049b6:	e002      	b.n	80049be <cli_info_sqc+0xaa>
		else
			cliPrintf("      >> RTK TYPE          = LINE\r\n");
 80049b8:	4820      	ldr	r0, [pc, #128]	; (8004a3c <cli_info_sqc+0x128>)
 80049ba:	f7ff f94b 	bl	8003c54 <cliPrintf>

			
		cliPrintf("      >> IDLE SPEED OFFSET = %d\r\n",load_value.IDLE_SPD);
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <cli_info_sqc+0xf8>)
 80049c0:	791b      	ldrb	r3, [r3, #4]
 80049c2:	4619      	mov	r1, r3
 80049c4:	481e      	ldr	r0, [pc, #120]	; (8004a40 <cli_info_sqc+0x12c>)
 80049c6:	f7ff f945 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> AUTO DRV LOW  SPD = %d\r\n",load_value.ATD_LOW_SPD);
 80049ca:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <cli_info_sqc+0xf8>)
 80049cc:	795b      	ldrb	r3, [r3, #5]
 80049ce:	4619      	mov	r1, r3
 80049d0:	481c      	ldr	r0, [pc, #112]	; (8004a44 <cli_info_sqc+0x130>)
 80049d2:	f7ff f93f 	bl	8003c54 <cliPrintf>
		cliPrintf("      >> AUTO DRV HIGH SPD = %d\r\n",load_value.ATD_HIGH_SPD);
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <cli_info_sqc+0xf8>)
 80049d8:	799b      	ldrb	r3, [r3, #6]
 80049da:	4619      	mov	r1, r3
 80049dc:	481a      	ldr	r0, [pc, #104]	; (8004a48 <cli_info_sqc+0x134>)
 80049de:	f7ff f939 	bl	8003c54 <cliPrintf>
		cliPrintf("%s=======================================\r\n",C_YLLW);
 80049e2:	4906      	ldr	r1, [pc, #24]	; (80049fc <cli_info_sqc+0xe8>)
 80049e4:	4819      	ldr	r0, [pc, #100]	; (8004a4c <cli_info_sqc+0x138>)
 80049e6:	f7ff f935 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 80049ea:	4919      	ldr	r1, [pc, #100]	; (8004a50 <cli_info_sqc+0x13c>)
 80049ec:	4806      	ldr	r0, [pc, #24]	; (8004a08 <cli_info_sqc+0xf4>)
 80049ee:	f7ff f931 	bl	8003c54 <cliPrintf>
		return;
 80049f2:	bf00      	nop
	}

}
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	08011d40 	.word	0x08011d40
 8004a00:	0801258c 	.word	0x0801258c
 8004a04:	080125b8 	.word	0x080125b8
 8004a08:	08011d74 	.word	0x08011d74
 8004a0c:	20000ddc 	.word	0x20000ddc
 8004a10:	080125c0 	.word	0x080125c0
 8004a14:	080125e8 	.word	0x080125e8
 8004a18:	08012610 	.word	0x08012610
 8004a1c:	08012634 	.word	0x08012634
 8004a20:	08012658 	.word	0x08012658
 8004a24:	08012684 	.word	0x08012684
 8004a28:	080126ac 	.word	0x080126ac
 8004a2c:	080126d4 	.word	0x080126d4
 8004a30:	080126fc 	.word	0x080126fc
 8004a34:	08012724 	.word	0x08012724
 8004a38:	08012748 	.word	0x08012748
 8004a3c:	0801276c 	.word	0x0801276c
 8004a40:	08012790 	.word	0x08012790
 8004a44:	080127b4 	.word	0x080127b4
 8004a48:	080127d8 	.word	0x080127d8
 8004a4c:	080127fc 	.word	0x080127fc
 8004a50:	08011d6c 	.word	0x08011d6c

08004a54 <cli_eep_save_sqc>:


void cli_eep_save_sqc(cli_args_t *args) 
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

	int argc = args->argc;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]


	if (args->argc < 1) 
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d11f      	bne.n	8004aaa <cli_eep_save_sqc+0x56>
	{
		
		init_set_save();
 8004a6a:	f002 fc1b 	bl	80072a4 <init_set_save>
		cliPrintf("%sSAVE..\r\n",C_RED);
 8004a6e:	4910      	ldr	r1, [pc, #64]	; (8004ab0 <cli_eep_save_sqc+0x5c>)
 8004a70:	4810      	ldr	r0, [pc, #64]	; (8004ab4 <cli_eep_save_sqc+0x60>)
 8004a72:	f7ff f8ef 	bl	8003c54 <cliPrintf>
		HAL_Delay(150);
 8004a76:	2096      	movs	r0, #150	; 0x96
 8004a78:	f003 fdae 	bl	80085d8 <HAL_Delay>
		cliPrintf("%sSAVE....\r\n",C_RED);
 8004a7c:	490c      	ldr	r1, [pc, #48]	; (8004ab0 <cli_eep_save_sqc+0x5c>)
 8004a7e:	480e      	ldr	r0, [pc, #56]	; (8004ab8 <cli_eep_save_sqc+0x64>)
 8004a80:	f7ff f8e8 	bl	8003c54 <cliPrintf>
		HAL_Delay(150);
 8004a84:	2096      	movs	r0, #150	; 0x96
 8004a86:	f003 fda7 	bl	80085d8 <HAL_Delay>
		cliPrintf("%sSAVE......\r\n",C_RED);
 8004a8a:	4909      	ldr	r1, [pc, #36]	; (8004ab0 <cli_eep_save_sqc+0x5c>)
 8004a8c:	480b      	ldr	r0, [pc, #44]	; (8004abc <cli_eep_save_sqc+0x68>)
 8004a8e:	f7ff f8e1 	bl	8003c54 <cliPrintf>
		HAL_Delay(150);
 8004a92:	2096      	movs	r0, #150	; 0x96
 8004a94:	f003 fda0 	bl	80085d8 <HAL_Delay>
		cliPrintf("%sCOMPLETE\r\n",C_RED);
 8004a98:	4905      	ldr	r1, [pc, #20]	; (8004ab0 <cli_eep_save_sqc+0x5c>)
 8004a9a:	4809      	ldr	r0, [pc, #36]	; (8004ac0 <cli_eep_save_sqc+0x6c>)
 8004a9c:	f7ff f8da 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004aa0:	4908      	ldr	r1, [pc, #32]	; (8004ac4 <cli_eep_save_sqc+0x70>)
 8004aa2:	4809      	ldr	r0, [pc, #36]	; (8004ac8 <cli_eep_save_sqc+0x74>)
 8004aa4:	f7ff f8d6 	bl	8003c54 <cliPrintf>
		return;
 8004aa8:	bf00      	nop
	}
	
}
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	08011dac 	.word	0x08011dac
 8004ab4:	08012828 	.word	0x08012828
 8004ab8:	08012834 	.word	0x08012834
 8004abc:	08012844 	.word	0x08012844
 8004ac0:	08012854 	.word	0x08012854
 8004ac4:	08011d6c 	.word	0x08011d6c
 8004ac8:	08011d74 	.word	0x08011d74

08004acc <CAN_ER_Decode>:
16  #define ERR_FIND_COURSE_OK      17		// 경로찾기 OK					SW

*/

void CAN_ER_Decode() 
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
	uCommStatusFlag &= ~f_canERIn;
 8004ad0:	4b9a      	ldr	r3, [pc, #616]	; (8004d3c <CAN_ER_Decode+0x270>)
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	f023 0304 	bic.w	r3, r3, #4
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	4b98      	ldr	r3, [pc, #608]	; (8004d3c <CAN_ER_Decode+0x270>)
 8004adc:	801a      	strh	r2, [r3, #0]
	uKeyStatusFlag &= ~ frk_AutoDrv;
 8004ade:	4b98      	ldr	r3, [pc, #608]	; (8004d40 <CAN_ER_Decode+0x274>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae6:	4a96      	ldr	r2, [pc, #600]	; (8004d40 <CAN_ER_Decode+0x274>)
 8004ae8:	6013      	str	r3, [r2, #0]
	uSysStatusFlag &= ~f_AutoRun;
 8004aea:	4b96      	ldr	r3, [pc, #600]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af2:	4a94      	ldr	r2, [pc, #592]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004af4:	6013      	str	r3, [r2, #0]
	if( CAN_RxData_Error[1] & 0x01 )
 8004af6:	4b94      	ldr	r3, [pc, #592]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004af8:	785b      	ldrb	r3, [r3, #1]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d019      	beq.n	8004b36 <CAN_ER_Decode+0x6a>
	{	
		cliPrintf("%sHeading Error\r\n",C_RED);
 8004b02:	4992      	ldr	r1, [pc, #584]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004b04:	4892      	ldr	r0, [pc, #584]	; (8004d50 <CAN_ER_Decode+0x284>)
 8004b06:	f7ff f8a5 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004b0a:	4992      	ldr	r1, [pc, #584]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004b0c:	4892      	ldr	r0, [pc, #584]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004b0e:	f7ff f8a1 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004b12:	4b8c      	ldr	r3, [pc, #560]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b1a:	4a8a      	ldr	r2, [pc, #552]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b1c:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004b1e:	4b8f      	ldr	r3, [pc, #572]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004b20:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004b24:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x01;
 8004b26:	4b88      	ldr	r3, [pc, #544]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	4b85      	ldr	r3, [pc, #532]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b32:	705a      	strb	r2, [r3, #1]
		uSysStatusFlag |= a_Auto_Ready;
		Bcon_dly = 1200;
		CAN_RxData_Error[2] &= ~ 0x02;	
	}

}
 8004b34:	e0ff      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x02 )
 8004b36:	4b84      	ldr	r3, [pc, #528]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d019      	beq.n	8004b76 <CAN_ER_Decode+0xaa>
		cliPrintf("%sDistance Error\r\n",C_RED);
 8004b42:	4982      	ldr	r1, [pc, #520]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004b44:	4886      	ldr	r0, [pc, #536]	; (8004d60 <CAN_ER_Decode+0x294>)
 8004b46:	f7ff f885 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004b4a:	4982      	ldr	r1, [pc, #520]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004b4c:	4882      	ldr	r0, [pc, #520]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004b4e:	f7ff f881 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004b52:	4b7c      	ldr	r3, [pc, #496]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b5a:	4a7a      	ldr	r2, [pc, #488]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b5c:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004b5e:	4b7f      	ldr	r3, [pc, #508]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004b60:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004b64:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x02;
 8004b66:	4b78      	ldr	r3, [pc, #480]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	f023 0302 	bic.w	r3, r3, #2
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	4b75      	ldr	r3, [pc, #468]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b72:	705a      	strb	r2, [r3, #1]
}
 8004b74:	e0df      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x04 )
 8004b76:	4b74      	ldr	r3, [pc, #464]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004b78:	785b      	ldrb	r3, [r3, #1]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d019      	beq.n	8004bb6 <CAN_ER_Decode+0xea>
		cliPrintf("%sLocation Find Error\r\n",C_RED);
 8004b82:	4972      	ldr	r1, [pc, #456]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004b84:	4877      	ldr	r0, [pc, #476]	; (8004d64 <CAN_ER_Decode+0x298>)
 8004b86:	f7ff f865 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004b8a:	4972      	ldr	r1, [pc, #456]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004b8c:	4872      	ldr	r0, [pc, #456]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004b8e:	f7ff f861 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004b92:	4b6c      	ldr	r3, [pc, #432]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b9a:	4a6a      	ldr	r2, [pc, #424]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004b9c:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004b9e:	4b6f      	ldr	r3, [pc, #444]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004ba0:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004ba4:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x04;
 8004ba6:	4b68      	ldr	r3, [pc, #416]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	f023 0304 	bic.w	r3, r3, #4
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	4b65      	ldr	r3, [pc, #404]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004bb2:	705a      	strb	r2, [r3, #1]
}
 8004bb4:	e0bf      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x08 )
 8004bb6:	4b64      	ldr	r3, [pc, #400]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004bb8:	785b      	ldrb	r3, [r3, #1]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d019      	beq.n	8004bf6 <CAN_ER_Decode+0x12a>
		cliPrintf("%sLocation change Error\r\n",C_RED);
 8004bc2:	4962      	ldr	r1, [pc, #392]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004bc4:	4868      	ldr	r0, [pc, #416]	; (8004d68 <CAN_ER_Decode+0x29c>)
 8004bc6:	f7ff f845 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004bca:	4962      	ldr	r1, [pc, #392]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004bcc:	4862      	ldr	r0, [pc, #392]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004bce:	f7ff f841 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004bd2:	4b5c      	ldr	r3, [pc, #368]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bda:	4a5a      	ldr	r2, [pc, #360]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004bdc:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004bde:	4b5f      	ldr	r3, [pc, #380]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004be0:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004be4:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x08;
 8004be6:	4b58      	ldr	r3, [pc, #352]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004be8:	785b      	ldrb	r3, [r3, #1]
 8004bea:	f023 0308 	bic.w	r3, r3, #8
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	4b55      	ldr	r3, [pc, #340]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004bf2:	705a      	strb	r2, [r3, #1]
}
 8004bf4:	e09f      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x10 )
 8004bf6:	4b54      	ldr	r3, [pc, #336]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d019      	beq.n	8004c36 <CAN_ER_Decode+0x16a>
		cliPrintf("%sCenter SW Error\r\n",C_RED);
 8004c02:	4952      	ldr	r1, [pc, #328]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004c04:	4859      	ldr	r0, [pc, #356]	; (8004d6c <CAN_ER_Decode+0x2a0>)
 8004c06:	f7ff f825 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004c0a:	4952      	ldr	r1, [pc, #328]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004c0c:	4852      	ldr	r0, [pc, #328]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004c0e:	f7ff f821 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004c12:	4b4c      	ldr	r3, [pc, #304]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c1a:	4a4a      	ldr	r2, [pc, #296]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004c1c:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004c20:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004c24:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x10;	
 8004c26:	4b48      	ldr	r3, [pc, #288]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	f023 0310 	bic.w	r3, r3, #16
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	4b45      	ldr	r3, [pc, #276]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c32:	705a      	strb	r2, [r3, #1]
}
 8004c34:	e07f      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x20 )
 8004c36:	4b44      	ldr	r3, [pc, #272]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c38:	785b      	ldrb	r3, [r3, #1]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d019      	beq.n	8004c76 <CAN_ER_Decode+0x1aa>
		cliPrintf("%sIMU CAL Error\r\n",C_RED);
 8004c42:	4942      	ldr	r1, [pc, #264]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004c44:	484a      	ldr	r0, [pc, #296]	; (8004d70 <CAN_ER_Decode+0x2a4>)
 8004c46:	f7ff f805 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004c4a:	4942      	ldr	r1, [pc, #264]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004c4c:	4842      	ldr	r0, [pc, #264]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004c4e:	f7ff f801 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_NotCondition;
 8004c52:	4b3c      	ldr	r3, [pc, #240]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c5a:	4a3a      	ldr	r2, [pc, #232]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004c5c:	6013      	str	r3, [r2, #0]
		Bcon_dly = 2700;
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004c60:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004c64:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[1] &= ~ 0x20;	
 8004c66:	4b38      	ldr	r3, [pc, #224]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	f023 0320 	bic.w	r3, r3, #32
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	4b35      	ldr	r3, [pc, #212]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c72:	705a      	strb	r2, [r3, #1]
}
 8004c74:	e05f      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x40 )
 8004c76:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00f      	beq.n	8004ca2 <CAN_ER_Decode+0x1d6>
		cliPrintf("%sRTK CAN Error\r\n",C_RED);
 8004c82:	4932      	ldr	r1, [pc, #200]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004c84:	483b      	ldr	r0, [pc, #236]	; (8004d74 <CAN_ER_Decode+0x2a8>)
 8004c86:	f7fe ffe5 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004c8a:	4932      	ldr	r1, [pc, #200]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004c8c:	4832      	ldr	r0, [pc, #200]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004c8e:	f7fe ffe1 	bl	8003c54 <cliPrintf>
		CAN_RxData_Error[1] &= ~ 0x40;	
 8004c92:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c94:	785b      	ldrb	r3, [r3, #1]
 8004c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	4b2a      	ldr	r3, [pc, #168]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004c9e:	705a      	strb	r2, [r3, #1]
}
 8004ca0:	e049      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[1] & 0x80 )
 8004ca2:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004ca4:	785b      	ldrb	r3, [r3, #1]
 8004ca6:	b25b      	sxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da0f      	bge.n	8004ccc <CAN_ER_Decode+0x200>
		cliPrintf("%sIMU CAN Error\r\n",C_RED);
 8004cac:	4927      	ldr	r1, [pc, #156]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004cae:	4832      	ldr	r0, [pc, #200]	; (8004d78 <CAN_ER_Decode+0x2ac>)
 8004cb0:	f7fe ffd0 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004cb4:	4927      	ldr	r1, [pc, #156]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004cb6:	4828      	ldr	r0, [pc, #160]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004cb8:	f7fe ffcc 	bl	8003c54 <cliPrintf>
		CAN_RxData_Error[1] &= ~ 0x80;	
 8004cbc:	4b22      	ldr	r3, [pc, #136]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cc8:	705a      	strb	r2, [r3, #1]
}
 8004cca:	e034      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[2] & 0x01 )
 8004ccc:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cce:	789b      	ldrb	r3, [r3, #2]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00f      	beq.n	8004cf8 <CAN_ER_Decode+0x22c>
		cliPrintf("%sCAR CAN Error\r\n",C_RED);
 8004cd8:	491c      	ldr	r1, [pc, #112]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004cda:	4828      	ldr	r0, [pc, #160]	; (8004d7c <CAN_ER_Decode+0x2b0>)
 8004cdc:	f7fe ffba 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004ce0:	491c      	ldr	r1, [pc, #112]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004ce2:	481d      	ldr	r0, [pc, #116]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004ce4:	f7fe ffb6 	bl	8003c54 <cliPrintf>
		CAN_RxData_Error[2] &= ~ 0x01;	
 8004ce8:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cea:	789b      	ldrb	r3, [r3, #2]
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cf4:	709a      	strb	r2, [r3, #2]
}
 8004cf6:	e01e      	b.n	8004d36 <CAN_ER_Decode+0x26a>
	else if ( CAN_RxData_Error[2] & 0x02 )
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004cfa:	789b      	ldrb	r3, [r3, #2]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d018      	beq.n	8004d36 <CAN_ER_Decode+0x26a>
		cliPrintf("%sLocation FIND OK \r\n",C_RED);
 8004d04:	4911      	ldr	r1, [pc, #68]	; (8004d4c <CAN_ER_Decode+0x280>)
 8004d06:	481e      	ldr	r0, [pc, #120]	; (8004d80 <CAN_ER_Decode+0x2b4>)
 8004d08:	f7fe ffa4 	bl	8003c54 <cliPrintf>
		cliPrintf("%s",C_NRML);
 8004d0c:	4911      	ldr	r1, [pc, #68]	; (8004d54 <CAN_ER_Decode+0x288>)
 8004d0e:	4812      	ldr	r0, [pc, #72]	; (8004d58 <CAN_ER_Decode+0x28c>)
 8004d10:	f7fe ffa0 	bl	8003c54 <cliPrintf>
		uSysStatusFlag |= a_Auto_Ready;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d1c:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <CAN_ER_Decode+0x278>)
 8004d1e:	6013      	str	r3, [r2, #0]
		Bcon_dly = 1200;
 8004d20:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <CAN_ER_Decode+0x290>)
 8004d22:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8004d26:	601a      	str	r2, [r3, #0]
		CAN_RxData_Error[2] &= ~ 0x02;	
 8004d28:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004d2a:	789b      	ldrb	r3, [r3, #2]
 8004d2c:	f023 0302 	bic.w	r3, r3, #2
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <CAN_ER_Decode+0x27c>)
 8004d34:	709a      	strb	r2, [r3, #2]
}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000d00 	.word	0x20000d00
 8004d40:	20000cfc 	.word	0x20000cfc
 8004d44:	20000cf8 	.word	0x20000cf8
 8004d48:	20000d68 	.word	0x20000d68
 8004d4c:	0801292c 	.word	0x0801292c
 8004d50:	08012934 	.word	0x08012934
 8004d54:	08012948 	.word	0x08012948
 8004d58:	08012950 	.word	0x08012950
 8004d5c:	20000df0 	.word	0x20000df0
 8004d60:	08012954 	.word	0x08012954
 8004d64:	08012968 	.word	0x08012968
 8004d68:	08012980 	.word	0x08012980
 8004d6c:	0801299c 	.word	0x0801299c
 8004d70:	080129b0 	.word	0x080129b0
 8004d74:	080129c4 	.word	0x080129c4
 8004d78:	080129d8 	.word	0x080129d8
 8004d7c:	080129ec 	.word	0x080129ec
 8004d80:	08012a00 	.word	0x08012a00

08004d84 <CAN_DT_Decode>:
void CAN_DT_Decode() 
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
	
	uCommStatusFlag &= ~f_canDTIn;
 8004d88:	4b3c      	ldr	r3, [pc, #240]	; (8004e7c <CAN_DT_Decode+0xf8>)
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <CAN_DT_Decode+0xf8>)
 8004d94:	801a      	strh	r2, [r3, #0]
	if (is_NotUrgency() == 0) 
 8004d96:	f000 fa4d 	bl	8005234 <is_NotUrgency>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10f      	bne.n	8004dc0 <CAN_DT_Decode+0x3c>
	{
		uSysStatusFlag &= ~f_TraceLine;
 8004da0:	4b37      	ldr	r3, [pc, #220]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004da8:	4a35      	ldr	r2, [pc, #212]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004daa:	6013      	str	r3, [r2, #0]
		uSysStatusFlag &= ~f_smartConnected;
 8004dac:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004db4:	4a32      	ldr	r2, [pc, #200]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004db6:	6013      	str	r3, [r2, #0]
		smt_Command = 0;
 8004db8:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <CAN_DT_Decode+0x100>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	801a      	strh	r2, [r3, #0]
		return;
 8004dbe:	e05b      	b.n	8004e78 <CAN_DT_Decode+0xf4>
	}
	//
	if (CAN_RxData[0] & 0x40 ) // rtk state 1 detect
 8004dc0:	4b31      	ldr	r3, [pc, #196]	; (8004e88 <CAN_DT_Decode+0x104>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <CAN_DT_Decode+0x50>
	{
		RTK_state = 1;
 8004dcc:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <CAN_DT_Decode+0x108>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e002      	b.n	8004dda <CAN_DT_Decode+0x56>
	}
	else // 원래 0 
	{
		RTK_state = 0;
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <CAN_DT_Decode+0x108>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	701a      	strb	r2, [r3, #0]
		}
	}
	
	#endif 

	if (CAN_RxData[0] & 0x80) 
 8004dda:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <CAN_DT_Decode+0x104>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	b25b      	sxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da2c      	bge.n	8004e3e <CAN_DT_Decode+0xba>
	{
		uSysStatusFlag |= f_TraceLine; /* ������ ���� �� */
 8004de4:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dec:	4a24      	ldr	r2, [pc, #144]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004dee:	6013      	str	r3, [r2, #0]
		smt_Command = (CAN_RxData[1] << 8) | CAN_RxData[0];
 8004df0:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <CAN_DT_Decode+0x104>)
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	b21a      	sxth	r2, r3
 8004df8:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <CAN_DT_Decode+0x104>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	b21b      	sxth	r3, r3
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	b21b      	sxth	r3, r3
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <CAN_DT_Decode+0x100>)
 8004e06:	801a      	strh	r2, [r3, #0]
		smt_Command &= 0x008D; /* 0000 0000 1000 1101 Heart Bit & Backward Bit Clear */
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <CAN_DT_Decode+0x100>)
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	f003 038d 	and.w	r3, r3, #141	; 0x8d
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <CAN_DT_Decode+0x100>)
 8004e14:	801a      	strh	r2, [r3, #0]
		uSysStatusFlag |= f_smartConnected;
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e1e:	4a18      	ldr	r2, [pc, #96]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e20:	6013      	str	r3, [r2, #0]
		//
		if (uSysStatusFlag & f_OPT_AutodrvSPD) 
 8004e22:	4b17      	ldr	r3, [pc, #92]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <CAN_DT_Decode+0xb2>
		{
			smt_DRVSpeed = 3;
 8004e2e:	4b18      	ldr	r3, [pc, #96]	; (8004e90 <CAN_DT_Decode+0x10c>)
 8004e30:	2203      	movs	r2, #3
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	e020      	b.n	8004e78 <CAN_DT_Decode+0xf4>
		}
		else 
		{
			smt_DRVSpeed = 2;
 8004e36:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <CAN_DT_Decode+0x10c>)
 8004e38:	2202      	movs	r2, #2
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e01c      	b.n	8004e78 <CAN_DT_Decode+0xf4>
		}
		
	} 
	else 
	{
		if (uSysStatusFlag & f_TraceLine) 
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <CAN_DT_Decode+0xf4>
		{
			uSysStatusFlag &= ~f_TraceLine; /* ������ ���� �� */
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e52:	4a0b      	ldr	r2, [pc, #44]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e54:	6013      	str	r3, [r2, #0]
			uSysStatusFlag &= ~f_smartConnected;
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e60:	6013      	str	r3, [r2, #0]
			smt_Command = 0;
 8004e62:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <CAN_DT_Decode+0x100>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	801a      	strh	r2, [r3, #0]
			//
			if (uSysStatusFlag & f_AutoRun)
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <CAN_DT_Decode+0xfc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <CAN_DT_Decode+0xf4>
				all_MotorStop();
 8004e74:	f001 ff60 	bl	8006d38 <all_MotorStop>
		}
	}

}
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000d00 	.word	0x20000d00
 8004e80:	20000cf8 	.word	0x20000cf8
 8004e84:	20000d36 	.word	0x20000d36
 8004e88:	20000d64 	.word	0x20000d64
 8004e8c:	20000d90 	.word	0x20000d90
 8004e90:	20000039 	.word	0x20000039

08004e94 <Comm_Check>:


void Comm_Check() {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
	if (f_commCAN) 
 8004e98:	4b18      	ldr	r3, [pc, #96]	; (8004efc <Comm_Check+0x68>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d02a      	beq.n	8004ef6 <Comm_Check+0x62>
	{
		if (uCommStatusFlag & f_canDTIn) 
 8004ea0:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <Comm_Check+0x6c>)
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <Comm_Check+0x1e>
		{
			CAN_DT_Decode();
 8004eac:	f7ff ff6a 	bl	8004d84 <CAN_DT_Decode>
					uSysStatusFlag &= ~f_ADRVnoCANData;
				}
			}
		}
	}
}
 8004eb0:	e021      	b.n	8004ef6 <Comm_Check+0x62>
		else if (uCommStatusFlag & f_canERIn)
 8004eb2:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <Comm_Check+0x6c>)
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <Comm_Check+0x30>
			CAN_ER_Decode();
 8004ebe:	f7ff fe05 	bl	8004acc <CAN_ER_Decode>
}
 8004ec2:	e018      	b.n	8004ef6 <Comm_Check+0x62>
			if (uSysStatusFlag & f_AutoRun) 
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <Comm_Check+0x70>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d012      	beq.n	8004ef6 <Comm_Check+0x62>
				if (canDTIntime == 0) 
 8004ed0:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <Comm_Check+0x74>)
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d108      	bne.n	8004eea <Comm_Check+0x56>
					uSysStatusFlag |= f_ADRVnoCANData;
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <Comm_Check+0x70>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ee0:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <Comm_Check+0x70>)
 8004ee2:	6013      	str	r3, [r2, #0]
					all_MotorStop();
 8004ee4:	f001 ff28 	bl	8006d38 <all_MotorStop>
}
 8004ee8:	e005      	b.n	8004ef6 <Comm_Check+0x62>
					uSysStatusFlag &= ~f_ADRVnoCANData;
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <Comm_Check+0x70>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ef2:	4a04      	ldr	r2, [pc, #16]	; (8004f04 <Comm_Check+0x70>)
 8004ef4:	6013      	str	r3, [r2, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000cf2 	.word	0x20000cf2
 8004f00:	20000d00 	.word	0x20000d00
 8004f04:	20000cf8 	.word	0x20000cf8
 8004f08:	20000d56 	.word	0x20000d56

08004f0c <GPIO_Configuration>:

extern LocalKeyType Local_Key;
uint8_t isAutoCondition();

void GPIO_Configuration(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af00      	add	r7, sp, #0
	
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f12:	f107 0318 	add.w	r3, r7, #24
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	60da      	str	r2, [r3, #12]
	
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004f20:	4b9f      	ldr	r3, [pc, #636]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	4a9e      	ldr	r2, [pc, #632]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f26:	f043 0304 	orr.w	r3, r3, #4
 8004f2a:	6193      	str	r3, [r2, #24]
 8004f2c:	4b9c      	ldr	r3, [pc, #624]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004f38:	4b99      	ldr	r3, [pc, #612]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	4a98      	ldr	r2, [pc, #608]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f3e:	f043 0308 	orr.w	r3, r3, #8
 8004f42:	6193      	str	r3, [r2, #24]
 8004f44:	4b96      	ldr	r3, [pc, #600]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004f50:	4b93      	ldr	r3, [pc, #588]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	4a92      	ldr	r2, [pc, #584]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f56:	f043 0310 	orr.w	r3, r3, #16
 8004f5a:	6193      	str	r3, [r2, #24]
 8004f5c:	4b90      	ldr	r3, [pc, #576]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004f68:	4b8d      	ldr	r3, [pc, #564]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	4a8c      	ldr	r2, [pc, #560]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f6e:	f043 0320 	orr.w	r3, r3, #32
 8004f72:	6193      	str	r3, [r2, #24]
 8004f74:	4b8a      	ldr	r3, [pc, #552]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004f80:	4b87      	ldr	r3, [pc, #540]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	4a86      	ldr	r2, [pc, #536]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8a:	6193      	str	r3, [r2, #24]
 8004f8c:	4b84      	ldr	r3, [pc, #528]	; (80051a0 <GPIO_Configuration+0x294>)
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]

    

    /* PORT A Input Define_ADC :  PA 0, 1, 2, 3  */
    GPIO_InitStruct.Pin  = A_in_ADC1_0 | A_in_ADC1_1 | A_in_ADC1_2 | A_in_ADC1_3;   
 8004f98:	230f      	movs	r3, #15
 8004f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);                                       
 8004fa4:	f107 0318 	add.w	r3, r7, #24
 8004fa8:	4619      	mov	r1, r3
 8004faa:	487e      	ldr	r0, [pc, #504]	; (80051a4 <GPIO_Configuration+0x298>)
 8004fac:	f005 fc92 	bl	800a8d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
	#endif 
	/* PORT A Output Define : PA 6(Buzzer) */
	GPIO_InitStruct.Pin   = A_BUZZER; 
 8004fb0:	2340      	movs	r3, #64	; 0x40
 8004fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004fc0:	f107 0318 	add.w	r3, r7, #24
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4877      	ldr	r0, [pc, #476]	; (80051a4 <GPIO_Configuration+0x298>)
 8004fc8:	f005 fc84 	bl	800a8d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_CAN1_Tx;
    GPIO_InitStruct.Mode = GPIO_Mode_AF_PP;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
	#endif 
	
	GPIO_InitStruct.Pin   = B_BEACON_G | B_BEACON_B | GPIO_I2C_WP | GPIO_I2C_SCL | GPIO_I2C_SDA;	   
 8004fcc:	23e3      	movs	r3, #227	; 0xe3
 8004fce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fdc:	f107 0318 	add.w	r3, r7, #24
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4871      	ldr	r0, [pc, #452]	; (80051a8 <GPIO_Configuration+0x29c>)
 8004fe4:	f005 fc76 	bl	800a8d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = B_LED_Y | B_LED_W;	 
 8004fe8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);										 
 8004ffa:	f107 0318 	add.w	r3, r7, #24
 8004ffe:	4619      	mov	r1, r3
 8005000:	4869      	ldr	r0, [pc, #420]	; (80051a8 <GPIO_Configuration+0x29c>)
 8005002:	f005 fc67 	bl	800a8d4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	GPIO_InitStruct.Pin  = GPIO_UART3_Rx;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	#endif
	GPIO_InitStruct.Pin  = B_PMPON | B_PMPUP | B_PMPOFF | B_PMPDN;	 
 8005006:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800500a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800500c:	2301      	movs	r3, #1
 800500e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005010:	2300      	movs	r3, #0
 8005012:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005014:	2302      	movs	r3, #2
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);	
 8005018:	f107 0318 	add.w	r3, r7, #24
 800501c:	4619      	mov	r1, r3
 800501e:	4862      	ldr	r0, [pc, #392]	; (80051a8 <GPIO_Configuration+0x29c>)
 8005020:	f005 fc58 	bl	800a8d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, B_PMPON, GPIO_PIN_RESET);
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800502a:	485f      	ldr	r0, [pc, #380]	; (80051a8 <GPIO_Configuration+0x29c>)
 800502c:	f005 fec9 	bl	800adc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8005030:	2200      	movs	r2, #0
 8005032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005036:	485c      	ldr	r0, [pc, #368]	; (80051a8 <GPIO_Configuration+0x29c>)
 8005038:	f005 fec3 	bl	800adc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B_PMPOFF, GPIO_PIN_RESET);
 800503c:	2200      	movs	r2, #0
 800503e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005042:	4859      	ldr	r0, [pc, #356]	; (80051a8 <GPIO_Configuration+0x29c>)
 8005044:	f005 febd 	bl	800adc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B_PMPDN, GPIO_PIN_RESET);
 8005048:	2200      	movs	r2, #0
 800504a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800504e:	4856      	ldr	r0, [pc, #344]	; (80051a8 <GPIO_Configuration+0x29c>)
 8005050:	f005 feb7 	bl	800adc2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin  = C_STRright_LMT | C_STRleft_LMT | C_STRcenter;   
 8005054:	2313      	movs	r3, #19
 8005056:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800505c:	2302      	movs	r3, #2
 800505e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005060:	f107 0318 	add.w	r3, r7, #24
 8005064:	4619      	mov	r1, r3
 8005066:	4851      	ldr	r0, [pc, #324]	; (80051ac <GPIO_Configuration+0x2a0>)
 8005068:	f005 fc34 	bl	800a8d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = C_CRASH_1;   
 800506c:	2304      	movs	r3, #4
 800506e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005074:	2302      	movs	r3, #2
 8005076:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005078:	f107 0318 	add.w	r3, r7, #24
 800507c:	4619      	mov	r1, r3
 800507e:	484b      	ldr	r0, [pc, #300]	; (80051ac <GPIO_Configuration+0x2a0>)
 8005080:	f005 fc28 	bl	800a8d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = C_WLS_IN1 | C_WLS_IN2;   
 8005084:	23c0      	movs	r3, #192	; 0xc0
 8005086:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800508c:	2302      	movs	r3, #2
 800508e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005090:	f107 0318 	add.w	r3, r7, #24
 8005094:	4619      	mov	r1, r3
 8005096:	4845      	ldr	r0, [pc, #276]	; (80051ac <GPIO_Configuration+0x2a0>)
 8005098:	f005 fc1c 	bl	800a8d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = C_BEACON_R;	 
 800509c:	2320      	movs	r3, #32
 800509e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80050a0:	2301      	movs	r3, #1
 80050a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);	
 80050a4:	f107 0318 	add.w	r3, r7, #24
 80050a8:	4619      	mov	r1, r3
 80050aa:	4840      	ldr	r0, [pc, #256]	; (80051ac <GPIO_Configuration+0x2a0>)
 80050ac:	f005 fc12 	bl	800a8d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = C_OPT_RDY | C_OPT_VISION;	 
 80050b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80050ba:	2302      	movs	r3, #2
 80050bc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);										 
 80050be:	f107 0318 	add.w	r3, r7, #24
 80050c2:	4619      	mov	r1, r3
 80050c4:	4839      	ldr	r0, [pc, #228]	; (80051ac <GPIO_Configuration+0x2a0>)
 80050c6:	f005 fc05 	bl	800a8d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin  = IR_FORWARD | IR_AUTODRIVE | IR_FANONUP | IR_FANOFF;	 
 80050ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80050ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80050d4:	2302      	movs	r3, #2
 80050d6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);										 
 80050d8:	f107 0318 	add.w	r3, r7, #24
 80050dc:	4619      	mov	r1, r3
 80050de:	4833      	ldr	r0, [pc, #204]	; (80051ac <GPIO_Configuration+0x2a0>)
 80050e0:	f005 fbf8 	bl	800a8d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = IR_BACKWARD | IR_LEFT | IR_RIGHT | IR_PUMP | IR_Main;   
 80050e4:	231f      	movs	r3, #31
 80050e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80050ec:	2302      	movs	r3, #2
 80050ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);                                       
 80050f0:	f107 0318 	add.w	r3, r7, #24
 80050f4:	4619      	mov	r1, r3
 80050f6:	482e      	ldr	r0, [pc, #184]	; (80051b0 <GPIO_Configuration+0x2a4>)
 80050f8:	f005 fbec 	bl	800a8d4 <HAL_GPIO_Init>
	/* PORT D Output Define  PWM */
	GPIO_InitStruct.Pin   = PWM_RDY | PWM_FAN; 
	GPIO_InitStruct.Mode = GPIO_Mode_AF_PP;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
	#endif 
	GPIO_InitStruct.Pin   = E_LED_R | E_LED_G; 
 80050fc:	2303      	movs	r3, #3
 80050fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8005100:	2301      	movs	r3, #1
 8005102:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005104:	2300      	movs	r3, #0
 8005106:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005108:	2302      	movs	r3, #2
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);	
 800510c:	f107 0318 	add.w	r3, r7, #24
 8005110:	4619      	mov	r1, r3
 8005112:	4828      	ldr	r0, [pc, #160]	; (80051b4 <GPIO_Configuration+0x2a8>)
 8005114:	f005 fbde 	bl	800a8d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin   = E_strM_BREAK | E_strM_CWCCW; 
 8005118:	f44f 7340 	mov.w	r3, #768	; 0x300
 800511c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800511e:	2301      	movs	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005122:	2300      	movs	r3, #0
 8005124:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005126:	2302      	movs	r3, #2
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);	
 800512a:	f107 0318 	add.w	r3, r7, #24
 800512e:	4619      	mov	r1, r3
 8005130:	4820      	ldr	r0, [pc, #128]	; (80051b4 <GPIO_Configuration+0x2a8>)
 8005132:	f005 fbcf 	bl	800a8d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin   = E_drvM_BREAK | E_drvM_CWCCW | E_SOLv_1; 
 8005136:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800513a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800513c:	2301      	movs	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005144:	2302      	movs	r3, #2
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);	
 8005148:	f107 0318 	add.w	r3, r7, #24
 800514c:	4619      	mov	r1, r3
 800514e:	4819      	ldr	r0, [pc, #100]	; (80051b4 <GPIO_Configuration+0x2a8>)
 8005150:	f005 fbc0 	bl	800a8d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = E_KEY_EMERGENCY | E_KEY_FORWARD | E_KEY_BACKWORD | E_KEY_LEFT | E_KEY_RIGHT;   
 8005154:	237c      	movs	r3, #124	; 0x7c
 8005156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005158:	2300      	movs	r3, #0
 800515a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800515c:	2302      	movs	r3, #2
 800515e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);                                       
 8005160:	f107 0318 	add.w	r3, r7, #24
 8005164:	4619      	mov	r1, r3
 8005166:	4813      	ldr	r0, [pc, #76]	; (80051b4 <GPIO_Configuration+0x2a8>)
 8005168:	f005 fbb4 	bl	800a8d4 <HAL_GPIO_Init>
	/* PORT E Output Define :  PE 0, 1, 8, 9, 11, 12 */
    GPIO_InitStruct.Pin  = E_OPT_Pumpspeed | E_OPT_Autospeed;   
 800516c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005176:	2302      	movs	r3, #2
 8005178:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);                                       
 800517a:	f107 0318 	add.w	r3, r7, #24
 800517e:	4619      	mov	r1, r3
 8005180:	480c      	ldr	r0, [pc, #48]	; (80051b4 <GPIO_Configuration+0x2a8>)
 8005182:	f005 fba7 	bl	800a8d4 <HAL_GPIO_Init>
	R_LED_Off();
 8005186:	f002 fabd 	bl	8007704 <R_LED_Off>
	G_LED_On();
 800518a:	f002 fac7 	bl	800771c <G_LED_On>
	B_LED_Off();
 800518e:	f002 fae7 	bl	8007760 <B_LED_Off>
	#if _ATBD_PST
	f_commCAN = TRUE;		/* PST BD --> CAN */
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <GPIO_Configuration+0x2ac>)
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
	#endif 
}
 8005198:	bf00      	nop
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40010800 	.word	0x40010800
 80051a8:	40010c00 	.word	0x40010c00
 80051ac:	40011000 	.word	0x40011000
 80051b0:	40011400 	.word	0x40011400
 80051b4:	40011800 	.word	0x40011800
 80051b8:	20000cf2 	.word	0x20000cf2

080051bc <DRV_Start>:
//extern uint8_t SW_I2C_WriteControl_8Bit(uint8_t pageaddr, uint8_t regaddr, uint8_t data);


/* functions */
void DRV_Start()
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_DMotorACT) == 0)
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <DRV_Start+0x30>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <DRV_Start+0x28>
  {
	DMotorSeq = DMOTOR_START; 		  /* Local & RFR Forward */
 80051cc:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <DRV_Start+0x34>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]
	uSysStatusFlag |= f_DMotorACT;
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <DRV_Start+0x30>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <DRV_Start+0x30>)
 80051dc:	6013      	str	r3, [r2, #0]
	DMotorWaitime = 10;
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <DRV_Start+0x38>)
 80051e0:	220a      	movs	r2, #10
 80051e2:	801a      	strh	r2, [r3, #0]
  }
}
 80051e4:	bf00      	nop
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	20000cf8 	.word	0x20000cf8
 80051f0:	20000d1c 	.word	0x20000d1c
 80051f4:	20000d20 	.word	0x20000d20

080051f8 <STR_Start>:
//
void STR_Start()
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_SMotorACT) == 0)
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <STR_Start+0x30>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <STR_Start+0x28>
  {

	SMotorSeq = SMOTOR_START;
 8005208:	4b08      	ldr	r3, [pc, #32]	; (800522c <STR_Start+0x34>)
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
	uSysStatusFlag |= f_SMotorACT;
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <STR_Start+0x30>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f043 0308 	orr.w	r3, r3, #8
 8005216:	4a04      	ldr	r2, [pc, #16]	; (8005228 <STR_Start+0x30>)
 8005218:	6013      	str	r3, [r2, #0]
	SMotorWaitime = 10;
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <STR_Start+0x38>)
 800521c:	220a      	movs	r2, #10
 800521e:	801a      	strh	r2, [r3, #0]
  }
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr
 8005228:	20000cf8 	.word	0x20000cf8
 800522c:	20000d1d 	.word	0x20000d1d
 8005230:	20000d22 	.word	0x20000d22

08005234 <is_NotUrgency>:
  uKeyStatusFlag = uKeyStatusFlag & 0x000F;		/* 1100 0000 0001 1111 */
}
#endif
//
uint8_t is_NotUrgency()
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  if(((uSysStatusFlag & f_Crash) == 0) && ((uSysStatusFlag & f_LowBat) == 0))
 8005238:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <is_NotUrgency+0x9c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d120      	bne.n	8005286 <is_NotUrgency+0x52>
 8005244:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <is_NotUrgency+0x9c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d11a      	bne.n	8005286 <is_NotUrgency+0x52>
  {
  	if((uSysStatusFlag & f_RFR_Emergency) == 0)
 8005250:	4b1f      	ldr	r3, [pc, #124]	; (80052d0 <is_NotUrgency+0x9c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <is_NotUrgency+0x2c>
		return 1;
 800525c:	2301      	movs	r3, #1
 800525e:	e035      	b.n	80052cc <is_NotUrgency+0x98>
	else
	{
		if(LKAUTOSeq >= 4)
 8005260:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <is_NotUrgency+0xa0>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d901      	bls.n	800526c <is_NotUrgency+0x38>
		{
			return 1;
 8005268:	2301      	movs	r3, #1
 800526a:	e02f      	b.n	80052cc <is_NotUrgency+0x98>
		}
		else
		{
			if(LKAUTOSeq < 3)
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <is_NotUrgency+0xa0>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d806      	bhi.n	8005282 <is_NotUrgency+0x4e>
			{
				if(u16_DebugFlag == 1)
 8005274:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <is_NotUrgency+0xa4>)
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d102      	bne.n	8005282 <is_NotUrgency+0x4e>
					cliPrintf("\n URGENCY - RFR_Not MAIN");
 800527c:	4817      	ldr	r0, [pc, #92]	; (80052dc <is_NotUrgency+0xa8>)
 800527e:	f7fe fce9 	bl	8003c54 <cliPrintf>
			}
			return 0;
 8005282:	2300      	movs	r3, #0
 8005284:	e022      	b.n	80052cc <is_NotUrgency+0x98>
		}
	}
  }
  else
  {
	if(u16_DebugFlag == 1)
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <is_NotUrgency+0xa4>)
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d11d      	bne.n	80052ca <is_NotUrgency+0x96>
	{
		cliPrintf("\n URGENCY - ");
 800528e:	4814      	ldr	r0, [pc, #80]	; (80052e0 <is_NotUrgency+0xac>)
 8005290:	f7fe fce0 	bl	8003c54 <cliPrintf>
		if(uSysStatusFlag & f_Crash)
 8005294:	4b0e      	ldr	r3, [pc, #56]	; (80052d0 <is_NotUrgency+0x9c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <is_NotUrgency+0x72>
			cliPrintf("CRASH ");
 80052a0:	4810      	ldr	r0, [pc, #64]	; (80052e4 <is_NotUrgency+0xb0>)
 80052a2:	f7fe fcd7 	bl	8003c54 <cliPrintf>
		//
		if(uSysStatusFlag & f_LowBat)
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <is_NotUrgency+0x9c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <is_NotUrgency+0x84>
			cliPrintf("Low Bat. ");
 80052b2:	480d      	ldr	r0, [pc, #52]	; (80052e8 <is_NotUrgency+0xb4>)
 80052b4:	f7fe fcce 	bl	8003c54 <cliPrintf>
		//
		if(uSysStatusFlag & f_RFR_Emergency)
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <is_NotUrgency+0x9c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <is_NotUrgency+0x96>
			cliPrintf("RFR_Not MAIN ");
 80052c4:	4809      	ldr	r0, [pc, #36]	; (80052ec <is_NotUrgency+0xb8>)
 80052c6:	f7fe fcc5 	bl	8003c54 <cliPrintf>
	}
	return 0;
 80052ca:	2300      	movs	r3, #0
  }
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000cf8 	.word	0x20000cf8
 80052d4:	20000d59 	.word	0x20000d59
 80052d8:	20000d08 	.word	0x20000d08
 80052dc:	08012a18 	.word	0x08012a18
 80052e0:	08012a34 	.word	0x08012a34
 80052e4:	08012a44 	.word	0x08012a44
 80052e8:	08012a4c 	.word	0x08012a4c
 80052ec:	08012a58 	.word	0x08012a58

080052f0 <Drive_REQ>:
#define f_RFR_Emergency		(1 << 15)	/* 1 =  Battery V. Low 35V 이하 */
충돌 : 후진 Key 만 동작 한다.
구동과 조향 Key 이외는 위 3가지 경우에는 동작 하지 않는다.
#endif
void Drive_REQ(uint8_t Control)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	71fb      	strb	r3, [r7, #7]
  if(uSysStatusFlag & f_Crash)		/* 충돌 중에는 후진 Key 만 먹는다. */
 80052fa:	4b9f      	ldr	r3, [pc, #636]	; (8005578 <Drive_REQ+0x288>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <Drive_REQ+0x20>
  {
	if(Control != KEY_BACKWORD)
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d001      	beq.n	8005310 <Drive_REQ+0x20>
	{
		Control = KEY_NONE;	
 800530c:	2300      	movs	r3, #0
 800530e:	71fb      	strb	r3, [r7, #7]
	}
  }
  //
  switch(Control)
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	f000 8186 	beq.w	8005624 <Drive_REQ+0x334>
 8005318:	2b80      	cmp	r3, #128	; 0x80
 800531a:	f300 81fe 	bgt.w	800571a <Drive_REQ+0x42a>
 800531e:	2b20      	cmp	r3, #32
 8005320:	dc4a      	bgt.n	80053b8 <Drive_REQ+0xc8>
 8005322:	2b00      	cmp	r3, #0
 8005324:	f340 81f9 	ble.w	800571a <Drive_REQ+0x42a>
 8005328:	3b01      	subs	r3, #1
 800532a:	2b1f      	cmp	r3, #31
 800532c:	f200 81f5 	bhi.w	800571a <Drive_REQ+0x42a>
 8005330:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <Drive_REQ+0x48>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	080053c1 	.word	0x080053c1
 800533c:	080053e3 	.word	0x080053e3
 8005340:	0800571b 	.word	0x0800571b
 8005344:	08005405 	.word	0x08005405
 8005348:	0800571b 	.word	0x0800571b
 800534c:	0800571b 	.word	0x0800571b
 8005350:	0800571b 	.word	0x0800571b
 8005354:	08005435 	.word	0x08005435
 8005358:	0800571b 	.word	0x0800571b
 800535c:	0800571b 	.word	0x0800571b
 8005360:	0800571b 	.word	0x0800571b
 8005364:	0800571b 	.word	0x0800571b
 8005368:	0800571b 	.word	0x0800571b
 800536c:	0800571b 	.word	0x0800571b
 8005370:	0800571b 	.word	0x0800571b
 8005374:	08005465 	.word	0x08005465
 8005378:	0800571b 	.word	0x0800571b
 800537c:	0800571b 	.word	0x0800571b
 8005380:	0800571b 	.word	0x0800571b
 8005384:	0800571b 	.word	0x0800571b
 8005388:	0800571b 	.word	0x0800571b
 800538c:	0800571b 	.word	0x0800571b
 8005390:	0800571b 	.word	0x0800571b
 8005394:	0800571b 	.word	0x0800571b
 8005398:	0800571b 	.word	0x0800571b
 800539c:	0800571b 	.word	0x0800571b
 80053a0:	0800571b 	.word	0x0800571b
 80053a4:	0800571b 	.word	0x0800571b
 80053a8:	0800571b 	.word	0x0800571b
 80053ac:	0800571b 	.word	0x0800571b
 80053b0:	0800571b 	.word	0x0800571b
 80053b4:	08005661 	.word	0x08005661
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	f000 8088 	beq.w	80054ce <Drive_REQ+0x1de>
			}
		}			
		break;
		//
	default:
		break;
 80053be:	e1ac      	b.n	800571a <Drive_REQ+0x42a>
		uSysStatusFlag |= f_DMForward;
 80053c0:	4b6d      	ldr	r3, [pc, #436]	; (8005578 <Drive_REQ+0x288>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f043 0302 	orr.w	r3, r3, #2
 80053c8:	4a6b      	ldr	r2, [pc, #428]	; (8005578 <Drive_REQ+0x288>)
 80053ca:	6013      	str	r3, [r2, #0]
		DRV_Start();
 80053cc:	f7ff fef6 	bl	80051bc <DRV_Start>
		if(u16_DebugFlag == 3)
 80053d0:	4b6a      	ldr	r3, [pc, #424]	; (800557c <Drive_REQ+0x28c>)
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	f040 81a2 	bne.w	800571e <Drive_REQ+0x42e>
			cliPrintf("\n DRV_ForStart");
 80053da:	4869      	ldr	r0, [pc, #420]	; (8005580 <Drive_REQ+0x290>)
 80053dc:	f7fe fc3a 	bl	8003c54 <cliPrintf>
		break;
 80053e0:	e19d      	b.n	800571e <Drive_REQ+0x42e>
		uSysStatusFlag &= ~f_DMForward;			
 80053e2:	4b65      	ldr	r3, [pc, #404]	; (8005578 <Drive_REQ+0x288>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 0302 	bic.w	r3, r3, #2
 80053ea:	4a63      	ldr	r2, [pc, #396]	; (8005578 <Drive_REQ+0x288>)
 80053ec:	6013      	str	r3, [r2, #0]
		DRV_Start();
 80053ee:	f7ff fee5 	bl	80051bc <DRV_Start>
		if(u16_DebugFlag == 3)
 80053f2:	4b62      	ldr	r3, [pc, #392]	; (800557c <Drive_REQ+0x28c>)
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	f040 8193 	bne.w	8005722 <Drive_REQ+0x432>
			cliPrintf("\n DRV_BackStart");
 80053fc:	4861      	ldr	r0, [pc, #388]	; (8005584 <Drive_REQ+0x294>)
 80053fe:	f7fe fc29 	bl	8003c54 <cliPrintf>
		break;
 8005402:	e18e      	b.n	8005722 <Drive_REQ+0x432>
		if((uSysStatusFlag & f_LimitLeft) == 0)
 8005404:	4b5c      	ldr	r3, [pc, #368]	; (8005578 <Drive_REQ+0x288>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 818a 	bne.w	8005726 <Drive_REQ+0x436>
			uSysStatusFlag |= f_SMLeft;
 8005412:	4b59      	ldr	r3, [pc, #356]	; (8005578 <Drive_REQ+0x288>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f043 0310 	orr.w	r3, r3, #16
 800541a:	4a57      	ldr	r2, [pc, #348]	; (8005578 <Drive_REQ+0x288>)
 800541c:	6013      	str	r3, [r2, #0]
			STR_Start();
 800541e:	f7ff feeb 	bl	80051f8 <STR_Start>
			if(u16_DebugFlag == 3)
 8005422:	4b56      	ldr	r3, [pc, #344]	; (800557c <Drive_REQ+0x28c>)
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	2b03      	cmp	r3, #3
 8005428:	f040 817d 	bne.w	8005726 <Drive_REQ+0x436>
				cliPrintf("\n STR_LeftStart");
 800542c:	4856      	ldr	r0, [pc, #344]	; (8005588 <Drive_REQ+0x298>)
 800542e:	f7fe fc11 	bl	8003c54 <cliPrintf>
		break;
 8005432:	e178      	b.n	8005726 <Drive_REQ+0x436>
		if((uSysStatusFlag & f_LimitRight) == 0)
 8005434:	4b50      	ldr	r3, [pc, #320]	; (8005578 <Drive_REQ+0x288>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 8174 	bne.w	800572a <Drive_REQ+0x43a>
			uSysStatusFlag &= ~f_SMLeft;
 8005442:	4b4d      	ldr	r3, [pc, #308]	; (8005578 <Drive_REQ+0x288>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 0310 	bic.w	r3, r3, #16
 800544a:	4a4b      	ldr	r2, [pc, #300]	; (8005578 <Drive_REQ+0x288>)
 800544c:	6013      	str	r3, [r2, #0]
			STR_Start();
 800544e:	f7ff fed3 	bl	80051f8 <STR_Start>
			if(u16_DebugFlag == 3)
 8005452:	4b4a      	ldr	r3, [pc, #296]	; (800557c <Drive_REQ+0x28c>)
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	2b03      	cmp	r3, #3
 8005458:	f040 8167 	bne.w	800572a <Drive_REQ+0x43a>
				cliPrintf("\n STR_RightStart");
 800545c:	484b      	ldr	r0, [pc, #300]	; (800558c <Drive_REQ+0x29c>)
 800545e:	f7fe fbf9 	bl	8003c54 <cliPrintf>
		break;
 8005462:	e162      	b.n	800572a <Drive_REQ+0x43a>
		if(is_NotUrgency())
 8005464:	f7ff fee6 	bl	8005234 <is_NotUrgency>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 815f 	beq.w	800572e <Drive_REQ+0x43e>
			uSysStatusFlag ^= f_PumpOn;
 8005470:	4b41      	ldr	r3, [pc, #260]	; (8005578 <Drive_REQ+0x288>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f083 7380 	eor.w	r3, r3, #16777216	; 0x1000000
 8005478:	4a3f      	ldr	r2, [pc, #252]	; (8005578 <Drive_REQ+0x288>)
 800547a:	6013      	str	r3, [r2, #0]
			if(u16_DebugFlag == 1)
 800547c:	4b3f      	ldr	r3, [pc, #252]	; (800557c <Drive_REQ+0x28c>)
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d105      	bne.n	8005490 <Drive_REQ+0x1a0>
				cliPrintf("\n uSysStatusFlag[%0x]",uSysStatusFlag);
 8005484:	4b3c      	ldr	r3, [pc, #240]	; (8005578 <Drive_REQ+0x288>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	4841      	ldr	r0, [pc, #260]	; (8005590 <Drive_REQ+0x2a0>)
 800548c:	f7fe fbe2 	bl	8003c54 <cliPrintf>
			if(uSysStatusFlag & f_PumpOn)
 8005490:	4b39      	ldr	r3, [pc, #228]	; (8005578 <Drive_REQ+0x288>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d009      	beq.n	80054b0 <Drive_REQ+0x1c0>
				if(u16_DebugFlag == 1)
 800549c:	4b37      	ldr	r3, [pc, #220]	; (800557c <Drive_REQ+0x28c>)
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d102      	bne.n	80054aa <Drive_REQ+0x1ba>
					cliPrintf("\n PUMP ON SEQ");
 80054a4:	483b      	ldr	r0, [pc, #236]	; (8005594 <Drive_REQ+0x2a4>)
 80054a6:	f7fe fbd5 	bl	8003c54 <cliPrintf>
				pn_PumpOn();
 80054aa:	f001 fc1d 	bl	8006ce8 <pn_PumpOn>
		break;
 80054ae:	e13e      	b.n	800572e <Drive_REQ+0x43e>
				PumpSeq = PUMP_STOP;
 80054b0:	4b39      	ldr	r3, [pc, #228]	; (8005598 <Drive_REQ+0x2a8>)
 80054b2:	220d      	movs	r2, #13
 80054b4:	701a      	strb	r2, [r3, #0]
				PumpWaittime = 10;
 80054b6:	4b39      	ldr	r3, [pc, #228]	; (800559c <Drive_REQ+0x2ac>)
 80054b8:	220a      	movs	r2, #10
 80054ba:	801a      	strh	r2, [r3, #0]
				if(u16_DebugFlag == 1)
 80054bc:	4b2f      	ldr	r3, [pc, #188]	; (800557c <Drive_REQ+0x28c>)
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	f040 8134 	bne.w	800572e <Drive_REQ+0x43e>
					cliPrintf("\n PUMP STOP SEQ");
 80054c6:	4836      	ldr	r0, [pc, #216]	; (80055a0 <Drive_REQ+0x2b0>)
 80054c8:	f7fe fbc4 	bl	8003c54 <cliPrintf>
		break;
 80054cc:	e12f      	b.n	800572e <Drive_REQ+0x43e>
		if(is_NotUrgency())
 80054ce:	f7ff feb1 	bl	8005234 <is_NotUrgency>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 812c 	beq.w	8005732 <Drive_REQ+0x442>
			if(NotEmpty_WL())
 80054da:	f002 ff05 	bl	80082e8 <NotEmpty_WL>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8096 	beq.w	8005612 <Drive_REQ+0x322>
				if((uSysStatusFlag & f_FanACT) == 0)
 80054e6:	4b24      	ldr	r3, [pc, #144]	; (8005578 <Drive_REQ+0x288>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d166      	bne.n	80055c0 <Drive_REQ+0x2d0>
					if(FAN_Speed >= 4)
 80054f2:	4b2c      	ldr	r3, [pc, #176]	; (80055a4 <Drive_REQ+0x2b4>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d902      	bls.n	8005500 <Drive_REQ+0x210>
						FAN_Speed = 1;
 80054fa:	4b2a      	ldr	r3, [pc, #168]	; (80055a4 <Drive_REQ+0x2b4>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
					if((FAN_Speed == 0) && (LKAUTOSeq == 0))
 8005500:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <Drive_REQ+0x2b4>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <Drive_REQ+0x226>
 8005508:	4b27      	ldr	r3, [pc, #156]	; (80055a8 <Drive_REQ+0x2b8>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <Drive_REQ+0x226>
						FAN_Speed = 1;					
 8005510:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <Drive_REQ+0x2b4>)
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
					if(FAN_Speed != 0)
 8005516:	4b23      	ldr	r3, [pc, #140]	; (80055a4 <Drive_REQ+0x2b4>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d019      	beq.n	8005552 <Drive_REQ+0x262>
						FanSeq = FAN_START;
 800551e:	4b23      	ldr	r3, [pc, #140]	; (80055ac <Drive_REQ+0x2bc>)
 8005520:	2201      	movs	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]
						uSysStatusFlag |= f_FanACT;
 8005524:	4b14      	ldr	r3, [pc, #80]	; (8005578 <Drive_REQ+0x288>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800552c:	4a12      	ldr	r2, [pc, #72]	; (8005578 <Drive_REQ+0x288>)
 800552e:	6013      	str	r3, [r2, #0]
						uSysStatusFlag |= f_FanOn;
 8005530:	4b11      	ldr	r3, [pc, #68]	; (8005578 <Drive_REQ+0x288>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005538:	4a0f      	ldr	r2, [pc, #60]	; (8005578 <Drive_REQ+0x288>)
 800553a:	6013      	str	r3, [r2, #0]
						FanWaittime = 10;
 800553c:	4b1c      	ldr	r3, [pc, #112]	; (80055b0 <Drive_REQ+0x2c0>)
 800553e:	220a      	movs	r2, #10
 8005540:	801a      	strh	r2, [r3, #0]
						FanTKPWM = FAN_PWM[FAN_Speed];
 8005542:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <Drive_REQ+0x2b4>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <Drive_REQ+0x2c4>)
 800554a:	5c9a      	ldrb	r2, [r3, r2]
 800554c:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <Drive_REQ+0x2c8>)
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e002      	b.n	8005558 <Drive_REQ+0x268>
						FanSeq = FAN_STOP;					
 8005552:	4b16      	ldr	r3, [pc, #88]	; (80055ac <Drive_REQ+0x2bc>)
 8005554:	2205      	movs	r2, #5
 8005556:	701a      	strb	r2, [r3, #0]
					if(u16_DebugFlag == 1)
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <Drive_REQ+0x28c>)
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	f040 80e8 	bne.w	8005732 <Drive_REQ+0x442>
						cliPrintf("\n FAN_Start SPEED[%0d],PWM[%0d]",FAN_Speed,FanTKPWM);
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <Drive_REQ+0x2b4>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	4619      	mov	r1, r3
 8005568:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <Drive_REQ+0x2c8>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	4813      	ldr	r0, [pc, #76]	; (80055bc <Drive_REQ+0x2cc>)
 8005570:	f7fe fb70 	bl	8003c54 <cliPrintf>
		break;
 8005574:	e0dd      	b.n	8005732 <Drive_REQ+0x442>
 8005576:	bf00      	nop
 8005578:	20000cf8 	.word	0x20000cf8
 800557c:	20000d08 	.word	0x20000d08
 8005580:	08012a68 	.word	0x08012a68
 8005584:	08012a78 	.word	0x08012a78
 8005588:	08012a88 	.word	0x08012a88
 800558c:	08012a98 	.word	0x08012a98
 8005590:	08012aac 	.word	0x08012aac
 8005594:	08012ac4 	.word	0x08012ac4
 8005598:	20000d1e 	.word	0x20000d1e
 800559c:	20000d24 	.word	0x20000d24
 80055a0:	08012ad4 	.word	0x08012ad4
 80055a4:	20000d32 	.word	0x20000d32
 80055a8:	20000d59 	.word	0x20000d59
 80055ac:	20000d1f 	.word	0x20000d1f
 80055b0:	20000d26 	.word	0x20000d26
 80055b4:	08012eb4 	.word	0x08012eb4
 80055b8:	20000d2a 	.word	0x20000d2a
 80055bc:	08012ae4 	.word	0x08012ae4
					++FAN_Speed;
 80055c0:	4b60      	ldr	r3, [pc, #384]	; (8005744 <Drive_REQ+0x454>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	4b5e      	ldr	r3, [pc, #376]	; (8005744 <Drive_REQ+0x454>)
 80055ca:	701a      	strb	r2, [r3, #0]
					if(FAN_Speed >= 4)
 80055cc:	4b5d      	ldr	r3, [pc, #372]	; (8005744 <Drive_REQ+0x454>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d902      	bls.n	80055da <Drive_REQ+0x2ea>
						FAN_Speed = 1;
 80055d4:	4b5b      	ldr	r3, [pc, #364]	; (8005744 <Drive_REQ+0x454>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	701a      	strb	r2, [r3, #0]
					FanTKPWM = FAN_PWM[FAN_Speed];
 80055da:	4b5a      	ldr	r3, [pc, #360]	; (8005744 <Drive_REQ+0x454>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	4b59      	ldr	r3, [pc, #356]	; (8005748 <Drive_REQ+0x458>)
 80055e2:	5c9a      	ldrb	r2, [r3, r2]
 80055e4:	4b59      	ldr	r3, [pc, #356]	; (800574c <Drive_REQ+0x45c>)
 80055e6:	701a      	strb	r2, [r3, #0]
					FanSeq = FAN_SPEED;
 80055e8:	4b59      	ldr	r3, [pc, #356]	; (8005750 <Drive_REQ+0x460>)
 80055ea:	2202      	movs	r2, #2
 80055ec:	701a      	strb	r2, [r3, #0]
					FanWaittime = 10;
 80055ee:	4b59      	ldr	r3, [pc, #356]	; (8005754 <Drive_REQ+0x464>)
 80055f0:	220a      	movs	r2, #10
 80055f2:	801a      	strh	r2, [r3, #0]
					if(u16_DebugFlag == 1)
 80055f4:	4b58      	ldr	r3, [pc, #352]	; (8005758 <Drive_REQ+0x468>)
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	f040 809a 	bne.w	8005732 <Drive_REQ+0x442>
						cliPrintf("\n FAN_UP SPEED[%0d],PWM[%0d]",FAN_Speed,FanTKPWM);
 80055fe:	4b51      	ldr	r3, [pc, #324]	; (8005744 <Drive_REQ+0x454>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	4619      	mov	r1, r3
 8005604:	4b51      	ldr	r3, [pc, #324]	; (800574c <Drive_REQ+0x45c>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	4854      	ldr	r0, [pc, #336]	; (800575c <Drive_REQ+0x46c>)
 800560c:	f7fe fb22 	bl	8003c54 <cliPrintf>
		break;
 8005610:	e08f      	b.n	8005732 <Drive_REQ+0x442>
				if(u16_DebugFlag == 1)
 8005612:	4b51      	ldr	r3, [pc, #324]	; (8005758 <Drive_REQ+0x468>)
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	2b01      	cmp	r3, #1
 8005618:	f040 808b 	bne.w	8005732 <Drive_REQ+0x442>
					cliPrintf("\n !! WL_Empty !!");
 800561c:	4850      	ldr	r0, [pc, #320]	; (8005760 <Drive_REQ+0x470>)
 800561e:	f7fe fb19 	bl	8003c54 <cliPrintf>
		break;
 8005622:	e086      	b.n	8005732 <Drive_REQ+0x442>
		if(uSysStatusFlag & f_FanACT)
 8005624:	4b4f      	ldr	r3, [pc, #316]	; (8005764 <Drive_REQ+0x474>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8082 	beq.w	8005736 <Drive_REQ+0x446>
			uSysStatusFlag &= ~f_FanOn;
 8005632:	4b4c      	ldr	r3, [pc, #304]	; (8005764 <Drive_REQ+0x474>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800563a:	4a4a      	ldr	r2, [pc, #296]	; (8005764 <Drive_REQ+0x474>)
 800563c:	6013      	str	r3, [r2, #0]
			FanSeq = FAN_STOP;
 800563e:	4b44      	ldr	r3, [pc, #272]	; (8005750 <Drive_REQ+0x460>)
 8005640:	2205      	movs	r2, #5
 8005642:	701a      	strb	r2, [r3, #0]
			FanWaittime = 10;
 8005644:	4b43      	ldr	r3, [pc, #268]	; (8005754 <Drive_REQ+0x464>)
 8005646:	220a      	movs	r2, #10
 8005648:	801a      	strh	r2, [r3, #0]
			FAN_Speed = 0;
 800564a:	4b3e      	ldr	r3, [pc, #248]	; (8005744 <Drive_REQ+0x454>)
 800564c:	2200      	movs	r2, #0
 800564e:	701a      	strb	r2, [r3, #0]
			if(u16_DebugFlag == 1)
 8005650:	4b41      	ldr	r3, [pc, #260]	; (8005758 <Drive_REQ+0x468>)
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d16e      	bne.n	8005736 <Drive_REQ+0x446>
				cliPrintf("\n FAN STOP SEQ. LOGIC 0");
 8005658:	4843      	ldr	r0, [pc, #268]	; (8005768 <Drive_REQ+0x478>)
 800565a:	f7fe fafb 	bl	8003c54 <cliPrintf>
		break;
 800565e:	e06a      	b.n	8005736 <Drive_REQ+0x446>
		if(is_NotUrgency())
 8005660:	f7ff fde8 	bl	8005234 <is_NotUrgency>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d067      	beq.n	800573a <Drive_REQ+0x44a>
			CAN_RX_FND_Error[0] &= ~0x15;
 800566a:	4b40      	ldr	r3, [pc, #256]	; (800576c <Drive_REQ+0x47c>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	f023 0315 	bic.w	r3, r3, #21
 8005672:	b2da      	uxtb	r2, r3
 8005674:	4b3d      	ldr	r3, [pc, #244]	; (800576c <Drive_REQ+0x47c>)
 8005676:	701a      	strb	r2, [r3, #0]
			CAN_RX_FND_Error[1] &= ~0x3F;
 8005678:	4b3c      	ldr	r3, [pc, #240]	; (800576c <Drive_REQ+0x47c>)
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005680:	b2da      	uxtb	r2, r3
 8005682:	4b3a      	ldr	r3, [pc, #232]	; (800576c <Drive_REQ+0x47c>)
 8005684:	705a      	strb	r2, [r3, #1]
			CAN_RX_FND_Error[2] &= ~0x02;
 8005686:	4b39      	ldr	r3, [pc, #228]	; (800576c <Drive_REQ+0x47c>)
 8005688:	789b      	ldrb	r3, [r3, #2]
 800568a:	f023 0302 	bic.w	r3, r3, #2
 800568e:	b2da      	uxtb	r2, r3
 8005690:	4b36      	ldr	r3, [pc, #216]	; (800576c <Drive_REQ+0x47c>)
 8005692:	709a      	strb	r2, [r3, #2]
			uSysStatusFlag ^= f_AutoRun;
 8005694:	4b33      	ldr	r3, [pc, #204]	; (8005764 <Drive_REQ+0x474>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800569c:	4a31      	ldr	r2, [pc, #196]	; (8005764 <Drive_REQ+0x474>)
 800569e:	6013      	str	r3, [r2, #0]
			if(uSysStatusFlag & f_WTEmptBuzReq)			// During Buzzer  기대자율떄문이네
 80056a0:	4b30      	ldr	r3, [pc, #192]	; (8005764 <Drive_REQ+0x474>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <Drive_REQ+0x3c8>
				uSysStatusFlag &= ~f_WTEmptBuzReq;		// Stop Buszzer		
 80056ac:	4b2d      	ldr	r3, [pc, #180]	; (8005764 <Drive_REQ+0x474>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80056b4:	4a2b      	ldr	r2, [pc, #172]	; (8005764 <Drive_REQ+0x474>)
 80056b6:	6013      	str	r3, [r2, #0]
			if(u16_DebugFlag == 1)
 80056b8:	4b27      	ldr	r3, [pc, #156]	; (8005758 <Drive_REQ+0x468>)
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d107      	bne.n	80056d0 <Drive_REQ+0x3e0>
				cliPrintf("\n KEY_AUTO_RUN[%0x]",(uSysStatusFlag & f_AutoRun));
 80056c0:	4b28      	ldr	r3, [pc, #160]	; (8005764 <Drive_REQ+0x474>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c8:	4619      	mov	r1, r3
 80056ca:	4829      	ldr	r0, [pc, #164]	; (8005770 <Drive_REQ+0x480>)
 80056cc:	f7fe fac2 	bl	8003c54 <cliPrintf>
			if(uSysStatusFlag & f_AutoRun)
 80056d0:	4b24      	ldr	r3, [pc, #144]	; (8005764 <Drive_REQ+0x474>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00c      	beq.n	80056f6 <Drive_REQ+0x406>
				if(u16_DebugFlag == 1)
 80056dc:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <Drive_REQ+0x468>)
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d12a      	bne.n	800573a <Drive_REQ+0x44a>
					cliPrintf("_[%0x]",uSysStatusFlag & f_AutoRun);
 80056e4:	4b1f      	ldr	r3, [pc, #124]	; (8005764 <Drive_REQ+0x474>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ec:	4619      	mov	r1, r3
 80056ee:	4821      	ldr	r0, [pc, #132]	; (8005774 <Drive_REQ+0x484>)
 80056f0:	f7fe fab0 	bl	8003c54 <cliPrintf>
		break;
 80056f4:	e021      	b.n	800573a <Drive_REQ+0x44a>
				if(u16_DebugFlag == 1)
 80056f6:	4b18      	ldr	r3, [pc, #96]	; (8005758 <Drive_REQ+0x468>)
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d10a      	bne.n	8005714 <Drive_REQ+0x424>
					cliPrintf("_[%0x]",uSysStatusFlag & f_AutoRun);
 80056fe:	4b19      	ldr	r3, [pc, #100]	; (8005764 <Drive_REQ+0x474>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005706:	4619      	mov	r1, r3
 8005708:	481a      	ldr	r0, [pc, #104]	; (8005774 <Drive_REQ+0x484>)
 800570a:	f7fe faa3 	bl	8003c54 <cliPrintf>
					cliPrintf(" - Driving AUTO, KEY IN - All Motor Stop");
 800570e:	481a      	ldr	r0, [pc, #104]	; (8005778 <Drive_REQ+0x488>)
 8005710:	f7fe faa0 	bl	8003c54 <cliPrintf>
				all_MotorStop();
 8005714:	f001 fb10 	bl	8006d38 <all_MotorStop>
		break;
 8005718:	e00f      	b.n	800573a <Drive_REQ+0x44a>
		break;
 800571a:	bf00      	nop
 800571c:	e00e      	b.n	800573c <Drive_REQ+0x44c>
		break;
 800571e:	bf00      	nop
 8005720:	e00c      	b.n	800573c <Drive_REQ+0x44c>
		break;
 8005722:	bf00      	nop
 8005724:	e00a      	b.n	800573c <Drive_REQ+0x44c>
		break;
 8005726:	bf00      	nop
 8005728:	e008      	b.n	800573c <Drive_REQ+0x44c>
		break;
 800572a:	bf00      	nop
 800572c:	e006      	b.n	800573c <Drive_REQ+0x44c>
		break;
 800572e:	bf00      	nop
 8005730:	e004      	b.n	800573c <Drive_REQ+0x44c>
		break;
 8005732:	bf00      	nop
 8005734:	e002      	b.n	800573c <Drive_REQ+0x44c>
		break;
 8005736:	bf00      	nop
 8005738:	e000      	b.n	800573c <Drive_REQ+0x44c>
		break;
 800573a:	bf00      	nop
  }
  //}
}
 800573c:	bf00      	nop
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20000d32 	.word	0x20000d32
 8005748:	08012eb4 	.word	0x08012eb4
 800574c:	20000d2a 	.word	0x20000d2a
 8005750:	20000d1f 	.word	0x20000d1f
 8005754:	20000d26 	.word	0x20000d26
 8005758:	20000d08 	.word	0x20000d08
 800575c:	08012b04 	.word	0x08012b04
 8005760:	08012b24 	.word	0x08012b24
 8005764:	20000cf8 	.word	0x20000cf8
 8005768:	08012b38 	.word	0x08012b38
 800576c:	20000d70 	.word	0x20000d70
 8005770:	08012b50 	.word	0x08012b50
 8005774:	08012b64 	.word	0x08012b64
 8005778:	08012b6c 	.word	0x08012b6c

0800577c <Lkey_Action>:
// uSysStatusFlag |= f_TraceLine
#if 0
	자율주행 중에는 주행,조향 Key 동작을 안한다.
#endif
void Lkey_Action()
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
#if 0
  printf("\n L_KEY[%0d]",Local_Key.lK_Last);	
#endif
  if((Local_Key.lK_Last & KEY_FORWARD)  == KEY_FORWARD)
 8005780:	4b42      	ldr	r3, [pc, #264]	; (800588c <Lkey_Action+0x110>)
 8005782:	885b      	ldrh	r3, [r3, #2]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d014      	beq.n	80057b6 <Lkey_Action+0x3a>
  {
	if(isAutoCondition() == 0)	
 800578c:	f000 fbd0 	bl	8005f30 <isAutoCondition>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d136      	bne.n	8005804 <Lkey_Action+0x88>
	{
		uKeyStatusFlag |= flk_Forward;
 8005796:	4b3e      	ldr	r3, [pc, #248]	; (8005890 <Lkey_Action+0x114>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	4a3c      	ldr	r2, [pc, #240]	; (8005890 <Lkey_Action+0x114>)
 80057a0:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~flk_Backward;
 80057a2:	4b3b      	ldr	r3, [pc, #236]	; (8005890 <Lkey_Action+0x114>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f023 0302 	bic.w	r3, r3, #2
 80057aa:	4a39      	ldr	r2, [pc, #228]	; (8005890 <Lkey_Action+0x114>)
 80057ac:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_FORWARD);
 80057ae:	2001      	movs	r0, #1
 80057b0:	f7ff fd9e 	bl	80052f0 <Drive_REQ>
 80057b4:	e026      	b.n	8005804 <Lkey_Action+0x88>
	}
  }
  else if((Local_Key.lK_Last & KEY_BACKWORD)  == KEY_BACKWORD)
 80057b6:	4b35      	ldr	r3, [pc, #212]	; (800588c <Lkey_Action+0x110>)
 80057b8:	885b      	ldrh	r3, [r3, #2]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d014      	beq.n	80057ec <Lkey_Action+0x70>
  {
	if(isAutoCondition() == 0)
 80057c2:	f000 fbb5 	bl	8005f30 <isAutoCondition>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d11b      	bne.n	8005804 <Lkey_Action+0x88>
	{
		uKeyStatusFlag &= ~flk_Forward;
 80057cc:	4b30      	ldr	r3, [pc, #192]	; (8005890 <Lkey_Action+0x114>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	4a2e      	ldr	r2, [pc, #184]	; (8005890 <Lkey_Action+0x114>)
 80057d6:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag |= flk_Backward;
 80057d8:	4b2d      	ldr	r3, [pc, #180]	; (8005890 <Lkey_Action+0x114>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f043 0302 	orr.w	r3, r3, #2
 80057e0:	4a2b      	ldr	r2, [pc, #172]	; (8005890 <Lkey_Action+0x114>)
 80057e2:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_BACKWORD);
 80057e4:	2002      	movs	r0, #2
 80057e6:	f7ff fd83 	bl	80052f0 <Drive_REQ>
 80057ea:	e00b      	b.n	8005804 <Lkey_Action+0x88>
	}
  }
  else
  {
	uKeyStatusFlag &= ~flk_Forward;
 80057ec:	4b28      	ldr	r3, [pc, #160]	; (8005890 <Lkey_Action+0x114>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	4a26      	ldr	r2, [pc, #152]	; (8005890 <Lkey_Action+0x114>)
 80057f6:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~flk_Backward;
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <Lkey_Action+0x114>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f023 0302 	bic.w	r3, r3, #2
 8005800:	4a23      	ldr	r2, [pc, #140]	; (8005890 <Lkey_Action+0x114>)
 8005802:	6013      	str	r3, [r2, #0]
  }
  //
  if((Local_Key.lK_Last & KEY_LEFT) == KEY_LEFT)
 8005804:	4b21      	ldr	r3, [pc, #132]	; (800588c <Lkey_Action+0x110>)
 8005806:	885b      	ldrh	r3, [r3, #2]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d014      	beq.n	800583a <Lkey_Action+0xbe>
  {
	if(isAutoCondition() == 0)
 8005810:	f000 fb8e 	bl	8005f30 <isAutoCondition>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d136      	bne.n	8005888 <Lkey_Action+0x10c>
	{
		uKeyStatusFlag |= flk_Left;
 800581a:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <Lkey_Action+0x114>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f043 0304 	orr.w	r3, r3, #4
 8005822:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <Lkey_Action+0x114>)
 8005824:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~flk_Right;
 8005826:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <Lkey_Action+0x114>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 0308 	bic.w	r3, r3, #8
 800582e:	4a18      	ldr	r2, [pc, #96]	; (8005890 <Lkey_Action+0x114>)
 8005830:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_LEFT);
 8005832:	2004      	movs	r0, #4
 8005834:	f7ff fd5c 	bl	80052f0 <Drive_REQ>
  else
  {
	uKeyStatusFlag &= ~flk_Left;
	uKeyStatusFlag &= ~flk_Right;
  }
}
 8005838:	e026      	b.n	8005888 <Lkey_Action+0x10c>
  else if((Local_Key.lK_Last & KEY_RIGHT) == KEY_RIGHT)
 800583a:	4b14      	ldr	r3, [pc, #80]	; (800588c <Lkey_Action+0x110>)
 800583c:	885b      	ldrh	r3, [r3, #2]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d014      	beq.n	8005870 <Lkey_Action+0xf4>
	if(isAutoCondition() == 0)
 8005846:	f000 fb73 	bl	8005f30 <isAutoCondition>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d11b      	bne.n	8005888 <Lkey_Action+0x10c>
		uKeyStatusFlag &= ~flk_Left;
 8005850:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <Lkey_Action+0x114>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f023 0304 	bic.w	r3, r3, #4
 8005858:	4a0d      	ldr	r2, [pc, #52]	; (8005890 <Lkey_Action+0x114>)
 800585a:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag |= flk_Right;
 800585c:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <Lkey_Action+0x114>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f043 0308 	orr.w	r3, r3, #8
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <Lkey_Action+0x114>)
 8005866:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_RIGHT);
 8005868:	2008      	movs	r0, #8
 800586a:	f7ff fd41 	bl	80052f0 <Drive_REQ>
}
 800586e:	e00b      	b.n	8005888 <Lkey_Action+0x10c>
	uKeyStatusFlag &= ~flk_Left;
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <Lkey_Action+0x114>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f023 0304 	bic.w	r3, r3, #4
 8005878:	4a05      	ldr	r2, [pc, #20]	; (8005890 <Lkey_Action+0x114>)
 800587a:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~flk_Right;
 800587c:	4b04      	ldr	r3, [pc, #16]	; (8005890 <Lkey_Action+0x114>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f023 0308 	bic.w	r3, r3, #8
 8005884:	4a02      	ldr	r2, [pc, #8]	; (8005890 <Lkey_Action+0x114>)
 8005886:	6013      	str	r3, [r2, #0]
}
 8005888:	bf00      	nop
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20000cdc 	.word	0x20000cdc
 8005890:	20000cfc 	.word	0x20000cfc

08005894 <Comm_Action>:
//
void Comm_Action()
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  if((smt_Command & KEY_FORWARD)  == KEY_FORWARD)
 8005898:	4b1c      	ldr	r3, [pc, #112]	; (800590c <Comm_Action+0x78>)
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00f      	beq.n	80058c4 <Comm_Action+0x30>
  {
	uKeyStatusFlag |= smt_Forward;
 80058a4:	4b1a      	ldr	r3, [pc, #104]	; (8005910 <Comm_Action+0x7c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <Comm_Action+0x7c>)
 80058ae:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~smt_Backward;
 80058b0:	4b17      	ldr	r3, [pc, #92]	; (8005910 <Comm_Action+0x7c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058b8:	4a15      	ldr	r2, [pc, #84]	; (8005910 <Comm_Action+0x7c>)
 80058ba:	6013      	str	r3, [r2, #0]
	Drive_REQ(KEY_FORWARD);
 80058bc:	2001      	movs	r0, #1
 80058be:	f7ff fd17 	bl	80052f0 <Drive_REQ>
  {
	uKeyStatusFlag &= ~smt_Left;
	uKeyStatusFlag &= ~smt_Right;
  }
  #endif 
}
 80058c2:	e021      	b.n	8005908 <Comm_Action+0x74>
  else if((smt_Command & KEY_BACKWORD)	== KEY_BACKWORD)
 80058c4:	4b11      	ldr	r3, [pc, #68]	; (800590c <Comm_Action+0x78>)
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00f      	beq.n	80058f0 <Comm_Action+0x5c>
	uKeyStatusFlag &= ~smt_Forward;
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <Comm_Action+0x7c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058d8:	4a0d      	ldr	r2, [pc, #52]	; (8005910 <Comm_Action+0x7c>)
 80058da:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag |= smt_Backward;
 80058dc:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <Comm_Action+0x7c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058e4:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <Comm_Action+0x7c>)
 80058e6:	6013      	str	r3, [r2, #0]
	Drive_REQ(KEY_BACKWORD);
 80058e8:	2002      	movs	r0, #2
 80058ea:	f7ff fd01 	bl	80052f0 <Drive_REQ>
}
 80058ee:	e00b      	b.n	8005908 <Comm_Action+0x74>
	uKeyStatusFlag &= ~smt_Forward;
 80058f0:	4b07      	ldr	r3, [pc, #28]	; (8005910 <Comm_Action+0x7c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058f8:	4a05      	ldr	r2, [pc, #20]	; (8005910 <Comm_Action+0x7c>)
 80058fa:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~smt_Backward;
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <Comm_Action+0x7c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005904:	4a02      	ldr	r2, [pc, #8]	; (8005910 <Comm_Action+0x7c>)
 8005906:	6013      	str	r3, [r2, #0]
}
 8005908:	bf00      	nop
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000d36 	.word	0x20000d36
 8005910:	20000cfc 	.word	0x20000cfc

08005914 <Rkey_Action>:
uint8_t not_ready_flag = 0;
//
void Rkey_Action()	/* 무선리모컨  */
{
 8005914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005918:	b089      	sub	sp, #36	; 0x24
 800591a:	af08      	add	r7, sp, #32
  if(u16_DebugFlag == 1)
 800591c:	4b99      	ldr	r3, [pc, #612]	; (8005b84 <Rkey_Action+0x270>)
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d132      	bne.n	800598a <Rkey_Action+0x76>
  {
	cliPrintf("\n R_KEY[%0x] >> B_ADC[%0d] B-VOLT[%.1f] -- [R_VOL_ADC[%0d] Voltage[%.1f] DRV_SPD[%0d]",RFR_Key.rK_Last,ADC_Battery, V_Battery,ADC_RFRVolume,V_RFRVolume,DRV_Speed);
 8005924:	4b98      	ldr	r3, [pc, #608]	; (8005b88 <Rkey_Action+0x274>)
 8005926:	885b      	ldrh	r3, [r3, #2]
 8005928:	4698      	mov	r8, r3
 800592a:	4b98      	ldr	r3, [pc, #608]	; (8005b8c <Rkey_Action+0x278>)
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	4699      	mov	r9, r3
 8005930:	4b97      	ldr	r3, [pc, #604]	; (8005b90 <Rkey_Action+0x27c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f7fa fded 	bl	8000514 <__aeabi_f2d>
 800593a:	4604      	mov	r4, r0
 800593c:	460d      	mov	r5, r1
 800593e:	4b95      	ldr	r3, [pc, #596]	; (8005b94 <Rkey_Action+0x280>)
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	461e      	mov	r6, r3
 8005944:	4b94      	ldr	r3, [pc, #592]	; (8005b98 <Rkey_Action+0x284>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f7fa fde3 	bl	8000514 <__aeabi_f2d>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4992      	ldr	r1, [pc, #584]	; (8005b9c <Rkey_Action+0x288>)
 8005954:	7809      	ldrb	r1, [r1, #0]
 8005956:	9106      	str	r1, [sp, #24]
 8005958:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800595c:	9602      	str	r6, [sp, #8]
 800595e:	e9cd 4500 	strd	r4, r5, [sp]
 8005962:	464a      	mov	r2, r9
 8005964:	4641      	mov	r1, r8
 8005966:	488e      	ldr	r0, [pc, #568]	; (8005ba0 <Rkey_Action+0x28c>)
 8005968:	f7fe f974 	bl	8003c54 <cliPrintf>
	cliPrintf("\n Limit_C[%0x] L[%0x] R[%0x]",uSysStatusFlag & f_LimitCenter,uSysStatusFlag & f_LimitLeft,uSysStatusFlag & f_LimitRight);
 800596c:	4b8d      	ldr	r3, [pc, #564]	; (8005ba4 <Rkey_Action+0x290>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8005974:	4b8b      	ldr	r3, [pc, #556]	; (8005ba4 <Rkey_Action+0x290>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800597c:	4b89      	ldr	r3, [pc, #548]	; (8005ba4 <Rkey_Action+0x290>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005984:	4888      	ldr	r0, [pc, #544]	; (8005ba8 <Rkey_Action+0x294>)
 8005986:	f7fe f965 	bl	8003c54 <cliPrintf>
  }
  //
  if((RFR_Key.rK_Last & RFR_FORWARD)  == RFR_FORWARD)			/* 0x20 */
 800598a:	4b7f      	ldr	r3, [pc, #508]	; (8005b88 <Rkey_Action+0x274>)
 800598c:	885b      	ldrh	r3, [r3, #2]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d014      	beq.n	80059c0 <Rkey_Action+0xac>
  {
	if(isAutoCondition() == 0)
 8005996:	f000 facb 	bl	8005f30 <isAutoCondition>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d136      	bne.n	8005a0e <Rkey_Action+0xfa>
	{
		uKeyStatusFlag |= frk_Forward;
 80059a0:	4b82      	ldr	r3, [pc, #520]	; (8005bac <Rkey_Action+0x298>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f043 0320 	orr.w	r3, r3, #32
 80059a8:	4a80      	ldr	r2, [pc, #512]	; (8005bac <Rkey_Action+0x298>)
 80059aa:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~frk_Backward;
 80059ac:	4b7f      	ldr	r3, [pc, #508]	; (8005bac <Rkey_Action+0x298>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b4:	4a7d      	ldr	r2, [pc, #500]	; (8005bac <Rkey_Action+0x298>)
 80059b6:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_FORWARD);
 80059b8:	2001      	movs	r0, #1
 80059ba:	f7ff fc99 	bl	80052f0 <Drive_REQ>
 80059be:	e026      	b.n	8005a0e <Rkey_Action+0xfa>
	}
  }
  else if((RFR_Key.rK_Last & RFR_BACKWORD)  == RFR_BACKWORD)	/* 0x01 */
 80059c0:	4b71      	ldr	r3, [pc, #452]	; (8005b88 <Rkey_Action+0x274>)
 80059c2:	885b      	ldrh	r3, [r3, #2]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d014      	beq.n	80059f6 <Rkey_Action+0xe2>
  {
	if(isAutoCondition() == 0)
 80059cc:	f000 fab0 	bl	8005f30 <isAutoCondition>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d11b      	bne.n	8005a0e <Rkey_Action+0xfa>
	{
		uKeyStatusFlag |= frk_Backward;
 80059d6:	4b75      	ldr	r3, [pc, #468]	; (8005bac <Rkey_Action+0x298>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059de:	4a73      	ldr	r2, [pc, #460]	; (8005bac <Rkey_Action+0x298>)
 80059e0:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~frk_Forward;
 80059e2:	4b72      	ldr	r3, [pc, #456]	; (8005bac <Rkey_Action+0x298>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f023 0320 	bic.w	r3, r3, #32
 80059ea:	4a70      	ldr	r2, [pc, #448]	; (8005bac <Rkey_Action+0x298>)
 80059ec:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_BACKWORD); 
 80059ee:	2002      	movs	r0, #2
 80059f0:	f7ff fc7e 	bl	80052f0 <Drive_REQ>
 80059f4:	e00b      	b.n	8005a0e <Rkey_Action+0xfa>
	}
  }
  else
  {
	uKeyStatusFlag &= ~frk_Forward;
 80059f6:	4b6d      	ldr	r3, [pc, #436]	; (8005bac <Rkey_Action+0x298>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 0320 	bic.w	r3, r3, #32
 80059fe:	4a6b      	ldr	r2, [pc, #428]	; (8005bac <Rkey_Action+0x298>)
 8005a00:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~frk_Backward;
 8005a02:	4b6a      	ldr	r3, [pc, #424]	; (8005bac <Rkey_Action+0x298>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a0a:	4a68      	ldr	r2, [pc, #416]	; (8005bac <Rkey_Action+0x298>)
 8005a0c:	6013      	str	r3, [r2, #0]
  }
  //
  if((RFR_Key.rK_Last & RFR_LEFT)  == RFR_LEFT)				/* 0x02 */
 8005a0e:	4b5e      	ldr	r3, [pc, #376]	; (8005b88 <Rkey_Action+0x274>)
 8005a10:	885b      	ldrh	r3, [r3, #2]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d014      	beq.n	8005a44 <Rkey_Action+0x130>
  {
	if(isAutoCondition() == 0)
 8005a1a:	f000 fa89 	bl	8005f30 <isAutoCondition>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d136      	bne.n	8005a92 <Rkey_Action+0x17e>
	{
		uKeyStatusFlag |= frk_Left;
 8005a24:	4b61      	ldr	r3, [pc, #388]	; (8005bac <Rkey_Action+0x298>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2c:	4a5f      	ldr	r2, [pc, #380]	; (8005bac <Rkey_Action+0x298>)
 8005a2e:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~frk_Right;
 8005a30:	4b5e      	ldr	r3, [pc, #376]	; (8005bac <Rkey_Action+0x298>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a38:	4a5c      	ldr	r2, [pc, #368]	; (8005bac <Rkey_Action+0x298>)
 8005a3a:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_LEFT); 
 8005a3c:	2004      	movs	r0, #4
 8005a3e:	f7ff fc57 	bl	80052f0 <Drive_REQ>
 8005a42:	e026      	b.n	8005a92 <Rkey_Action+0x17e>
	}
  }
  else if((RFR_Key.rK_Last & RFR_RIGHT)  == RFR_RIGHT)		/* 0x04 */
 8005a44:	4b50      	ldr	r3, [pc, #320]	; (8005b88 <Rkey_Action+0x274>)
 8005a46:	885b      	ldrh	r3, [r3, #2]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d014      	beq.n	8005a7a <Rkey_Action+0x166>
  {
	if(isAutoCondition() == 0)
 8005a50:	f000 fa6e 	bl	8005f30 <isAutoCondition>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d11b      	bne.n	8005a92 <Rkey_Action+0x17e>
	{
		uKeyStatusFlag |= frk_Right;
 8005a5a:	4b54      	ldr	r3, [pc, #336]	; (8005bac <Rkey_Action+0x298>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a62:	4a52      	ldr	r2, [pc, #328]	; (8005bac <Rkey_Action+0x298>)
 8005a64:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~frk_Left;
 8005a66:	4b51      	ldr	r3, [pc, #324]	; (8005bac <Rkey_Action+0x298>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a6e:	4a4f      	ldr	r2, [pc, #316]	; (8005bac <Rkey_Action+0x298>)
 8005a70:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_RIGHT); 
 8005a72:	2008      	movs	r0, #8
 8005a74:	f7ff fc3c 	bl	80052f0 <Drive_REQ>
 8005a78:	e00b      	b.n	8005a92 <Rkey_Action+0x17e>
	}
  }
  else
  {
	uKeyStatusFlag &= ~frk_Left;
 8005a7a:	4b4c      	ldr	r3, [pc, #304]	; (8005bac <Rkey_Action+0x298>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a82:	4a4a      	ldr	r2, [pc, #296]	; (8005bac <Rkey_Action+0x298>)
 8005a84:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~frk_Right;
 8005a86:	4b49      	ldr	r3, [pc, #292]	; (8005bac <Rkey_Action+0x298>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a8e:	4a47      	ldr	r2, [pc, #284]	; (8005bac <Rkey_Action+0x298>)
 8005a90:	6013      	str	r3, [r2, #0]
  }
  //  
  if((RFR_Key.rK_Last & RFR_FANOFF) == RFR_FANOFF)			/* 0x100 --> 0x80 */
 8005a92:	4b3d      	ldr	r3, [pc, #244]	; (8005b88 <Rkey_Action+0x274>)
 8005a94:	885b      	ldrh	r3, [r3, #2]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d010      	beq.n	8005ac0 <Rkey_Action+0x1ac>
  {
	if(u16_DebugFlag == 1)
 8005a9e:	4b39      	ldr	r3, [pc, #228]	; (8005b84 <Rkey_Action+0x270>)
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d102      	bne.n	8005aac <Rkey_Action+0x198>
		cliPrintf("\n FAN_OFF");
 8005aa6:	4842      	ldr	r0, [pc, #264]	; (8005bb0 <Rkey_Action+0x29c>)
 8005aa8:	f7fe f8d4 	bl	8003c54 <cliPrintf>
	
	uKeyStatusFlag |= frk_FanOff;
 8005aac:	4b3f      	ldr	r3, [pc, #252]	; (8005bac <Rkey_Action+0x298>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ab4:	4a3d      	ldr	r2, [pc, #244]	; (8005bac <Rkey_Action+0x298>)
 8005ab6:	6013      	str	r3, [r2, #0]
	Drive_REQ(KEY_FANOFF);  
 8005ab8:	2080      	movs	r0, #128	; 0x80
 8005aba:	f7ff fc19 	bl	80052f0 <Drive_REQ>
 8005abe:	e022      	b.n	8005b06 <Rkey_Action+0x1f2>
  }
  else if((RFR_Key.rK_Last & RFR_FANONUP) == RFR_FANONUP)
 8005ac0:	4b31      	ldr	r3, [pc, #196]	; (8005b88 <Rkey_Action+0x274>)
 8005ac2:	885b      	ldrh	r3, [r3, #2]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d010      	beq.n	8005aee <Rkey_Action+0x1da>
  {
	if(u16_DebugFlag == 1)
 8005acc:	4b2d      	ldr	r3, [pc, #180]	; (8005b84 <Rkey_Action+0x270>)
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d102      	bne.n	8005ada <Rkey_Action+0x1c6>
    	cliPrintf("\n FAN_ON_UP");
 8005ad4:	4837      	ldr	r0, [pc, #220]	; (8005bb4 <Rkey_Action+0x2a0>)
 8005ad6:	f7fe f8bd 	bl	8003c54 <cliPrintf>

	uKeyStatusFlag |= frk_FanOnUp;
 8005ada:	4b34      	ldr	r3, [pc, #208]	; (8005bac <Rkey_Action+0x298>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ae2:	4a32      	ldr	r2, [pc, #200]	; (8005bac <Rkey_Action+0x298>)
 8005ae4:	6013      	str	r3, [r2, #0]
	Drive_REQ(KEY_FANONUP);  
 8005ae6:	2040      	movs	r0, #64	; 0x40
 8005ae8:	f7ff fc02 	bl	80052f0 <Drive_REQ>
 8005aec:	e00b      	b.n	8005b06 <Rkey_Action+0x1f2>
  }
  else
  {
	uKeyStatusFlag &= ~frk_FanOnUp;
 8005aee:	4b2f      	ldr	r3, [pc, #188]	; (8005bac <Rkey_Action+0x298>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af6:	4a2d      	ldr	r2, [pc, #180]	; (8005bac <Rkey_Action+0x298>)
 8005af8:	6013      	str	r3, [r2, #0]
	uKeyStatusFlag &= ~frk_FanOff;
 8005afa:	4b2c      	ldr	r3, [pc, #176]	; (8005bac <Rkey_Action+0x298>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b02:	4a2a      	ldr	r2, [pc, #168]	; (8005bac <Rkey_Action+0x298>)
 8005b04:	6013      	str	r3, [r2, #0]
  }
  // 
  if((RFR_Key.rK_Last & RFR_PUMP) == RFR_PUMP)
 8005b06:	4b20      	ldr	r3, [pc, #128]	; (8005b88 <Rkey_Action+0x274>)
 8005b08:	885b      	ldrh	r3, [r3, #2]
 8005b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d010      	beq.n	8005b34 <Rkey_Action+0x220>
  {
	  if(u16_DebugFlag == 1)
 8005b12:	4b1c      	ldr	r3, [pc, #112]	; (8005b84 <Rkey_Action+0x270>)
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d102      	bne.n	8005b20 <Rkey_Action+0x20c>
		  cliPrintf("\n RFR_PUMP");
 8005b1a:	4827      	ldr	r0, [pc, #156]	; (8005bb8 <Rkey_Action+0x2a4>)
 8005b1c:	f7fe f89a 	bl	8003c54 <cliPrintf>
	  
		uKeyStatusFlag |= frk_Pump;
 8005b20:	4b22      	ldr	r3, [pc, #136]	; (8005bac <Rkey_Action+0x298>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b28:	4a20      	ldr	r2, [pc, #128]	; (8005bac <Rkey_Action+0x298>)
 8005b2a:	6013      	str	r3, [r2, #0]
		Drive_REQ(KEY_PUMP);  			/*  */
 8005b2c:	2010      	movs	r0, #16
 8005b2e:	f7ff fbdf 	bl	80052f0 <Drive_REQ>
 8005b32:	e005      	b.n	8005b40 <Rkey_Action+0x22c>
  }
  else
 	uKeyStatusFlag &= ~frk_Pump; 	
 8005b34:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <Rkey_Action+0x298>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3c:	4a1b      	ldr	r2, [pc, #108]	; (8005bac <Rkey_Action+0x298>)
 8005b3e:	6013      	str	r3, [r2, #0]
  //
  if((RFR_Key.rK_Last & RFR_ATDRV) == RFR_ATDRV)
 8005b40:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <Rkey_Action+0x274>)
 8005b42:	885b      	ldrh	r3, [r3, #2]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d058      	beq.n	8005bfe <Rkey_Action+0x2ea>
  {
		

	if (RTK_state == 1)
 8005b4c:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <Rkey_Action+0x2a8>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d137      	bne.n	8005bc4 <Rkey_Action+0x2b0>
	{
		if ( !(uSysStatusFlag & a_NotCondition))
 8005b54:	4b13      	ldr	r3, [pc, #76]	; (8005ba4 <Rkey_Action+0x290>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d14e      	bne.n	8005bfe <Rkey_Action+0x2ea>
		{
			
			if (DRV_Speed  == 1 )
 8005b60:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <Rkey_Action+0x288>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d103      	bne.n	8005b70 <Rkey_Action+0x25c>
			{
				center_start = 3;
 8005b68:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <Rkey_Action+0x2ac>)
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	701a      	strb	r2, [r3, #0]
		Bcon_dly = 2700;
	}
		
  }

}
 8005b6e:	e046      	b.n	8005bfe <Rkey_Action+0x2ea>
				uKeyStatusFlag |= frk_AutoDrv;
 8005b70:	4b0e      	ldr	r3, [pc, #56]	; (8005bac <Rkey_Action+0x298>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b78:	4a0c      	ldr	r2, [pc, #48]	; (8005bac <Rkey_Action+0x298>)
 8005b7a:	6013      	str	r3, [r2, #0]
				Drive_REQ(KEY_AUTORUN);
 8005b7c:	2020      	movs	r0, #32
 8005b7e:	f7ff fbb7 	bl	80052f0 <Drive_REQ>
}
 8005b82:	e03c      	b.n	8005bfe <Rkey_Action+0x2ea>
 8005b84:	20000d08 	.word	0x20000d08
 8005b88:	20000ce8 	.word	0x20000ce8
 8005b8c:	20000d0e 	.word	0x20000d0e
 8005b90:	20000034 	.word	0x20000034
 8005b94:	20000d10 	.word	0x20000d10
 8005b98:	20000d14 	.word	0x20000d14
 8005b9c:	20000038 	.word	0x20000038
 8005ba0:	08012b98 	.word	0x08012b98
 8005ba4:	20000cf8 	.word	0x20000cf8
 8005ba8:	08012bf0 	.word	0x08012bf0
 8005bac:	20000cfc 	.word	0x20000cfc
 8005bb0:	08012c10 	.word	0x08012c10
 8005bb4:	08012c1c 	.word	0x08012c1c
 8005bb8:	08012c28 	.word	0x08012c28
 8005bbc:	20000d90 	.word	0x20000d90
 8005bc0:	20000de6 	.word	0x20000de6
		uSysStatusFlag |= a_NotCondition;
 8005bc4:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <Rkey_Action+0x2f4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005bcc:	4a0e      	ldr	r2, [pc, #56]	; (8005c08 <Rkey_Action+0x2f4>)
 8005bce:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~ frk_AutoDrv;
 8005bd0:	4b0e      	ldr	r3, [pc, #56]	; (8005c0c <Rkey_Action+0x2f8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bd8:	4a0c      	ldr	r2, [pc, #48]	; (8005c0c <Rkey_Action+0x2f8>)
 8005bda:	6013      	str	r3, [r2, #0]
		uSysStatusFlag &= ~f_AutoRun;
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <Rkey_Action+0x2f4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be4:	4a08      	ldr	r2, [pc, #32]	; (8005c08 <Rkey_Action+0x2f4>)
 8005be6:	6013      	str	r3, [r2, #0]
		not_ready_flag |= F_DRV_REQ;
 8005be8:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <Rkey_Action+0x2fc>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	f043 030f 	orr.w	r3, r3, #15
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <Rkey_Action+0x2fc>)
 8005bf4:	701a      	strb	r2, [r3, #0]
		Bcon_dly = 2700;
 8005bf6:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <Rkey_Action+0x300>)
 8005bf8:	f640 228c 	movw	r2, #2700	; 0xa8c
 8005bfc:	601a      	str	r2, [r3, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	3704      	adds	r7, #4
 8005c02:	46bd      	mov	sp, r7
 8005c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c08:	20000cf8 	.word	0x20000cf8
 8005c0c:	20000cfc 	.word	0x20000cfc
 8005c10:	20000d5c 	.word	0x20000d5c
 8005c14:	20000df0 	.word	0x20000df0

08005c18 <Key_IdentChk>:
//
/* 동시 KEY 처리 */
uint8_t Key_IdentChk(uint16_t In_LocalKey)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	80fb      	strh	r3, [r7, #6]
  if(((In_LocalKey & KEY_FORWARD) == KEY_FORWARD) && ((In_LocalKey & KEY_BACKWORD) == KEY_BACKWORD))
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d006      	beq.n	8005c3a <Key_IdentChk+0x22>
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <Key_IdentChk+0x22>
	return 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e00c      	b.n	8005c54 <Key_IdentChk+0x3c>
  //
  if(((In_LocalKey & KEY_LEFT) == KEY_LEFT) && ((In_LocalKey & KEY_RIGHT) == KEY_RIGHT))
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d006      	beq.n	8005c52 <Key_IdentChk+0x3a>
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <Key_IdentChk+0x3a>
	  return 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e000      	b.n	8005c54 <Key_IdentChk+0x3c>
  //	  
  return 1;
 8005c52:	2301      	movs	r3, #1
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bc80      	pop	{r7}
 8005c5c:	4770      	bx	lr

08005c5e <Comm_IdentChk>:
/* */
#if 0
	동시 입력 Check (전진/ 후진, 좌향/ 우향)
#endif
uint8_t Comm_IdentChk(uint16_t In_LocalKey)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	4603      	mov	r3, r0
 8005c66:	80fb      	strh	r3, [r7, #6]
  if(((In_LocalKey & KEY_FORWARD) == KEY_FORWARD) && ((In_LocalKey & KEY_BACKWORD) == KEY_BACKWORD))
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d006      	beq.n	8005c80 <Comm_IdentChk+0x22>
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <Comm_IdentChk+0x22>
	return 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e00c      	b.n	8005c9a <Comm_IdentChk+0x3c>
  //
  if(((In_LocalKey & KEY_LEFT) == KEY_LEFT) && ((In_LocalKey & KEY_RIGHT) == KEY_RIGHT))
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d006      	beq.n	8005c98 <Comm_IdentChk+0x3a>
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <Comm_IdentChk+0x3a>
	return 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	e000      	b.n	8005c9a <Comm_IdentChk+0x3c>
  //		
  return 1;
 8005c98:	2301      	movs	r3, #1
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr

08005ca4 <LKEY_Check>:
5	PE7 	IN		KEY_RIGHT						8
5	PE8 	IN		KEY_RIGHT						8

*/
void LKEY_Check()		/* Local 4 Key */
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
	  uint16_t L_KeyBuff;
	
	  L_KeyBuff = (GPIOE->IDR >> 3) & 0x000F;
 8005caa:	4b3f      	ldr	r3, [pc, #252]	; (8005da8 <LKEY_Check+0x104>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	08db      	lsrs	r3, r3, #3
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	80fb      	strh	r3, [r7, #6]
	  if(L_KeyBuff != 0 && Key_IdentChk(L_KeyBuff)) 	/* 동시 Key 처리 --> 막는다. */
 8005cb8:	88fb      	ldrh	r3, [r7, #6]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d055      	beq.n	8005d6a <LKEY_Check+0xc6>
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff ffa9 	bl	8005c18 <Key_IdentChk>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d04e      	beq.n	8005d6a <LKEY_Check+0xc6>
	  {
		Local_Key.lK_Data = L_KeyBuff;
 8005ccc:	4a37      	ldr	r2, [pc, #220]	; (8005dac <LKEY_Check+0x108>)
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	8013      	strh	r3, [r2, #0]
		if(Local_Key.lK_Data == Local_Key.lK_Back)
 8005cd2:	4b36      	ldr	r3, [pc, #216]	; (8005dac <LKEY_Check+0x108>)
 8005cd4:	881a      	ldrh	r2, [r3, #0]
 8005cd6:	4b35      	ldr	r3, [pc, #212]	; (8005dac <LKEY_Check+0x108>)
 8005cd8:	889b      	ldrh	r3, [r3, #4]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d131      	bne.n	8005d42 <LKEY_Check+0x9e>
		{
			if(Local_Key.lK_ChatCnt == 0)
 8005cde:	4b33      	ldr	r3, [pc, #204]	; (8005dac <LKEY_Check+0x108>)
 8005ce0:	88db      	ldrh	r3, [r3, #6]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d15a      	bne.n	8005d9c <LKEY_Check+0xf8>
			{
				uKeyStatusFlag |= fLK_Ok;
 8005ce6:	4b32      	ldr	r3, [pc, #200]	; (8005db0 <LKEY_Check+0x10c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cee:	4a30      	ldr	r2, [pc, #192]	; (8005db0 <LKEY_Check+0x10c>)
 8005cf0:	6013      	str	r3, [r2, #0]
				uKeyStatusFlag &= ~fLK_Repeat;
 8005cf2:	4b2f      	ldr	r3, [pc, #188]	; (8005db0 <LKEY_Check+0x10c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cfa:	4a2d      	ldr	r2, [pc, #180]	; (8005db0 <LKEY_Check+0x10c>)
 8005cfc:	6013      	str	r3, [r2, #0]
				if(Local_Key.lK_Data == Local_Key.lK_Last)
 8005cfe:	4b2b      	ldr	r3, [pc, #172]	; (8005dac <LKEY_Check+0x108>)
 8005d00:	881a      	ldrh	r2, [r3, #0]
 8005d02:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <LKEY_Check+0x108>)
 8005d04:	885b      	ldrh	r3, [r3, #2]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d105      	bne.n	8005d16 <LKEY_Check+0x72>
					uKeyStatusFlag |= fLK_Repeat;
 8005d0a:	4b29      	ldr	r3, [pc, #164]	; (8005db0 <LKEY_Check+0x10c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d12:	4a27      	ldr	r2, [pc, #156]	; (8005db0 <LKEY_Check+0x10c>)
 8005d14:	6013      	str	r3, [r2, #0]
				Local_Key.lK_Last = Local_Key.lK_Data;
 8005d16:	4b25      	ldr	r3, [pc, #148]	; (8005dac <LKEY_Check+0x108>)
 8005d18:	881a      	ldrh	r2, [r3, #0]
 8005d1a:	4b24      	ldr	r3, [pc, #144]	; (8005dac <LKEY_Check+0x108>)
 8005d1c:	805a      	strh	r2, [r3, #2]
				//	
				Local_Key.lK_ChatCnt = 30;		/* 매 30ms 마다 */
 8005d1e:	4b23      	ldr	r3, [pc, #140]	; (8005dac <LKEY_Check+0x108>)
 8005d20:	221e      	movs	r2, #30
 8005d22:	80da      	strh	r2, [r3, #6]
				RK_PermitTime = 3000/30;		/* 3초 뒤 R Key Check */
 8005d24:	4b23      	ldr	r3, [pc, #140]	; (8005db4 <LKEY_Check+0x110>)
 8005d26:	2264      	movs	r2, #100	; 0x64
 8005d28:	801a      	strh	r2, [r3, #0]
				
				if(uSysStatusFlag & f_AutoRun)		/* 자율 주행중, 유효한 Key 가 들어오면 */
 8005d2a:	4b23      	ldr	r3, [pc, #140]	; (8005db8 <LKEY_Check+0x114>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <LKEY_Check+0x98>
				{									/* 자울 주행을 중지한다. */
					all_MotorStop();
 8005d36:	f000 ffff 	bl	8006d38 <all_MotorStop>
		if(Local_Key.lK_Data == Local_Key.lK_Back)
 8005d3a:	e02f      	b.n	8005d9c <LKEY_Check+0xf8>
				}
				else					
					Lkey_Action();					
 8005d3c:	f7ff fd1e 	bl	800577c <Lkey_Action>
		if(Local_Key.lK_Data == Local_Key.lK_Back)
 8005d40:	e02c      	b.n	8005d9c <LKEY_Check+0xf8>
			}
		} 
		else 
		{
			Local_Key.lK_Back = Local_Key.lK_Data;
 8005d42:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <LKEY_Check+0x108>)
 8005d44:	881a      	ldrh	r2, [r3, #0]
 8005d46:	4b19      	ldr	r3, [pc, #100]	; (8005dac <LKEY_Check+0x108>)
 8005d48:	809a      	strh	r2, [r3, #4]
			Local_Key.lK_ChatCnt = 60;
 8005d4a:	4b18      	ldr	r3, [pc, #96]	; (8005dac <LKEY_Check+0x108>)
 8005d4c:	223c      	movs	r2, #60	; 0x3c
 8005d4e:	80da      	strh	r2, [r3, #6]
			uKeyStatusFlag &= ~fLK_Ok;
 8005d50:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <LKEY_Check+0x10c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d58:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <LKEY_Check+0x10c>)
 8005d5a:	6013      	str	r3, [r2, #0]
			uKeyStatusFlag &= ~fLK_Repeat;
 8005d5c:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <LKEY_Check+0x10c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d64:	4a12      	ldr	r2, [pc, #72]	; (8005db0 <LKEY_Check+0x10c>)
 8005d66:	6013      	str	r3, [r2, #0]
		if(Local_Key.lK_Data == Local_Key.lK_Back)
 8005d68:	e018      	b.n	8005d9c <LKEY_Check+0xf8>
		}
	  }
	  else
	  {
		//LK_FlagClear();
		uKeyStatusFlag &= ~fLK_Ok;
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <LKEY_Check+0x10c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d72:	4a0f      	ldr	r2, [pc, #60]	; (8005db0 <LKEY_Check+0x10c>)
 8005d74:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~fLK_Repeat;
 8005d76:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <LKEY_Check+0x10c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d7e:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <LKEY_Check+0x10c>)
 8005d80:	6013      	str	r3, [r2, #0]
		Local_Key.lK_Data = 0;
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <LKEY_Check+0x108>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	801a      	strh	r2, [r3, #0]
		Local_Key.lK_Back = 0;
 8005d88:	4b08      	ldr	r3, [pc, #32]	; (8005dac <LKEY_Check+0x108>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	809a      	strh	r2, [r3, #4]
		Local_Key.lK_Last = 0;
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <LKEY_Check+0x108>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	805a      	strh	r2, [r3, #2]
		Local_Key.lK_ChatCnt = 60;
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <LKEY_Check+0x108>)
 8005d96:	223c      	movs	r2, #60	; 0x3c
 8005d98:	80da      	strh	r2, [r3, #6]
	  }
}
 8005d9a:	e000      	b.n	8005d9e <LKEY_Check+0xfa>
		if(Local_Key.lK_Data == Local_Key.lK_Back)
 8005d9c:	bf00      	nop
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40011800 	.word	0x40011800
 8005dac:	20000cdc 	.word	0x20000cdc
 8005db0:	20000cfc 	.word	0x20000cfc
 8005db4:	20000d30 	.word	0x20000d30
 8005db8:	20000cf8 	.word	0x20000cf8

08005dbc <RKEY_Check>:
  else
  	return 0;	/* FANON 104, FAN)FF 108, AUTO  102, OUMP 180 */
}
#endif
void RKEY_Check()
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
	  uint16_t PC_rKey, PD_rKey, R_KeyBuff;
	
	  PC_rKey = (GPIOC->IDR & 0xF000) >> 12;
 8005dc2:	4b55      	ldr	r3, [pc, #340]	; (8005f18 <RKEY_Check+0x15c>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	0b1b      	lsrs	r3, r3, #12
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	80fb      	strh	r3, [r7, #6]
	  PD_rKey = (GPIOD->IDR & 0x001F) << 4;
 8005dd0:	4b52      	ldr	r3, [pc, #328]	; (8005f1c <RKEY_Check+0x160>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dde:	80bb      	strh	r3, [r7, #4]
	  R_KeyBuff = PC_rKey | PD_rKey;
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	88bb      	ldrh	r3, [r7, #4]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	807b      	strh	r3, [r7, #2]
	  R_KeyBuff &= 0x01FF;
 8005de8:	887b      	ldrh	r3, [r7, #2]
 8005dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dee:	807b      	strh	r3, [r7, #2]
#if 0	
	  printf("\n RFR_Port_Read[%0x]",R_KeyBuff);
#endif	
	  if(R_KeyBuff & 0x00FF)		/* RFR_MAIN 제외  */
 8005df0:	887b      	ldrh	r3, [r7, #2]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d071      	beq.n	8005edc <RKEY_Check+0x120>
	  {
		RFR_Key.rK_Data = R_KeyBuff;
 8005df8:	4a49      	ldr	r2, [pc, #292]	; (8005f20 <RKEY_Check+0x164>)
 8005dfa:	887b      	ldrh	r3, [r7, #2]
 8005dfc:	8013      	strh	r3, [r2, #0]
			
		if(RFR_Key.rK_Data == RFR_Key.rK_Back)
 8005dfe:	4b48      	ldr	r3, [pc, #288]	; (8005f20 <RKEY_Check+0x164>)
 8005e00:	881a      	ldrh	r2, [r3, #0]
 8005e02:	4b47      	ldr	r3, [pc, #284]	; (8005f20 <RKEY_Check+0x164>)
 8005e04:	889b      	ldrh	r3, [r3, #4]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d154      	bne.n	8005eb4 <RKEY_Check+0xf8>
		{
			if(RFR_Key.rK_ChatCnt == 0)
 8005e0a:	4b45      	ldr	r3, [pc, #276]	; (8005f20 <RKEY_Check+0x164>)
 8005e0c:	88db      	ldrh	r3, [r3, #6]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d17d      	bne.n	8005f0e <RKEY_Check+0x152>
			{
				/* uKeyStatusFlag fLK_Ok */
				uKeyStatusFlag |= fRK_Ok;
 8005e12:	4b44      	ldr	r3, [pc, #272]	; (8005f24 <RKEY_Check+0x168>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e1a:	4a42      	ldr	r2, [pc, #264]	; (8005f24 <RKEY_Check+0x168>)
 8005e1c:	6013      	str	r3, [r2, #0]
				uKeyStatusFlag &= ~fRK_Repeat;
 8005e1e:	4b41      	ldr	r3, [pc, #260]	; (8005f24 <RKEY_Check+0x168>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005e26:	4a3f      	ldr	r2, [pc, #252]	; (8005f24 <RKEY_Check+0x168>)
 8005e28:	6013      	str	r3, [r2, #0]
				if(RFR_Key.rK_Data == RFR_Key.rK_Last)
 8005e2a:	4b3d      	ldr	r3, [pc, #244]	; (8005f20 <RKEY_Check+0x164>)
 8005e2c:	881a      	ldrh	r2, [r3, #0]
 8005e2e:	4b3c      	ldr	r3, [pc, #240]	; (8005f20 <RKEY_Check+0x164>)
 8005e30:	885b      	ldrh	r3, [r3, #2]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d105      	bne.n	8005e42 <RKEY_Check+0x86>
					uKeyStatusFlag |= fRK_Repeat;
 8005e36:	4b3b      	ldr	r3, [pc, #236]	; (8005f24 <RKEY_Check+0x168>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e3e:	4a39      	ldr	r2, [pc, #228]	; (8005f24 <RKEY_Check+0x168>)
 8005e40:	6013      	str	r3, [r2, #0]
				//		
				RFR_Key.rK_Last = RFR_Key.rK_Data;
 8005e42:	4b37      	ldr	r3, [pc, #220]	; (8005f20 <RKEY_Check+0x164>)
 8005e44:	881a      	ldrh	r2, [r3, #0]
 8005e46:	4b36      	ldr	r3, [pc, #216]	; (8005f20 <RKEY_Check+0x164>)
 8005e48:	805a      	strh	r2, [r3, #2]
				RFR_Key.rK_Back = RFR_Key.rK_Data;
 8005e4a:	4b35      	ldr	r3, [pc, #212]	; (8005f20 <RKEY_Check+0x164>)
 8005e4c:	881a      	ldrh	r2, [r3, #0]
 8005e4e:	4b34      	ldr	r3, [pc, #208]	; (8005f20 <RKEY_Check+0x164>)
 8005e50:	809a      	strh	r2, [r3, #4]
				RFR_Key.rK_ChatCnt = 10;			/* 연속키 처리 타임  매 10ms 마다 */
 8005e52:	4b33      	ldr	r3, [pc, #204]	; (8005f20 <RKEY_Check+0x164>)
 8005e54:	220a      	movs	r2, #10
 8005e56:	80da      	strh	r2, [r3, #6]
				if(u16_DebugFlag == 1)
 8005e58:	4b33      	ldr	r3, [pc, #204]	; (8005f28 <RKEY_Check+0x16c>)
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d105      	bne.n	8005e6c <RKEY_Check+0xb0>
					cliPrintf(" R_KEY[%0x]\r\n",RFR_Key.rK_Back);
 8005e60:	4b2f      	ldr	r3, [pc, #188]	; (8005f20 <RKEY_Check+0x164>)
 8005e62:	889b      	ldrh	r3, [r3, #4]
 8005e64:	4619      	mov	r1, r3
 8005e66:	4831      	ldr	r0, [pc, #196]	; (8005f2c <RKEY_Check+0x170>)
 8005e68:	f7fd fef4 	bl	8003c54 <cliPrintf>
				if(((RFR_Key.rK_Last & RFR_PUMP) == RFR_PUMP) || ((RFR_Key.rK_Last & RFR_FANONUP) == RFR_FANONUP) || ((RFR_Key.rK_Last & RFR_ATDRV) == RFR_ATDRV) || ((RFR_Key.rK_Last & RFR_FANOFF) == RFR_FANOFF)) 
 8005e6c:	4b2c      	ldr	r3, [pc, #176]	; (8005f20 <RKEY_Check+0x164>)
 8005e6e:	885b      	ldrh	r3, [r3, #2]
 8005e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d111      	bne.n	8005e9c <RKEY_Check+0xe0>
 8005e78:	4b29      	ldr	r3, [pc, #164]	; (8005f20 <RKEY_Check+0x164>)
 8005e7a:	885b      	ldrh	r3, [r3, #2]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10b      	bne.n	8005e9c <RKEY_Check+0xe0>
 8005e84:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <RKEY_Check+0x164>)
 8005e86:	885b      	ldrh	r3, [r3, #2]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d105      	bne.n	8005e9c <RKEY_Check+0xe0>
 8005e90:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <RKEY_Check+0x164>)
 8005e92:	885b      	ldrh	r3, [r3, #2]
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <RKEY_Check+0xf2>
				{
					if((uKeyStatusFlag & fRK_Repeat) == 0)
 8005e9c:	4b21      	ldr	r3, [pc, #132]	; (8005f24 <RKEY_Check+0x168>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d132      	bne.n	8005f0e <RKEY_Check+0x152>
						Rkey_Action();
 8005ea8:	f7ff fd34 	bl	8005914 <Rkey_Action>
					if((uKeyStatusFlag & fRK_Repeat) == 0)
 8005eac:	e02f      	b.n	8005f0e <RKEY_Check+0x152>
					//
				}
				else
				{
					Rkey_Action();
 8005eae:	f7ff fd31 	bl	8005914 <Rkey_Action>
		RFR_Key.rK_Data = 0;
		RFR_Key.rK_Back = 0;
		RFR_Key.rK_Last = 0;
		RFR_Key.rK_ChatCnt = 100;
	  }
}
 8005eb2:	e02c      	b.n	8005f0e <RKEY_Check+0x152>
			RFR_Key.rK_Back = RFR_Key.rK_Data;
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <RKEY_Check+0x164>)
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	4b19      	ldr	r3, [pc, #100]	; (8005f20 <RKEY_Check+0x164>)
 8005eba:	809a      	strh	r2, [r3, #4]
			RFR_Key.rK_ChatCnt = 100;
 8005ebc:	4b18      	ldr	r3, [pc, #96]	; (8005f20 <RKEY_Check+0x164>)
 8005ebe:	2264      	movs	r2, #100	; 0x64
 8005ec0:	80da      	strh	r2, [r3, #6]
			uKeyStatusFlag &= ~fRK_Ok;
 8005ec2:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <RKEY_Check+0x168>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eca:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <RKEY_Check+0x168>)
 8005ecc:	6013      	str	r3, [r2, #0]
			uKeyStatusFlag &= ~fRK_Repeat;
 8005ece:	4b15      	ldr	r3, [pc, #84]	; (8005f24 <RKEY_Check+0x168>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ed6:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <RKEY_Check+0x168>)
 8005ed8:	6013      	str	r3, [r2, #0]
}
 8005eda:	e018      	b.n	8005f0e <RKEY_Check+0x152>
		uKeyStatusFlag &= ~fRK_Ok;
 8005edc:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <RKEY_Check+0x168>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ee4:	4a0f      	ldr	r2, [pc, #60]	; (8005f24 <RKEY_Check+0x168>)
 8005ee6:	6013      	str	r3, [r2, #0]
		uKeyStatusFlag &= ~fRK_Repeat;
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <RKEY_Check+0x168>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ef0:	4a0c      	ldr	r2, [pc, #48]	; (8005f24 <RKEY_Check+0x168>)
 8005ef2:	6013      	str	r3, [r2, #0]
		RFR_Key.rK_Data = 0;
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <RKEY_Check+0x164>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	801a      	strh	r2, [r3, #0]
		RFR_Key.rK_Back = 0;
 8005efa:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <RKEY_Check+0x164>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	809a      	strh	r2, [r3, #4]
		RFR_Key.rK_Last = 0;
 8005f00:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <RKEY_Check+0x164>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	805a      	strh	r2, [r3, #2]
		RFR_Key.rK_ChatCnt = 100;
 8005f06:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <RKEY_Check+0x164>)
 8005f08:	2264      	movs	r2, #100	; 0x64
 8005f0a:	80da      	strh	r2, [r3, #6]
}
 8005f0c:	e7ff      	b.n	8005f0e <RKEY_Check+0x152>
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40011000 	.word	0x40011000
 8005f1c:	40011400 	.word	0x40011400
 8005f20:	20000ce8 	.word	0x20000ce8
 8005f24:	20000cfc 	.word	0x20000cfc
 8005f28:	20000d08 	.word	0x20000d08
 8005f2c:	08012c58 	.word	0x08012c58

08005f30 <isAutoCondition>:
	..
	b[7]	: 주행 Line 감지 정보( 1 : 주행Line 감지)
	..
#endif
uint8_t isAutoCondition()
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  //if((uSysStatusFlag & f_AutoRun) && (uSysStatusFlag & f_smartConnected) && (uSysStatusFlag  & f_TraceLine) && (smt_Command & 0x0080))
  if(uSysStatusFlag & f_AutoRun)
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <isAutoCondition+0x20>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <isAutoCondition+0x14>
	return 1;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <isAutoCondition+0x16>
  else		
	return 0;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000cf8 	.word	0x20000cf8

08005f54 <SMART_check>:

void SMART_check()
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
  uint16_t S_Comm;
  
  if(isAutoCondition())
 8005f5a:	f7ff ffe9 	bl	8005f30 <isAutoCondition>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d010      	beq.n	8005f86 <SMART_check+0x32>
  {
	S_Comm = smt_Command & 0x000F;
 8005f64:	4b0a      	ldr	r3, [pc, #40]	; (8005f90 <SMART_check+0x3c>)
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	80fb      	strh	r3, [r7, #6]
	if(S_Comm != 0 && Comm_IdentChk(S_Comm) )	/* For/Back , Left/Right 동시 Comm. Check */
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <SMART_check+0x32>
 8005f74:	88fb      	ldrh	r3, [r7, #6]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fe71 	bl	8005c5e <Comm_IdentChk>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <SMART_check+0x32>
	{
		Comm_Action();
 8005f82:	f7ff fc87 	bl	8005894 <Comm_Action>
	}

  }

}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000d36 	.word	0x20000d36

08005f94 <LKAUTO_CHKSeq>:
//
#if 1
void LKAUTO_CHKSeq()
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  switch(LKAUTOSeq)
 8005f98:	4b72      	ldr	r3, [pc, #456]	; (8006164 <LKAUTO_CHKSeq+0x1d0>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	2b07      	cmp	r3, #7
 8005fa0:	f200 80ce 	bhi.w	8006140 <LKAUTO_CHKSeq+0x1ac>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <LKAUTO_CHKSeq+0x18>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fcd 	.word	0x08005fcd
 8005fb0:	08005ff1 	.word	0x08005ff1
 8005fb4:	0800605f 	.word	0x0800605f
 8005fb8:	080060d7 	.word	0x080060d7
 8005fbc:	080060f5 	.word	0x080060f5
 8005fc0:	08006113 	.word	0x08006113
 8005fc4:	08006131 	.word	0x08006131
 8005fc8:	08006141 	.word	0x08006141
  {
  	case 1:		/* 조건 Check 수위 有, 자율 Line 신호 有 */ 
		if((uSysStatusFlag & f_ALLWLEmpty) == 0)
 8005fcc:	4b66      	ldr	r3, [pc, #408]	; (8006168 <LKAUTO_CHKSeq+0x1d4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 80b5 	bne.w	8006144 <LKAUTO_CHKSeq+0x1b0>
		{	/* 수위 有 */
			if(uSysStatusFlag & f_TraceLine)
 8005fda:	4b63      	ldr	r3, [pc, #396]	; (8006168 <LKAUTO_CHKSeq+0x1d4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80ae 	beq.w	8006144 <LKAUTO_CHKSeq+0x1b0>
			{	/* 자율 Line 신호 有*/
				LKAUTOSeq = 2;
 8005fe8:	4b5e      	ldr	r3, [pc, #376]	; (8006164 <LKAUTO_CHKSeq+0x1d0>)
 8005fea:	2202      	movs	r2, #2
 8005fec:	701a      	strb	r2, [r3, #0]
				//printf("\n SEQ_2");
			}
		}
		break;
 8005fee:	e0a9      	b.n	8006144 <LKAUTO_CHKSeq+0x1b0>
		//
	case 2:
		if(uSysStatusFlag & f_LKATKInitStatus)
 8005ff0:	4b5d      	ldr	r3, [pc, #372]	; (8006168 <LKAUTO_CHKSeq+0x1d4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d018      	beq.n	800602e <LKAUTO_CHKSeq+0x9a>
		{ /* Init E_OPT_Autospeed Port High Status */
			if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 0)
 8005ffc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006000:	485a      	ldr	r0, [pc, #360]	; (800616c <LKAUTO_CHKSeq+0x1d8>)
 8006002:	f004 fec7 	bl	800ad94 <HAL_GPIO_ReadPin>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 809d 	bne.w	8006148 <LKAUTO_CHKSeq+0x1b4>
			{
				HAL_Delay(100);
 800600e:	2064      	movs	r0, #100	; 0x64
 8006010:	f002 fae2 	bl	80085d8 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 0)
 8006014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006018:	4854      	ldr	r0, [pc, #336]	; (800616c <LKAUTO_CHKSeq+0x1d8>)
 800601a:	f004 febb 	bl	800ad94 <HAL_GPIO_ReadPin>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	f040 8091 	bne.w	8006148 <LKAUTO_CHKSeq+0x1b4>
					LKAUTOSeq = 3;
 8006026:	4b4f      	ldr	r3, [pc, #316]	; (8006164 <LKAUTO_CHKSeq+0x1d0>)
 8006028:	2203      	movs	r2, #3
 800602a:	701a      	strb	r2, [r3, #0]
				//
				//printf("\n SEQ_3");
				//printf(" -- INIT_REVERSE[%0d]",LKAUTOSeq);
			}
		}
		break;
 800602c:	e08c      	b.n	8006148 <LKAUTO_CHKSeq+0x1b4>
			if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 800602e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006032:	484e      	ldr	r0, [pc, #312]	; (800616c <LKAUTO_CHKSeq+0x1d8>)
 8006034:	f004 feae 	bl	800ad94 <HAL_GPIO_ReadPin>
 8006038:	4603      	mov	r3, r0
 800603a:	2b01      	cmp	r3, #1
 800603c:	f040 8084 	bne.w	8006148 <LKAUTO_CHKSeq+0x1b4>
				HAL_Delay(100);
 8006040:	2064      	movs	r0, #100	; 0x64
 8006042:	f002 fac9 	bl	80085d8 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 8006046:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800604a:	4848      	ldr	r0, [pc, #288]	; (800616c <LKAUTO_CHKSeq+0x1d8>)
 800604c:	f004 fea2 	bl	800ad94 <HAL_GPIO_ReadPin>
 8006050:	4603      	mov	r3, r0
 8006052:	2b01      	cmp	r3, #1
 8006054:	d178      	bne.n	8006148 <LKAUTO_CHKSeq+0x1b4>
					LKAUTOSeq = 3;
 8006056:	4b43      	ldr	r3, [pc, #268]	; (8006164 <LKAUTO_CHKSeq+0x1d0>)
 8006058:	2203      	movs	r2, #3
 800605a:	701a      	strb	r2, [r3, #0]
		break;
 800605c:	e074      	b.n	8006148 <LKAUTO_CHKSeq+0x1b4>
		//
	case 3:
		if(uSysStatusFlag & f_LKATKInitStatus)
 800605e:	4b42      	ldr	r3, [pc, #264]	; (8006168 <LKAUTO_CHKSeq+0x1d4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01a      	beq.n	80060a0 <LKAUTO_CHKSeq+0x10c>
		{
			if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 800606a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800606e:	483f      	ldr	r0, [pc, #252]	; (800616c <LKAUTO_CHKSeq+0x1d8>)
 8006070:	f004 fe90 	bl	800ad94 <HAL_GPIO_ReadPin>
 8006074:	4603      	mov	r3, r0
 8006076:	2b01      	cmp	r3, #1
 8006078:	d168      	bne.n	800614c <LKAUTO_CHKSeq+0x1b8>
			{
				HAL_Delay(100);
 800607a:	2064      	movs	r0, #100	; 0x64
 800607c:	f002 faac 	bl	80085d8 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 8006080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006084:	4839      	ldr	r0, [pc, #228]	; (800616c <LKAUTO_CHKSeq+0x1d8>)
 8006086:	f004 fe85 	bl	800ad94 <HAL_GPIO_ReadPin>
 800608a:	4603      	mov	r3, r0
 800608c:	2b01      	cmp	r3, #1
 800608e:	d15d      	bne.n	800614c <LKAUTO_CHKSeq+0x1b8>
				{
					LKAUTOSeq = 4;		/* SEQ. Start */
 8006090:	4b34      	ldr	r3, [pc, #208]	; (8006164 <LKAUTO_CHKSeq+0x1d0>)
 8006092:	2204      	movs	r2, #4
 8006094:	701a      	strb	r2, [r3, #0]
					LKSeqDlyTime = 2000;
 8006096:	4b36      	ldr	r3, [pc, #216]	; (8006170 <LKAUTO_CHKSeq+0x1dc>)
 8006098:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800609c:	801a      	strh	r2, [r3, #0]
					//printf("\n SEQ_4");
					//printf(" -- INIT_ORIGIN[%0d]",LKAUTOSeq);
				}
			}
		}
		break;
 800609e:	e055      	b.n	800614c <LKAUTO_CHKSeq+0x1b8>
			if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 0)
 80060a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060a4:	4831      	ldr	r0, [pc, #196]	; (800616c <LKAUTO_CHKSeq+0x1d8>)
 80060a6:	f004 fe75 	bl	800ad94 <HAL_GPIO_ReadPin>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d14d      	bne.n	800614c <LKAUTO_CHKSeq+0x1b8>
				HAL_Delay(100);
 80060b0:	2064      	movs	r0, #100	; 0x64
 80060b2:	f002 fa91 	bl	80085d8 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 0)
 80060b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060ba:	482c      	ldr	r0, [pc, #176]	; (800616c <LKAUTO_CHKSeq+0x1d8>)
 80060bc:	f004 fe6a 	bl	800ad94 <HAL_GPIO_ReadPin>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d142      	bne.n	800614c <LKAUTO_CHKSeq+0x1b8>
					LKAUTOSeq = 4;		/* SEQ. Start */	
 80060c6:	4b27      	ldr	r3, [pc, #156]	; (8006164 <LKAUTO_CHKSeq+0x1d0>)
 80060c8:	2204      	movs	r2, #4
 80060ca:	701a      	strb	r2, [r3, #0]
					LKSeqDlyTime = 2000;
 80060cc:	4b28      	ldr	r3, [pc, #160]	; (8006170 <LKAUTO_CHKSeq+0x1dc>)
 80060ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80060d2:	801a      	strh	r2, [r3, #0]
		break;
 80060d4:	e03a      	b.n	800614c <LKAUTO_CHKSeq+0x1b8>
		//
	case 4:		/* Delay 2 Sec. */	
		if(LKSeqDlyTime == 0)
 80060d6:	4b26      	ldr	r3, [pc, #152]	; (8006170 <LKAUTO_CHKSeq+0x1dc>)
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d138      	bne.n	8006150 <LKAUTO_CHKSeq+0x1bc>
		{
			Drive_REQ(KEY_FANONUP);
 80060de:	2040      	movs	r0, #64	; 0x40
 80060e0:	f7ff f906 	bl	80052f0 <Drive_REQ>
			LKAUTOSeq = 5;
 80060e4:	4b1f      	ldr	r3, [pc, #124]	; (8006164 <LKAUTO_CHKSeq+0x1d0>)
 80060e6:	2205      	movs	r2, #5
 80060e8:	701a      	strb	r2, [r3, #0]
			LKSeqDlyTime = 3000;
 80060ea:	4b21      	ldr	r3, [pc, #132]	; (8006170 <LKAUTO_CHKSeq+0x1dc>)
 80060ec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80060f0:	801a      	strh	r2, [r3, #0]
			//printf("\n SEQ_FAN ONUP[%0d]",LKAUTOSeq);
		}
		break;
 80060f2:	e02d      	b.n	8006150 <LKAUTO_CHKSeq+0x1bc>
		//
	case 5:
		if(LKSeqDlyTime == 0)
 80060f4:	4b1e      	ldr	r3, [pc, #120]	; (8006170 <LKAUTO_CHKSeq+0x1dc>)
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d12b      	bne.n	8006154 <LKAUTO_CHKSeq+0x1c0>
		{
			Drive_REQ(KEY_PUMP);
 80060fc:	2010      	movs	r0, #16
 80060fe:	f7ff f8f7 	bl	80052f0 <Drive_REQ>
			LKAUTOSeq = 6;
 8006102:	4b18      	ldr	r3, [pc, #96]	; (8006164 <LKAUTO_CHKSeq+0x1d0>)
 8006104:	2206      	movs	r2, #6
 8006106:	701a      	strb	r2, [r3, #0]
			LKSeqDlyTime = 3000;
 8006108:	4b19      	ldr	r3, [pc, #100]	; (8006170 <LKAUTO_CHKSeq+0x1dc>)
 800610a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800610e:	801a      	strh	r2, [r3, #0]
			//printf("\n SEQ_PUMP[%0d]",LKAUTOSeq);
		}
		break;
 8006110:	e020      	b.n	8006154 <LKAUTO_CHKSeq+0x1c0>
		//
	case 6:
		if(LKSeqDlyTime == 0)
 8006112:	4b17      	ldr	r3, [pc, #92]	; (8006170 <LKAUTO_CHKSeq+0x1dc>)
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d11e      	bne.n	8006158 <LKAUTO_CHKSeq+0x1c4>
		{
			Drive_REQ(KEY_AUTORUN);
 800611a:	2020      	movs	r0, #32
 800611c:	f7ff f8e8 	bl	80052f0 <Drive_REQ>
			LKAUTOSeq = 7;
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <LKAUTO_CHKSeq+0x1d0>)
 8006122:	2207      	movs	r2, #7
 8006124:	701a      	strb	r2, [r3, #0]
			LKSeqDlyTime = 3000;
 8006126:	4b12      	ldr	r3, [pc, #72]	; (8006170 <LKAUTO_CHKSeq+0x1dc>)
 8006128:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800612c:	801a      	strh	r2, [r3, #0]
			//printf("\n SEQ_AUTORUN[%0d]",LKAUTOSeq);
		}
		break;
 800612e:	e013      	b.n	8006158 <LKAUTO_CHKSeq+0x1c4>
		//
	case 7:
		if(LKSeqDlyTime == 0)
 8006130:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <LKAUTO_CHKSeq+0x1dc>)
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d111      	bne.n	800615c <LKAUTO_CHKSeq+0x1c8>
		{
			LKAUTOSeq = 8;
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <LKAUTO_CHKSeq+0x1d0>)
 800613a:	2208      	movs	r2, #8
 800613c:	701a      	strb	r2, [r3, #0]
			//printf("\n SEQ_END AUTO RUN[%0d]",LKAUTOSeq);
		}
		break;
 800613e:	e00d      	b.n	800615c <LKAUTO_CHKSeq+0x1c8>
		//
	case 8:
		break;
		//
	default:
		break;
 8006140:	bf00      	nop
 8006142:	e00c      	b.n	800615e <LKAUTO_CHKSeq+0x1ca>
		break;
 8006144:	bf00      	nop
 8006146:	e00a      	b.n	800615e <LKAUTO_CHKSeq+0x1ca>
		break;
 8006148:	bf00      	nop
 800614a:	e008      	b.n	800615e <LKAUTO_CHKSeq+0x1ca>
		break;
 800614c:	bf00      	nop
 800614e:	e006      	b.n	800615e <LKAUTO_CHKSeq+0x1ca>
		break;
 8006150:	bf00      	nop
 8006152:	e004      	b.n	800615e <LKAUTO_CHKSeq+0x1ca>
		break;
 8006154:	bf00      	nop
 8006156:	e002      	b.n	800615e <LKAUTO_CHKSeq+0x1ca>
		break;
 8006158:	bf00      	nop
 800615a:	e000      	b.n	800615e <LKAUTO_CHKSeq+0x1ca>
		break;
 800615c:	bf00      	nop
  }
}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000d59 	.word	0x20000d59
 8006168:	20000cf8 	.word	0x20000cf8
 800616c:	40011800 	.word	0x40011800
 8006170:	20000d5a 	.word	0x20000d5a

08006174 <RFR_MainCheck>:
#endif
//
void RFR_MainCheck()
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
#if 1
  if(uSysStatusFlag & f_AutoRun)
 8006178:	4b54      	ldr	r3, [pc, #336]	; (80062cc <RFR_MainCheck+0x158>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00c      	beq.n	800619e <RFR_MainCheck+0x2a>
  {	/* 자율 주행시 MN check 안함 */
	uKeyStatusFlag |= frk_Emergency;
 8006184:	4b52      	ldr	r3, [pc, #328]	; (80062d0 <RFR_MainCheck+0x15c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f043 0310 	orr.w	r3, r3, #16
 800618c:	4a50      	ldr	r2, [pc, #320]	; (80062d0 <RFR_MainCheck+0x15c>)
 800618e:	6013      	str	r3, [r2, #0]
	uSysStatusFlag &= ~f_RFR_Emergency;
 8006190:	4b4e      	ldr	r3, [pc, #312]	; (80062cc <RFR_MainCheck+0x158>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006198:	4a4c      	ldr	r2, [pc, #304]	; (80062cc <RFR_MainCheck+0x158>)
 800619a:	6013      	str	r3, [r2, #0]
			uKeyStatusFlag &= ~fRK_Ok;
			uKeyStatusFlag &= ~fRK_Repeat;
		}
  	}
  }
}
 800619c:	e094      	b.n	80062c8 <RFR_MainCheck+0x154>
	if(HAL_GPIO_ReadPin(GPIOD,IR_Main) == 1)
 800619e:	2110      	movs	r1, #16
 80061a0:	484c      	ldr	r0, [pc, #304]	; (80062d4 <RFR_MainCheck+0x160>)
 80061a2:	f004 fdf7 	bl	800ad94 <HAL_GPIO_ReadPin>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d120      	bne.n	80061ee <RFR_MainCheck+0x7a>
		u16_RFMNChkCnt = 2000;	  /* 200ms */
 80061ac:	4b4a      	ldr	r3, [pc, #296]	; (80062d8 <RFR_MainCheck+0x164>)
 80061ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80061b2:	801a      	strh	r2, [r3, #0]
	 	uKeyStatusFlag |= frk_Emergency;
 80061b4:	4b46      	ldr	r3, [pc, #280]	; (80062d0 <RFR_MainCheck+0x15c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f043 0310 	orr.w	r3, r3, #16
 80061bc:	4a44      	ldr	r2, [pc, #272]	; (80062d0 <RFR_MainCheck+0x15c>)
 80061be:	6013      	str	r3, [r2, #0]
		uSysStatusFlag &= ~f_RFR_Emergency;
 80061c0:	4b42      	ldr	r3, [pc, #264]	; (80062cc <RFR_MainCheck+0x158>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c8:	4a40      	ldr	r2, [pc, #256]	; (80062cc <RFR_MainCheck+0x158>)
 80061ca:	6013      	str	r3, [r2, #0]
		if(LKAUTOSeq >= 4)
 80061cc:	4b43      	ldr	r3, [pc, #268]	; (80062dc <RFR_MainCheck+0x168>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d908      	bls.n	80061e6 <RFR_MainCheck+0x72>
			all_MotorStop();
 80061d4:	f000 fdb0 	bl	8006d38 <all_MotorStop>
			if(u16_DebugFlag == 1)
 80061d8:	4b41      	ldr	r3, [pc, #260]	; (80062e0 <RFR_MainCheck+0x16c>)
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d102      	bne.n	80061e6 <RFR_MainCheck+0x72>
				cliPrintf("\n LK_AUTO_SEQ STOP.");
 80061e0:	4840      	ldr	r0, [pc, #256]	; (80062e4 <RFR_MainCheck+0x170>)
 80061e2:	f7fd fd37 	bl	8003c54 <cliPrintf>
		LKAUTOSeq = 0; // 경운수정 24/2/1
 80061e6:	4b3d      	ldr	r3, [pc, #244]	; (80062dc <RFR_MainCheck+0x168>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
}
 80061ec:	e06c      	b.n	80062c8 <RFR_MainCheck+0x154>
		if(u16_RFMNChkCnt == 0)
 80061ee:	4b3a      	ldr	r3, [pc, #232]	; (80062d8 <RFR_MainCheck+0x164>)
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d168      	bne.n	80062c8 <RFR_MainCheck+0x154>
			if((uSysStatusFlag & f_RFR_Emergency) == 0)
 80061f6:	4b35      	ldr	r3, [pc, #212]	; (80062cc <RFR_MainCheck+0x158>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d150      	bne.n	80062a4 <RFR_MainCheck+0x130>
				uKeyStatusFlag &= ~frk_Emergency;
 8006202:	4b33      	ldr	r3, [pc, #204]	; (80062d0 <RFR_MainCheck+0x15c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f023 0310 	bic.w	r3, r3, #16
 800620a:	4a31      	ldr	r2, [pc, #196]	; (80062d0 <RFR_MainCheck+0x15c>)
 800620c:	6013      	str	r3, [r2, #0]
				uSysStatusFlag |= f_RFR_Emergency;
 800620e:	4b2f      	ldr	r3, [pc, #188]	; (80062cc <RFR_MainCheck+0x158>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006216:	4a2d      	ldr	r2, [pc, #180]	; (80062cc <RFR_MainCheck+0x158>)
 8006218:	6013      	str	r3, [r2, #0]
				if(LKAUTOSeq == 0)
 800621a:	4b30      	ldr	r3, [pc, #192]	; (80062dc <RFR_MainCheck+0x168>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d140      	bne.n	80062a4 <RFR_MainCheck+0x130>
					all_MotorStop();
 8006222:	f000 fd89 	bl	8006d38 <all_MotorStop>
					if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 8006226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800622a:	482f      	ldr	r0, [pc, #188]	; (80062e8 <RFR_MainCheck+0x174>)
 800622c:	f004 fdb2 	bl	800ad94 <HAL_GPIO_ReadPin>
 8006230:	4603      	mov	r3, r0
 8006232:	2b01      	cmp	r3, #1
 8006234:	d11b      	bne.n	800626e <RFR_MainCheck+0xfa>
						HAL_Delay(100);
 8006236:	2064      	movs	r0, #100	; 0x64
 8006238:	f002 f9ce 	bl	80085d8 <HAL_Delay>
						if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 800623c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006240:	4829      	ldr	r0, [pc, #164]	; (80062e8 <RFR_MainCheck+0x174>)
 8006242:	f004 fda7 	bl	800ad94 <HAL_GPIO_ReadPin>
 8006246:	4603      	mov	r3, r0
 8006248:	2b01      	cmp	r3, #1
 800624a:	d12b      	bne.n	80062a4 <RFR_MainCheck+0x130>
							uSysStatusFlag |= f_LKATKInitStatus;
 800624c:	4b1f      	ldr	r3, [pc, #124]	; (80062cc <RFR_MainCheck+0x158>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006254:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <RFR_MainCheck+0x158>)
 8006256:	6013      	str	r3, [r2, #0]
							LKAUTOSeq = 1;
 8006258:	4b20      	ldr	r3, [pc, #128]	; (80062dc <RFR_MainCheck+0x168>)
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
							if(u16_DebugFlag == 1)
 800625e:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <RFR_MainCheck+0x16c>)
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d11e      	bne.n	80062a4 <RFR_MainCheck+0x130>
								cliPrintf("\n SEQ_1");
 8006266:	4821      	ldr	r0, [pc, #132]	; (80062ec <RFR_MainCheck+0x178>)
 8006268:	f7fd fcf4 	bl	8003c54 <cliPrintf>
 800626c:	e01a      	b.n	80062a4 <RFR_MainCheck+0x130>
						HAL_Delay(100);
 800626e:	2064      	movs	r0, #100	; 0x64
 8006270:	f002 f9b2 	bl	80085d8 <HAL_Delay>
						if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 0)
 8006274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006278:	481b      	ldr	r0, [pc, #108]	; (80062e8 <RFR_MainCheck+0x174>)
 800627a:	f004 fd8b 	bl	800ad94 <HAL_GPIO_ReadPin>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10f      	bne.n	80062a4 <RFR_MainCheck+0x130>
							uSysStatusFlag &= ~f_LKATKInitStatus;
 8006284:	4b11      	ldr	r3, [pc, #68]	; (80062cc <RFR_MainCheck+0x158>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800628c:	4a0f      	ldr	r2, [pc, #60]	; (80062cc <RFR_MainCheck+0x158>)
 800628e:	6013      	str	r3, [r2, #0]
							LKAUTOSeq = 1;
 8006290:	4b12      	ldr	r3, [pc, #72]	; (80062dc <RFR_MainCheck+0x168>)
 8006292:	2201      	movs	r2, #1
 8006294:	701a      	strb	r2, [r3, #0]
							if(u16_DebugFlag == 1)
 8006296:	4b12      	ldr	r3, [pc, #72]	; (80062e0 <RFR_MainCheck+0x16c>)
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d102      	bne.n	80062a4 <RFR_MainCheck+0x130>
								cliPrintf("\n SEQ_1");
 800629e:	4813      	ldr	r0, [pc, #76]	; (80062ec <RFR_MainCheck+0x178>)
 80062a0:	f7fd fcd8 	bl	8003c54 <cliPrintf>
			uKeyStatusFlag	&= ~frk_AutoDrv;
 80062a4:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <RFR_MainCheck+0x15c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062ac:	4a08      	ldr	r2, [pc, #32]	; (80062d0 <RFR_MainCheck+0x15c>)
 80062ae:	6013      	str	r3, [r2, #0]
			uKeyStatusFlag &= ~fRK_Ok;
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <RFR_MainCheck+0x15c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062b8:	4a05      	ldr	r2, [pc, #20]	; (80062d0 <RFR_MainCheck+0x15c>)
 80062ba:	6013      	str	r3, [r2, #0]
			uKeyStatusFlag &= ~fRK_Repeat;
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <RFR_MainCheck+0x15c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80062c4:	4a02      	ldr	r2, [pc, #8]	; (80062d0 <RFR_MainCheck+0x15c>)
 80062c6:	6013      	str	r3, [r2, #0]
}
 80062c8:	bf00      	nop
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000cf8 	.word	0x20000cf8
 80062d0:	20000cfc 	.word	0x20000cfc
 80062d4:	40011400 	.word	0x40011400
 80062d8:	20000d3c 	.word	0x20000d3c
 80062dc:	20000d59 	.word	0x20000d59
 80062e0:	20000d08 	.word	0x20000d08
 80062e4:	08012c68 	.word	0x08012c68
 80062e8:	40011800 	.word	0x40011800
 80062ec:	08012c7c 	.word	0x08012c7c

080062f0 <User_Interface>:

//
void User_Interface()
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  Port_ReadACT();
 80062f4:	f001 fb30 	bl	8007958 <Port_ReadACT>
  //
  LKEY_Check();		/* Low BAT. 상태에서도 Local Key 는 동작 한다. */
 80062f8:	f7ff fcd4 	bl	8005ca4 <LKEY_Check>
  #if 0
  RFR_MainCheck();
  RKEY_Check();
  #endif 
  
  if((uSysStatusFlag & f_LowBat) == 0)
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <User_Interface+0x54>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d11a      	bne.n	800633e <User_Interface+0x4e>
  {
	if((uKeyStatusFlag & fLK_Ok) == 0)	/* Local Key 가 릴리지 되고 */
 8006308:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <User_Interface+0x58>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d114      	bne.n	800633e <User_Interface+0x4e>
	{
		if(RK_PermitTime == 0)			/* 3초 이후부터 RFR을 입력 받는다.*/ 
 8006314:	4b0d      	ldr	r3, [pc, #52]	; (800634c <User_Interface+0x5c>)
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d110      	bne.n	800633e <User_Interface+0x4e>
		{
			#if 1 
			RFR_MainCheck();
 800631c:	f7ff ff2a 	bl	8006174 <RFR_MainCheck>
			if((uSysStatusFlag & f_RFR_Emergency) == 0)
 8006320:	4b08      	ldr	r3, [pc, #32]	; (8006344 <User_Interface+0x54>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <User_Interface+0x46>
			{
				RKEY_Check();
 800632c:	f7ff fd46 	bl	8005dbc <RKEY_Check>
				SMART_check();
 8006330:	f7ff fe10 	bl	8005f54 <SMART_check>
			}
			#endif 
		}
	}
  }
}
 8006334:	e003      	b.n	800633e <User_Interface+0x4e>
				LKAUTO_CHKSeq();
 8006336:	f7ff fe2d 	bl	8005f94 <LKAUTO_CHKSeq>
				SMART_check();
 800633a:	f7ff fe0b 	bl	8005f54 <SMART_check>
}
 800633e:	bf00      	nop
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000cf8 	.word	0x20000cf8
 8006348:	20000cfc 	.word	0x20000cfc
 800634c:	20000d30 	.word	0x20000d30

08006350 <is_DriveKey>:
// KEY_FORWARD 	PE3
// KEY_REVERSE		PE4
// RFR_FORWARD		PC12
// RFR_BACKWORD	PD0
uint8_t is_DriveKey()
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  if(((Local_Key.lK_Last & KEY_FORWARD) == KEY_FORWARD) || ((Local_Key.lK_Last & KEY_BACKWORD) == KEY_BACKWORD))
 8006354:	4b1b      	ldr	r3, [pc, #108]	; (80063c4 <is_DriveKey+0x74>)
 8006356:	885b      	ldrh	r3, [r3, #2]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d105      	bne.n	800636c <is_DriveKey+0x1c>
 8006360:	4b18      	ldr	r3, [pc, #96]	; (80063c4 <is_DriveKey+0x74>)
 8006362:	885b      	ldrh	r3, [r3, #2]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <is_DriveKey+0x20>
	return 1;
 800636c:	2301      	movs	r3, #1
 800636e:	e024      	b.n	80063ba <is_DriveKey+0x6a>
  else
  {
    if(((RFR_Key.rK_Last & RFR_FORWARD) == RFR_FORWARD) || ((RFR_Key.rK_Last & RFR_BACKWORD) == RFR_BACKWORD))
 8006370:	4b15      	ldr	r3, [pc, #84]	; (80063c8 <is_DriveKey+0x78>)
 8006372:	885b      	ldrh	r3, [r3, #2]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d105      	bne.n	8006388 <is_DriveKey+0x38>
 800637c:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <is_DriveKey+0x78>)
 800637e:	885b      	ldrh	r3, [r3, #2]
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <is_DriveKey+0x3c>
      return 1;
 8006388:	2301      	movs	r3, #1
 800638a:	e016      	b.n	80063ba <is_DriveKey+0x6a>
    else
    {
      if(uSysStatusFlag & f_AutoRun)
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <is_DriveKey+0x7c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00f      	beq.n	80063b8 <is_DriveKey+0x68>
      {
        if(((smt_Command & KEY_FORWARD)  == KEY_FORWARD) || ((smt_Command & KEY_BACKWORD)  == KEY_BACKWORD))
 8006398:	4b0d      	ldr	r3, [pc, #52]	; (80063d0 <is_DriveKey+0x80>)
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <is_DriveKey+0x60>
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <is_DriveKey+0x80>)
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <is_DriveKey+0x64>
          return 1;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e002      	b.n	80063ba <is_DriveKey+0x6a>
        else
          return 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e000      	b.n	80063ba <is_DriveKey+0x6a>
      }
      else
        return 0;
 80063b8:	2300      	movs	r3, #0
    }
  }
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	bc80      	pop	{r7}
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000cdc 	.word	0x20000cdc
 80063c8:	20000ce8 	.word	0x20000ce8
 80063cc:	20000cf8 	.word	0x20000cf8
 80063d0:	20000d36 	.word	0x20000d36

080063d4 <DM_Stop>:
//
void DM_Stop()
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  if(DMotorSeq != DMOTOR_STOP)
 80063d8:	4b08      	ldr	r3, [pc, #32]	; (80063fc <DM_Stop+0x28>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <DM_Stop+0x1e>
  {
    DMotorSeq = DMOTOR_STOP;
 80063e0:	4b06      	ldr	r3, [pc, #24]	; (80063fc <DM_Stop+0x28>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]
    DMotorTKPWM = 0;
 80063e6:	4b06      	ldr	r3, [pc, #24]	; (8006400 <DM_Stop+0x2c>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	701a      	strb	r2, [r3, #0]
    DMotorWaitime = 10;
 80063ec:	4b05      	ldr	r3, [pc, #20]	; (8006404 <DM_Stop+0x30>)
 80063ee:	220a      	movs	r2, #10
 80063f0:	801a      	strh	r2, [r3, #0]
  }
}
 80063f2:	bf00      	nop
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000d1c 	.word	0x20000d1c
 8006400:	20000d28 	.word	0x20000d28
 8006404:	20000d20 	.word	0x20000d20

08006408 <DRV_Control>:

void DRV_Control()
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_DMotorACT) && (is_DriveKey() == 0))
 800640c:	4b99      	ldr	r3, [pc, #612]	; (8006674 <DRV_Control+0x26c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d006      	beq.n	8006426 <DRV_Control+0x1e>
 8006418:	f7ff ff9a 	bl	8006350 <is_DriveKey>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <DRV_Control+0x1e>
  {
  	DM_Stop();
 8006422:	f7ff ffd7 	bl	80063d4 <DM_Stop>
  }
  switch(DMotorSeq)
 8006426:	4b94      	ldr	r3, [pc, #592]	; (8006678 <DRV_Control+0x270>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b04      	cmp	r3, #4
 800642c:	f200 815f 	bhi.w	80066ee <DRV_Control+0x2e6>
 8006430:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <DRV_Control+0x30>)
 8006432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006436:	bf00      	nop
 8006438:	08006641 	.word	0x08006641
 800643c:	0800644d 	.word	0x0800644d
 8006440:	0800648b 	.word	0x0800648b
 8006444:	080064bb 	.word	0x080064bb
 8006448:	080065db 	.word	0x080065db
  {
	case DMOTOR_START:
		if(DMotorWaitime == 0)
 800644c:	4b8b      	ldr	r3, [pc, #556]	; (800667c <DRV_Control+0x274>)
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f040 814e 	bne.w	80066f2 <DRV_Control+0x2ea>
		{
			if(uSysStatusFlag & f_DMForward)
 8006456:	4b87      	ldr	r3, [pc, #540]	; (8006674 <DRV_Control+0x26c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d006      	beq.n	8006470 <DRV_Control+0x68>
      {
        HAL_GPIO_WritePin(GPIOE, E_drvM_CWCCW, GPIO_PIN_SET);
 8006462:	2201      	movs	r2, #1
 8006464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006468:	4885      	ldr	r0, [pc, #532]	; (8006680 <DRV_Control+0x278>)
 800646a:	f004 fcaa 	bl	800adc2 <HAL_GPIO_WritePin>
 800646e:	e005      	b.n	800647c <DRV_Control+0x74>
      }
			else
      {
        HAL_GPIO_WritePin(GPIOE, E_drvM_CWCCW, GPIO_PIN_RESET);
 8006470:	2200      	movs	r2, #0
 8006472:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006476:	4882      	ldr	r0, [pc, #520]	; (8006680 <DRV_Control+0x278>)
 8006478:	f004 fca3 	bl	800adc2 <HAL_GPIO_WritePin>
      }
			DMotorWaitime = 2;
 800647c:	4b7f      	ldr	r3, [pc, #508]	; (800667c <DRV_Control+0x274>)
 800647e:	2202      	movs	r2, #2
 8006480:	801a      	strh	r2, [r3, #0]
			DMotorSeq = DMOTOR_BRKOFF;
 8006482:	4b7d      	ldr	r3, [pc, #500]	; (8006678 <DRV_Control+0x270>)
 8006484:	2202      	movs	r2, #2
 8006486:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006488:	e133      	b.n	80066f2 <DRV_Control+0x2ea>
		//
	case DMOTOR_BRKOFF:		/* Brake Switch ON=+24V,OFF=OPEN */
		if(DMotorWaitime == 0)
 800648a:	4b7c      	ldr	r3, [pc, #496]	; (800667c <DRV_Control+0x274>)
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 8131 	bne.w	80066f6 <DRV_Control+0x2ee>
		{
      HAL_GPIO_WritePin(GPIOE, E_drvM_BREAK, GPIO_PIN_RESET);
 8006494:	2200      	movs	r2, #0
 8006496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800649a:	4879      	ldr	r0, [pc, #484]	; (8006680 <DRV_Control+0x278>)
 800649c:	f004 fc91 	bl	800adc2 <HAL_GPIO_WritePin>
			uSysStatusFlag &= ~f_DMBreak;
 80064a0:	4b74      	ldr	r3, [pc, #464]	; (8006674 <DRV_Control+0x26c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	4a72      	ldr	r2, [pc, #456]	; (8006674 <DRV_Control+0x26c>)
 80064aa:	6013      	str	r3, [r2, #0]
			DMotorWaitime = 2;
 80064ac:	4b73      	ldr	r3, [pc, #460]	; (800667c <DRV_Control+0x274>)
 80064ae:	2202      	movs	r2, #2
 80064b0:	801a      	strh	r2, [r3, #0]
			DMotorSeq = DMOTOR_ACCEL;
 80064b2:	4b71      	ldr	r3, [pc, #452]	; (8006678 <DRV_Control+0x270>)
 80064b4:	2203      	movs	r2, #3
 80064b6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80064b8:	e11d      	b.n	80066f6 <DRV_Control+0x2ee>
		
	case DMOTOR_ACCEL:
		if(DMotorWaitime == 0)
 80064ba:	4b70      	ldr	r3, [pc, #448]	; (800667c <DRV_Control+0x274>)
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f040 811b 	bne.w	80066fa <DRV_Control+0x2f2>
		{
			DMotorTKPWM = DRV_ADC[DRV_SPDTBNo][DRV_Speed]+load_value.IDLE_SPD;
 80064c4:	4b6f      	ldr	r3, [pc, #444]	; (8006684 <DRV_Control+0x27c>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	4619      	mov	r1, r3
 80064ca:	4b6f      	ldr	r3, [pc, #444]	; (8006688 <DRV_Control+0x280>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	4a6e      	ldr	r2, [pc, #440]	; (800668c <DRV_Control+0x284>)
 80064d2:	460b      	mov	r3, r1
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	440b      	add	r3, r1
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	4413      	add	r3, r2
 80064dc:	4403      	add	r3, r0
 80064de:	781a      	ldrb	r2, [r3, #0]
 80064e0:	4b6b      	ldr	r3, [pc, #428]	; (8006690 <DRV_Control+0x288>)
 80064e2:	791b      	ldrb	r3, [r3, #4]
 80064e4:	4413      	add	r3, r2
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	4b6a      	ldr	r3, [pc, #424]	; (8006694 <DRV_Control+0x28c>)
 80064ea:	701a      	strb	r2, [r3, #0]
			//
			if((uSysStatusFlag & f_LimitCenter) == 0)
 80064ec:	4b61      	ldr	r3, [pc, #388]	; (8006674 <DRV_Control+0x26c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d117      	bne.n	8006528 <DRV_Control+0x120>
			{
				if(DRV_Speed >= 4)
 80064f8:	4b63      	ldr	r3, [pc, #396]	; (8006688 <DRV_Control+0x280>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d913      	bls.n	8006528 <DRV_Control+0x120>
					DMotorTKPWM = DRV_ADC[DRV_SPDTBNo][DRV_Speed-1]+load_value.IDLE_SPD;			// 센터가 아닐때 속도 낮추는부분		
 8006500:	4b60      	ldr	r3, [pc, #384]	; (8006684 <DRV_Control+0x27c>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	4618      	mov	r0, r3
 8006506:	4b60      	ldr	r3, [pc, #384]	; (8006688 <DRV_Control+0x280>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	1e5a      	subs	r2, r3, #1
 800650c:	495f      	ldr	r1, [pc, #380]	; (800668c <DRV_Control+0x284>)
 800650e:	4603      	mov	r3, r0
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	4403      	add	r3, r0
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	440b      	add	r3, r1
 8006518:	4413      	add	r3, r2
 800651a:	781a      	ldrb	r2, [r3, #0]
 800651c:	4b5c      	ldr	r3, [pc, #368]	; (8006690 <DRV_Control+0x288>)
 800651e:	791b      	ldrb	r3, [r3, #4]
 8006520:	4413      	add	r3, r2
 8006522:	b2da      	uxtb	r2, r3
 8006524:	4b5b      	ldr	r3, [pc, #364]	; (8006694 <DRV_Control+0x28c>)
 8006526:	701a      	strb	r2, [r3, #0]
			}
			if((uSysStatusFlag & f_DMForward) == 0)		/* Backward */
 8006528:	4b52      	ldr	r3, [pc, #328]	; (8006674 <DRV_Control+0x26c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d11a      	bne.n	800656a <DRV_Control+0x162>
			{
				if(DRV_Speed >= 3)						/* 3,4,5, 단 스피드는 3단으로한다 */
 8006534:	4b54      	ldr	r3, [pc, #336]	; (8006688 <DRV_Control+0x280>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d902      	bls.n	8006542 <DRV_Control+0x13a>
					DRV_Speed = 3;
 800653c:	4b52      	ldr	r3, [pc, #328]	; (8006688 <DRV_Control+0x280>)
 800653e:	2203      	movs	r2, #3
 8006540:	701a      	strb	r2, [r3, #0]
				DMotorTKPWM = DRV_ADC[DRV_SPDTBNo][DRV_Speed]+load_value.IDLE_SPD; 
 8006542:	4b50      	ldr	r3, [pc, #320]	; (8006684 <DRV_Control+0x27c>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	4619      	mov	r1, r3
 8006548:	4b4f      	ldr	r3, [pc, #316]	; (8006688 <DRV_Control+0x280>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	4a4f      	ldr	r2, [pc, #316]	; (800668c <DRV_Control+0x284>)
 8006550:	460b      	mov	r3, r1
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	440b      	add	r3, r1
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4413      	add	r3, r2
 800655a:	4403      	add	r3, r0
 800655c:	781a      	ldrb	r2, [r3, #0]
 800655e:	4b4c      	ldr	r3, [pc, #304]	; (8006690 <DRV_Control+0x288>)
 8006560:	791b      	ldrb	r3, [r3, #4]
 8006562:	4413      	add	r3, r2
 8006564:	b2da      	uxtb	r2, r3
 8006566:	4b4b      	ldr	r3, [pc, #300]	; (8006694 <DRV_Control+0x28c>)
 8006568:	701a      	strb	r2, [r3, #0]
			}
#if _SMT_DMSpeed			
			if(isAutoCondition())
 800656a:	f7ff fce1 	bl	8005f30 <isAutoCondition>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d022      	beq.n	80065ba <DRV_Control+0x1b2>
			{
        if ( smt_DRVSpeed == 3) //3일때 고속
 8006574:	4b48      	ldr	r3, [pc, #288]	; (8006698 <DRV_Control+0x290>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b03      	cmp	r3, #3
 800657a:	d10f      	bne.n	800659c <DRV_Control+0x194>
        {
          if ( DRV_SPDTBNo == 1) // DMCS type
 800657c:	4b41      	ldr	r3, [pc, #260]	; (8006684 <DRV_Control+0x27c>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d106      	bne.n	8006592 <DRV_Control+0x18a>
          {
            DMotorTKPWM = load_value.ATD_HIGH_SPD+12;
 8006584:	4b42      	ldr	r3, [pc, #264]	; (8006690 <DRV_Control+0x288>)
 8006586:	799b      	ldrb	r3, [r3, #6]
 8006588:	330c      	adds	r3, #12
 800658a:	b2da      	uxtb	r2, r3
 800658c:	4b41      	ldr	r3, [pc, #260]	; (8006694 <DRV_Control+0x28c>)
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	e013      	b.n	80065ba <DRV_Control+0x1b2>
          }
          else  // Curtis type
          {
            DMotorTKPWM = load_value.ATD_HIGH_SPD;
 8006592:	4b3f      	ldr	r3, [pc, #252]	; (8006690 <DRV_Control+0x288>)
 8006594:	799a      	ldrb	r2, [r3, #6]
 8006596:	4b3f      	ldr	r3, [pc, #252]	; (8006694 <DRV_Control+0x28c>)
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e00e      	b.n	80065ba <DRV_Control+0x1b2>
          }
        }
        else // 2일때 저속  
        {
          if ( DRV_SPDTBNo == 1) // DMCS type
 800659c:	4b39      	ldr	r3, [pc, #228]	; (8006684 <DRV_Control+0x27c>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d106      	bne.n	80065b2 <DRV_Control+0x1aa>
          {
            DMotorTKPWM = load_value.ATD_LOW_SPD+12;
 80065a4:	4b3a      	ldr	r3, [pc, #232]	; (8006690 <DRV_Control+0x288>)
 80065a6:	795b      	ldrb	r3, [r3, #5]
 80065a8:	330c      	adds	r3, #12
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	4b39      	ldr	r3, [pc, #228]	; (8006694 <DRV_Control+0x28c>)
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	e003      	b.n	80065ba <DRV_Control+0x1b2>
          }
          else  // Curtis type
          {
            DMotorTKPWM = load_value.ATD_LOW_SPD;
 80065b2:	4b37      	ldr	r3, [pc, #220]	; (8006690 <DRV_Control+0x288>)
 80065b4:	795a      	ldrb	r2, [r3, #5]
 80065b6:	4b37      	ldr	r3, [pc, #220]	; (8006694 <DRV_Control+0x28c>)
 80065b8:	701a      	strb	r2, [r3, #0]
          
        }
				 
			}
      #endif
			if(uKeyStatusFlag & fLK_Ok)	/* 달려있는 키로 구동할 경우 */
 80065ba:	4b38      	ldr	r3, [pc, #224]	; (800669c <DRV_Control+0x294>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <DRV_Control+0x1c4>
			{
				DMotorTKPWM = 105;	
 80065c6:	4b33      	ldr	r3, [pc, #204]	; (8006694 <DRV_Control+0x28c>)
 80065c8:	2269      	movs	r2, #105	; 0x69
 80065ca:	701a      	strb	r2, [r3, #0]
			}
			DMotorWaitime = 2;
 80065cc:	4b2b      	ldr	r3, [pc, #172]	; (800667c <DRV_Control+0x274>)
 80065ce:	2202      	movs	r2, #2
 80065d0:	801a      	strh	r2, [r3, #0]
			DMotorSeq = DMOTOR_ACCELACT;
 80065d2:	4b29      	ldr	r3, [pc, #164]	; (8006678 <DRV_Control+0x270>)
 80065d4:	2204      	movs	r2, #4
 80065d6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80065d8:	e08f      	b.n	80066fa <DRV_Control+0x2f2>
		//
	case DMOTOR_ACCELACT:
		if(DMotorWaitime == 0)
 80065da:	4b28      	ldr	r3, [pc, #160]	; (800667c <DRV_Control+0x274>)
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 808d 	bne.w	80066fe <DRV_Control+0x2f6>
		{
			if(DMotorTKPWM == DRV_PWMDuty)
 80065e4:	4b2b      	ldr	r3, [pc, #172]	; (8006694 <DRV_Control+0x28c>)
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	4b2d      	ldr	r3, [pc, #180]	; (80066a0 <DRV_Control+0x298>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d103      	bne.n	80065f8 <DRV_Control+0x1f0>
			{
				DMotorSeq = DMOTOR_ACCEL;		/* RFR �� ���? �ӵ� ���� ó���� �ؾ� �ȴ�. */
 80065f0:	4b21      	ldr	r3, [pc, #132]	; (8006678 <DRV_Control+0x270>)
 80065f2:	2203      	movs	r2, #3
 80065f4:	701a      	strb	r2, [r3, #0]
 80065f6:	e018      	b.n	800662a <DRV_Control+0x222>
			}
			else if(DMotorTKPWM > DRV_PWMDuty)
 80065f8:	4b26      	ldr	r3, [pc, #152]	; (8006694 <DRV_Control+0x28c>)
 80065fa:	781a      	ldrb	r2, [r3, #0]
 80065fc:	4b28      	ldr	r3, [pc, #160]	; (80066a0 <DRV_Control+0x298>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d906      	bls.n	8006612 <DRV_Control+0x20a>
			{
				++DRV_PWMDuty;
 8006604:	4b26      	ldr	r3, [pc, #152]	; (80066a0 <DRV_Control+0x298>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	b2da      	uxtb	r2, r3
 800660c:	4b24      	ldr	r3, [pc, #144]	; (80066a0 <DRV_Control+0x298>)
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	e00b      	b.n	800662a <DRV_Control+0x222>

			}
			else if(DMotorTKPWM < DRV_PWMDuty)
 8006612:	4b20      	ldr	r3, [pc, #128]	; (8006694 <DRV_Control+0x28c>)
 8006614:	781a      	ldrb	r2, [r3, #0]
 8006616:	4b22      	ldr	r3, [pc, #136]	; (80066a0 <DRV_Control+0x298>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d205      	bcs.n	800662a <DRV_Control+0x222>
			{
				--DRV_PWMDuty;
 800661e:	4b20      	ldr	r3, [pc, #128]	; (80066a0 <DRV_Control+0x298>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	3b01      	subs	r3, #1
 8006624:	b2da      	uxtb	r2, r3
 8006626:	4b1e      	ldr	r3, [pc, #120]	; (80066a0 <DRV_Control+0x298>)
 8006628:	701a      	strb	r2, [r3, #0]
			}

			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DRV_PWMDuty);
 800662a:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <DRV_Control+0x298>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2208      	movs	r2, #8
 8006630:	2100      	movs	r1, #0
 8006632:	481c      	ldr	r0, [pc, #112]	; (80066a4 <DRV_Control+0x29c>)
 8006634:	f003 fbd1 	bl	8009dda <HAL_DAC_SetValue>
      DMotorWaitime = 3;
 8006638:	4b10      	ldr	r3, [pc, #64]	; (800667c <DRV_Control+0x274>)
 800663a:	2203      	movs	r2, #3
 800663c:	801a      	strh	r2, [r3, #0]
		}
		break;
 800663e:	e05e      	b.n	80066fe <DRV_Control+0x2f6>
		//
	case DMOTOR_STOP:		/* Stop Seq.*/
		if(DMotorWaitime == 0)
 8006640:	4b0e      	ldr	r3, [pc, #56]	; (800667c <DRV_Control+0x274>)
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d15c      	bne.n	8006702 <DRV_Control+0x2fa>
		{
			if(DRV_PWMDuty > 0)
 8006648:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <DRV_Control+0x298>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02b      	beq.n	80066a8 <DRV_Control+0x2a0>
			{
				--DRV_PWMDuty;
 8006650:	4b13      	ldr	r3, [pc, #76]	; (80066a0 <DRV_Control+0x298>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	3b01      	subs	r3, #1
 8006656:	b2da      	uxtb	r2, r3
 8006658:	4b11      	ldr	r3, [pc, #68]	; (80066a0 <DRV_Control+0x298>)
 800665a:	701a      	strb	r2, [r3, #0]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DRV_PWMDuty);
 800665c:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <DRV_Control+0x298>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2208      	movs	r2, #8
 8006662:	2100      	movs	r1, #0
 8006664:	480f      	ldr	r0, [pc, #60]	; (80066a4 <DRV_Control+0x29c>)
 8006666:	f003 fbb8 	bl	8009dda <HAL_DAC_SetValue>
				DMotorWaitime = 10;
 800666a:	4b04      	ldr	r3, [pc, #16]	; (800667c <DRV_Control+0x274>)
 800666c:	220a      	movs	r2, #10
 800666e:	801a      	strh	r2, [r3, #0]
				uSysStatusFlag |= f_DMBreak;
				uSysStatusFlag &= ~f_DMotorACT;
				DMotorSeq = DMOTOR_END;
			}
		}
		break;
 8006670:	e047      	b.n	8006702 <DRV_Control+0x2fa>
 8006672:	bf00      	nop
 8006674:	20000cf8 	.word	0x20000cf8
 8006678:	20000d1c 	.word	0x20000d1c
 800667c:	20000d20 	.word	0x20000d20
 8006680:	40011800 	.word	0x40011800
 8006684:	20000d5d 	.word	0x20000d5d
 8006688:	20000038 	.word	0x20000038
 800668c:	08012ea4 	.word	0x08012ea4
 8006690:	20000ddc 	.word	0x20000ddc
 8006694:	20000d28 	.word	0x20000d28
 8006698:	20000039 	.word	0x20000039
 800669c:	20000cfc 	.word	0x20000cfc
 80066a0:	20000d2b 	.word	0x20000d2b
 80066a4:	200002dc 	.word	0x200002dc
				DRV_PWMDuty = 0;
 80066a8:	4b17      	ldr	r3, [pc, #92]	; (8006708 <DRV_Control+0x300>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	701a      	strb	r2, [r3, #0]
				DMotorTKPWM = 0;
 80066ae:	4b17      	ldr	r3, [pc, #92]	; (800670c <DRV_Control+0x304>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	701a      	strb	r2, [r3, #0]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DRV_PWMDuty);
 80066b4:	4b14      	ldr	r3, [pc, #80]	; (8006708 <DRV_Control+0x300>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2208      	movs	r2, #8
 80066ba:	2100      	movs	r1, #0
 80066bc:	4814      	ldr	r0, [pc, #80]	; (8006710 <DRV_Control+0x308>)
 80066be:	f003 fb8c 	bl	8009dda <HAL_DAC_SetValue>
        HAL_GPIO_WritePin(GPIOE, E_drvM_BREAK, GPIO_PIN_SET);
 80066c2:	2201      	movs	r2, #1
 80066c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066c8:	4812      	ldr	r0, [pc, #72]	; (8006714 <DRV_Control+0x30c>)
 80066ca:	f004 fb7a 	bl	800adc2 <HAL_GPIO_WritePin>
				uSysStatusFlag |= f_DMBreak;
 80066ce:	4b12      	ldr	r3, [pc, #72]	; (8006718 <DRV_Control+0x310>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f043 0304 	orr.w	r3, r3, #4
 80066d6:	4a10      	ldr	r2, [pc, #64]	; (8006718 <DRV_Control+0x310>)
 80066d8:	6013      	str	r3, [r2, #0]
				uSysStatusFlag &= ~f_DMotorACT;
 80066da:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <DRV_Control+0x310>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f023 0301 	bic.w	r3, r3, #1
 80066e2:	4a0d      	ldr	r2, [pc, #52]	; (8006718 <DRV_Control+0x310>)
 80066e4:	6013      	str	r3, [r2, #0]
				DMotorSeq = DMOTOR_END;
 80066e6:	4b0d      	ldr	r3, [pc, #52]	; (800671c <DRV_Control+0x314>)
 80066e8:	2205      	movs	r2, #5
 80066ea:	701a      	strb	r2, [r3, #0]
		break;
 80066ec:	e009      	b.n	8006702 <DRV_Control+0x2fa>
		//
	case DMOTOR_END:		
	default:		
		
		break;
 80066ee:	bf00      	nop
 80066f0:	e008      	b.n	8006704 <DRV_Control+0x2fc>
		break;
 80066f2:	bf00      	nop
 80066f4:	e006      	b.n	8006704 <DRV_Control+0x2fc>
		break;
 80066f6:	bf00      	nop
 80066f8:	e004      	b.n	8006704 <DRV_Control+0x2fc>
		break;
 80066fa:	bf00      	nop
 80066fc:	e002      	b.n	8006704 <DRV_Control+0x2fc>
		break;
 80066fe:	bf00      	nop
 8006700:	e000      	b.n	8006704 <DRV_Control+0x2fc>
		break;
 8006702:	bf00      	nop
  }
}
 8006704:	bf00      	nop
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20000d2b 	.word	0x20000d2b
 800670c:	20000d28 	.word	0x20000d28
 8006710:	200002dc 	.word	0x200002dc
 8006714:	40011800 	.word	0x40011800
 8006718:	20000cf8 	.word	0x20000cf8
 800671c:	20000d1c 	.word	0x20000d1c

08006720 <is_StrringKey>:
//
uint8_t is_StrringKey()
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  if(((Local_Key.lK_Last & KEY_LEFT) == KEY_LEFT) || ((Local_Key.lK_Last & KEY_RIGHT) == KEY_RIGHT))
 8006724:	4b1b      	ldr	r3, [pc, #108]	; (8006794 <is_StrringKey+0x74>)
 8006726:	885b      	ldrh	r3, [r3, #2]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <is_StrringKey+0x1c>
 8006730:	4b18      	ldr	r3, [pc, #96]	; (8006794 <is_StrringKey+0x74>)
 8006732:	885b      	ldrh	r3, [r3, #2]
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <is_StrringKey+0x20>
	return 1;
 800673c:	2301      	movs	r3, #1
 800673e:	e024      	b.n	800678a <is_StrringKey+0x6a>
  else
  {
    if(((RFR_Key.rK_Last & RFR_LEFT) == RFR_LEFT) || ((RFR_Key.rK_Last & RFR_RIGHT) == RFR_RIGHT))
 8006740:	4b15      	ldr	r3, [pc, #84]	; (8006798 <is_StrringKey+0x78>)
 8006742:	885b      	ldrh	r3, [r3, #2]
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d105      	bne.n	8006758 <is_StrringKey+0x38>
 800674c:	4b12      	ldr	r3, [pc, #72]	; (8006798 <is_StrringKey+0x78>)
 800674e:	885b      	ldrh	r3, [r3, #2]
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <is_StrringKey+0x3c>
      return 1;
 8006758:	2301      	movs	r3, #1
 800675a:	e016      	b.n	800678a <is_StrringKey+0x6a>
    else
    {
      if(uSysStatusFlag & f_AutoRun)
 800675c:	4b0f      	ldr	r3, [pc, #60]	; (800679c <is_StrringKey+0x7c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00f      	beq.n	8006788 <is_StrringKey+0x68>
      {
        if(((smt_Command & KEY_LEFT)  == KEY_LEFT) || ((smt_Command & KEY_RIGHT)  == KEY_RIGHT))
 8006768:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <is_StrringKey+0x80>)
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d105      	bne.n	8006780 <is_StrringKey+0x60>
 8006774:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <is_StrringKey+0x80>)
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	f003 0308 	and.w	r3, r3, #8
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <is_StrringKey+0x64>
          return 1;
 8006780:	2301      	movs	r3, #1
 8006782:	e002      	b.n	800678a <is_StrringKey+0x6a>
        else
          return 0;
 8006784:	2300      	movs	r3, #0
 8006786:	e000      	b.n	800678a <is_StrringKey+0x6a>
      }
      else
        return 0;
 8006788:	2300      	movs	r3, #0
    }
  }
}
 800678a:	4618      	mov	r0, r3
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000cdc 	.word	0x20000cdc
 8006798:	20000ce8 	.word	0x20000ce8
 800679c:	20000cf8 	.word	0x20000cf8
 80067a0:	20000d36 	.word	0x20000d36

080067a4 <SM_Stop>:
//
void SM_Stop()
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  if(SMotorSeq != SMOTOR_STOP)
 80067a8:	4b08      	ldr	r3, [pc, #32]	; (80067cc <SM_Stop+0x28>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <SM_Stop+0x1e>
  {
    SMotorSeq = SMOTOR_STOP;
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <SM_Stop+0x28>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
    SMotorTKPWM = 0;
 80067b6:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <SM_Stop+0x2c>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	701a      	strb	r2, [r3, #0]
    SMotorWaitime = 10;
 80067bc:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <SM_Stop+0x30>)
 80067be:	220a      	movs	r2, #10
 80067c0:	801a      	strh	r2, [r3, #0]
  }
}
 80067c2:	bf00      	nop
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc80      	pop	{r7}
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	20000d1d 	.word	0x20000d1d
 80067d0:	20000d29 	.word	0x20000d29
 80067d4:	20000d22 	.word	0x20000d22

080067d8 <STR_Control>:
#define YES_PUMP 1
// SMotorSeq
void STR_Control()
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_SMotorACT) && (is_StrringKey() == 0))
 80067dc:	4b4f      	ldr	r3, [pc, #316]	; (800691c <STR_Control+0x144>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d006      	beq.n	80067f6 <STR_Control+0x1e>
 80067e8:	f7ff ff9a 	bl	8006720 <is_StrringKey>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <STR_Control+0x1e>
  {
	  SM_Stop();  
 80067f2:	f7ff ffd7 	bl	80067a4 <SM_Stop>
  }
  
  switch(SMotorSeq)
 80067f6:	4b4a      	ldr	r3, [pc, #296]	; (8006920 <STR_Control+0x148>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	f200 8082 	bhi.w	8006904 <STR_Control+0x12c>
 8006800:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <STR_Control+0x30>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	080068cf 	.word	0x080068cf
 800680c:	0800681d 	.word	0x0800681d
 8006810:	08006905 	.word	0x08006905
 8006814:	08006875 	.word	0x08006875
 8006818:	080068a9 	.word	0x080068a9
  {
    case SMOTOR_START:
    {
      Port_ReadACT();
 800681c:	f001 f89c 	bl	8007958 <Port_ReadACT>
      if(SMotorWaitime == 0)
 8006820:	4b40      	ldr	r3, [pc, #256]	; (8006924 <STR_Control+0x14c>)
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d16f      	bne.n	8006908 <STR_Control+0x130>
      {
        if(uSysStatusFlag & f_SMLeft)
 8006828:	4b3c      	ldr	r3, [pc, #240]	; (800691c <STR_Control+0x144>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00c      	beq.n	800684e <STR_Control+0x76>
        {
          HAL_GPIO_WritePin(GPIOE, E_strM_CWCCW, GPIO_PIN_SET);
 8006834:	2201      	movs	r2, #1
 8006836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800683a:	483b      	ldr	r0, [pc, #236]	; (8006928 <STR_Control+0x150>)
 800683c:	f004 fac1 	bl	800adc2 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOE, E_strM_BREAK, GPIO_PIN_SET);
 8006840:	2201      	movs	r2, #1
 8006842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006846:	4838      	ldr	r0, [pc, #224]	; (8006928 <STR_Control+0x150>)
 8006848:	f004 fabb 	bl	800adc2 <HAL_GPIO_WritePin>
 800684c:	e00b      	b.n	8006866 <STR_Control+0x8e>
        }
        else
        {
          HAL_GPIO_WritePin(GPIOE, E_strM_CWCCW, GPIO_PIN_RESET);
 800684e:	2200      	movs	r2, #0
 8006850:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006854:	4834      	ldr	r0, [pc, #208]	; (8006928 <STR_Control+0x150>)
 8006856:	f004 fab4 	bl	800adc2 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOE, E_strM_BREAK, GPIO_PIN_RESET);
 800685a:	2200      	movs	r2, #0
 800685c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006860:	4831      	ldr	r0, [pc, #196]	; (8006928 <STR_Control+0x150>)
 8006862:	f004 faae 	bl	800adc2 <HAL_GPIO_WritePin>
        }
        SMotorWaitime = 0;
 8006866:	4b2f      	ldr	r3, [pc, #188]	; (8006924 <STR_Control+0x14c>)
 8006868:	2200      	movs	r2, #0
 800686a:	801a      	strh	r2, [r3, #0]
        SMotorSeq = SMOTOR_ACCEL;
 800686c:	4b2c      	ldr	r3, [pc, #176]	; (8006920 <STR_Control+0x148>)
 800686e:	2203      	movs	r2, #3
 8006870:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8006872:	e049      	b.n	8006908 <STR_Control+0x130>
    case SMOTOR_ACCEL:
    {
      if(SMotorWaitime == 0)
 8006874:	4b2b      	ldr	r3, [pc, #172]	; (8006924 <STR_Control+0x14c>)
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d147      	bne.n	800690c <STR_Control+0x134>
      {
        if(isAutoCondition())
 800687c:	f7ff fb58 	bl	8005f30 <isAutoCondition>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <STR_Control+0xb6>
          SMotorTKPWM = STR_ADC[2];
 8006886:	22fa      	movs	r2, #250	; 0xfa
 8006888:	4b28      	ldr	r3, [pc, #160]	; (800692c <STR_Control+0x154>)
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	e002      	b.n	8006894 <STR_Control+0xbc>
        else
          SMotorTKPWM = 200;
 800688e:	4b27      	ldr	r3, [pc, #156]	; (800692c <STR_Control+0x154>)
 8006890:	22c8      	movs	r2, #200	; 0xc8
 8006892:	701a      	strb	r2, [r3, #0]
          
        SMotorWaitime = 0;
 8006894:	4b23      	ldr	r3, [pc, #140]	; (8006924 <STR_Control+0x14c>)
 8006896:	2200      	movs	r2, #0
 8006898:	801a      	strh	r2, [r3, #0]
        SMotorSeq++;
 800689a:	4b21      	ldr	r3, [pc, #132]	; (8006920 <STR_Control+0x148>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	3301      	adds	r3, #1
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	4b1f      	ldr	r3, [pc, #124]	; (8006920 <STR_Control+0x148>)
 80068a4:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 80068a6:	e031      	b.n	800690c <STR_Control+0x134>
      //
    case SMOTOR_ACCELACT:
    {
      if(SMotorWaitime == 0)
 80068a8:	4b1e      	ldr	r3, [pc, #120]	; (8006924 <STR_Control+0x14c>)
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d12f      	bne.n	8006910 <STR_Control+0x138>
      {
        STR_PWMDuty = SMotorTKPWM;			
 80068b0:	4b1e      	ldr	r3, [pc, #120]	; (800692c <STR_Control+0x154>)
 80068b2:	781a      	ldrb	r2, [r3, #0]
 80068b4:	4b1e      	ldr	r3, [pc, #120]	; (8006930 <STR_Control+0x158>)
 80068b6:	701a      	strb	r2, [r3, #0]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, STR_PWMDuty);
 80068b8:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <STR_Control+0x158>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2208      	movs	r2, #8
 80068be:	2110      	movs	r1, #16
 80068c0:	481c      	ldr	r0, [pc, #112]	; (8006934 <STR_Control+0x15c>)
 80068c2:	f003 fa8a 	bl	8009dda <HAL_DAC_SetValue>
        SMotorSeq = SMOTOR_END;
 80068c6:	4b16      	ldr	r3, [pc, #88]	; (8006920 <STR_Control+0x148>)
 80068c8:	2205      	movs	r2, #5
 80068ca:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 80068cc:	e020      	b.n	8006910 <STR_Control+0x138>
    case SMOTOR_STOP:		/* Stop Seq.*/
    {
      if(SMotorWaitime == 0)
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <STR_Control+0x14c>)
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d11e      	bne.n	8006914 <STR_Control+0x13c>
      {
        SMotorTKPWM = 0;
 80068d6:	4b15      	ldr	r3, [pc, #84]	; (800692c <STR_Control+0x154>)
 80068d8:	2200      	movs	r2, #0
 80068da:	701a      	strb	r2, [r3, #0]
        STR_PWMDuty = 0;
 80068dc:	4b14      	ldr	r3, [pc, #80]	; (8006930 <STR_Control+0x158>)
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, STR_PWMDuty);
 80068e2:	4b13      	ldr	r3, [pc, #76]	; (8006930 <STR_Control+0x158>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2208      	movs	r2, #8
 80068e8:	2110      	movs	r1, #16
 80068ea:	4812      	ldr	r0, [pc, #72]	; (8006934 <STR_Control+0x15c>)
 80068ec:	f003 fa75 	bl	8009dda <HAL_DAC_SetValue>
        uSysStatusFlag &= ~f_SMotorACT;
 80068f0:	4b0a      	ldr	r3, [pc, #40]	; (800691c <STR_Control+0x144>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f023 0308 	bic.w	r3, r3, #8
 80068f8:	4a08      	ldr	r2, [pc, #32]	; (800691c <STR_Control+0x144>)
 80068fa:	6013      	str	r3, [r2, #0]
        SMotorSeq = SMOTOR_END;
 80068fc:	4b08      	ldr	r3, [pc, #32]	; (8006920 <STR_Control+0x148>)
 80068fe:	2205      	movs	r2, #5
 8006900:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8006902:	e007      	b.n	8006914 <STR_Control+0x13c>
      //
    case SMOTOR_END:		
    default:		
      break;
 8006904:	bf00      	nop
 8006906:	e006      	b.n	8006916 <STR_Control+0x13e>
    break;
 8006908:	bf00      	nop
 800690a:	e004      	b.n	8006916 <STR_Control+0x13e>
    break;
 800690c:	bf00      	nop
 800690e:	e002      	b.n	8006916 <STR_Control+0x13e>
    break;
 8006910:	bf00      	nop
 8006912:	e000      	b.n	8006916 <STR_Control+0x13e>
    break;
 8006914:	bf00      	nop
  }
}
 8006916:	bf00      	nop
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000cf8 	.word	0x20000cf8
 8006920:	20000d1d 	.word	0x20000d1d
 8006924:	20000d22 	.word	0x20000d22
 8006928:	40011800 	.word	0x40011800
 800692c:	20000d29 	.word	0x20000d29
 8006930:	20000d2c 	.word	0x20000d2c
 8006934:	200002dc 	.word	0x200002dc

08006938 <PUMP_Control>:
//
//
//#define YES_PUMP 0
void PUMP_Control()
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  if(PumpWaittime == 0)
 800693c:	4b98      	ldr	r3, [pc, #608]	; (8006ba0 <PUMP_Control+0x268>)
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	f040 8127 	bne.w	8006b94 <PUMP_Control+0x25c>
  {
    switch(PumpSeq)
 8006946:	4b97      	ldr	r3, [pc, #604]	; (8006ba4 <PUMP_Control+0x26c>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	3b01      	subs	r3, #1
 800694c:	2b0f      	cmp	r3, #15
 800694e:	f200 8123 	bhi.w	8006b98 <PUMP_Control+0x260>
 8006952:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <PUMP_Control+0x20>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	08006999 	.word	0x08006999
 800695c:	080069d7 	.word	0x080069d7
 8006960:	08006a17 	.word	0x08006a17
 8006964:	08006a31 	.word	0x08006a31
 8006968:	08006a4b 	.word	0x08006a4b
 800696c:	08006a65 	.word	0x08006a65
 8006970:	08006a7f 	.word	0x08006a7f
 8006974:	08006a99 	.word	0x08006a99
 8006978:	08006acd 	.word	0x08006acd
 800697c:	08006ae7 	.word	0x08006ae7
 8006980:	08006b01 	.word	0x08006b01
 8006984:	08006b1b 	.word	0x08006b1b
 8006988:	08006b35 	.word	0x08006b35
 800698c:	08006b4f 	.word	0x08006b4f
 8006990:	08006b99 	.word	0x08006b99
 8006994:	080069bd 	.word	0x080069bd
    {
      
      case PUMP_START:
      {
        if( load_value.Spray_type == 1)
 8006998:	4b83      	ldr	r3, [pc, #524]	; (8006ba8 <PUMP_Control+0x270>)
 800699a:	79db      	ldrb	r3, [r3, #7]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d109      	bne.n	80069b4 <PUMP_Control+0x7c>
        {
          HAL_GPIO_WritePin(GPIOB, B_PMPDN, GPIO_PIN_SET);
 80069a0:	2201      	movs	r2, #1
 80069a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069a6:	4881      	ldr	r0, [pc, #516]	; (8006bac <PUMP_Control+0x274>)
 80069a8:	f004 fa0b 	bl	800adc2 <HAL_GPIO_WritePin>
          PumpWaittime = 2000;			
 80069ac:	4b7c      	ldr	r3, [pc, #496]	; (8006ba0 <PUMP_Control+0x268>)
 80069ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80069b2:	801a      	strh	r2, [r3, #0]
        }
        PumpSeq = PUMP_SOL_ON;
 80069b4:	4b7b      	ldr	r3, [pc, #492]	; (8006ba4 <PUMP_Control+0x26c>)
 80069b6:	2210      	movs	r2, #16
 80069b8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80069ba:	e0ee      	b.n	8006b9a <PUMP_Control+0x262>
      case PUMP_SOL_ON:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPON, GPIO_PIN_SET);
 80069bc:	2201      	movs	r2, #1
 80069be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069c2:	487a      	ldr	r0, [pc, #488]	; (8006bac <PUMP_Control+0x274>)
 80069c4:	f004 f9fd 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;			
 80069c8:	4b75      	ldr	r3, [pc, #468]	; (8006ba0 <PUMP_Control+0x268>)
 80069ca:	22c8      	movs	r2, #200	; 0xc8
 80069cc:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_SRTH;
 80069ce:	4b75      	ldr	r3, [pc, #468]	; (8006ba4 <PUMP_Control+0x26c>)
 80069d0:	2202      	movs	r2, #2
 80069d2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80069d4:	e0e1      	b.n	8006b9a <PUMP_Control+0x262>

      case PUMP_SRTH:
      {
        #ifdef YES_PUMP 
        HAL_GPIO_WritePin(GPIOB, B_PMPON, GPIO_PIN_RESET);
 80069d6:	2200      	movs	r2, #0
 80069d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069dc:	4873      	ldr	r0, [pc, #460]	; (8006bac <PUMP_Control+0x274>)
 80069de:	f004 f9f0 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif 
        #if _PUMP_P			
        cliPrintf(" ON_H"); 
        #endif			
        PumpWaittime = 200;
 80069e2:	4b6f      	ldr	r3, [pc, #444]	; (8006ba0 <PUMP_Control+0x268>)
 80069e4:	22c8      	movs	r2, #200	; 0xc8
 80069e6:	801a      	strh	r2, [r3, #0]
        if(uSysStatusFlag & f_Pump1st)
 80069e8:	4b71      	ldr	r3, [pc, #452]	; (8006bb0 <PUMP_Control+0x278>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d009      	beq.n	8006a08 <PUMP_Control+0xd0>
        {
          uSysStatusFlag &= ~f_Pump1st;			
 80069f4:	4b6e      	ldr	r3, [pc, #440]	; (8006bb0 <PUMP_Control+0x278>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80069fc:	4a6c      	ldr	r2, [pc, #432]	; (8006bb0 <PUMP_Control+0x278>)
 80069fe:	6013      	str	r3, [r2, #0]
          PumpSeq = PUMP_UP1L;
 8006a00:	4b68      	ldr	r3, [pc, #416]	; (8006ba4 <PUMP_Control+0x26c>)
 8006a02:	2203      	movs	r2, #3
 8006a04:	701a      	strb	r2, [r3, #0]
        {
          PumpWaittime = 10;
          PumpSeq = PUMP_Stay;
        }
      }
      break;
 8006a06:	e0c8      	b.n	8006b9a <PUMP_Control+0x262>
          PumpWaittime = 10;
 8006a08:	4b65      	ldr	r3, [pc, #404]	; (8006ba0 <PUMP_Control+0x268>)
 8006a0a:	220a      	movs	r2, #10
 8006a0c:	801a      	strh	r2, [r3, #0]
          PumpSeq = PUMP_Stay;
 8006a0e:	4b65      	ldr	r3, [pc, #404]	; (8006ba4 <PUMP_Control+0x26c>)
 8006a10:	220f      	movs	r2, #15
 8006a12:	701a      	strb	r2, [r3, #0]
      break;
 8006a14:	e0c1      	b.n	8006b9a <PUMP_Control+0x262>
    
      case PUMP_UP1L:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_SET);
 8006a16:	2201      	movs	r2, #1
 8006a18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a1c:	4863      	ldr	r0, [pc, #396]	; (8006bac <PUMP_Control+0x274>)
 8006a1e:	f004 f9d0 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 8006a22:	4b5f      	ldr	r3, [pc, #380]	; (8006ba0 <PUMP_Control+0x268>)
 8006a24:	2250      	movs	r2, #80	; 0x50
 8006a26:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP1H;
 8006a28:	4b5e      	ldr	r3, [pc, #376]	; (8006ba4 <PUMP_Control+0x26c>)
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UL1"); 
        #endif			
      } 		
      break;
 8006a2e:	e0b4      	b.n	8006b9a <PUMP_Control+0x262>

      case PUMP_UP1H:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8006a30:	2200      	movs	r2, #0
 8006a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a36:	485d      	ldr	r0, [pc, #372]	; (8006bac <PUMP_Control+0x274>)
 8006a38:	f004 f9c3 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;
 8006a3c:	4b58      	ldr	r3, [pc, #352]	; (8006ba0 <PUMP_Control+0x268>)
 8006a3e:	22c8      	movs	r2, #200	; 0xc8
 8006a40:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP2L;
 8006a42:	4b58      	ldr	r3, [pc, #352]	; (8006ba4 <PUMP_Control+0x26c>)
 8006a44:	2205      	movs	r2, #5
 8006a46:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UH1"); 
        #endif
      } 		
      break;
 8006a48:	e0a7      	b.n	8006b9a <PUMP_Control+0x262>

      case PUMP_UP2L: 		
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_SET);
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a50:	4856      	ldr	r0, [pc, #344]	; (8006bac <PUMP_Control+0x274>)
 8006a52:	f004 f9b6 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 8006a56:	4b52      	ldr	r3, [pc, #328]	; (8006ba0 <PUMP_Control+0x268>)
 8006a58:	2250      	movs	r2, #80	; 0x50
 8006a5a:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP2H;
 8006a5c:	4b51      	ldr	r3, [pc, #324]	; (8006ba4 <PUMP_Control+0x26c>)
 8006a5e:	2206      	movs	r2, #6
 8006a60:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UL2"); 
        #endif
      }
      break;
 8006a62:	e09a      	b.n	8006b9a <PUMP_Control+0x262>

      case PUMP_UP2H: 		
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8006a64:	2200      	movs	r2, #0
 8006a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a6a:	4850      	ldr	r0, [pc, #320]	; (8006bac <PUMP_Control+0x274>)
 8006a6c:	f004 f9a9 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;
 8006a70:	4b4b      	ldr	r3, [pc, #300]	; (8006ba0 <PUMP_Control+0x268>)
 8006a72:	22c8      	movs	r2, #200	; 0xc8
 8006a74:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP3L;
 8006a76:	4b4b      	ldr	r3, [pc, #300]	; (8006ba4 <PUMP_Control+0x26c>)
 8006a78:	2207      	movs	r2, #7
 8006a7a:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UH2"); 
        #endif
      }
      break;
 8006a7c:	e08d      	b.n	8006b9a <PUMP_Control+0x262>

      case PUMP_UP3L:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_SET);
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a84:	4849      	ldr	r0, [pc, #292]	; (8006bac <PUMP_Control+0x274>)
 8006a86:	f004 f99c 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 8006a8a:	4b45      	ldr	r3, [pc, #276]	; (8006ba0 <PUMP_Control+0x268>)
 8006a8c:	2250      	movs	r2, #80	; 0x50
 8006a8e:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP3H;
 8006a90:	4b44      	ldr	r3, [pc, #272]	; (8006ba4 <PUMP_Control+0x26c>)
 8006a92:	2208      	movs	r2, #8
 8006a94:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UL3"); 
        #endif
      } 		
              
        break;
 8006a96:	e080      	b.n	8006b9a <PUMP_Control+0x262>
        //
      case PUMP_UP3H:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a9e:	4843      	ldr	r0, [pc, #268]	; (8006bac <PUMP_Control+0x274>)
 8006aa0:	f004 f98f 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;
 8006aa4:	4b3e      	ldr	r3, [pc, #248]	; (8006ba0 <PUMP_Control+0x268>)
 8006aa6:	22c8      	movs	r2, #200	; 0xc8
 8006aa8:	801a      	strh	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UH3"); 
        #endif	
        if(uSysStatusFlag & f_OPT_Pumpspeed)
 8006aaa:	4b41      	ldr	r3, [pc, #260]	; (8006bb0 <PUMP_Control+0x278>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <PUMP_Control+0x186>
        {
          PumpSeq = PUMP_UP4L;				/* High �л緮 5�� */
 8006ab6:	4b3b      	ldr	r3, [pc, #236]	; (8006ba4 <PUMP_Control+0x26c>)
 8006ab8:	2209      	movs	r2, #9
 8006aba:	701a      	strb	r2, [r3, #0]
          PumpSeq = PUMP_Stay;
          cliPrintf(" - PUP END_3 Level"); 
        }
        #endif 
      } 		
      break;
 8006abc:	e06d      	b.n	8006b9a <PUMP_Control+0x262>
          PumpSeq = PUMP_Stay;
 8006abe:	4b39      	ldr	r3, [pc, #228]	; (8006ba4 <PUMP_Control+0x26c>)
 8006ac0:	220f      	movs	r2, #15
 8006ac2:	701a      	strb	r2, [r3, #0]
          cliPrintf(" - PUP END_3 Level"); 
 8006ac4:	483b      	ldr	r0, [pc, #236]	; (8006bb4 <PUMP_Control+0x27c>)
 8006ac6:	f7fd f8c5 	bl	8003c54 <cliPrintf>
      break;
 8006aca:	e066      	b.n	8006b9a <PUMP_Control+0x262>
        
      case PUMP_UP4L: 		
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_SET);
 8006acc:	2201      	movs	r2, #1
 8006ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ad2:	4836      	ldr	r0, [pc, #216]	; (8006bac <PUMP_Control+0x274>)
 8006ad4:	f004 f975 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 8006ad8:	4b31      	ldr	r3, [pc, #196]	; (8006ba0 <PUMP_Control+0x268>)
 8006ada:	2250      	movs	r2, #80	; 0x50
 8006adc:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP4H;
 8006ade:	4b31      	ldr	r3, [pc, #196]	; (8006ba4 <PUMP_Control+0x26c>)
 8006ae0:	220a      	movs	r2, #10
 8006ae2:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UL4"); 
        #endif
      }
      break;
 8006ae4:	e059      	b.n	8006b9a <PUMP_Control+0x262>

      case PUMP_UP4H: 
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006aec:	482f      	ldr	r0, [pc, #188]	; (8006bac <PUMP_Control+0x274>)
 8006aee:	f004 f968 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;
 8006af2:	4b2b      	ldr	r3, [pc, #172]	; (8006ba0 <PUMP_Control+0x268>)
 8006af4:	22c8      	movs	r2, #200	; 0xc8
 8006af6:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP5L;
 8006af8:	4b2a      	ldr	r3, [pc, #168]	; (8006ba4 <PUMP_Control+0x26c>)
 8006afa:	220b      	movs	r2, #11
 8006afc:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UH4"); 
        #endif
      }		
      break;
 8006afe:	e04c      	b.n	8006b9a <PUMP_Control+0x262>

      case PUMP_UP5L:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_SET);
 8006b00:	2201      	movs	r2, #1
 8006b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b06:	4829      	ldr	r0, [pc, #164]	; (8006bac <PUMP_Control+0x274>)
 8006b08:	f004 f95b 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 8006b0c:	4b24      	ldr	r3, [pc, #144]	; (8006ba0 <PUMP_Control+0x268>)
 8006b0e:	2250      	movs	r2, #80	; 0x50
 8006b10:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_UP5H;
 8006b12:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <PUMP_Control+0x26c>)
 8006b14:	220c      	movs	r2, #12
 8006b16:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UL5"); 
        #endif
      } 		
      break;
 8006b18:	e03f      	b.n	8006b9a <PUMP_Control+0x262>

      case PUMP_UP5H: 		
      {
        #ifdef YES_PUMP
    	  HAL_GPIO_WritePin(GPIOB, B_PMPUP, GPIO_PIN_RESET);
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b20:	4822      	ldr	r0, [pc, #136]	; (8006bac <PUMP_Control+0x274>)
 8006b22:	f004 f94e 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 200;
 8006b26:	4b1e      	ldr	r3, [pc, #120]	; (8006ba0 <PUMP_Control+0x268>)
 8006b28:	22c8      	movs	r2, #200	; 0xc8
 8006b2a:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_Stay;
 8006b2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <PUMP_Control+0x26c>)
 8006b2e:	220f      	movs	r2, #15
 8006b30:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P			
        cliPrintf(" UH5 - PUP END"); 
        #endif
      }
      break;
 8006b32:	e032      	b.n	8006b9a <PUMP_Control+0x262>
      break;

      case PUMP_STOP:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPOFF, GPIO_PIN_SET);
 8006b34:	2201      	movs	r2, #1
 8006b36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b3a:	481c      	ldr	r0, [pc, #112]	; (8006bac <PUMP_Control+0x274>)
 8006b3c:	f004 f941 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif
        PumpWaittime = 80;
 8006b40:	4b17      	ldr	r3, [pc, #92]	; (8006ba0 <PUMP_Control+0x268>)
 8006b42:	2250      	movs	r2, #80	; 0x50
 8006b44:	801a      	strh	r2, [r3, #0]
        PumpSeq = PUMP_STOP1H;
 8006b46:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <PUMP_Control+0x26c>)
 8006b48:	220e      	movs	r2, #14
 8006b4a:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P
        cliPrintf("\n PUMP STOP_L");
        #endif			
      }
      break;
 8006b4c:	e025      	b.n	8006b9a <PUMP_Control+0x262>

      case PUMP_STOP1H:
      {
        #ifdef YES_PUMP
        HAL_GPIO_WritePin(GPIOB, B_PMPOFF, GPIO_PIN_RESET);
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b54:	4815      	ldr	r0, [pc, #84]	; (8006bac <PUMP_Control+0x274>)
 8006b56:	f004 f934 	bl	800adc2 <HAL_GPIO_WritePin>
        #endif

        if( load_value.Spray_type == 1)
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <PUMP_Control+0x270>)
 8006b5c:	79db      	ldrb	r3, [r3, #7]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d105      	bne.n	8006b6e <PUMP_Control+0x236>
        {
          HAL_GPIO_WritePin(GPIOB, B_PMPDN, GPIO_PIN_RESET);
 8006b62:	2200      	movs	r2, #0
 8006b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b68:	4810      	ldr	r0, [pc, #64]	; (8006bac <PUMP_Control+0x274>)
 8006b6a:	f004 f92a 	bl	800adc2 <HAL_GPIO_WritePin>
        }
        PumpWaittime = 10;
 8006b6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <PUMP_Control+0x268>)
 8006b70:	220a      	movs	r2, #10
 8006b72:	801a      	strh	r2, [r3, #0]
        uSysStatusFlag &= ~f_PumpACT;
 8006b74:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <PUMP_Control+0x278>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f023 0320 	bic.w	r3, r3, #32
 8006b7c:	4a0c      	ldr	r2, [pc, #48]	; (8006bb0 <PUMP_Control+0x278>)
 8006b7e:	6013      	str	r3, [r2, #0]
        uSysStatusFlag &= ~f_PumpOn;		
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <PUMP_Control+0x278>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b88:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <PUMP_Control+0x278>)
 8006b8a:	6013      	str	r3, [r2, #0]
        PumpSeq	 = PUMP_Stay;
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <PUMP_Control+0x26c>)
 8006b8e:	220f      	movs	r2, #15
 8006b90:	701a      	strb	r2, [r3, #0]
        #if _PUMP_P
        cliPrintf(" PUMP STOP_H, STOP SEQ END,f_PumpACT[%0d]",uSysStatusFlag & f_PumpACT);
        #endif
      }
      break;
 8006b92:	e002      	b.n	8006b9a <PUMP_Control+0x262>

      default:
      break;

    }
  }
 8006b94:	bf00      	nop
 8006b96:	e000      	b.n	8006b9a <PUMP_Control+0x262>
      break;
 8006b98:	bf00      	nop
}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000d24 	.word	0x20000d24
 8006ba4:	20000d1e 	.word	0x20000d1e
 8006ba8:	20000ddc 	.word	0x20000ddc
 8006bac:	40010c00 	.word	0x40010c00
 8006bb0:	20000cf8 	.word	0x20000cf8
 8006bb4:	08012c84 	.word	0x08012c84

08006bb8 <FAN_Control>:

void FAN_Control()
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  if(FanWaittime == 0)
 8006bbc:	4b42      	ldr	r3, [pc, #264]	; (8006cc8 <FAN_Control+0x110>)
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d179      	bne.n	8006cb8 <FAN_Control+0x100>
  {
    switch(FanSeq)
 8006bc4:	4b41      	ldr	r3, [pc, #260]	; (8006ccc <FAN_Control+0x114>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d877      	bhi.n	8006cbe <FAN_Control+0x106>
 8006bce:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <FAN_Control+0x1c>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006be9 	.word	0x08006be9
 8006bd8:	08006c05 	.word	0x08006c05
 8006bdc:	08006cbd 	.word	0x08006cbd
 8006be0:	08006cbf 	.word	0x08006cbf
 8006be4:	08006c69 	.word	0x08006c69
    {
      case FAN_START:
      {
        //FAN_Speed = 1;
        FanTKPWM = FAN_PWM[FAN_Speed];
 8006be8:	4b39      	ldr	r3, [pc, #228]	; (8006cd0 <FAN_Control+0x118>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	4b39      	ldr	r3, [pc, #228]	; (8006cd4 <FAN_Control+0x11c>)
 8006bf0:	5c9a      	ldrb	r2, [r3, r2]
 8006bf2:	4b39      	ldr	r3, [pc, #228]	; (8006cd8 <FAN_Control+0x120>)
 8006bf4:	701a      	strb	r2, [r3, #0]
        FanSeq = FAN_SPEED;
 8006bf6:	4b35      	ldr	r3, [pc, #212]	; (8006ccc <FAN_Control+0x114>)
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	701a      	strb	r2, [r3, #0]
        FanWaittime = 10;
 8006bfc:	4b32      	ldr	r3, [pc, #200]	; (8006cc8 <FAN_Control+0x110>)
 8006bfe:	220a      	movs	r2, #10
 8006c00:	801a      	strh	r2, [r3, #0]
        #if _FAN_P
        cliPrintf("\n FAN_START SPD[%0d] TKT_PWM[%0d],Real_PWM[%0d]",FAN_Speed,FanTKPWM,FAN_PWMDuty);
        #endif
      } 
      break;
 8006c02:	e05c      	b.n	8006cbe <FAN_Control+0x106>

      case FAN_SPEED:
      {
        if(FanTKPWM > FAN_PWMDuty)
 8006c04:	4b34      	ldr	r3, [pc, #208]	; (8006cd8 <FAN_Control+0x120>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	4b34      	ldr	r3, [pc, #208]	; (8006cdc <FAN_Control+0x124>)
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d906      	bls.n	8006c20 <FAN_Control+0x68>
        {
          ++FAN_PWMDuty;
 8006c12:	4b32      	ldr	r3, [pc, #200]	; (8006cdc <FAN_Control+0x124>)
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	3301      	adds	r3, #1
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	4b30      	ldr	r3, [pc, #192]	; (8006cdc <FAN_Control+0x124>)
 8006c1c:	801a      	strh	r2, [r3, #0]
 8006c1e:	e015      	b.n	8006c4c <FAN_Control+0x94>
          #if _FAN_P
          cliPrintf("\n FAN_DUTY UP TKT_PWM[%0d],Real_PWM[%0d]",FanTKPWM,FAN_PWMDuty);
          #endif
        }
        else if(FanTKPWM < FAN_PWMDuty)
 8006c20:	4b2d      	ldr	r3, [pc, #180]	; (8006cd8 <FAN_Control+0x120>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	4b2d      	ldr	r3, [pc, #180]	; (8006cdc <FAN_Control+0x124>)
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d206      	bcs.n	8006c3c <FAN_Control+0x84>
        {
          --FAN_PWMDuty;
 8006c2e:	4b2b      	ldr	r3, [pc, #172]	; (8006cdc <FAN_Control+0x124>)
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	4b29      	ldr	r3, [pc, #164]	; (8006cdc <FAN_Control+0x124>)
 8006c38:	801a      	strh	r2, [r3, #0]
 8006c3a:	e007      	b.n	8006c4c <FAN_Control+0x94>
          cliPrintf("\n FAN_DUTY DOWN TKT_PWM[%0d],Real_PWM[%0d]",FanTKPWM,FAN_PWMDuty);
          #endif
        }
        else
        {
          FanSeq = FAN_Stay;
 8006c3c:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <FAN_Control+0x114>)
 8006c3e:	2203      	movs	r2, #3
 8006c40:	701a      	strb	r2, [r3, #0]
          FAN_PWMDuty = FanTKPWM;
 8006c42:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <FAN_Control+0x120>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <FAN_Control+0x124>)
 8006c4a:	801a      	strh	r2, [r3, #0]
          #if _FAN_P
          cliPrintf("\n FAN_DUTY SAME TKT_PWM[%0d],Real_PWM[%0d]",FanTKPWM,FAN_PWMDuty);
          #endif
          
        }
        TIM4->CCR4 = (FAN_PWMDuty*10);
 8006c4c:	4b23      	ldr	r3, [pc, #140]	; (8006cdc <FAN_Control+0x124>)
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4b20      	ldr	r3, [pc, #128]	; (8006ce0 <FAN_Control+0x128>)
 8006c5e:	641a      	str	r2, [r3, #64]	; 0x40
        FanWaittime = 10;
 8006c60:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <FAN_Control+0x110>)
 8006c62:	220a      	movs	r2, #10
 8006c64:	801a      	strh	r2, [r3, #0]
      }
      break;
 8006c66:	e02a      	b.n	8006cbe <FAN_Control+0x106>
      case FAN_Stay:
      break;

      case FAN_STOP:
      {
        if(FAN_PWMDuty)
 8006c68:	4b1c      	ldr	r3, [pc, #112]	; (8006cdc <FAN_Control+0x124>)
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d006      	beq.n	8006c7e <FAN_Control+0xc6>
        {
          --FAN_PWMDuty;
 8006c70:	4b1a      	ldr	r3, [pc, #104]	; (8006cdc <FAN_Control+0x124>)
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	4b18      	ldr	r3, [pc, #96]	; (8006cdc <FAN_Control+0x124>)
 8006c7a:	801a      	strh	r2, [r3, #0]
 8006c7c:	e00e      	b.n	8006c9c <FAN_Control+0xe4>
        }
        else
        {
          FanTKPWM = 0;		
 8006c7e:	4b16      	ldr	r3, [pc, #88]	; (8006cd8 <FAN_Control+0x120>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
          FAN_PWMDuty = 0;
 8006c84:	4b15      	ldr	r3, [pc, #84]	; (8006cdc <FAN_Control+0x124>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	801a      	strh	r2, [r3, #0]
          uSysStatusFlag &= ~f_FanACT;
 8006c8a:	4b16      	ldr	r3, [pc, #88]	; (8006ce4 <FAN_Control+0x12c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c92:	4a14      	ldr	r2, [pc, #80]	; (8006ce4 <FAN_Control+0x12c>)
 8006c94:	6013      	str	r3, [r2, #0]
          FanSeq = FAN_Stay;
 8006c96:	4b0d      	ldr	r3, [pc, #52]	; (8006ccc <FAN_Control+0x114>)
 8006c98:	2203      	movs	r2, #3
 8006c9a:	701a      	strb	r2, [r3, #0]
        }
        TIM4->CCR4 = (FAN_PWMDuty*10);
 8006c9c:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <FAN_Control+0x124>)
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	461a      	mov	r2, r3
 8006cac:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <FAN_Control+0x128>)
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40
        FanWaittime = 10;
 8006cb0:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <FAN_Control+0x110>)
 8006cb2:	220a      	movs	r2, #10
 8006cb4:	801a      	strh	r2, [r3, #0]
      }
      break;
 8006cb6:	e002      	b.n	8006cbe <FAN_Control+0x106>

    }
  }
 8006cb8:	bf00      	nop
 8006cba:	e000      	b.n	8006cbe <FAN_Control+0x106>
      break;
 8006cbc:	bf00      	nop
}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	20000d26 	.word	0x20000d26
 8006ccc:	20000d1f 	.word	0x20000d1f
 8006cd0:	20000d32 	.word	0x20000d32
 8006cd4:	08012eb4 	.word	0x08012eb4
 8006cd8:	20000d2a 	.word	0x20000d2a
 8006cdc:	20000d2e 	.word	0x20000d2e
 8006ce0:	40000800 	.word	0x40000800
 8006ce4:	20000cf8 	.word	0x20000cf8

08006ce8 <pn_PumpOn>:
//
void pn_PumpOn()
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
  else
  {
  	cliPrintf("\n ALL_Water_Tank_Empty");
  }
#endif
  if(NotEmpty_WL())
 8006cec:	f001 fafc 	bl	80082e8 <NotEmpty_WL>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d017      	beq.n	8006d26 <pn_PumpOn+0x3e>
  {
    if((uSysStatusFlag & f_PumpACT) == 0)
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <pn_PumpOn+0x44>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d111      	bne.n	8006d26 <pn_PumpOn+0x3e>
    {
      PumpSeq = PUMP_START;
 8006d02:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <pn_PumpOn+0x48>)
 8006d04:	2201      	movs	r2, #1
 8006d06:	701a      	strb	r2, [r3, #0]
      uSysStatusFlag |= f_PumpACT;
 8006d08:	4b08      	ldr	r3, [pc, #32]	; (8006d2c <pn_PumpOn+0x44>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f043 0320 	orr.w	r3, r3, #32
 8006d10:	4a06      	ldr	r2, [pc, #24]	; (8006d2c <pn_PumpOn+0x44>)
 8006d12:	6013      	str	r3, [r2, #0]
      uSysStatusFlag |= f_PumpOn;
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <pn_PumpOn+0x44>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d1c:	4a03      	ldr	r2, [pc, #12]	; (8006d2c <pn_PumpOn+0x44>)
 8006d1e:	6013      	str	r3, [r2, #0]
      PumpWaittime = 10;
 8006d20:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <pn_PumpOn+0x4c>)
 8006d22:	220a      	movs	r2, #10
 8006d24:	801a      	strh	r2, [r3, #0]
  #if _PUMP_P
      cliPrintf("\n PUMP START-");
  #endif		
    }
  }
}
 8006d26:	bf00      	nop
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000cf8 	.word	0x20000cf8
 8006d30:	20000d1e 	.word	0x20000d1e
 8006d34:	20000d24 	.word	0x20000d24

08006d38 <all_MotorStop>:
//
void all_MotorStop()
{	
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  if(u16_DebugFlag == 1)
 8006d3c:	4b7a      	ldr	r3, [pc, #488]	; (8006f28 <all_MotorStop+0x1f0>)
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d152      	bne.n	8006dea <all_MotorStop+0xb2>
  {
    cliPrintf("\n all_MotorStop");
 8006d44:	4879      	ldr	r0, [pc, #484]	; (8006f2c <all_MotorStop+0x1f4>)
 8006d46:	f7fc ff85 	bl	8003c54 <cliPrintf>
    if(uSysStatusFlag & f_LowBat)			cliPrintf(" -- LOW BATTERY");
 8006d4a:	4b79      	ldr	r3, [pc, #484]	; (8006f30 <all_MotorStop+0x1f8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <all_MotorStop+0x24>
 8006d56:	4877      	ldr	r0, [pc, #476]	; (8006f34 <all_MotorStop+0x1fc>)
 8006d58:	f7fc ff7c 	bl	8003c54 <cliPrintf>
    if(uSysStatusFlag & f_Crash)			cliPrintf(" -- CRASH");
 8006d5c:	4b74      	ldr	r3, [pc, #464]	; (8006f30 <all_MotorStop+0x1f8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <all_MotorStop+0x36>
 8006d68:	4873      	ldr	r0, [pc, #460]	; (8006f38 <all_MotorStop+0x200>)
 8006d6a:	f7fc ff73 	bl	8003c54 <cliPrintf>
    if(uSysStatusFlag & f_RFR_Emergency)	cliPrintf(" -- RFR_Emergency");
 8006d6e:	4b70      	ldr	r3, [pc, #448]	; (8006f30 <all_MotorStop+0x1f8>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <all_MotorStop+0x48>
 8006d7a:	4870      	ldr	r0, [pc, #448]	; (8006f3c <all_MotorStop+0x204>)
 8006d7c:	f7fc ff6a 	bl	8003c54 <cliPrintf>
    if(uSysStatusFlag & f_ADRVnoWaterStop)	  cliPrintf(" -- NO Water During Auto Drive");
 8006d80:	4b6b      	ldr	r3, [pc, #428]	; (8006f30 <all_MotorStop+0x1f8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <all_MotorStop+0x5a>
 8006d8c:	486c      	ldr	r0, [pc, #432]	; (8006f40 <all_MotorStop+0x208>)
 8006d8e:	f7fc ff61 	bl	8003c54 <cliPrintf>
    if(uSysStatusFlag & f_ADRVnoCANData)
 8006d92:	4b67      	ldr	r3, [pc, #412]	; (8006f30 <all_MotorStop+0x1f8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <all_MotorStop+0x7c>
    {
      if(f_commCAN)
 8006d9e:	4b69      	ldr	r3, [pc, #420]	; (8006f44 <all_MotorStop+0x20c>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <all_MotorStop+0x76>
      {
        cliPrintf(" -- NO CAN Comm.");
 8006da6:	4868      	ldr	r0, [pc, #416]	; (8006f48 <all_MotorStop+0x210>)
 8006da8:	f7fc ff54 	bl	8003c54 <cliPrintf>
 8006dac:	e002      	b.n	8006db4 <all_MotorStop+0x7c>
      }
      else
      {
        cliPrintf(" -- NO UART Comm.");
 8006dae:	4867      	ldr	r0, [pc, #412]	; (8006f4c <all_MotorStop+0x214>)
 8006db0:	f7fc ff50 	bl	8003c54 <cliPrintf>
      }
    }
    if(uCommStatusFlag & f_U2DEErr)		cliPrintf(" -- SMT DE Error");
 8006db4:	4b66      	ldr	r3, [pc, #408]	; (8006f50 <all_MotorStop+0x218>)
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <all_MotorStop+0x8e>
 8006dc0:	4864      	ldr	r0, [pc, #400]	; (8006f54 <all_MotorStop+0x21c>)
 8006dc2:	f7fc ff47 	bl	8003c54 <cliPrintf>
    if(uCommStatusFlag & f_U2CSumErr)		cliPrintf(" -- SMT Csum Error");
 8006dc6:	4b62      	ldr	r3, [pc, #392]	; (8006f50 <all_MotorStop+0x218>)
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <all_MotorStop+0xa0>
 8006dd2:	4861      	ldr	r0, [pc, #388]	; (8006f58 <all_MotorStop+0x220>)
 8006dd4:	f7fc ff3e 	bl	8003c54 <cliPrintf>
    if(uCommStatusFlag & f_U2INTNon)		cliPrintf(" -- SMT INT None");
 8006dd8:	4b5d      	ldr	r3, [pc, #372]	; (8006f50 <all_MotorStop+0x218>)
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <all_MotorStop+0xb2>
 8006de4:	485d      	ldr	r0, [pc, #372]	; (8006f5c <all_MotorStop+0x224>)
 8006de6:	f7fc ff35 	bl	8003c54 <cliPrintf>
    
  }
  
  
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 8006dea:	2300      	movs	r3, #0
 8006dec:	2208      	movs	r2, #8
 8006dee:	2100      	movs	r1, #0
 8006df0:	485b      	ldr	r0, [pc, #364]	; (8006f60 <all_MotorStop+0x228>)
 8006df2:	f002 fff2 	bl	8009dda <HAL_DAC_SetValue>
  if(DRV_PWMDuty)
 8006df6:	4b5b      	ldr	r3, [pc, #364]	; (8006f64 <all_MotorStop+0x22c>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d020      	beq.n	8006e40 <all_MotorStop+0x108>
  {
    if(uSysStatusFlag & f_Crash)
 8006dfe:	4b4c      	ldr	r3, [pc, #304]	; (8006f30 <all_MotorStop+0x1f8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d006      	beq.n	8006e18 <all_MotorStop+0xe0>
    {
      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4853      	ldr	r0, [pc, #332]	; (8006f60 <all_MotorStop+0x228>)
 8006e12:	f002 ffe2 	bl	8009dda <HAL_DAC_SetValue>
 8006e16:	e013      	b.n	8006e40 <all_MotorStop+0x108>
    }
    else
    {
      do
      {
        --DRV_PWMDuty;
 8006e18:	4b52      	ldr	r3, [pc, #328]	; (8006f64 <all_MotorStop+0x22c>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	4b50      	ldr	r3, [pc, #320]	; (8006f64 <all_MotorStop+0x22c>)
 8006e22:	701a      	strb	r2, [r3, #0]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, DRV_PWMDuty);
 8006e24:	4b4f      	ldr	r3, [pc, #316]	; (8006f64 <all_MotorStop+0x22c>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	484c      	ldr	r0, [pc, #304]	; (8006f60 <all_MotorStop+0x228>)
 8006e2e:	f002 ffd4 	bl	8009dda <HAL_DAC_SetValue>
        HAL_Delay(10);
 8006e32:	200a      	movs	r0, #10
 8006e34:	f001 fbd0 	bl	80085d8 <HAL_Delay>
      }while(DRV_PWMDuty);	
 8006e38:	4b4a      	ldr	r3, [pc, #296]	; (8006f64 <all_MotorStop+0x22c>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1eb      	bne.n	8006e18 <all_MotorStop+0xe0>
    }
  }
  
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 8006e40:	2300      	movs	r3, #0
 8006e42:	2208      	movs	r2, #8
 8006e44:	2100      	movs	r1, #0
 8006e46:	4846      	ldr	r0, [pc, #280]	; (8006f60 <all_MotorStop+0x228>)
 8006e48:	f002 ffc7 	bl	8009dda <HAL_DAC_SetValue>
  HAL_GPIO_WritePin(GPIOE, E_drvM_BREAK, GPIO_PIN_RESET);
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e52:	4845      	ldr	r0, [pc, #276]	; (8006f68 <all_MotorStop+0x230>)
 8006e54:	f003 ffb5 	bl	800adc2 <HAL_GPIO_WritePin>
  uSysStatusFlag |= f_DMBreak;
 8006e58:	4b35      	ldr	r3, [pc, #212]	; (8006f30 <all_MotorStop+0x1f8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f043 0304 	orr.w	r3, r3, #4
 8006e60:	4a33      	ldr	r2, [pc, #204]	; (8006f30 <all_MotorStop+0x1f8>)
 8006e62:	6013      	str	r3, [r2, #0]

  DRV_PWMDuty = 0;
 8006e64:	4b3f      	ldr	r3, [pc, #252]	; (8006f64 <all_MotorStop+0x22c>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
  STR_PWMDuty = 0;
 8006e6a:	4b40      	ldr	r3, [pc, #256]	; (8006f6c <all_MotorStop+0x234>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	701a      	strb	r2, [r3, #0]
  DMotorTKPWM = 0;  	
 8006e70:	4b3f      	ldr	r3, [pc, #252]	; (8006f70 <all_MotorStop+0x238>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	701a      	strb	r2, [r3, #0]
  SMotorTKPWM = 0;
 8006e76:	4b3f      	ldr	r3, [pc, #252]	; (8006f74 <all_MotorStop+0x23c>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
  DMotorSeq = DMOTOR_STOP;
 8006e7c:	4b3e      	ldr	r3, [pc, #248]	; (8006f78 <all_MotorStop+0x240>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	701a      	strb	r2, [r3, #0]
  SMotorSeq = SMOTOR_STOP;
 8006e82:	4b3e      	ldr	r3, [pc, #248]	; (8006f7c <all_MotorStop+0x244>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]

  if(LKAUTOSeq)
 8006e88:	4b3d      	ldr	r3, [pc, #244]	; (8006f80 <all_MotorStop+0x248>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <all_MotorStop+0x15e>
  {
    LKAUTOSeq = 0;  	
 8006e90:	4b3b      	ldr	r3, [pc, #236]	; (8006f80 <all_MotorStop+0x248>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	701a      	strb	r2, [r3, #0]
  }

  if(uSysStatusFlag & f_PumpACT)
 8006e96:	4b26      	ldr	r3, [pc, #152]	; (8006f30 <all_MotorStop+0x1f8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <all_MotorStop+0x176>
  {
	  PumpSeq = PUMP_STOP;
 8006ea2:	4b38      	ldr	r3, [pc, #224]	; (8006f84 <all_MotorStop+0x24c>)
 8006ea4:	220d      	movs	r2, #13
 8006ea6:	701a      	strb	r2, [r3, #0]
  	PumpWaittime  = 10;
 8006ea8:	4b37      	ldr	r3, [pc, #220]	; (8006f88 <all_MotorStop+0x250>)
 8006eaa:	220a      	movs	r2, #10
 8006eac:	801a      	strh	r2, [r3, #0]
  }
  
  if(uSysStatusFlag & f_FanACT)
 8006eae:	4b20      	ldr	r3, [pc, #128]	; (8006f30 <all_MotorStop+0x1f8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d013      	beq.n	8006ee2 <all_MotorStop+0x1aa>
  {
	  if(FanSeq != FAN_STOP)
 8006eba:	4b34      	ldr	r3, [pc, #208]	; (8006f8c <all_MotorStop+0x254>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b05      	cmp	r3, #5
 8006ec0:	d00f      	beq.n	8006ee2 <all_MotorStop+0x1aa>
	  {
      FanTKPWM = 0; 	  
 8006ec2:	4b33      	ldr	r3, [pc, #204]	; (8006f90 <all_MotorStop+0x258>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	701a      	strb	r2, [r3, #0]
      FAN_PWMDuty = 0;
 8006ec8:	4b32      	ldr	r3, [pc, #200]	; (8006f94 <all_MotorStop+0x25c>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	801a      	strh	r2, [r3, #0]
      TIM4->CCR4 = FAN_PWMDuty;
 8006ece:	4b31      	ldr	r3, [pc, #196]	; (8006f94 <all_MotorStop+0x25c>)
 8006ed0:	881a      	ldrh	r2, [r3, #0]
 8006ed2:	4b31      	ldr	r3, [pc, #196]	; (8006f98 <all_MotorStop+0x260>)
 8006ed4:	641a      	str	r2, [r3, #64]	; 0x40
      FanSeq = FAN_STOP;
 8006ed6:	4b2d      	ldr	r3, [pc, #180]	; (8006f8c <all_MotorStop+0x254>)
 8006ed8:	2205      	movs	r2, #5
 8006eda:	701a      	strb	r2, [r3, #0]
      FanWaittime = 10;
 8006edc:	4b2f      	ldr	r3, [pc, #188]	; (8006f9c <all_MotorStop+0x264>)
 8006ede:	220a      	movs	r2, #10
 8006ee0:	801a      	strh	r2, [r3, #0]
	  }
  }

  uSysStatusFlag &= ~f_DMotorACT;
 8006ee2:	4b13      	ldr	r3, [pc, #76]	; (8006f30 <all_MotorStop+0x1f8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f023 0301 	bic.w	r3, r3, #1
 8006eea:	4a11      	ldr	r2, [pc, #68]	; (8006f30 <all_MotorStop+0x1f8>)
 8006eec:	6013      	str	r3, [r2, #0]
  uSysStatusFlag &= ~f_SMotorACT;
 8006eee:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <all_MotorStop+0x1f8>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f023 0308 	bic.w	r3, r3, #8
 8006ef6:	4a0e      	ldr	r2, [pc, #56]	; (8006f30 <all_MotorStop+0x1f8>)
 8006ef8:	6013      	str	r3, [r2, #0]
  if(uSysStatusFlag & f_AutoRun)
 8006efa:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <all_MotorStop+0x1f8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00c      	beq.n	8006f20 <all_MotorStop+0x1e8>
  {
	  uSysStatusFlag &= ~f_AutoRun;
 8006f06:	4b0a      	ldr	r3, [pc, #40]	; (8006f30 <all_MotorStop+0x1f8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f0e:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <all_MotorStop+0x1f8>)
 8006f10:	6013      	str	r3, [r2, #0]
    if(u16_DebugFlag == 1)
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <all_MotorStop+0x1f0>)
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d102      	bne.n	8006f20 <all_MotorStop+0x1e8>
	    cliPrintf("\n Auto Reset");
 8006f1a:	4821      	ldr	r0, [pc, #132]	; (8006fa0 <all_MotorStop+0x268>)
 8006f1c:	f7fc fe9a 	bl	8003c54 <cliPrintf>
  }
  Bcon_Control();
 8006f20:	f000 fdd8 	bl	8007ad4 <Bcon_Control>
}
 8006f24:	bf00      	nop
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000d08 	.word	0x20000d08
 8006f2c:	08012c98 	.word	0x08012c98
 8006f30:	20000cf8 	.word	0x20000cf8
 8006f34:	08012ca8 	.word	0x08012ca8
 8006f38:	08012cb8 	.word	0x08012cb8
 8006f3c:	08012cc4 	.word	0x08012cc4
 8006f40:	08012cd8 	.word	0x08012cd8
 8006f44:	20000cf2 	.word	0x20000cf2
 8006f48:	08012cf8 	.word	0x08012cf8
 8006f4c:	08012d0c 	.word	0x08012d0c
 8006f50:	20000d00 	.word	0x20000d00
 8006f54:	08012d20 	.word	0x08012d20
 8006f58:	08012d34 	.word	0x08012d34
 8006f5c:	08012d48 	.word	0x08012d48
 8006f60:	200002dc 	.word	0x200002dc
 8006f64:	20000d2b 	.word	0x20000d2b
 8006f68:	40011800 	.word	0x40011800
 8006f6c:	20000d2c 	.word	0x20000d2c
 8006f70:	20000d28 	.word	0x20000d28
 8006f74:	20000d29 	.word	0x20000d29
 8006f78:	20000d1c 	.word	0x20000d1c
 8006f7c:	20000d1d 	.word	0x20000d1d
 8006f80:	20000d59 	.word	0x20000d59
 8006f84:	20000d1e 	.word	0x20000d1e
 8006f88:	20000d24 	.word	0x20000d24
 8006f8c:	20000d1f 	.word	0x20000d1f
 8006f90:	20000d2a 	.word	0x20000d2a
 8006f94:	20000d2e 	.word	0x20000d2e
 8006f98:	40000800 	.word	0x40000800
 8006f9c:	20000d26 	.word	0x20000d26
 8006fa0:	08012d5c 	.word	0x08012d5c

08006fa4 <str_MotorLimitStop>:
void str_MotorLimitStop()
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
  SMotorTKPWM = 0;
 8006fa8:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <str_MotorLimitStop+0x34>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	701a      	strb	r2, [r3, #0]
  STR_PWMDuty = 0;
 8006fae:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <str_MotorLimitStop+0x38>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	701a      	strb	r2, [r3, #0]
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, STR_PWMDuty);
 8006fb4:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <str_MotorLimitStop+0x38>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	2110      	movs	r1, #16
 8006fbc:	4808      	ldr	r0, [pc, #32]	; (8006fe0 <str_MotorLimitStop+0x3c>)
 8006fbe:	f002 ff0c 	bl	8009dda <HAL_DAC_SetValue>
  uSysStatusFlag &= ~f_SMotorACT;
 8006fc2:	4b08      	ldr	r3, [pc, #32]	; (8006fe4 <str_MotorLimitStop+0x40>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f023 0308 	bic.w	r3, r3, #8
 8006fca:	4a06      	ldr	r2, [pc, #24]	; (8006fe4 <str_MotorLimitStop+0x40>)
 8006fcc:	6013      	str	r3, [r2, #0]
  SMotorSeq = SMOTOR_STOP;
 8006fce:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <str_MotorLimitStop+0x44>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	701a      	strb	r2, [r3, #0]

}
 8006fd4:	bf00      	nop
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20000d29 	.word	0x20000d29
 8006fdc:	20000d2c 	.word	0x20000d2c
 8006fe0:	200002dc 	.word	0x200002dc
 8006fe4:	20000cf8 	.word	0x20000cf8
 8006fe8:	20000d1d 	.word	0x20000d1d

08006fec <Init_DrvPortSet>:
//
void Init_DrvPortSet()
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, E_drvM_BREAK, GPIO_PIN_SET);
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ff6:	4814      	ldr	r0, [pc, #80]	; (8007048 <Init_DrvPortSet+0x5c>)
 8006ff8:	f003 fee3 	bl	800adc2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, E_drvM_CWCCW, GPIO_PIN_SET);
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007002:	4811      	ldr	r0, [pc, #68]	; (8007048 <Init_DrvPortSet+0x5c>)
 8007004:	f003 fedd 	bl	800adc2 <HAL_GPIO_WritePin>
  uSysStatusFlag |= f_DMBreak;
 8007008:	4b10      	ldr	r3, [pc, #64]	; (800704c <Init_DrvPortSet+0x60>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f043 0304 	orr.w	r3, r3, #4
 8007010:	4a0e      	ldr	r2, [pc, #56]	; (800704c <Init_DrvPortSet+0x60>)
 8007012:	6013      	str	r3, [r2, #0]
  uSysStatusFlag |= f_DMForward;
 8007014:	4b0d      	ldr	r3, [pc, #52]	; (800704c <Init_DrvPortSet+0x60>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f043 0302 	orr.w	r3, r3, #2
 800701c:	4a0b      	ldr	r2, [pc, #44]	; (800704c <Init_DrvPortSet+0x60>)
 800701e:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOE, E_strM_CWCCW, GPIO_PIN_RESET);
 8007020:	2200      	movs	r2, #0
 8007022:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007026:	4808      	ldr	r0, [pc, #32]	; (8007048 <Init_DrvPortSet+0x5c>)
 8007028:	f003 fecb 	bl	800adc2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, E_strM_BREAK, GPIO_PIN_RESET);
 800702c:	2200      	movs	r2, #0
 800702e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007032:	4805      	ldr	r0, [pc, #20]	; (8007048 <Init_DrvPortSet+0x5c>)
 8007034:	f003 fec5 	bl	800adc2 <HAL_GPIO_WritePin>
  uSysStatusFlag |= f_SMLeft;
 8007038:	4b04      	ldr	r3, [pc, #16]	; (800704c <Init_DrvPortSet+0x60>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f043 0310 	orr.w	r3, r3, #16
 8007040:	4a02      	ldr	r2, [pc, #8]	; (800704c <Init_DrvPortSet+0x60>)
 8007042:	6013      	str	r3, [r2, #0]
}
 8007044:	bf00      	nop
 8007046:	bd80      	pop	{r7, pc}
 8007048:	40011800 	.word	0x40011800
 800704c:	20000cf8 	.word	0x20000cf8

08007050 <Motor_Control>:
//

void Motor_Control()
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
  
  if(uSysStatusFlag & f_DMotorACT)	DRV_Control();
 8007054:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <Motor_Control+0x54>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <Motor_Control+0x14>
 8007060:	f7ff f9d2 	bl	8006408 <DRV_Control>
  if((uSysStatusFlag & f_Crash) == 0)	
 8007064:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <Motor_Control+0x54>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d117      	bne.n	80070a0 <Motor_Control+0x50>
  {
    if(uSysStatusFlag & f_SMotorACT)	STR_Control();
 8007070:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <Motor_Control+0x54>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <Motor_Control+0x30>
 800707c:	f7ff fbac 	bl	80067d8 <STR_Control>
    if(uSysStatusFlag & f_PumpACT)		PUMP_Control();
 8007080:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <Motor_Control+0x54>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0320 	and.w	r3, r3, #32
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <Motor_Control+0x40>
 800708c:	f7ff fc54 	bl	8006938 <PUMP_Control>
    if(uSysStatusFlag & f_FanACT)		FAN_Control();
 8007090:	4b04      	ldr	r3, [pc, #16]	; (80070a4 <Motor_Control+0x54>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <Motor_Control+0x50>
 800709c:	f7ff fd8c 	bl	8006bb8 <FAN_Control>
  }
}
 80070a0:	bf00      	nop
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000cf8 	.word	0x20000cf8

080070a8 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80070b4:	2301      	movs	r3, #1
 80070b6:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	60da      	str	r2, [r3, #12]

  return ret;
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bc80      	pop	{r7}
 80070da:	4770      	bx	lr

080070dc <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80070e8:	2301      	movs	r3, #1
 80070ea:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80070ec:	2300      	movs	r3, #0
 80070ee:	613b      	str	r3, [r7, #16]
 80070f0:	e026      	b.n	8007140 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	441a      	add	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	440b      	add	r3, r1
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d00c      	beq.n	8007134 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	3301      	adds	r3, #1
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	6892      	ldr	r2, [r2, #8]
 8007124:	fbb3 f1f2 	udiv	r1, r3, r2
 8007128:	fb01 f202 	mul.w	r2, r1, r2
 800712c:	1a9a      	subs	r2, r3, r2
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	e002      	b.n	800713a <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8007134:	2300      	movs	r3, #0
 8007136:	75fb      	strb	r3, [r7, #23]
      break;
 8007138:	e006      	b.n	8007148 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3301      	adds	r3, #1
 800713e:	613b      	str	r3, [r7, #16]
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	429a      	cmp	r2, r3
 8007146:	d8d4      	bhi.n	80070f2 <qbufferRead+0x16>
    }
  }

  return ret;
 8007148:	7dfb      	ldrb	r3, [r7, #23]
}
 800714a:	4618      	mov	r0, r3
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr

08007154 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6892      	ldr	r2, [r2, #8]
 800716a:	fbb3 f1f2 	udiv	r1, r3, r2
 800716e:	fb01 f202 	mul.w	r2, r1, r2
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	60fb      	str	r3, [r7, #12]

  return ret;
 8007176:	68fb      	ldr	r3, [r7, #12]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr
	...

08007184 <init_set_read>:


*/

void init_set_read()
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af02      	add	r7, sp, #8
	at24_HAL_ReadBytes(&hi2c1, 0xA0, 0, info, 9);
 800718a:	2309      	movs	r3, #9
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	4b42      	ldr	r3, [pc, #264]	; (8007298 <init_set_read+0x114>)
 8007190:	2200      	movs	r2, #0
 8007192:	21a0      	movs	r1, #160	; 0xa0
 8007194:	4841      	ldr	r0, [pc, #260]	; (800729c <init_set_read+0x118>)
 8007196:	f7fb fc3d 	bl	8002a14 <at24_HAL_ReadBytes>
	
	load_value.Motor_type   = (uint8_t)info[0];
 800719a:	4b3f      	ldr	r3, [pc, #252]	; (8007298 <init_set_read+0x114>)
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	4b40      	ldr	r3, [pc, #256]	; (80072a0 <init_set_read+0x11c>)
 80071a0:	701a      	strb	r2, [r3, #0]
	load_value.Sensor_type  = (uint8_t)info[1];
 80071a2:	4b3d      	ldr	r3, [pc, #244]	; (8007298 <init_set_read+0x114>)
 80071a4:	785a      	ldrb	r2, [r3, #1]
 80071a6:	4b3e      	ldr	r3, [pc, #248]	; (80072a0 <init_set_read+0x11c>)
 80071a8:	705a      	strb	r2, [r3, #1]
	load_value.Remote_type  = (uint8_t)info[2];
 80071aa:	4b3b      	ldr	r3, [pc, #236]	; (8007298 <init_set_read+0x114>)
 80071ac:	789a      	ldrb	r2, [r3, #2]
 80071ae:	4b3c      	ldr	r3, [pc, #240]	; (80072a0 <init_set_read+0x11c>)
 80071b0:	709a      	strb	r2, [r3, #2]
	load_value.Battery_type = (uint8_t)info[3];
 80071b2:	4b39      	ldr	r3, [pc, #228]	; (8007298 <init_set_read+0x114>)
 80071b4:	78da      	ldrb	r2, [r3, #3]
 80071b6:	4b3a      	ldr	r3, [pc, #232]	; (80072a0 <init_set_read+0x11c>)
 80071b8:	70da      	strb	r2, [r3, #3]
	load_value.IDLE_SPD     = (uint8_t)info[4];
 80071ba:	4b37      	ldr	r3, [pc, #220]	; (8007298 <init_set_read+0x114>)
 80071bc:	791a      	ldrb	r2, [r3, #4]
 80071be:	4b38      	ldr	r3, [pc, #224]	; (80072a0 <init_set_read+0x11c>)
 80071c0:	711a      	strb	r2, [r3, #4]
	load_value.ATD_LOW_SPD  = (uint8_t)info[5];
 80071c2:	4b35      	ldr	r3, [pc, #212]	; (8007298 <init_set_read+0x114>)
 80071c4:	795a      	ldrb	r2, [r3, #5]
 80071c6:	4b36      	ldr	r3, [pc, #216]	; (80072a0 <init_set_read+0x11c>)
 80071c8:	715a      	strb	r2, [r3, #5]
	load_value.ATD_HIGH_SPD = (uint8_t)info[6];
 80071ca:	4b33      	ldr	r3, [pc, #204]	; (8007298 <init_set_read+0x114>)
 80071cc:	799a      	ldrb	r2, [r3, #6]
 80071ce:	4b34      	ldr	r3, [pc, #208]	; (80072a0 <init_set_read+0x11c>)
 80071d0:	719a      	strb	r2, [r3, #6]
	load_value.Spray_type   = (uint8_t)info[7];
 80071d2:	4b31      	ldr	r3, [pc, #196]	; (8007298 <init_set_read+0x114>)
 80071d4:	79da      	ldrb	r2, [r3, #7]
 80071d6:	4b32      	ldr	r3, [pc, #200]	; (80072a0 <init_set_read+0x11c>)
 80071d8:	71da      	strb	r2, [r3, #7]
	load_value.rtk_type     = (uint8_t)info[8];
 80071da:	4b2f      	ldr	r3, [pc, #188]	; (8007298 <init_set_read+0x114>)
 80071dc:	7a1a      	ldrb	r2, [r3, #8]
 80071de:	4b30      	ldr	r3, [pc, #192]	; (80072a0 <init_set_read+0x11c>)
 80071e0:	721a      	strb	r2, [r3, #8]
	
	if (load_value.rtk_type == 255 )
 80071e2:	4b2f      	ldr	r3, [pc, #188]	; (80072a0 <init_set_read+0x11c>)
 80071e4:	7a1b      	ldrb	r3, [r3, #8]
 80071e6:	2bff      	cmp	r3, #255	; 0xff
 80071e8:	d152      	bne.n	8007290 <init_set_read+0x10c>
	{
		info[0] = 2; // DMCS  
 80071ea:	4b2b      	ldr	r3, [pc, #172]	; (8007298 <init_set_read+0x114>)
 80071ec:	2202      	movs	r2, #2
 80071ee:	701a      	strb	r2, [r3, #0]
		info[1] = 2; // NPN  확인필요
 80071f0:	4b29      	ldr	r3, [pc, #164]	; (8007298 <init_set_read+0x114>)
 80071f2:	2202      	movs	r2, #2
 80071f4:	705a      	strb	r2, [r3, #1]
		info[2] = 1; // 1이 RF Master 
 80071f6:	4b28      	ldr	r3, [pc, #160]	; (8007298 <init_set_read+0x114>)
 80071f8:	2201      	movs	r2, #1
 80071fa:	709a      	strb	r2, [r3, #2]
		info[3] = 2; // 롱기스트
 80071fc:	4b26      	ldr	r3, [pc, #152]	; (8007298 <init_set_read+0x114>)
 80071fe:	2202      	movs	r2, #2
 8007200:	70da      	strb	r2, [r3, #3]
		info[4] = 15;     
 8007202:	4b25      	ldr	r3, [pc, #148]	; (8007298 <init_set_read+0x114>)
 8007204:	220f      	movs	r2, #15
 8007206:	711a      	strb	r2, [r3, #4]
		info[5] = 103;  
 8007208:	4b23      	ldr	r3, [pc, #140]	; (8007298 <init_set_read+0x114>)
 800720a:	2267      	movs	r2, #103	; 0x67
 800720c:	715a      	strb	r2, [r3, #5]
		info[6] = 115; 
 800720e:	4b22      	ldr	r3, [pc, #136]	; (8007298 <init_set_read+0x114>)
 8007210:	2273      	movs	r2, #115	; 0x73
 8007212:	719a      	strb	r2, [r3, #6]
		info[7] = 1; // 1이 분무기타입 
 8007214:	4b20      	ldr	r3, [pc, #128]	; (8007298 <init_set_read+0x114>)
 8007216:	2201      	movs	r2, #1
 8007218:	71da      	strb	r2, [r3, #7]
		info[8] = 1; // 1이 RTK type
 800721a:	4b1f      	ldr	r3, [pc, #124]	; (8007298 <init_set_read+0x114>)
 800721c:	2201      	movs	r2, #1
 800721e:	721a      	strb	r2, [r3, #8]

		at24_HAL_WriteBytes(&hi2c1, 0xA0, 0, &info, 9);	
 8007220:	2309      	movs	r3, #9
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	4b1c      	ldr	r3, [pc, #112]	; (8007298 <init_set_read+0x114>)
 8007226:	2200      	movs	r2, #0
 8007228:	21a0      	movs	r1, #160	; 0xa0
 800722a:	481c      	ldr	r0, [pc, #112]	; (800729c <init_set_read+0x118>)
 800722c:	f7fb fb7b 	bl	8002926 <at24_HAL_WriteBytes>
		HAL_Delay(1000);
 8007230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007234:	f001 f9d0 	bl	80085d8 <HAL_Delay>
		at24_HAL_ReadBytes(&hi2c1, 0xA0, 0, info, 9);
 8007238:	2309      	movs	r3, #9
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	4b16      	ldr	r3, [pc, #88]	; (8007298 <init_set_read+0x114>)
 800723e:	2200      	movs	r2, #0
 8007240:	21a0      	movs	r1, #160	; 0xa0
 8007242:	4816      	ldr	r0, [pc, #88]	; (800729c <init_set_read+0x118>)
 8007244:	f7fb fbe6 	bl	8002a14 <at24_HAL_ReadBytes>
		load_value.Motor_type   = (uint8_t)info[0];
 8007248:	4b13      	ldr	r3, [pc, #76]	; (8007298 <init_set_read+0x114>)
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <init_set_read+0x11c>)
 800724e:	701a      	strb	r2, [r3, #0]
		load_value.Sensor_type  = (uint8_t)info[1];
 8007250:	4b11      	ldr	r3, [pc, #68]	; (8007298 <init_set_read+0x114>)
 8007252:	785a      	ldrb	r2, [r3, #1]
 8007254:	4b12      	ldr	r3, [pc, #72]	; (80072a0 <init_set_read+0x11c>)
 8007256:	705a      	strb	r2, [r3, #1]
		load_value.Remote_type  = (uint8_t)info[2];
 8007258:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <init_set_read+0x114>)
 800725a:	789a      	ldrb	r2, [r3, #2]
 800725c:	4b10      	ldr	r3, [pc, #64]	; (80072a0 <init_set_read+0x11c>)
 800725e:	709a      	strb	r2, [r3, #2]
		load_value.Battery_type = (uint8_t)info[3];
 8007260:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <init_set_read+0x114>)
 8007262:	78da      	ldrb	r2, [r3, #3]
 8007264:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <init_set_read+0x11c>)
 8007266:	70da      	strb	r2, [r3, #3]
		load_value.IDLE_SPD     = (uint8_t)info[4];
 8007268:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <init_set_read+0x114>)
 800726a:	791a      	ldrb	r2, [r3, #4]
 800726c:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <init_set_read+0x11c>)
 800726e:	711a      	strb	r2, [r3, #4]
		load_value.ATD_LOW_SPD  = (uint8_t)info[5];
 8007270:	4b09      	ldr	r3, [pc, #36]	; (8007298 <init_set_read+0x114>)
 8007272:	795a      	ldrb	r2, [r3, #5]
 8007274:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <init_set_read+0x11c>)
 8007276:	715a      	strb	r2, [r3, #5]
		load_value.ATD_HIGH_SPD = (uint8_t)info[6];
 8007278:	4b07      	ldr	r3, [pc, #28]	; (8007298 <init_set_read+0x114>)
 800727a:	799a      	ldrb	r2, [r3, #6]
 800727c:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <init_set_read+0x11c>)
 800727e:	719a      	strb	r2, [r3, #6]
		load_value.Spray_type   = (uint8_t)info[7];
 8007280:	4b05      	ldr	r3, [pc, #20]	; (8007298 <init_set_read+0x114>)
 8007282:	79da      	ldrb	r2, [r3, #7]
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <init_set_read+0x11c>)
 8007286:	71da      	strb	r2, [r3, #7]
		load_value.rtk_type     = (uint8_t)info[8];
 8007288:	4b03      	ldr	r3, [pc, #12]	; (8007298 <init_set_read+0x114>)
 800728a:	7a1a      	ldrb	r2, [r3, #8]
 800728c:	4b04      	ldr	r3, [pc, #16]	; (80072a0 <init_set_read+0x11c>)
 800728e:	721a      	strb	r2, [r3, #8]
	}
	
}
 8007290:	bf00      	nop
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	2000003c 	.word	0x2000003c
 800729c:	200002f0 	.word	0x200002f0
 80072a0:	20000ddc 	.word	0x20000ddc

080072a4 <init_set_save>:

void init_set_save()
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af02      	add	r7, sp, #8
	
	info[0] = (char)load_value.Motor_type;   
 80072aa:	4b17      	ldr	r3, [pc, #92]	; (8007308 <init_set_save+0x64>)
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	4b17      	ldr	r3, [pc, #92]	; (800730c <init_set_save+0x68>)
 80072b0:	701a      	strb	r2, [r3, #0]
	info[1] = (char)load_value.Sensor_type;  
 80072b2:	4b15      	ldr	r3, [pc, #84]	; (8007308 <init_set_save+0x64>)
 80072b4:	785a      	ldrb	r2, [r3, #1]
 80072b6:	4b15      	ldr	r3, [pc, #84]	; (800730c <init_set_save+0x68>)
 80072b8:	705a      	strb	r2, [r3, #1]
	info[2] = (char)load_value.Remote_type; 
 80072ba:	4b13      	ldr	r3, [pc, #76]	; (8007308 <init_set_save+0x64>)
 80072bc:	789a      	ldrb	r2, [r3, #2]
 80072be:	4b13      	ldr	r3, [pc, #76]	; (800730c <init_set_save+0x68>)
 80072c0:	709a      	strb	r2, [r3, #2]
	info[3] = (char)load_value.Battery_type;
 80072c2:	4b11      	ldr	r3, [pc, #68]	; (8007308 <init_set_save+0x64>)
 80072c4:	78da      	ldrb	r2, [r3, #3]
 80072c6:	4b11      	ldr	r3, [pc, #68]	; (800730c <init_set_save+0x68>)
 80072c8:	70da      	strb	r2, [r3, #3]
	info[4] = (char)load_value.IDLE_SPD;     
 80072ca:	4b0f      	ldr	r3, [pc, #60]	; (8007308 <init_set_save+0x64>)
 80072cc:	791a      	ldrb	r2, [r3, #4]
 80072ce:	4b0f      	ldr	r3, [pc, #60]	; (800730c <init_set_save+0x68>)
 80072d0:	711a      	strb	r2, [r3, #4]
	info[5] = (char)load_value.ATD_LOW_SPD;  
 80072d2:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <init_set_save+0x64>)
 80072d4:	795a      	ldrb	r2, [r3, #5]
 80072d6:	4b0d      	ldr	r3, [pc, #52]	; (800730c <init_set_save+0x68>)
 80072d8:	715a      	strb	r2, [r3, #5]
	info[6] = (char)load_value.ATD_HIGH_SPD;
 80072da:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <init_set_save+0x64>)
 80072dc:	799a      	ldrb	r2, [r3, #6]
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <init_set_save+0x68>)
 80072e0:	719a      	strb	r2, [r3, #6]
	info[7] = (char)load_value.Spray_type; 
 80072e2:	4b09      	ldr	r3, [pc, #36]	; (8007308 <init_set_save+0x64>)
 80072e4:	79da      	ldrb	r2, [r3, #7]
 80072e6:	4b09      	ldr	r3, [pc, #36]	; (800730c <init_set_save+0x68>)
 80072e8:	71da      	strb	r2, [r3, #7]
	info[8] = (char)load_value.rtk_type; 
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <init_set_save+0x64>)
 80072ec:	7a1a      	ldrb	r2, [r3, #8]
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <init_set_save+0x68>)
 80072f0:	721a      	strb	r2, [r3, #8]
	
	at24_HAL_WriteBytes(&hi2c1, 0xA0, 0, &info, 9);
 80072f2:	2309      	movs	r3, #9
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	4b05      	ldr	r3, [pc, #20]	; (800730c <init_set_save+0x68>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	21a0      	movs	r1, #160	; 0xa0
 80072fc:	4804      	ldr	r0, [pc, #16]	; (8007310 <init_set_save+0x6c>)
 80072fe:	f7fb fb12 	bl	8002926 <at24_HAL_WriteBytes>
}
 8007302:	bf00      	nop
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000ddc 	.word	0x20000ddc
 800730c:	2000003c 	.word	0x2000003c
 8007310:	200002f0 	.word	0x200002f0

08007314 <can1_Trans8b>:




void can1_Trans8b(uint8_t Command) 
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af02      	add	r7, sp, #8
 800731a:	4603      	mov	r3, r0
 800731c:	71fb      	strb	r3, [r7, #7]
  //uint8_t ii;
  #if 1 
  ++u32can_TrnCnt;
 800731e:	4b6b      	ldr	r3, [pc, #428]	; (80074cc <can1_Trans8b+0x1b8>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	4a69      	ldr	r2, [pc, #420]	; (80074cc <can1_Trans8b+0x1b8>)
 8007326:	6013      	str	r3, [r2, #0]
  switch(Command)
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	3b01      	subs	r3, #1
 800732c:	2b03      	cmp	r3, #3
 800732e:	f200 80c8 	bhi.w	80074c2 <can1_Trans8b+0x1ae>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <can1_Trans8b+0x24>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	08007349 	.word	0x08007349
 800733c:	080073cb 	.word	0x080073cb
 8007340:	08007405 	.word	0x08007405
 8007344:	0800746d 	.word	0x0800746d
  {
	case 0x01:
	{
		TxMessage.Data[0] = (uint8_t)(uSysStatusFlag & 0x000000FF); 
 8007348:	4b61      	ldr	r3, [pc, #388]	; (80074d0 <can1_Trans8b+0x1bc>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	b2da      	uxtb	r2, r3
 800734e:	4b61      	ldr	r3, [pc, #388]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007350:	72da      	strb	r2, [r3, #11]
		TxMessage.Data[1] = (uint8_t)(uSysStatusFlag >> 8 & 0x000000FF);
 8007352:	4b5f      	ldr	r3, [pc, #380]	; (80074d0 <can1_Trans8b+0x1bc>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	0a1b      	lsrs	r3, r3, #8
 8007358:	b2da      	uxtb	r2, r3
 800735a:	4b5e      	ldr	r3, [pc, #376]	; (80074d4 <can1_Trans8b+0x1c0>)
 800735c:	731a      	strb	r2, [r3, #12]
		TxMessage.Data[0] &= ~0x40;
 800735e:	4b5d      	ldr	r3, [pc, #372]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007360:	7adb      	ldrb	r3, [r3, #11]
 8007362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007366:	b2da      	uxtb	r2, r3
 8007368:	4b5a      	ldr	r3, [pc, #360]	; (80074d4 <can1_Trans8b+0x1c0>)
 800736a:	72da      	strb	r2, [r3, #11]
		txHeader.StdId = 0x737;
 800736c:	4b5a      	ldr	r3, [pc, #360]	; (80074d8 <can1_Trans8b+0x1c4>)
 800736e:	f240 7237 	movw	r2, #1847	; 0x737
 8007372:	601a      	str	r2, [r3, #0]
		if(uSysStatusFlag & f_RFR_Emergency)
 8007374:	4b56      	ldr	r3, [pc, #344]	; (80074d0 <can1_Trans8b+0x1bc>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <can1_Trans8b+0x82>
		{
			if(LKAUTOSeq >= 6)
 8007380:	4b56      	ldr	r3, [pc, #344]	; (80074dc <can1_Trans8b+0x1c8>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	2b05      	cmp	r3, #5
 8007386:	d906      	bls.n	8007396 <can1_Trans8b+0x82>
				TxMessage.Data[1] &= 0xBF;			/* 1011 1111 RFR_Emergency �� �����ؼ� ����. */				
 8007388:	4b52      	ldr	r3, [pc, #328]	; (80074d4 <can1_Trans8b+0x1c0>)
 800738a:	7b1b      	ldrb	r3, [r3, #12]
 800738c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007390:	b2da      	uxtb	r2, r3
 8007392:	4b50      	ldr	r3, [pc, #320]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007394:	731a      	strb	r2, [r3, #12]
		}
		if(can_DbgCommand == 1)
 8007396:	4b52      	ldr	r3, [pc, #328]	; (80074e0 <can1_Trans8b+0x1cc>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d10e      	bne.n	80073bc <can1_Trans8b+0xa8>
		{
			printf("\n TRS_ID[%0x] DLC[%0d] DT0[%0x] DT1[%0x]",TxMessage.StdId,TxMessage.DLC,TxMessage.Data[0],TxMessage.Data[1]);
 800739e:	4b4d      	ldr	r3, [pc, #308]	; (80074d4 <can1_Trans8b+0x1c0>)
 80073a0:	6819      	ldr	r1, [r3, #0]
 80073a2:	4b4c      	ldr	r3, [pc, #304]	; (80074d4 <can1_Trans8b+0x1c0>)
 80073a4:	7a9b      	ldrb	r3, [r3, #10]
 80073a6:	461a      	mov	r2, r3
 80073a8:	4b4a      	ldr	r3, [pc, #296]	; (80074d4 <can1_Trans8b+0x1c0>)
 80073aa:	7adb      	ldrb	r3, [r3, #11]
 80073ac:	4618      	mov	r0, r3
 80073ae:	4b49      	ldr	r3, [pc, #292]	; (80074d4 <can1_Trans8b+0x1c0>)
 80073b0:	7b1b      	ldrb	r3, [r3, #12]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4603      	mov	r3, r0
 80073b6:	484b      	ldr	r0, [pc, #300]	; (80074e4 <can1_Trans8b+0x1d0>)
 80073b8:	f007 faa2 	bl	800e900 <iprintf>
		}	
	    HAL_CAN_AddTxMessage(&hcan, &txHeader, &TxMessage.Data, &TxMailbox);
 80073bc:	4b4a      	ldr	r3, [pc, #296]	; (80074e8 <can1_Trans8b+0x1d4>)
 80073be:	4a4b      	ldr	r2, [pc, #300]	; (80074ec <can1_Trans8b+0x1d8>)
 80073c0:	4945      	ldr	r1, [pc, #276]	; (80074d8 <can1_Trans8b+0x1c4>)
 80073c2:	484b      	ldr	r0, [pc, #300]	; (80074f0 <can1_Trans8b+0x1dc>)
 80073c4:	f001 ff11 	bl	80091ea <HAL_CAN_AddTxMessage>
	}
	break;
 80073c8:	e07c      	b.n	80074c4 <can1_Trans8b+0x1b0>
		

	case 0x02:
	{
		TxMessage.Data[0] = (uint8_t)(uSysStatusFlag & 0x000000FF); 
 80073ca:	4b41      	ldr	r3, [pc, #260]	; (80074d0 <can1_Trans8b+0x1bc>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	4b40      	ldr	r3, [pc, #256]	; (80074d4 <can1_Trans8b+0x1c0>)
 80073d2:	72da      	strb	r2, [r3, #11]
		TxMessage.Data[0] |= 0x40;
 80073d4:	4b3f      	ldr	r3, [pc, #252]	; (80074d4 <can1_Trans8b+0x1c0>)
 80073d6:	7adb      	ldrb	r3, [r3, #11]
 80073d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	4b3d      	ldr	r3, [pc, #244]	; (80074d4 <can1_Trans8b+0x1c0>)
 80073e0:	72da      	strb	r2, [r3, #11]
		TxMessage.Data[1] = (uint8_t)(uSysStatusFlag >> 8 & 0x000000FF);
 80073e2:	4b3b      	ldr	r3, [pc, #236]	; (80074d0 <can1_Trans8b+0x1bc>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	0a1b      	lsrs	r3, r3, #8
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	4b3a      	ldr	r3, [pc, #232]	; (80074d4 <can1_Trans8b+0x1c0>)
 80073ec:	731a      	strb	r2, [r3, #12]
		txHeader.StdId = 0x737;
 80073ee:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <can1_Trans8b+0x1c4>)
 80073f0:	f240 7237 	movw	r2, #1847	; 0x737
 80073f4:	601a      	str	r2, [r3, #0]

		HAL_CAN_AddTxMessage(&hcan, &txHeader, &TxMessage.Data, &TxMailbox);
 80073f6:	4b3c      	ldr	r3, [pc, #240]	; (80074e8 <can1_Trans8b+0x1d4>)
 80073f8:	4a3c      	ldr	r2, [pc, #240]	; (80074ec <can1_Trans8b+0x1d8>)
 80073fa:	4937      	ldr	r1, [pc, #220]	; (80074d8 <can1_Trans8b+0x1c4>)
 80073fc:	483c      	ldr	r0, [pc, #240]	; (80074f0 <can1_Trans8b+0x1dc>)
 80073fe:	f001 fef4 	bl	80091ea <HAL_CAN_AddTxMessage>
	}
	break;
 8007402:	e05f      	b.n	80074c4 <can1_Trans8b+0x1b0>

	case 0x03:
	{	
		
		for(uint8_t iii = 0; iii < 8; iii++)
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]
 8007408:	e022      	b.n	8007450 <can1_Trans8b+0x13c>
		{
			TxMessage.Data[0] = CAN_RxData_Error[0];
 800740a:	4b3a      	ldr	r3, [pc, #232]	; (80074f4 <can1_Trans8b+0x1e0>)
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	4b31      	ldr	r3, [pc, #196]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007410:	72da      	strb	r2, [r3, #11]
			TxMessage.Data[1] = CAN_RxData_Error[1];
 8007412:	4b38      	ldr	r3, [pc, #224]	; (80074f4 <can1_Trans8b+0x1e0>)
 8007414:	785a      	ldrb	r2, [r3, #1]
 8007416:	4b2f      	ldr	r3, [pc, #188]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007418:	731a      	strb	r2, [r3, #12]
			TxMessage.Data[2] = CAN_RxData_Error[2];	
 800741a:	4b36      	ldr	r3, [pc, #216]	; (80074f4 <can1_Trans8b+0x1e0>)
 800741c:	789a      	ldrb	r2, [r3, #2]
 800741e:	4b2d      	ldr	r3, [pc, #180]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007420:	735a      	strb	r2, [r3, #13]
			TxMessage.Data[3] = CAN_RxData_Error[3];
 8007422:	4b34      	ldr	r3, [pc, #208]	; (80074f4 <can1_Trans8b+0x1e0>)
 8007424:	78da      	ldrb	r2, [r3, #3]
 8007426:	4b2b      	ldr	r3, [pc, #172]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007428:	739a      	strb	r2, [r3, #14]
			TxMessage.Data[4] = CAN_RxData_Error[4];	
 800742a:	4b32      	ldr	r3, [pc, #200]	; (80074f4 <can1_Trans8b+0x1e0>)
 800742c:	791a      	ldrb	r2, [r3, #4]
 800742e:	4b29      	ldr	r3, [pc, #164]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007430:	73da      	strb	r2, [r3, #15]
			TxMessage.Data[5] = CAN_RxData_Error[5];
 8007432:	4b30      	ldr	r3, [pc, #192]	; (80074f4 <can1_Trans8b+0x1e0>)
 8007434:	795a      	ldrb	r2, [r3, #5]
 8007436:	4b27      	ldr	r3, [pc, #156]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007438:	741a      	strb	r2, [r3, #16]
			TxMessage.Data[6] = CAN_RxData_Error[6];	
 800743a:	4b2e      	ldr	r3, [pc, #184]	; (80074f4 <can1_Trans8b+0x1e0>)
 800743c:	799a      	ldrb	r2, [r3, #6]
 800743e:	4b25      	ldr	r3, [pc, #148]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007440:	745a      	strb	r2, [r3, #17]
			TxMessage.Data[7] = CAN_RxData_Error[7];
 8007442:	4b2c      	ldr	r3, [pc, #176]	; (80074f4 <can1_Trans8b+0x1e0>)
 8007444:	79da      	ldrb	r2, [r3, #7]
 8007446:	4b23      	ldr	r3, [pc, #140]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007448:	749a      	strb	r2, [r3, #18]
		for(uint8_t iii = 0; iii < 8; iii++)
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	3301      	adds	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b07      	cmp	r3, #7
 8007454:	d9d9      	bls.n	800740a <can1_Trans8b+0xf6>
		}
		
		txHeader.StdId = 0x501;
 8007456:	4b20      	ldr	r3, [pc, #128]	; (80074d8 <can1_Trans8b+0x1c4>)
 8007458:	f240 5201 	movw	r2, #1281	; 0x501
 800745c:	601a      	str	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan, &txHeader, &TxMessage.Data, &TxMailbox);
 800745e:	4b22      	ldr	r3, [pc, #136]	; (80074e8 <can1_Trans8b+0x1d4>)
 8007460:	4a22      	ldr	r2, [pc, #136]	; (80074ec <can1_Trans8b+0x1d8>)
 8007462:	491d      	ldr	r1, [pc, #116]	; (80074d8 <can1_Trans8b+0x1c4>)
 8007464:	4822      	ldr	r0, [pc, #136]	; (80074f0 <can1_Trans8b+0x1dc>)
 8007466:	f001 fec0 	bl	80091ea <HAL_CAN_AddTxMessage>
	}
	break;
 800746a:	e02b      	b.n	80074c4 <can1_Trans8b+0x1b0>
	case 0x04:
	{	
		TxMessage.Data[0] = CAN_RX_FND_Error[0];
 800746c:	4b22      	ldr	r3, [pc, #136]	; (80074f8 <can1_Trans8b+0x1e4>)
 800746e:	781a      	ldrb	r2, [r3, #0]
 8007470:	4b18      	ldr	r3, [pc, #96]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007472:	72da      	strb	r2, [r3, #11]
		TxMessage.Data[1] = CAN_RX_FND_Error[1];
 8007474:	4b20      	ldr	r3, [pc, #128]	; (80074f8 <can1_Trans8b+0x1e4>)
 8007476:	785a      	ldrb	r2, [r3, #1]
 8007478:	4b16      	ldr	r3, [pc, #88]	; (80074d4 <can1_Trans8b+0x1c0>)
 800747a:	731a      	strb	r2, [r3, #12]
		TxMessage.Data[2] = CAN_RX_FND_Error[2];	
 800747c:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <can1_Trans8b+0x1e4>)
 800747e:	789a      	ldrb	r2, [r3, #2]
 8007480:	4b14      	ldr	r3, [pc, #80]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007482:	735a      	strb	r2, [r3, #13]
		TxMessage.Data[3] = CAN_RX_FND_Error[3];
 8007484:	4b1c      	ldr	r3, [pc, #112]	; (80074f8 <can1_Trans8b+0x1e4>)
 8007486:	78da      	ldrb	r2, [r3, #3]
 8007488:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <can1_Trans8b+0x1c0>)
 800748a:	739a      	strb	r2, [r3, #14]
		TxMessage.Data[4] = CAN_RX_FND_Error[4];	
 800748c:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <can1_Trans8b+0x1e4>)
 800748e:	791a      	ldrb	r2, [r3, #4]
 8007490:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <can1_Trans8b+0x1c0>)
 8007492:	73da      	strb	r2, [r3, #15]
		TxMessage.Data[5] = CAN_RX_FND_Error[5];
 8007494:	4b18      	ldr	r3, [pc, #96]	; (80074f8 <can1_Trans8b+0x1e4>)
 8007496:	795a      	ldrb	r2, [r3, #5]
 8007498:	4b0e      	ldr	r3, [pc, #56]	; (80074d4 <can1_Trans8b+0x1c0>)
 800749a:	741a      	strb	r2, [r3, #16]
		TxMessage.Data[6] = CAN_RX_FND_Error[6];	
 800749c:	4b16      	ldr	r3, [pc, #88]	; (80074f8 <can1_Trans8b+0x1e4>)
 800749e:	799a      	ldrb	r2, [r3, #6]
 80074a0:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <can1_Trans8b+0x1c0>)
 80074a2:	745a      	strb	r2, [r3, #17]
		TxMessage.Data[7] = CAN_RX_FND_Error[7];
 80074a4:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <can1_Trans8b+0x1e4>)
 80074a6:	79da      	ldrb	r2, [r3, #7]
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <can1_Trans8b+0x1c0>)
 80074aa:	749a      	strb	r2, [r3, #18]
		txHeader.StdId = 0x502;
 80074ac:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <can1_Trans8b+0x1c4>)
 80074ae:	f240 5202 	movw	r2, #1282	; 0x502
 80074b2:	601a      	str	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan, &txHeader, &TxMessage.Data, &TxMailbox);
 80074b4:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <can1_Trans8b+0x1d4>)
 80074b6:	4a0d      	ldr	r2, [pc, #52]	; (80074ec <can1_Trans8b+0x1d8>)
 80074b8:	4907      	ldr	r1, [pc, #28]	; (80074d8 <can1_Trans8b+0x1c4>)
 80074ba:	480d      	ldr	r0, [pc, #52]	; (80074f0 <can1_Trans8b+0x1dc>)
 80074bc:	f001 fe95 	bl	80091ea <HAL_CAN_AddTxMessage>
	}
	break;
 80074c0:	e000      	b.n	80074c4 <can1_Trans8b+0x1b0>
	default:
		break;
 80074c2:	bf00      	nop
	
  }
  #endif
}
 80074c4:	bf00      	nop
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20000d18 	.word	0x20000d18
 80074d0:	20000cf8 	.word	0x20000cf8
 80074d4:	20000d78 	.word	0x20000d78
 80074d8:	20000d94 	.word	0x20000d94
 80074dc:	20000d59 	.word	0x20000d59
 80074e0:	20000d41 	.word	0x20000d41
 80074e4:	08012d6c 	.word	0x08012d6c
 80074e8:	20000d8c 	.word	0x20000d8c
 80074ec:	20000d83 	.word	0x20000d83
 80074f0:	200002b4 	.word	0x200002b4
 80074f4:	20000d68 	.word	0x20000d68
 80074f8:	20000d70 	.word	0x20000d70

080074fc <Event_30ms>:
uint8_t NotEmpty_WL();
uint8_t count;
uint8_t center_start = 0;

void Event_30ms()
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  uTimerFlag &= ~TIM_30ms;
 8007500:	4b19      	ldr	r3, [pc, #100]	; (8007568 <Event_30ms+0x6c>)
 8007502:	881b      	ldrh	r3, [r3, #0]
 8007504:	f023 0304 	bic.w	r3, r3, #4
 8007508:	b29a      	uxth	r2, r3
 800750a:	4b17      	ldr	r3, [pc, #92]	; (8007568 <Event_30ms+0x6c>)
 800750c:	801a      	strh	r2, [r3, #0]
  get_adc_value();
 800750e:	f7fb fb07 	bl	8002b20 <get_adc_value>
  if(RK_PermitTime)	--RK_PermitTime;
 8007512:	4b16      	ldr	r3, [pc, #88]	; (800756c <Event_30ms+0x70>)
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <Event_30ms+0x2a>
 800751a:	4b14      	ldr	r3, [pc, #80]	; (800756c <Event_30ms+0x70>)
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	4b12      	ldr	r3, [pc, #72]	; (800756c <Event_30ms+0x70>)
 8007524:	801a      	strh	r2, [r3, #0]
  if(f_commCAN)
 8007526:	4b12      	ldr	r3, [pc, #72]	; (8007570 <Event_30ms+0x74>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d017      	beq.n	800755e <Event_30ms+0x62>
  {
	if ( center_start == 0 )
 800752e:	4b11      	ldr	r3, [pc, #68]	; (8007574 <Event_30ms+0x78>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d103      	bne.n	800753e <Event_30ms+0x42>
	{
		can1_Trans8b(0x01);	//  CAN
 8007536:	2001      	movs	r0, #1
 8007538:	f7ff feec 	bl	8007314 <can1_Trans8b>
 800753c:	e00f      	b.n	800755e <Event_30ms+0x62>
	}
	else 
	{
		can1_Trans8b(0x02);
 800753e:	2002      	movs	r0, #2
 8007540:	f7ff fee8 	bl	8007314 <can1_Trans8b>
		count++;
 8007544:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <Event_30ms+0x7c>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <Event_30ms+0x7c>)
 800754e:	701a      	strb	r2, [r3, #0]
		if ( count  > 3)
 8007550:	4b09      	ldr	r3, [pc, #36]	; (8007578 <Event_30ms+0x7c>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b03      	cmp	r3, #3
 8007556:	d902      	bls.n	800755e <Event_30ms+0x62>
		{
			center_start =0;
 8007558:	4b06      	ldr	r3, [pc, #24]	; (8007574 <Event_30ms+0x78>)
 800755a:	2200      	movs	r2, #0
 800755c:	701a      	strb	r2, [r3, #0]
		}
	}
  }
  Bcon_Control();
 800755e:	f000 fab9 	bl	8007ad4 <Bcon_Control>
}
 8007562:	bf00      	nop
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000cf4 	.word	0x20000cf4
 800756c:	20000d30 	.word	0x20000d30
 8007570:	20000cf2 	.word	0x20000cf2
 8007574:	20000de6 	.word	0x20000de6
 8007578:	20000de5 	.word	0x20000de5

0800757c <Event_10ms>:

void Event_10ms()
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
  uTimerFlag &= ~TIM_10ms;  
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <Event_10ms+0x1c>)
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	f023 0302 	bic.w	r3, r3, #2
 8007588:	b29a      	uxth	r2, r3
 800758a:	4b03      	ldr	r3, [pc, #12]	; (8007598 <Event_10ms+0x1c>)
 800758c:	801a      	strh	r2, [r3, #0]
}
 800758e:	bf00      	nop
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	20000cf4 	.word	0x20000cf4

0800759c <Event_200ms>:

void Event_200ms()
{
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
	uTimerFlag &= ~TIM_200ms;
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <Event_200ms+0x24>)
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	f023 0320 	bic.w	r3, r3, #32
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <Event_200ms+0x24>)
 80075ac:	801a      	strh	r2, [r3, #0]
	G_LED_Toggle(); 	  	/* Green led로 FIX */
 80075ae:	f000 f8cd 	bl	800774c <G_LED_Toggle>
	WL_Check();
 80075b2:	f000 fcaf 	bl	8007f14 <WL_Check>
	Battery_Check();
 80075b6:	f000 f92f 	bl	8007818 <Battery_Check>
		break;
	default:
		break;
	}
  #endif 
}
 80075ba:	bf00      	nop
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000cf4 	.word	0x20000cf4

080075c4 <Event_500ms>:
//
void Event_500ms()
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  uTimerFlag &= ~TIM_500ms;
 80075c8:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <Event_500ms+0x40>)
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <Event_500ms+0x40>)
 80075d4:	801a      	strh	r2, [r3, #0]
  uTimerFlag ^= TIM_1SecMaker;
 80075d6:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <Event_500ms+0x40>)
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80075de:	b29a      	uxth	r2, r3
 80075e0:	4b08      	ldr	r3, [pc, #32]	; (8007604 <Event_500ms+0x40>)
 80075e2:	801a      	strh	r2, [r3, #0]
  if(uTimerFlag & TIM_1SecMaker)
 80075e4:	4b07      	ldr	r3, [pc, #28]	; (8007604 <Event_500ms+0x40>)
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d004      	beq.n	80075fa <Event_500ms+0x36>
  {
	//uTimerFlag |= TIM_1Sec;	
	++u32_SysRunTime;
 80075f0:	4b05      	ldr	r3, [pc, #20]	; (8007608 <Event_500ms+0x44>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	4a04      	ldr	r2, [pc, #16]	; (8007608 <Event_500ms+0x44>)
 80075f8:	6013      	str	r3, [r2, #0]
  }
}
 80075fa:	bf00      	nop
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	20000cf4 	.word	0x20000cf4
 8007608:	20000d04 	.word	0x20000d04

0800760c <Timer_Event>:
void Timer_Event()
{
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
    if(uTimerFlag & TIM_10ms)	Event_10ms();
 8007610:	4b10      	ldr	r3, [pc, #64]	; (8007654 <Timer_Event+0x48>)
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <Timer_Event+0x14>
 800761c:	f7ff ffae 	bl	800757c <Event_10ms>
    if(uTimerFlag & TIM_30ms)	Event_30ms();		
 8007620:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <Timer_Event+0x48>)
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <Timer_Event+0x24>
 800762c:	f7ff ff66 	bl	80074fc <Event_30ms>
    if(uTimerFlag & TIM_200ms)	Event_200ms();
 8007630:	4b08      	ldr	r3, [pc, #32]	; (8007654 <Timer_Event+0x48>)
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <Timer_Event+0x34>
 800763c:	f7ff ffae 	bl	800759c <Event_200ms>
    if(uTimerFlag & TIM_500ms)	Event_500ms();	
 8007640:	4b04      	ldr	r3, [pc, #16]	; (8007654 <Timer_Event+0x48>)
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <Timer_Event+0x44>
 800764c:	f7ff ffba 	bl	80075c4 <Event_500ms>
}
 8007650:	bf00      	nop
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20000cf4 	.word	0x20000cf4

08007658 <bsp_can_init>:

void bsp_can_init()
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
    TxMessage.Data[0] = 0x11; 
 800765c:	4b1f      	ldr	r3, [pc, #124]	; (80076dc <bsp_can_init+0x84>)
 800765e:	2211      	movs	r2, #17
 8007660:	72da      	strb	r2, [r3, #11]
    TxMessage.Data[1] = 0;
 8007662:	4b1e      	ldr	r3, [pc, #120]	; (80076dc <bsp_can_init+0x84>)
 8007664:	2200      	movs	r2, #0
 8007666:	731a      	strb	r2, [r3, #12]
    TxMessage.Data[2] = 0;
 8007668:	4b1c      	ldr	r3, [pc, #112]	; (80076dc <bsp_can_init+0x84>)
 800766a:	2200      	movs	r2, #0
 800766c:	735a      	strb	r2, [r3, #13]
    TxMessage.Data[3] = 0x44;
 800766e:	4b1b      	ldr	r3, [pc, #108]	; (80076dc <bsp_can_init+0x84>)
 8007670:	2244      	movs	r2, #68	; 0x44
 8007672:	739a      	strb	r2, [r3, #14]
    txHeader.DLC = 8;
 8007674:	4b1a      	ldr	r3, [pc, #104]	; (80076e0 <bsp_can_init+0x88>)
 8007676:	2208      	movs	r2, #8
 8007678:	611a      	str	r2, [r3, #16]
    txHeader.IDE = CAN_ID_STD;
 800767a:	4b19      	ldr	r3, [pc, #100]	; (80076e0 <bsp_can_init+0x88>)
 800767c:	2200      	movs	r2, #0
 800767e:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8007680:	4b17      	ldr	r3, [pc, #92]	; (80076e0 <bsp_can_init+0x88>)
 8007682:	2200      	movs	r2, #0
 8007684:	60da      	str	r2, [r3, #12]
    txHeader.StdId = 0x737;
 8007686:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <bsp_can_init+0x88>)
 8007688:	f240 7237 	movw	r2, #1847	; 0x737
 800768c:	601a      	str	r2, [r3, #0]
    
    txHeader.TransmitGlobalTime = DISABLE;
 800768e:	4b14      	ldr	r3, [pc, #80]	; (80076e0 <bsp_can_init+0x88>)
 8007690:	2200      	movs	r2, #0
 8007692:	751a      	strb	r2, [r3, #20]

    
	
  	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0; //set fifo assignment
 8007694:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <bsp_can_init+0x8c>)
 8007696:	2200      	movs	r2, #0
 8007698:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh=0x737; //the ID that the filter looks for (switch this for the other microcontroller)
 800769a:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <bsp_can_init+0x8c>)
 800769c:	f240 7237 	movw	r2, #1847	; 0x737
 80076a0:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow=0;
 80076a2:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <bsp_can_init+0x8c>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh=0;
 80076a8:	4b0e      	ldr	r3, [pc, #56]	; (80076e4 <bsp_can_init+0x8c>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow=0;
 80076ae:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <bsp_can_init+0x8c>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80076b4:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <bsp_can_init+0x8c>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation=ENABLE;
 80076ba:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <bsp_can_init+0x8c>)
 80076bc:	2201      	movs	r2, #1
 80076be:	621a      	str	r2, [r3, #32]
	
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configure CAN filter
 80076c0:	4908      	ldr	r1, [pc, #32]	; (80076e4 <bsp_can_init+0x8c>)
 80076c2:	4809      	ldr	r0, [pc, #36]	; (80076e8 <bsp_can_init+0x90>)
 80076c4:	f001 fc84 	bl	8008fd0 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan); //start CAN
 80076c8:	4807      	ldr	r0, [pc, #28]	; (80076e8 <bsp_can_init+0x90>)
 80076ca:	f001 fd4a 	bl	8009162 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 80076ce:	2102      	movs	r1, #2
 80076d0:	4805      	ldr	r0, [pc, #20]	; (80076e8 <bsp_can_init+0x90>)
 80076d2:	f001 ff7a 	bl	80095ca <HAL_CAN_ActivateNotification>

}
 80076d6:	bf00      	nop
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20000d78 	.word	0x20000d78
 80076e0:	20000d94 	.word	0x20000d94
 80076e4:	20000dac 	.word	0x20000dac
 80076e8:	200002b4 	.word	0x200002b4

080076ec <R_LED_On>:

extern LocalKeyType Local_Key;


void R_LED_On(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOE, E_LED_R, GPIO_PIN_RESET);
 80076f0:	2200      	movs	r2, #0
 80076f2:	2101      	movs	r1, #1
 80076f4:	4802      	ldr	r0, [pc, #8]	; (8007700 <R_LED_On+0x14>)
 80076f6:	f003 fb64 	bl	800adc2 <HAL_GPIO_WritePin>
}
 80076fa:	bf00      	nop
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	40011800 	.word	0x40011800

08007704 <R_LED_Off>:
void R_LED_Off(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOE, E_LED_R, GPIO_PIN_SET);
 8007708:	2201      	movs	r2, #1
 800770a:	2101      	movs	r1, #1
 800770c:	4802      	ldr	r0, [pc, #8]	; (8007718 <R_LED_Off+0x14>)
 800770e:	f003 fb58 	bl	800adc2 <HAL_GPIO_WritePin>
}
 8007712:	bf00      	nop
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	40011800 	.word	0x40011800

0800771c <G_LED_On>:
void R_LED_Toggle(void)
{
	HAL_GPIO_TogglePin(GPIOE, E_LED_R);
}
void G_LED_On(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOE, E_LED_G, GPIO_PIN_RESET);
 8007720:	2200      	movs	r2, #0
 8007722:	2102      	movs	r1, #2
 8007724:	4802      	ldr	r0, [pc, #8]	; (8007730 <G_LED_On+0x14>)
 8007726:	f003 fb4c 	bl	800adc2 <HAL_GPIO_WritePin>
}
 800772a:	bf00      	nop
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40011800 	.word	0x40011800

08007734 <G_LED_Off>:
void G_LED_Off(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, E_LED_G, GPIO_PIN_SET);
 8007738:	2201      	movs	r2, #1
 800773a:	2102      	movs	r1, #2
 800773c:	4802      	ldr	r0, [pc, #8]	; (8007748 <G_LED_Off+0x14>)
 800773e:	f003 fb40 	bl	800adc2 <HAL_GPIO_WritePin>
}
 8007742:	bf00      	nop
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	40011800 	.word	0x40011800

0800774c <G_LED_Toggle>:
void G_LED_Toggle(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOE, E_LED_G);
 8007750:	2102      	movs	r1, #2
 8007752:	4802      	ldr	r0, [pc, #8]	; (800775c <G_LED_Toggle+0x10>)
 8007754:	f003 fb4d 	bl	800adf2 <HAL_GPIO_TogglePin>
}
 8007758:	bf00      	nop
 800775a:	bd80      	pop	{r7, pc}
 800775c:	40011800 	.word	0x40011800

08007760 <B_LED_Off>:
void B_LED_On(void)
{
	HAL_GPIO_WritePin(GPIOB, B_LED_Y, GPIO_PIN_RESET);
}
void B_LED_Off(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, B_LED_Y, GPIO_PIN_SET);
 8007764:	2201      	movs	r2, #1
 8007766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800776a:	4802      	ldr	r0, [pc, #8]	; (8007774 <B_LED_Off+0x14>)
 800776c:	f003 fb29 	bl	800adc2 <HAL_GPIO_WritePin>
}
 8007770:	bf00      	nop
 8007772:	bd80      	pop	{r7, pc}
 8007774:	40010c00 	.word	0x40010c00

08007778 <bcon_On>:
void B_LED_Toggle(void)
{
	HAL_GPIO_TogglePin(GPIOB, B_LED_Y);
}
void bcon_On(uint8_t bcon_no)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
  if((bcon_no & 0x01) == 0x01)
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <bcon_On+0x20>
	HAL_GPIO_WritePin(GPIOC, C_BEACON_R, GPIO_PIN_SET);
 800778c:	2201      	movs	r2, #1
 800778e:	2120      	movs	r1, #32
 8007790:	481e      	ldr	r0, [pc, #120]	; (800780c <bcon_On+0x94>)
 8007792:	f003 fb16 	bl	800adc2 <HAL_GPIO_WritePin>
 8007796:	e004      	b.n	80077a2 <bcon_On+0x2a>
  else
	HAL_GPIO_WritePin(GPIOC, C_BEACON_R, GPIO_PIN_RESET);
 8007798:	2200      	movs	r2, #0
 800779a:	2120      	movs	r1, #32
 800779c:	481b      	ldr	r0, [pc, #108]	; (800780c <bcon_On+0x94>)
 800779e:	f003 fb10 	bl	800adc2 <HAL_GPIO_WritePin>
  if((bcon_no & 0x02) == 0x02)
 80077a2:	79fb      	ldrb	r3, [r7, #7]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <bcon_On+0x40>
	HAL_GPIO_WritePin(GPIOB, B_BEACON_G, GPIO_PIN_SET);
 80077ac:	2201      	movs	r2, #1
 80077ae:	2101      	movs	r1, #1
 80077b0:	4817      	ldr	r0, [pc, #92]	; (8007810 <bcon_On+0x98>)
 80077b2:	f003 fb06 	bl	800adc2 <HAL_GPIO_WritePin>
 80077b6:	e004      	b.n	80077c2 <bcon_On+0x4a>
  else
	HAL_GPIO_WritePin(GPIOB, B_BEACON_G, GPIO_PIN_RESET);
 80077b8:	2200      	movs	r2, #0
 80077ba:	2101      	movs	r1, #1
 80077bc:	4814      	ldr	r0, [pc, #80]	; (8007810 <bcon_On+0x98>)
 80077be:	f003 fb00 	bl	800adc2 <HAL_GPIO_WritePin>
  if((bcon_no & 0x04) == 0x04)
 80077c2:	79fb      	ldrb	r3, [r7, #7]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <bcon_On+0x60>
	HAL_GPIO_WritePin(GPIOB, B_BEACON_B, GPIO_PIN_SET);
 80077cc:	2201      	movs	r2, #1
 80077ce:	2102      	movs	r1, #2
 80077d0:	480f      	ldr	r0, [pc, #60]	; (8007810 <bcon_On+0x98>)
 80077d2:	f003 faf6 	bl	800adc2 <HAL_GPIO_WritePin>
 80077d6:	e004      	b.n	80077e2 <bcon_On+0x6a>
  else
	HAL_GPIO_WritePin(GPIOB, B_BEACON_B, GPIO_PIN_RESET);
 80077d8:	2200      	movs	r2, #0
 80077da:	2102      	movs	r1, #2
 80077dc:	480c      	ldr	r0, [pc, #48]	; (8007810 <bcon_On+0x98>)
 80077de:	f003 faf0 	bl	800adc2 <HAL_GPIO_WritePin>
  if((bcon_no & 0x08) == 0x08)
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <bcon_On+0x80>
	HAL_GPIO_WritePin(GPIOA, A_BUZZER, GPIO_PIN_SET);
 80077ec:	2201      	movs	r2, #1
 80077ee:	2140      	movs	r1, #64	; 0x40
 80077f0:	4808      	ldr	r0, [pc, #32]	; (8007814 <bcon_On+0x9c>)
 80077f2:	f003 fae6 	bl	800adc2 <HAL_GPIO_WritePin>
  else
	HAL_GPIO_WritePin(GPIOA, A_BUZZER, GPIO_PIN_RESET);
}
 80077f6:	e004      	b.n	8007802 <bcon_On+0x8a>
	HAL_GPIO_WritePin(GPIOA, A_BUZZER, GPIO_PIN_RESET);
 80077f8:	2200      	movs	r2, #0
 80077fa:	2140      	movs	r1, #64	; 0x40
 80077fc:	4805      	ldr	r0, [pc, #20]	; (8007814 <bcon_On+0x9c>)
 80077fe:	f003 fae0 	bl	800adc2 <HAL_GPIO_WritePin>
}
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40011000 	.word	0x40011000
 8007810:	40010c00 	.word	0x40010c00
 8007814:	40010800 	.word	0x40010800

08007818 <Battery_Check>:
	HAL_GPIO_WritePin(GPIOA, A_BUZZER, GPIO_PIN_RESET);
}

//
void Battery_Check()
{
 8007818:	b590      	push	{r4, r7, lr}
 800781a:	b083      	sub	sp, #12
 800781c:	af02      	add	r7, sp, #8
  if(u16_DebugFlag == 2)
 800781e:	4b40      	ldr	r3, [pc, #256]	; (8007920 <Battery_Check+0x108>)
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d11e      	bne.n	8007864 <Battery_Check+0x4c>
  {
    cliPrintf("\n Battery : ADC[%0d] Voltage[%.1f]",ADC_Battery,V_Battery);
 8007826:	4b3f      	ldr	r3, [pc, #252]	; (8007924 <Battery_Check+0x10c>)
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	461c      	mov	r4, r3
 800782c:	4b3e      	ldr	r3, [pc, #248]	; (8007928 <Battery_Check+0x110>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4618      	mov	r0, r3
 8007832:	f7f8 fe6f 	bl	8000514 <__aeabi_f2d>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4621      	mov	r1, r4
 800783c:	483b      	ldr	r0, [pc, #236]	; (800792c <Battery_Check+0x114>)
 800783e:	f7fc fa09 	bl	8003c54 <cliPrintf>
    cliPrintf("\n RFR_Volume : ADC[%0d] Voltage[%.1f] DRV_SPD[%0d]",ADC_RFRVolume,V_RFRVolume,DRV_Speed);
 8007842:	4b3b      	ldr	r3, [pc, #236]	; (8007930 <Battery_Check+0x118>)
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	461c      	mov	r4, r3
 8007848:	4b3a      	ldr	r3, [pc, #232]	; (8007934 <Battery_Check+0x11c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4618      	mov	r0, r3
 800784e:	f7f8 fe61 	bl	8000514 <__aeabi_f2d>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4938      	ldr	r1, [pc, #224]	; (8007938 <Battery_Check+0x120>)
 8007858:	7809      	ldrb	r1, [r1, #0]
 800785a:	9100      	str	r1, [sp, #0]
 800785c:	4621      	mov	r1, r4
 800785e:	4837      	ldr	r0, [pc, #220]	; (800793c <Battery_Check+0x124>)
 8007860:	f7fc f9f8 	bl	8003c54 <cliPrintf>
  }
  if(V_Battery < DisCharge_bat_limit)
 8007864:	4b30      	ldr	r3, [pc, #192]	; (8007928 <Battery_Check+0x110>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a35      	ldr	r2, [pc, #212]	; (8007940 <Battery_Check+0x128>)
 800786a:	6812      	ldr	r2, [r2, #0]
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f7f9 fc74 	bl	800115c <__aeabi_fcmplt>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d031      	beq.n	80078de <Battery_Check+0xc6>
  {							/* All 모터 Stop이 되면, 다시 전원이 상승해 해제 된다. */
	++LowBat_Cnt;
 800787a:	4b32      	ldr	r3, [pc, #200]	; (8007944 <Battery_Check+0x12c>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	3301      	adds	r3, #1
 8007880:	b2da      	uxtb	r2, r3
 8007882:	4b30      	ldr	r3, [pc, #192]	; (8007944 <Battery_Check+0x12c>)
 8007884:	701a      	strb	r2, [r3, #0]
	if(LowBat_Cnt >= 5)
 8007886:	4b2f      	ldr	r3, [pc, #188]	; (8007944 <Battery_Check+0x12c>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b04      	cmp	r3, #4
 800788c:	d943      	bls.n	8007916 <Battery_Check+0xfe>
	{
		LowBat_Cnt = 5;
 800788e:	4b2d      	ldr	r3, [pc, #180]	; (8007944 <Battery_Check+0x12c>)
 8007890:	2205      	movs	r2, #5
 8007892:	701a      	strb	r2, [r3, #0]
#if _LOWBAT_MASK  		
		if((uSysStatusFlag & f_LowBat) == 0)
 8007894:	4b2c      	ldr	r3, [pc, #176]	; (8007948 <Battery_Check+0x130>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d13a      	bne.n	8007916 <Battery_Check+0xfe>
		{
			uSysStatusFlag |= f_LowBat;
 80078a0:	4b29      	ldr	r3, [pc, #164]	; (8007948 <Battery_Check+0x130>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078a8:	4a27      	ldr	r2, [pc, #156]	; (8007948 <Battery_Check+0x130>)
 80078aa:	6013      	str	r3, [r2, #0]
			if(LKAUTOSeq)
 80078ac:	4b27      	ldr	r3, [pc, #156]	; (800794c <Battery_Check+0x134>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <Battery_Check+0xa2>
			{
				LKAUTOSeq = 0;
 80078b4:	4b25      	ldr	r3, [pc, #148]	; (800794c <Battery_Check+0x134>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
			} 
			all_MotorStop();			
 80078ba:	f7ff fa3d 	bl	8006d38 <all_MotorStop>
			if(u16_DebugFlag == 2)
 80078be:	4b18      	ldr	r3, [pc, #96]	; (8007920 <Battery_Check+0x108>)
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d127      	bne.n	8007916 <Battery_Check+0xfe>
			{
				cliPrintf("  ! LOW V. ![%0x]",uSysStatusFlag & f_LowBat);
 80078c6:	4b20      	ldr	r3, [pc, #128]	; (8007948 <Battery_Check+0x130>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078ce:	4619      	mov	r1, r3
 80078d0:	481f      	ldr	r0, [pc, #124]	; (8007950 <Battery_Check+0x138>)
 80078d2:	f7fc f9bf 	bl	8003c54 <cliPrintf>
				u16_DebugFlag = 0;
 80078d6:	4b12      	ldr	r3, [pc, #72]	; (8007920 <Battery_Check+0x108>)
 80078d8:	2200      	movs	r2, #0
 80078da:	801a      	strh	r2, [r3, #0]
  }
/* RFR Volume Check */
#if 0
  cliPrintf("\n RFR_Volume : ADC[%0d] Voltage[%.1f] DRV_SPD[%0d]",ADC_RFRVolume,V_RFRVolume,DRV_Speed);
#endif
}
 80078dc:	e01b      	b.n	8007916 <Battery_Check+0xfe>
	if(uSysStatusFlag & f_LowBat)
 80078de:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <Battery_Check+0x130>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d012      	beq.n	8007910 <Battery_Check+0xf8>
		if(V_Battery > Idle_bat_limit)
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <Battery_Check+0x110>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a19      	ldr	r2, [pc, #100]	; (8007954 <Battery_Check+0x13c>)
 80078f0:	6812      	ldr	r2, [r2, #0]
 80078f2:	4611      	mov	r1, r2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7f9 fc4f 	bl	8001198 <__aeabi_fcmpgt>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d100      	bne.n	8007902 <Battery_Check+0xea>
}
 8007900:	e009      	b.n	8007916 <Battery_Check+0xfe>
			uSysStatusFlag &= ~f_LowBat;
 8007902:	4b11      	ldr	r3, [pc, #68]	; (8007948 <Battery_Check+0x130>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800790a:	4a0f      	ldr	r2, [pc, #60]	; (8007948 <Battery_Check+0x130>)
 800790c:	6013      	str	r3, [r2, #0]
}
 800790e:	e002      	b.n	8007916 <Battery_Check+0xfe>
		LowBat_Cnt = 0;
 8007910:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <Battery_Check+0x12c>)
 8007912:	2200      	movs	r2, #0
 8007914:	701a      	strb	r2, [r3, #0]
}
 8007916:	bf00      	nop
 8007918:	3704      	adds	r7, #4
 800791a:	46bd      	mov	sp, r7
 800791c:	bd90      	pop	{r4, r7, pc}
 800791e:	bf00      	nop
 8007920:	20000d08 	.word	0x20000d08
 8007924:	20000d0e 	.word	0x20000d0e
 8007928:	20000034 	.word	0x20000034
 800792c:	08012d98 	.word	0x08012d98
 8007930:	20000d10 	.word	0x20000d10
 8007934:	20000d14 	.word	0x20000d14
 8007938:	20000038 	.word	0x20000038
 800793c:	08012dbc 	.word	0x08012dbc
 8007940:	20000dd8 	.word	0x20000dd8
 8007944:	20000d38 	.word	0x20000d38
 8007948:	20000cf8 	.word	0x20000cf8
 800794c:	20000d59 	.word	0x20000d59
 8007950:	08012df0 	.word	0x08012df0
 8007954:	20000dd4 	.word	0x20000dd4

08007958 <Port_ReadACT>:
uint32_t PC_Data;
uint32_t Temp_Data;


void Port_ReadACT() // limit SW ?
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0

	#if 1 
	if(load_value.Sensor_type == 1)
 800795c:	4b56      	ldr	r3, [pc, #344]	; (8007ab8 <Port_ReadACT+0x160>)
 800795e:	785b      	ldrb	r3, [r3, #1]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d106      	bne.n	8007972 <Port_ReadACT+0x1a>
	{
		PC_Data = GPIOC->IDR & 0x001F ;	  
 8007964:	4b55      	ldr	r3, [pc, #340]	; (8007abc <Port_ReadACT+0x164>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f003 031f 	and.w	r3, r3, #31
 800796c:	4a54      	ldr	r2, [pc, #336]	; (8007ac0 <Port_ReadACT+0x168>)
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	e00b      	b.n	800798a <Port_ReadACT+0x32>
	}	
	else 
	{
		Temp_Data = GPIOC->IDR & 0x001F ;	  
 8007972:	4b52      	ldr	r3, [pc, #328]	; (8007abc <Port_ReadACT+0x164>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f003 031f 	and.w	r3, r3, #31
 800797a:	4a52      	ldr	r2, [pc, #328]	; (8007ac4 <Port_ReadACT+0x16c>)
 800797c:	6013      	str	r3, [r2, #0]
		PC_Data = Temp_Data^0x001B; 
 800797e:	4b51      	ldr	r3, [pc, #324]	; (8007ac4 <Port_ReadACT+0x16c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f083 031b 	eor.w	r3, r3, #27
 8007986:	4a4e      	ldr	r2, [pc, #312]	; (8007ac0 <Port_ReadACT+0x168>)
 8007988:	6013      	str	r3, [r2, #0]
	}	

	#endif 

	if(PC_Data & 0x0001)
 800798a:	4b4d      	ldr	r3, [pc, #308]	; (8007ac0 <Port_ReadACT+0x168>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d013      	beq.n	80079be <Port_ReadACT+0x66>
	{
		if((uSysStatusFlag & f_LimitRight) == 0)
 8007996:	4b4c      	ldr	r3, [pc, #304]	; (8007ac8 <Port_ReadACT+0x170>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10d      	bne.n	80079be <Port_ReadACT+0x66>
		{
			str_MotorLimitStop();
 80079a2:	f7ff faff 	bl	8006fa4 <str_MotorLimitStop>
			uSysStatusFlag &= ~f_LimitLeft;
 80079a6:	4b48      	ldr	r3, [pc, #288]	; (8007ac8 <Port_ReadACT+0x170>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079ae:	4a46      	ldr	r2, [pc, #280]	; (8007ac8 <Port_ReadACT+0x170>)
 80079b0:	6013      	str	r3, [r2, #0]
			uSysStatusFlag |= f_LimitRight;
 80079b2:	4b45      	ldr	r3, [pc, #276]	; (8007ac8 <Port_ReadACT+0x170>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079ba:	4a43      	ldr	r2, [pc, #268]	; (8007ac8 <Port_ReadACT+0x170>)
 80079bc:	6013      	str	r3, [r2, #0]
		}
	}
	//
	if(PC_Data & 0x0002)
 80079be:	4b40      	ldr	r3, [pc, #256]	; (8007ac0 <Port_ReadACT+0x168>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d013      	beq.n	80079f2 <Port_ReadACT+0x9a>
	{
		if((uSysStatusFlag & f_LimitLeft) == 0)
 80079ca:	4b3f      	ldr	r3, [pc, #252]	; (8007ac8 <Port_ReadACT+0x170>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10d      	bne.n	80079f2 <Port_ReadACT+0x9a>
		{
			str_MotorLimitStop();
 80079d6:	f7ff fae5 	bl	8006fa4 <str_MotorLimitStop>
			uSysStatusFlag &= ~f_LimitRight;
 80079da:	4b3b      	ldr	r3, [pc, #236]	; (8007ac8 <Port_ReadACT+0x170>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079e2:	4a39      	ldr	r2, [pc, #228]	; (8007ac8 <Port_ReadACT+0x170>)
 80079e4:	6013      	str	r3, [r2, #0]
			uSysStatusFlag |= f_LimitLeft;
 80079e6:	4b38      	ldr	r3, [pc, #224]	; (8007ac8 <Port_ReadACT+0x170>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079ee:	4a36      	ldr	r2, [pc, #216]	; (8007ac8 <Port_ReadACT+0x170>)
 80079f0:	6013      	str	r3, [r2, #0]
		}
	}

	if((PC_Data & 0x0003) == 0)
 80079f2:	4b33      	ldr	r3, [pc, #204]	; (8007ac0 <Port_ReadACT+0x168>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <Port_ReadACT+0xbe>
	{
		uSysStatusFlag &= ~f_LimitRight;
 80079fe:	4b32      	ldr	r3, [pc, #200]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a06:	4a30      	ldr	r2, [pc, #192]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a08:	6013      	str	r3, [r2, #0]
		uSysStatusFlag &= ~f_LimitLeft;
 8007a0a:	4b2f      	ldr	r3, [pc, #188]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a12:	4a2d      	ldr	r2, [pc, #180]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a14:	6013      	str	r3, [r2, #0]
	}

	if(PC_Data & 0x0010)	/* Center Check  CENTER는 기구 형상이 반대임 */
 8007a16:	4b2a      	ldr	r3, [pc, #168]	; (8007ac0 <Port_ReadACT+0x168>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0310 	and.w	r3, r3, #16
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00c      	beq.n	8007a3c <Port_ReadACT+0xe4>
	{
		if(uSysStatusFlag & f_LimitCenter) 
 8007a22:	4b29      	ldr	r3, [pc, #164]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d012      	beq.n	8007a54 <Port_ReadACT+0xfc>
		{
			uSysStatusFlag &= ~f_LimitCenter;
 8007a2e:	4b26      	ldr	r3, [pc, #152]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a36:	4a24      	ldr	r2, [pc, #144]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	e00b      	b.n	8007a54 <Port_ReadACT+0xfc>
		}
	}
	else
	{
		if((uSysStatusFlag & f_LimitCenter) == 0)
 8007a3c:	4b22      	ldr	r3, [pc, #136]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d105      	bne.n	8007a54 <Port_ReadACT+0xfc>
		{
			uSysStatusFlag |= f_LimitCenter;
 8007a48:	4b1f      	ldr	r3, [pc, #124]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a50:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a52:	6013      	str	r3, [r2, #0]
		}
	}

	if(PC_Data & 0x0004)				/* 0000 0100*/ //범퍼 	
 8007a54:	4b1a      	ldr	r3, [pc, #104]	; (8007ac0 <Port_ReadACT+0x168>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01f      	beq.n	8007aa0 <Port_ReadACT+0x148>
	{
		if((uSysStatusFlag & f_Crash) == 0)
 8007a60:	4b19      	ldr	r3, [pc, #100]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d122      	bne.n	8007ab2 <Port_ReadACT+0x15a>
		{
			--crash_Cnt;			/* 22012	2 */
 8007a6c:	4b17      	ldr	r3, [pc, #92]	; (8007acc <Port_ReadACT+0x174>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	4b15      	ldr	r3, [pc, #84]	; (8007acc <Port_ReadACT+0x174>)
 8007a76:	701a      	strb	r2, [r3, #0]
			if(crash_Cnt == 0)
 8007a78:	4b14      	ldr	r3, [pc, #80]	; (8007acc <Port_ReadACT+0x174>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d118      	bne.n	8007ab2 <Port_ReadACT+0x15a>
			{
				uSysStatusFlag |= f_Crash;
 8007a80:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a88:	4a0f      	ldr	r2, [pc, #60]	; (8007ac8 <Port_ReadACT+0x170>)
 8007a8a:	6013      	str	r3, [r2, #0]
				if(LKAUTOSeq) 
 8007a8c:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <Port_ReadACT+0x178>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <Port_ReadACT+0x142>
					LKAUTOSeq = 0;
 8007a94:	4b0e      	ldr	r3, [pc, #56]	; (8007ad0 <Port_ReadACT+0x178>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	701a      	strb	r2, [r3, #0]
				
				all_MotorStop();
 8007a9a:	f7ff f94d 	bl	8006d38 <all_MotorStop>
	else
	{
		uSysStatusFlag &= ~f_Crash;
		crash_Cnt = 50;				/* 220122 */
	}
}
 8007a9e:	e008      	b.n	8007ab2 <Port_ReadACT+0x15a>
		uSysStatusFlag &= ~f_Crash;
 8007aa0:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <Port_ReadACT+0x170>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aa8:	4a07      	ldr	r2, [pc, #28]	; (8007ac8 <Port_ReadACT+0x170>)
 8007aaa:	6013      	str	r3, [r2, #0]
		crash_Cnt = 50;				/* 220122 */
 8007aac:	4b07      	ldr	r3, [pc, #28]	; (8007acc <Port_ReadACT+0x174>)
 8007aae:	2232      	movs	r2, #50	; 0x32
 8007ab0:	701a      	strb	r2, [r3, #0]
}
 8007ab2:	bf00      	nop
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000ddc 	.word	0x20000ddc
 8007abc:	40011000 	.word	0x40011000
 8007ac0:	20000de8 	.word	0x20000de8
 8007ac4:	20000dec 	.word	0x20000dec
 8007ac8:	20000cf8 	.word	0x20000cf8
 8007acc:	20000d58 	.word	0x20000d58
 8007ad0:	20000d59 	.word	0x20000d59

08007ad4 <Bcon_Control>:
uint32_t Bcon_dly;
uint8_t toggle_flag = 0;


void Bcon_Control()
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  if(uSysStatusFlag & f_LowBat)
 8007ad8:	4b9a      	ldr	r3, [pc, #616]	; (8007d44 <Bcon_Control+0x270>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <Bcon_Control+0x18>
  {
	  bcon_Req = bcon_R | bcon_B | bcon_BZ;
 8007ae4:	4b98      	ldr	r3, [pc, #608]	; (8007d48 <Bcon_Control+0x274>)
 8007ae6:	220b      	movs	r2, #11
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	e126      	b.n	8007d3a <Bcon_Control+0x266>
  }
  else if(uSysStatusFlag & f_RFR_Emergency)
 8007aec:	4b95      	ldr	r3, [pc, #596]	; (8007d44 <Bcon_Control+0x270>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d026      	beq.n	8007b46 <Bcon_Control+0x72>
  {
    if(LKAUTOSeq  >= 4)
 8007af8:	4b94      	ldr	r3, [pc, #592]	; (8007d4c <Bcon_Control+0x278>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d91e      	bls.n	8007b3e <Bcon_Control+0x6a>
    {
      bcon_Req = bcon_R;
 8007b00:	4b91      	ldr	r3, [pc, #580]	; (8007d48 <Bcon_Control+0x274>)
 8007b02:	2201      	movs	r2, #1
 8007b04:	701a      	strb	r2, [r3, #0]
      if(LKAUTOSeq >= 7)
 8007b06:	4b91      	ldr	r3, [pc, #580]	; (8007d4c <Bcon_Control+0x278>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b06      	cmp	r3, #6
 8007b0c:	d902      	bls.n	8007b14 <Bcon_Control+0x40>
      {
        bcon_Req = bcon_G;
 8007b0e:	4b8e      	ldr	r3, [pc, #568]	; (8007d48 <Bcon_Control+0x274>)
 8007b10:	2204      	movs	r2, #4
 8007b12:	701a      	strb	r2, [r3, #0]
      }
      if(uSysStatusFlag & f_ALLWLEmpty)
 8007b14:	4b8b      	ldr	r3, [pc, #556]	; (8007d44 <Bcon_Control+0x270>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 810c 	beq.w	8007d3a <Bcon_Control+0x266>
        {
        bcon_Req = bcon_B | bcon_G;						/* Cyan */
 8007b22:	4b89      	ldr	r3, [pc, #548]	; (8007d48 <Bcon_Control+0x274>)
 8007b24:	2206      	movs	r2, #6
 8007b26:	701a      	strb	r2, [r3, #0]
        if(uSysStatusFlag & f_WTEmptBuzReq)
 8007b28:	4b86      	ldr	r3, [pc, #536]	; (8007d44 <Bcon_Control+0x270>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 8102 	beq.w	8007d3a <Bcon_Control+0x266>
          bcon_Req = bcon_B | bcon_G | bcon_BZ;		/* Cyan + Buzzer */	
 8007b36:	4b84      	ldr	r3, [pc, #528]	; (8007d48 <Bcon_Control+0x274>)
 8007b38:	220e      	movs	r2, #14
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	e0fd      	b.n	8007d3a <Bcon_Control+0x266>
        }		
    }
	else
		bcon_Req = bcon_R | bcon_BZ;
 8007b3e:	4b82      	ldr	r3, [pc, #520]	; (8007d48 <Bcon_Control+0x274>)
 8007b40:	2209      	movs	r2, #9
 8007b42:	701a      	strb	r2, [r3, #0]
 8007b44:	e0f9      	b.n	8007d3a <Bcon_Control+0x266>
  }
  else if(uSysStatusFlag & f_Crash)
 8007b46:	4b7f      	ldr	r3, [pc, #508]	; (8007d44 <Bcon_Control+0x270>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <Bcon_Control+0x86>
  {
	bcon_Req = bcon_B | bcon_BZ;
 8007b52:	4b7d      	ldr	r3, [pc, #500]	; (8007d48 <Bcon_Control+0x274>)
 8007b54:	220a      	movs	r2, #10
 8007b56:	701a      	strb	r2, [r3, #0]
 8007b58:	e0ef      	b.n	8007d3a <Bcon_Control+0x266>
  }
  else if(uSysStatusFlag & f_ALLWLEmpty)
 8007b5a:	4b7a      	ldr	r3, [pc, #488]	; (8007d44 <Bcon_Control+0x270>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d07a      	beq.n	8007c5c <Bcon_Control+0x188>
  {
	
	if(uSysStatusFlag & f_WTEmptBuzReq)
 8007b66:	4b77      	ldr	r3, [pc, #476]	; (8007d44 <Bcon_Control+0x270>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <Bcon_Control+0xa4>
	{
		bcon_Req = bcon_B | bcon_G | bcon_BZ;		/* Cyan + Buzzer */	
 8007b72:	4b75      	ldr	r3, [pc, #468]	; (8007d48 <Bcon_Control+0x274>)
 8007b74:	220e      	movs	r2, #14
 8007b76:	701a      	strb	r2, [r3, #0]
	}
	if ( load_value.rtk_type == 1) 
 8007b78:	4b75      	ldr	r3, [pc, #468]	; (8007d50 <Bcon_Control+0x27c>)
 8007b7a:	7a1b      	ldrb	r3, [r3, #8]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d169      	bne.n	8007c54 <Bcon_Control+0x180>
	{
		if ( RTK_state == 1 ) /* 물없고 RTK OK */ 
 8007b80:	4b74      	ldr	r3, [pc, #464]	; (8007d54 <Bcon_Control+0x280>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d127      	bne.n	8007bd8 <Bcon_Control+0x104>
		{
			if ( !Bcon_dly )
 8007b88:	4b73      	ldr	r3, [pc, #460]	; (8007d58 <Bcon_Control+0x284>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10b      	bne.n	8007ba8 <Bcon_Control+0xd4>
			{
				uSysStatusFlag &= ~a_NotCondition;
 8007b90:	4b6c      	ldr	r3, [pc, #432]	; (8007d44 <Bcon_Control+0x270>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007b98:	4a6a      	ldr	r2, [pc, #424]	; (8007d44 <Bcon_Control+0x270>)
 8007b9a:	6013      	str	r3, [r2, #0]
				uSysStatusFlag &= ~a_Auto_Ready;
 8007b9c:	4b69      	ldr	r3, [pc, #420]	; (8007d44 <Bcon_Control+0x270>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007ba4:	4a67      	ldr	r2, [pc, #412]	; (8007d44 <Bcon_Control+0x270>)
 8007ba6:	6013      	str	r3, [r2, #0]
			}
			if (uSysStatusFlag & a_NotCondition )
 8007ba8:	4b66      	ldr	r3, [pc, #408]	; (8007d44 <Bcon_Control+0x270>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <Bcon_Control+0xe8>
			{
				bcon_Req = bcon_R| bcon_G | bcon_BZ;
 8007bb4:	4b64      	ldr	r3, [pc, #400]	; (8007d48 <Bcon_Control+0x274>)
 8007bb6:	220d      	movs	r2, #13
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e0be      	b.n	8007d3a <Bcon_Control+0x266>
			}
			else if( uSysStatusFlag & a_Auto_Ready)
 8007bbc:	4b61      	ldr	r3, [pc, #388]	; (8007d44 <Bcon_Control+0x270>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <Bcon_Control+0xfc>
			{
				bcon_Req = bcon_G | bcon_BZ;
 8007bc8:	4b5f      	ldr	r3, [pc, #380]	; (8007d48 <Bcon_Control+0x274>)
 8007bca:	220c      	movs	r2, #12
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	e0b4      	b.n	8007d3a <Bcon_Control+0x266>
			}
			
			else 
			{
				bcon_Req = bcon_B | bcon_G;
 8007bd0:	4b5d      	ldr	r3, [pc, #372]	; (8007d48 <Bcon_Control+0x274>)
 8007bd2:	2206      	movs	r2, #6
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	e0b0      	b.n	8007d3a <Bcon_Control+0x266>
			
		}
		else /* 물없고 RTK NONE */ 
		{

			if ( not_ready_flag & F_DRV_REQ)
 8007bd8:	4b60      	ldr	r3, [pc, #384]	; (8007d5c <Bcon_Control+0x288>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d015      	beq.n	8007c10 <Bcon_Control+0x13c>
			{
				
				bcon_Req = bcon_R| bcon_G | bcon_BZ;
 8007be4:	4b58      	ldr	r3, [pc, #352]	; (8007d48 <Bcon_Control+0x274>)
 8007be6:	220d      	movs	r2, #13
 8007be8:	701a      	strb	r2, [r3, #0]
				if (!Bcon_dly)
 8007bea:	4b5b      	ldr	r3, [pc, #364]	; (8007d58 <Bcon_Control+0x284>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f040 80a3 	bne.w	8007d3a <Bcon_Control+0x266>
				{
					not_ready_flag &= ~F_DRV_REQ;
 8007bf4:	4b59      	ldr	r3, [pc, #356]	; (8007d5c <Bcon_Control+0x288>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	f023 030f 	bic.w	r3, r3, #15
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	4b57      	ldr	r3, [pc, #348]	; (8007d5c <Bcon_Control+0x288>)
 8007c00:	701a      	strb	r2, [r3, #0]
					uSysStatusFlag &= ~a_NotCondition;
 8007c02:	4b50      	ldr	r3, [pc, #320]	; (8007d44 <Bcon_Control+0x270>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007c0a:	4a4e      	ldr	r2, [pc, #312]	; (8007d44 <Bcon_Control+0x270>)
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	e094      	b.n	8007d3a <Bcon_Control+0x266>
				}
			}
			else
			{	
				if ( !Bcon_dly  )
 8007c10:	4b51      	ldr	r3, [pc, #324]	; (8007d58 <Bcon_Control+0x284>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f040 8090 	bne.w	8007d3a <Bcon_Control+0x266>
				{
					
					if ( toggle_flag == 0)
 8007c1a:	4b51      	ldr	r3, [pc, #324]	; (8007d60 <Bcon_Control+0x28c>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10d      	bne.n	8007c3e <Bcon_Control+0x16a>
					{
						bcon_Req = bcon_B | bcon_G;						/* 물없을때, 일반상태 */ 
 8007c22:	4b49      	ldr	r3, [pc, #292]	; (8007d48 <Bcon_Control+0x274>)
 8007c24:	2206      	movs	r2, #6
 8007c26:	701a      	strb	r2, [r3, #0]
						Bcon_dly = 1000;
 8007c28:	4b4b      	ldr	r3, [pc, #300]	; (8007d58 <Bcon_Control+0x284>)
 8007c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c2e:	601a      	str	r2, [r3, #0]
						toggle_flag++;
 8007c30:	4b4b      	ldr	r3, [pc, #300]	; (8007d60 <Bcon_Control+0x28c>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	3301      	adds	r3, #1
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	4b49      	ldr	r3, [pc, #292]	; (8007d60 <Bcon_Control+0x28c>)
 8007c3a:	701a      	strb	r2, [r3, #0]
 8007c3c:	e07d      	b.n	8007d3a <Bcon_Control+0x266>
					}
					else
					{
						bcon_Req = bcon_R| bcon_G; // 노랑 
 8007c3e:	4b42      	ldr	r3, [pc, #264]	; (8007d48 <Bcon_Control+0x274>)
 8007c40:	2205      	movs	r2, #5
 8007c42:	701a      	strb	r2, [r3, #0]
						Bcon_dly = 1000;
 8007c44:	4b44      	ldr	r3, [pc, #272]	; (8007d58 <Bcon_Control+0x284>)
 8007c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c4a:	601a      	str	r2, [r3, #0]
						toggle_flag = 0;
 8007c4c:	4b44      	ldr	r3, [pc, #272]	; (8007d60 <Bcon_Control+0x28c>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	e072      	b.n	8007d3a <Bcon_Control+0x266>
			
		}
	}
	else 
	{
		bcon_Req = bcon_B | bcon_G;
 8007c54:	4b3c      	ldr	r3, [pc, #240]	; (8007d48 <Bcon_Control+0x274>)
 8007c56:	2206      	movs	r2, #6
 8007c58:	701a      	strb	r2, [r3, #0]
 8007c5a:	e06e      	b.n	8007d3a <Bcon_Control+0x266>
	}
  }
  else
  {	/* Normal Status */
	if ( load_value.rtk_type == 1)
 8007c5c:	4b3c      	ldr	r3, [pc, #240]	; (8007d50 <Bcon_Control+0x27c>)
 8007c5e:	7a1b      	ldrb	r3, [r3, #8]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d167      	bne.n	8007d34 <Bcon_Control+0x260>
	{
		if ( RTK_state == 1 ) /* 물있고 RTK OK */ 
 8007c64:	4b3b      	ldr	r3, [pc, #236]	; (8007d54 <Bcon_Control+0x280>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d127      	bne.n	8007cbc <Bcon_Control+0x1e8>
		{
			if ( !Bcon_dly )
 8007c6c:	4b3a      	ldr	r3, [pc, #232]	; (8007d58 <Bcon_Control+0x284>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10b      	bne.n	8007c8c <Bcon_Control+0x1b8>
			{
				uSysStatusFlag &= ~a_NotCondition;
 8007c74:	4b33      	ldr	r3, [pc, #204]	; (8007d44 <Bcon_Control+0x270>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007c7c:	4a31      	ldr	r2, [pc, #196]	; (8007d44 <Bcon_Control+0x270>)
 8007c7e:	6013      	str	r3, [r2, #0]
				uSysStatusFlag &= ~a_Auto_Ready;
 8007c80:	4b30      	ldr	r3, [pc, #192]	; (8007d44 <Bcon_Control+0x270>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c88:	4a2e      	ldr	r2, [pc, #184]	; (8007d44 <Bcon_Control+0x270>)
 8007c8a:	6013      	str	r3, [r2, #0]
			}
			if (uSysStatusFlag & a_NotCondition )
 8007c8c:	4b2d      	ldr	r3, [pc, #180]	; (8007d44 <Bcon_Control+0x270>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <Bcon_Control+0x1cc>
			{
				bcon_Req = bcon_R| bcon_G | bcon_BZ;
 8007c98:	4b2b      	ldr	r3, [pc, #172]	; (8007d48 <Bcon_Control+0x274>)
 8007c9a:	220d      	movs	r2, #13
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	e04c      	b.n	8007d3a <Bcon_Control+0x266>
			}
			else if( uSysStatusFlag & a_Auto_Ready)
 8007ca0:	4b28      	ldr	r3, [pc, #160]	; (8007d44 <Bcon_Control+0x270>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <Bcon_Control+0x1e0>
			{
				bcon_Req = bcon_G | bcon_BZ;
 8007cac:	4b26      	ldr	r3, [pc, #152]	; (8007d48 <Bcon_Control+0x274>)
 8007cae:	220c      	movs	r2, #12
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	e042      	b.n	8007d3a <Bcon_Control+0x266>
			}
			else 
			{
				bcon_Req = bcon_G;
 8007cb4:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <Bcon_Control+0x274>)
 8007cb6:	2204      	movs	r2, #4
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	e03e      	b.n	8007d3a <Bcon_Control+0x266>

			// 여기서 자율항상 시작 물있고 다 정상일때.
		}
		else /* 물있고 RTK NONE */ 
		{
			if ( not_ready_flag & F_DRV_REQ)
 8007cbc:	4b27      	ldr	r3, [pc, #156]	; (8007d5c <Bcon_Control+0x288>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	f003 030f 	and.w	r3, r3, #15
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d014      	beq.n	8007cf2 <Bcon_Control+0x21e>
			{
				
				bcon_Req = bcon_R| bcon_G | bcon_BZ;
 8007cc8:	4b1f      	ldr	r3, [pc, #124]	; (8007d48 <Bcon_Control+0x274>)
 8007cca:	220d      	movs	r2, #13
 8007ccc:	701a      	strb	r2, [r3, #0]
				if (!Bcon_dly)
 8007cce:	4b22      	ldr	r3, [pc, #136]	; (8007d58 <Bcon_Control+0x284>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d131      	bne.n	8007d3a <Bcon_Control+0x266>
				{
					not_ready_flag &= ~F_DRV_REQ;
 8007cd6:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <Bcon_Control+0x288>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f023 030f 	bic.w	r3, r3, #15
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	4b1e      	ldr	r3, [pc, #120]	; (8007d5c <Bcon_Control+0x288>)
 8007ce2:	701a      	strb	r2, [r3, #0]
					uSysStatusFlag &= ~a_NotCondition;
 8007ce4:	4b17      	ldr	r3, [pc, #92]	; (8007d44 <Bcon_Control+0x270>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007cec:	4a15      	ldr	r2, [pc, #84]	; (8007d44 <Bcon_Control+0x270>)
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	e023      	b.n	8007d3a <Bcon_Control+0x266>
				}
			}
			else 
			{
				if ( !Bcon_dly )
 8007cf2:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <Bcon_Control+0x284>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d11f      	bne.n	8007d3a <Bcon_Control+0x266>
				{
					if ( toggle_flag == 0)
 8007cfa:	4b19      	ldr	r3, [pc, #100]	; (8007d60 <Bcon_Control+0x28c>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10d      	bne.n	8007d1e <Bcon_Control+0x24a>
					{
						bcon_Req = bcon_G;						/* 물없을때, 일반상태 */ 
 8007d02:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <Bcon_Control+0x274>)
 8007d04:	2204      	movs	r2, #4
 8007d06:	701a      	strb	r2, [r3, #0]
						Bcon_dly = 1000;
 8007d08:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <Bcon_Control+0x284>)
 8007d0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d0e:	601a      	str	r2, [r3, #0]
						toggle_flag++;
 8007d10:	4b13      	ldr	r3, [pc, #76]	; (8007d60 <Bcon_Control+0x28c>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	3301      	adds	r3, #1
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	4b11      	ldr	r3, [pc, #68]	; (8007d60 <Bcon_Control+0x28c>)
 8007d1a:	701a      	strb	r2, [r3, #0]
 8007d1c:	e00d      	b.n	8007d3a <Bcon_Control+0x266>
					}
					else
					{
						bcon_Req = bcon_R| bcon_G; // 노랑 
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <Bcon_Control+0x274>)
 8007d20:	2205      	movs	r2, #5
 8007d22:	701a      	strb	r2, [r3, #0]
						Bcon_dly = 1000;
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <Bcon_Control+0x284>)
 8007d26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d2a:	601a      	str	r2, [r3, #0]
						toggle_flag = 0;
 8007d2c:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <Bcon_Control+0x28c>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	e002      	b.n	8007d3a <Bcon_Control+0x266>
			}
		}
	}
    else
	{
		bcon_Req = bcon_G;	
 8007d34:	4b04      	ldr	r3, [pc, #16]	; (8007d48 <Bcon_Control+0x274>)
 8007d36:	2204      	movs	r2, #4
 8007d38:	701a      	strb	r2, [r3, #0]
	}
  }
  Bcon_Out(); 
 8007d3a:	f000 f813 	bl	8007d64 <Bcon_Out>
}
 8007d3e:	bf00      	nop
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000cf8 	.word	0x20000cf8
 8007d48:	20000d33 	.word	0x20000d33
 8007d4c:	20000d59 	.word	0x20000d59
 8007d50:	20000ddc 	.word	0x20000ddc
 8007d54:	20000d90 	.word	0x20000d90
 8007d58:	20000df0 	.word	0x20000df0
 8007d5c:	20000d5c 	.word	0x20000d5c
 8007d60:	20000df4 	.word	0x20000df4

08007d64 <Bcon_Out>:
//
void Bcon_Out()
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  if(bcon_Req != bcon_Out)
 8007d68:	4b08      	ldr	r3, [pc, #32]	; (8007d8c <Bcon_Out+0x28>)
 8007d6a:	781a      	ldrb	r2, [r3, #0]
 8007d6c:	4b08      	ldr	r3, [pc, #32]	; (8007d90 <Bcon_Out+0x2c>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d008      	beq.n	8007d86 <Bcon_Out+0x22>
  {
	bcon_On(bcon_Req);
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <Bcon_Out+0x28>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff fcfd 	bl	8007778 <bcon_On>
	bcon_Out = bcon_Req;
 8007d7e:	4b03      	ldr	r3, [pc, #12]	; (8007d8c <Bcon_Out+0x28>)
 8007d80:	781a      	ldrb	r2, [r3, #0]
 8007d82:	4b03      	ldr	r3, [pc, #12]	; (8007d90 <Bcon_Out+0x2c>)
 8007d84:	701a      	strb	r2, [r3, #0]
  }
}
 8007d86:	bf00      	nop
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000d33 	.word	0x20000d33
 8007d90:	20000d34 	.word	0x20000d34

08007d94 <Real_AutoRunning>:
//
#if 1	
// 분사중이고, 자율주행중 수위 가 없으면, 
uint8_t Real_AutoRunning()
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_AutoRun) == 0)
 8007d98:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <Real_AutoRunning+0x50>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <Real_AutoRunning+0x14>
  {
  	return 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	e018      	b.n	8007dda <Real_AutoRunning+0x46>
  }
  if((uSysStatusFlag & f_TraceLine) == 0)
 8007da8:	4b0e      	ldr	r3, [pc, #56]	; (8007de4 <Real_AutoRunning+0x50>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <Real_AutoRunning+0x24>
  {
  	return 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	e010      	b.n	8007dda <Real_AutoRunning+0x46>
  }
  if((smt_Command & 0x0001) == 0)
 8007db8:	4b0b      	ldr	r3, [pc, #44]	; (8007de8 <Real_AutoRunning+0x54>)
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <Real_AutoRunning+0x34>
  {
  	return 0;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	e008      	b.n	8007dda <Real_AutoRunning+0x46>
  }
  if((uSysStatusFlag & f_DMotorACT) == 0)
 8007dc8:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <Real_AutoRunning+0x50>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <Real_AutoRunning+0x44>
  {
  	return 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	e000      	b.n	8007dda <Real_AutoRunning+0x46>
  }
  return 1;
 8007dd8:	2301      	movs	r3, #1
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000cf8 	.word	0x20000cf8
 8007de8:	20000d36 	.word	0x20000d36

08007dec <WLS_Check1>:
#endif

//
void WLS_Check1()
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
#if _WLS_MASK  		
  if(HAL_GPIO_ReadPin(GPIOC,C_WLS_IN1) == 0)	/* 견인 물통 */
 8007df0:	2140      	movs	r1, #64	; 0x40
 8007df2:	481d      	ldr	r0, [pc, #116]	; (8007e68 <WLS_Check1+0x7c>)
 8007df4:	f002 ffce 	bl	800ad94 <HAL_GPIO_ReadPin>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d11c      	bne.n	8007e38 <WLS_Check1+0x4c>
  {
	++WLEmptyCnt1;
 8007dfe:	4b1b      	ldr	r3, [pc, #108]	; (8007e6c <WLS_Check1+0x80>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	4b19      	ldr	r3, [pc, #100]	; (8007e6c <WLS_Check1+0x80>)
 8007e08:	701a      	strb	r2, [r3, #0]
	if(WLEmptyCnt1 >= 20)  /* 200m x 20 = 4000ms */
 8007e0a:	4b18      	ldr	r3, [pc, #96]	; (8007e6c <WLS_Check1+0x80>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b13      	cmp	r3, #19
 8007e10:	d928      	bls.n	8007e64 <WLS_Check1+0x78>
	{
		if((uSysStatusFlag & f_WLEmpty1) == 0)
 8007e12:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <WLS_Check1+0x84>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d105      	bne.n	8007e2a <WLS_Check1+0x3e>
		{
			uSysStatusFlag |= f_WLEmpty1;
 8007e1e:	4b14      	ldr	r3, [pc, #80]	; (8007e70 <WLS_Check1+0x84>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e26:	4a12      	ldr	r2, [pc, #72]	; (8007e70 <WLS_Check1+0x84>)
 8007e28:	6013      	str	r3, [r2, #0]
#if _WLS_CHK
			cliPrintf("\n WL_TOW_EMPTY");
#endif
		}
		WLEmptyCnt1 = 20;
 8007e2a:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <WLS_Check1+0x80>)
 8007e2c:	2214      	movs	r2, #20
 8007e2e:	701a      	strb	r2, [r3, #0]
		WLFullCnt1 = 0;
 8007e30:	4b10      	ldr	r3, [pc, #64]	; (8007e74 <WLS_Check1+0x88>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
#else
  uSysStatusFlag &= ~f_WLEmpty1;
  WLEmptyCnt1 = 0;
  WLFullCnt1 = 20;
#endif
}
 8007e36:	e015      	b.n	8007e64 <WLS_Check1+0x78>
	++WLFullCnt1;
 8007e38:	4b0e      	ldr	r3, [pc, #56]	; (8007e74 <WLS_Check1+0x88>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <WLS_Check1+0x88>)
 8007e42:	701a      	strb	r2, [r3, #0]
	if(WLFullCnt1 >= 20)
 8007e44:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <WLS_Check1+0x88>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b13      	cmp	r3, #19
 8007e4a:	d90b      	bls.n	8007e64 <WLS_Check1+0x78>
		uSysStatusFlag &= ~f_WLEmpty1;
 8007e4c:	4b08      	ldr	r3, [pc, #32]	; (8007e70 <WLS_Check1+0x84>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e54:	4a06      	ldr	r2, [pc, #24]	; (8007e70 <WLS_Check1+0x84>)
 8007e56:	6013      	str	r3, [r2, #0]
		WLEmptyCnt1 = 0;
 8007e58:	4b04      	ldr	r3, [pc, #16]	; (8007e6c <WLS_Check1+0x80>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	701a      	strb	r2, [r3, #0]
		WLFullCnt1 = 20;
 8007e5e:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <WLS_Check1+0x88>)
 8007e60:	2214      	movs	r2, #20
 8007e62:	701a      	strb	r2, [r3, #0]
}
 8007e64:	bf00      	nop
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	40011000 	.word	0x40011000
 8007e6c:	20000d42 	.word	0x20000d42
 8007e70:	20000cf8 	.word	0x20000cf8
 8007e74:	20000d44 	.word	0x20000d44

08007e78 <WLS_Check2>:
//
void WLS_Check2()
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
#if _WLS_MASK  		
  if(HAL_GPIO_ReadPin(GPIOC,C_WLS_IN2) == 0)	/* 본체 물통 */
 8007e7c:	2180      	movs	r1, #128	; 0x80
 8007e7e:	481d      	ldr	r0, [pc, #116]	; (8007ef4 <WLS_Check2+0x7c>)
 8007e80:	f002 ff88 	bl	800ad94 <HAL_GPIO_ReadPin>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d11c      	bne.n	8007ec4 <WLS_Check2+0x4c>
  {
	++WLEmptyCnt2;
 8007e8a:	4b1b      	ldr	r3, [pc, #108]	; (8007ef8 <WLS_Check2+0x80>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	4b19      	ldr	r3, [pc, #100]	; (8007ef8 <WLS_Check2+0x80>)
 8007e94:	701a      	strb	r2, [r3, #0]
	if(WLEmptyCnt2 >= 20)  /* 200m x 20 = 4000ms */
 8007e96:	4b18      	ldr	r3, [pc, #96]	; (8007ef8 <WLS_Check2+0x80>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b13      	cmp	r3, #19
 8007e9c:	d928      	bls.n	8007ef0 <WLS_Check2+0x78>
	{
		if((uSysStatusFlag & f_WLEmpty2) == 0)
 8007e9e:	4b17      	ldr	r3, [pc, #92]	; (8007efc <WLS_Check2+0x84>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d105      	bne.n	8007eb6 <WLS_Check2+0x3e>
		{
			uSysStatusFlag |= f_WLEmpty2;
 8007eaa:	4b14      	ldr	r3, [pc, #80]	; (8007efc <WLS_Check2+0x84>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eb2:	4a12      	ldr	r2, [pc, #72]	; (8007efc <WLS_Check2+0x84>)
 8007eb4:	6013      	str	r3, [r2, #0]
#if _WLS_CHK
			cliPrintf("\n WL_BB_EMPTY");
#endif
		}
		WLEmptyCnt2 = 20;
 8007eb6:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <WLS_Check2+0x80>)
 8007eb8:	2214      	movs	r2, #20
 8007eba:	701a      	strb	r2, [r3, #0]
		WLFullCnt2 = 0;
 8007ebc:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <WLS_Check2+0x88>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	701a      	strb	r2, [r3, #0]
#else
  uSysStatusFlag &= ~f_WLEmpty2;
  WLEmptyCnt2 = 0;
  WLFullCnt2 = 20;
#endif
}
 8007ec2:	e015      	b.n	8007ef0 <WLS_Check2+0x78>
	++WLFullCnt2;
 8007ec4:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <WLS_Check2+0x88>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <WLS_Check2+0x88>)
 8007ece:	701a      	strb	r2, [r3, #0]
	if(WLFullCnt2 >= 20)
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <WLS_Check2+0x88>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b13      	cmp	r3, #19
 8007ed6:	d90b      	bls.n	8007ef0 <WLS_Check2+0x78>
		uSysStatusFlag &= ~f_WLEmpty2;
 8007ed8:	4b08      	ldr	r3, [pc, #32]	; (8007efc <WLS_Check2+0x84>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007ee0:	4a06      	ldr	r2, [pc, #24]	; (8007efc <WLS_Check2+0x84>)
 8007ee2:	6013      	str	r3, [r2, #0]
		WLEmptyCnt2 = 0;
 8007ee4:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <WLS_Check2+0x80>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	701a      	strb	r2, [r3, #0]
		WLFullCnt2 = 20;
 8007eea:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <WLS_Check2+0x88>)
 8007eec:	2214      	movs	r2, #20
 8007eee:	701a      	strb	r2, [r3, #0]
}
 8007ef0:	bf00      	nop
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	40011000 	.word	0x40011000
 8007ef8:	20000d43 	.word	0x20000d43
 8007efc:	20000cf8 	.word	0x20000cf8
 8007f00:	20000d45 	.word	0x20000d45

08007f04 <WL_CheckInit>:
//
void WL_CheckInit()
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  WLS_Check2(); 		/* 본체 */
 8007f08:	f7ff ffb6 	bl	8007e78 <WLS_Check2>
  WLS_Check1();		  /* 견인 */
 8007f0c:	f7ff ff6e 	bl	8007dec <WLS_Check1>
}
 8007f10:	bf00      	nop
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <WL_Check>:

//#define E_SOLv_1			GPIO_Pin_12		// Sol. Velve 
void WL_Check()
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0
  WLS_Check2();   /* 본체 */
 8007f18:	f7ff ffae 	bl	8007e78 <WLS_Check2>
  WLS_Check1();   /* 견인 */
 8007f1c:	f7ff ff66 	bl	8007dec <WLS_Check1>
  //
  if(NotEmpty_WL())
 8007f20:	f000 f9e2 	bl	80082e8 <NotEmpty_WL>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01f      	beq.n	8007f6a <WL_Check+0x56>
  { /* Sol V. Control */
	if((uSysStatusFlag & f_WLEmpty1) == 0)			/* 견인 물통 Full */
 8007f2a:	4b36      	ldr	r3, [pc, #216]	; (8008004 <WL_Check+0xf0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <WL_Check+0x30>
	{
		HAL_GPIO_WritePin(GPIOE, E_SOLv_1, GPIO_PIN_RESET);
 8007f36:	2200      	movs	r2, #0
 8007f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f3c:	4832      	ldr	r0, [pc, #200]	; (8008008 <WL_Check+0xf4>)
 8007f3e:	f002 ff40 	bl	800adc2 <HAL_GPIO_WritePin>
 8007f42:	e005      	b.n	8007f50 <WL_Check+0x3c>
    //GPIO_ResetBits(GPIOE,E_SOLv_1);				/* 견인쪽 (세워진 방향)*/
		//GPIO_ResetBits(GPIOE,E_SOLv_2);			
	}
	else
	{
    HAL_GPIO_WritePin(GPIOE, E_SOLv_1, GPIO_PIN_SET);
 8007f44:	2201      	movs	r2, #1
 8007f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f4a:	482f      	ldr	r0, [pc, #188]	; (8008008 <WL_Check+0xf4>)
 8007f4c:	f002 ff39 	bl	800adc2 <HAL_GPIO_WritePin>
		//GPIO_SetBits(GPIOE,E_SOLv_1);				/* 본체쪽 (눕혀진 방향)*/
		//GPIO_SetBits(GPIOE,E_SOLv_2);	
	}
	//	
	uSysStatusFlag &= ~f_ALLWLEmpty;
 8007f50:	4b2c      	ldr	r3, [pc, #176]	; (8008004 <WL_Check+0xf0>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f58:	4a2a      	ldr	r2, [pc, #168]	; (8008004 <WL_Check+0xf0>)
 8007f5a:	6013      	str	r3, [r2, #0]
	uSysStatusFlag &= ~f_WTEmptBuzReq;
 8007f5c:	4b29      	ldr	r3, [pc, #164]	; (8008004 <WL_Check+0xf0>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f64:	4a27      	ldr	r2, [pc, #156]	; (8008004 <WL_Check+0xf0>)
 8007f66:	6013      	str	r3, [r2, #0]
			FanSeq = FAN_STOP;
			FanWaittime = 2000;		/* Pump Off 후 4초 뒤 Fan Off 한다. */
		}
	}
  }
}
 8007f68:	e04a      	b.n	8008000 <WL_Check+0xec>
	uSysStatusFlag |= f_ALLWLEmpty;
 8007f6a:	4b26      	ldr	r3, [pc, #152]	; (8008004 <WL_Check+0xf0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f72:	4a24      	ldr	r2, [pc, #144]	; (8008004 <WL_Check+0xf0>)
 8007f74:	6013      	str	r3, [r2, #0]
	if(uSysStatusFlag & f_PumpACT)
 8007f76:	4b23      	ldr	r3, [pc, #140]	; (8008004 <WL_Check+0xf0>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d027      	beq.n	8007fd2 <WL_Check+0xbe>
		if(Real_AutoRunning())		/* 분사중이고 자율주행 중이면 All Motor Stop */ 	
 8007f82:	f7ff ff07 	bl	8007d94 <Real_AutoRunning>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d015      	beq.n	8007fb8 <WL_Check+0xa4>
			uSysStatusFlag |= f_ADRVnoWaterStop;
 8007f8c:	4b1d      	ldr	r3, [pc, #116]	; (8008004 <WL_Check+0xf0>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f94:	4a1b      	ldr	r2, [pc, #108]	; (8008004 <WL_Check+0xf0>)
 8007f96:	6013      	str	r3, [r2, #0]
			uSysStatusFlag |= f_WTEmptBuzReq;
 8007f98:	4b1a      	ldr	r3, [pc, #104]	; (8008004 <WL_Check+0xf0>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fa0:	4a18      	ldr	r2, [pc, #96]	; (8008004 <WL_Check+0xf0>)
 8007fa2:	6013      	str	r3, [r2, #0]
			if(LKAUTOSeq) 
 8007fa4:	4b19      	ldr	r3, [pc, #100]	; (800800c <WL_Check+0xf8>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <WL_Check+0x9e>
				LKAUTOSeq = 0;
 8007fac:	4b17      	ldr	r3, [pc, #92]	; (800800c <WL_Check+0xf8>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	701a      	strb	r2, [r3, #0]
			all_MotorStop();
 8007fb2:	f7fe fec1 	bl	8006d38 <all_MotorStop>
 8007fb6:	e012      	b.n	8007fde <WL_Check+0xca>
			uSysStatusFlag &= ~f_ADRVnoWaterStop;		
 8007fb8:	4b12      	ldr	r3, [pc, #72]	; (8008004 <WL_Check+0xf0>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fc0:	4a10      	ldr	r2, [pc, #64]	; (8008004 <WL_Check+0xf0>)
 8007fc2:	6013      	str	r3, [r2, #0]
			PumpSeq = PUMP_STOP;
 8007fc4:	4b12      	ldr	r3, [pc, #72]	; (8008010 <WL_Check+0xfc>)
 8007fc6:	220d      	movs	r2, #13
 8007fc8:	701a      	strb	r2, [r3, #0]
			PumpWaittime = 10;
 8007fca:	4b12      	ldr	r3, [pc, #72]	; (8008014 <WL_Check+0x100>)
 8007fcc:	220a      	movs	r2, #10
 8007fce:	801a      	strh	r2, [r3, #0]
 8007fd0:	e005      	b.n	8007fde <WL_Check+0xca>
		uSysStatusFlag &= ~f_ADRVnoWaterStop;		
 8007fd2:	4b0c      	ldr	r3, [pc, #48]	; (8008004 <WL_Check+0xf0>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fda:	4a0a      	ldr	r2, [pc, #40]	; (8008004 <WL_Check+0xf0>)
 8007fdc:	6013      	str	r3, [r2, #0]
	if(uSysStatusFlag & f_FanACT)
 8007fde:	4b09      	ldr	r3, [pc, #36]	; (8008004 <WL_Check+0xf0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <WL_Check+0xec>
		if(FanSeq != FAN_STOP)
 8007fea:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <WL_Check+0x104>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b05      	cmp	r3, #5
 8007ff0:	d006      	beq.n	8008000 <WL_Check+0xec>
			FanSeq = FAN_STOP;
 8007ff2:	4b09      	ldr	r3, [pc, #36]	; (8008018 <WL_Check+0x104>)
 8007ff4:	2205      	movs	r2, #5
 8007ff6:	701a      	strb	r2, [r3, #0]
			FanWaittime = 2000;		/* Pump Off 후 4초 뒤 Fan Off 한다. */
 8007ff8:	4b08      	ldr	r3, [pc, #32]	; (800801c <WL_Check+0x108>)
 8007ffa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007ffe:	801a      	strh	r2, [r3, #0]
}
 8008000:	bf00      	nop
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20000cf8 	.word	0x20000cf8
 8008008:	40011800 	.word	0x40011800
 800800c:	20000d59 	.word	0x20000d59
 8008010:	20000d1e 	.word	0x20000d1e
 8008014:	20000d24 	.word	0x20000d24
 8008018:	20000d1f 	.word	0x20000d1f
 800801c:	20000d26 	.word	0x20000d26

08008020 <Option_Check>:

//
void Option_Check()
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Pumpspeed) == 1)
 8008024:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008028:	483b      	ldr	r0, [pc, #236]	; (8008118 <Option_Check+0xf8>)
 800802a:	f002 feb3 	bl	800ad94 <HAL_GPIO_ReadPin>
 800802e:	4603      	mov	r3, r0
 8008030:	2b01      	cmp	r3, #1
 8008032:	d119      	bne.n	8008068 <Option_Check+0x48>
  { /* 접점위치, 1이 눌러진 상태 */
#if 0  
	cliPrintf("\n Pump_Speed");
#endif
	++u8_pumpspdCnt;
 8008034:	4b39      	ldr	r3, [pc, #228]	; (800811c <Option_Check+0xfc>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	3301      	adds	r3, #1
 800803a:	b2da      	uxtb	r2, r3
 800803c:	4b37      	ldr	r3, [pc, #220]	; (800811c <Option_Check+0xfc>)
 800803e:	701a      	strb	r2, [r3, #0]
	if(u8_pumpspdCnt >= 40)
 8008040:	4b36      	ldr	r3, [pc, #216]	; (800811c <Option_Check+0xfc>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b27      	cmp	r3, #39	; 0x27
 8008046:	d929      	bls.n	800809c <Option_Check+0x7c>
	{
		if((uSysStatusFlag & f_OPT_Pumpspeed) == 0)
 8008048:	4b35      	ldr	r3, [pc, #212]	; (8008120 <Option_Check+0x100>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d105      	bne.n	8008060 <Option_Check+0x40>
			uSysStatusFlag |= f_OPT_Pumpspeed;		/* Pump 5 */
 8008054:	4b32      	ldr	r3, [pc, #200]	; (8008120 <Option_Check+0x100>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800805c:	4a30      	ldr	r2, [pc, #192]	; (8008120 <Option_Check+0x100>)
 800805e:	6013      	str	r3, [r2, #0]
		
		u8_pumpspdCnt = 40;
 8008060:	4b2e      	ldr	r3, [pc, #184]	; (800811c <Option_Check+0xfc>)
 8008062:	2228      	movs	r2, #40	; 0x28
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	e019      	b.n	800809c <Option_Check+0x7c>
		
	}
  }
  else
  {
	if(u8_pumpspdCnt)
 8008068:	4b2c      	ldr	r3, [pc, #176]	; (800811c <Option_Check+0xfc>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d005      	beq.n	800807c <Option_Check+0x5c>
		--u8_pumpspdCnt;
 8008070:	4b2a      	ldr	r3, [pc, #168]	; (800811c <Option_Check+0xfc>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	3b01      	subs	r3, #1
 8008076:	b2da      	uxtb	r2, r3
 8008078:	4b28      	ldr	r3, [pc, #160]	; (800811c <Option_Check+0xfc>)
 800807a:	701a      	strb	r2, [r3, #0]
	//
	if(u8_pumpspdCnt == 0)
 800807c:	4b27      	ldr	r3, [pc, #156]	; (800811c <Option_Check+0xfc>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10b      	bne.n	800809c <Option_Check+0x7c>
	{
		if((uSysStatusFlag & f_OPT_Pumpspeed) == f_OPT_Pumpspeed)
 8008084:	4b26      	ldr	r3, [pc, #152]	; (8008120 <Option_Check+0x100>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <Option_Check+0x7c>
			uSysStatusFlag &= ~f_OPT_Pumpspeed; 
 8008090:	4b23      	ldr	r3, [pc, #140]	; (8008120 <Option_Check+0x100>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008098:	4a21      	ldr	r2, [pc, #132]	; (8008120 <Option_Check+0x100>)
 800809a:	6013      	str	r3, [r2, #0]
		//cliPrintf("\n PUMP PRESS LOW-3   ");
		
	}
  }
  //
  if(HAL_GPIO_ReadPin(GPIOE,E_OPT_Autospeed) == 1)
 800809c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080a0:	481d      	ldr	r0, [pc, #116]	; (8008118 <Option_Check+0xf8>)
 80080a2:	f002 fe77 	bl	800ad94 <HAL_GPIO_ReadPin>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d119      	bne.n	80080e0 <Option_Check+0xc0>
  { /* 접점위치 */
	++u8_AutospdCnt;
 80080ac:	4b1d      	ldr	r3, [pc, #116]	; (8008124 <Option_Check+0x104>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	3301      	adds	r3, #1
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	4b1b      	ldr	r3, [pc, #108]	; (8008124 <Option_Check+0x104>)
 80080b6:	701a      	strb	r2, [r3, #0]
	if(u8_AutospdCnt >= 40)
 80080b8:	4b1a      	ldr	r3, [pc, #104]	; (8008124 <Option_Check+0x104>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b27      	cmp	r3, #39	; 0x27
 80080be:	d929      	bls.n	8008114 <Option_Check+0xf4>
	{
		if((uSysStatusFlag & f_OPT_AutodrvSPD) == 0)
 80080c0:	4b17      	ldr	r3, [pc, #92]	; (8008120 <Option_Check+0x100>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d105      	bne.n	80080d8 <Option_Check+0xb8>
			uSysStatusFlag |= f_OPT_AutodrvSPD;
 80080cc:	4b14      	ldr	r3, [pc, #80]	; (8008120 <Option_Check+0x100>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080d4:	4a12      	ldr	r2, [pc, #72]	; (8008120 <Option_Check+0x100>)
 80080d6:	6013      	str	r3, [r2, #0]
  
		u8_AutospdCnt = 40;
 80080d8:	4b12      	ldr	r3, [pc, #72]	; (8008124 <Option_Check+0x104>)
 80080da:	2228      	movs	r2, #40	; 0x28
 80080dc:	701a      	strb	r2, [r3, #0]
			uSysStatusFlag &= ~f_OPT_AutodrvSPD; 
		
		//cliPrintf("LOW_SPLAY_SPEED");
	}
  }
}
 80080de:	e019      	b.n	8008114 <Option_Check+0xf4>
	if(u8_AutospdCnt)
 80080e0:	4b10      	ldr	r3, [pc, #64]	; (8008124 <Option_Check+0x104>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <Option_Check+0xd4>
		--u8_AutospdCnt;
 80080e8:	4b0e      	ldr	r3, [pc, #56]	; (8008124 <Option_Check+0x104>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <Option_Check+0x104>)
 80080f2:	701a      	strb	r2, [r3, #0]
	if(u8_AutospdCnt == 0)
 80080f4:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <Option_Check+0x104>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10b      	bne.n	8008114 <Option_Check+0xf4>
		if((uSysStatusFlag & f_OPT_AutodrvSPD) == f_OPT_AutodrvSPD)
 80080fc:	4b08      	ldr	r3, [pc, #32]	; (8008120 <Option_Check+0x100>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d005      	beq.n	8008114 <Option_Check+0xf4>
			uSysStatusFlag &= ~f_OPT_AutodrvSPD; 
 8008108:	4b05      	ldr	r3, [pc, #20]	; (8008120 <Option_Check+0x100>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008110:	4a03      	ldr	r2, [pc, #12]	; (8008120 <Option_Check+0x100>)
 8008112:	6013      	str	r3, [r2, #0]
}
 8008114:	bf00      	nop
 8008116:	bd80      	pop	{r7, pc}
 8008118:	40011800 	.word	0x40011800
 800811c:	20000d46 	.word	0x20000d46
 8008120:	20000cf8 	.word	0x20000cf8
 8008124:	20000d47 	.word	0x20000d47

08008128 <INIT_Check>:
//
void INIT_Check()
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
  uint8_t	iii,jjj;

  for(iii = 0; iii < 30; iii++)
 800812e:	2300      	movs	r3, #0
 8008130:	71fb      	strb	r3, [r7, #7]
 8008132:	e004      	b.n	800813e <INIT_Check+0x16>
	Option_Check();
 8008134:	f7ff ff74 	bl	8008020 <Option_Check>
  for(iii = 0; iii < 30; iii++)
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	3301      	adds	r3, #1
 800813c:	71fb      	strb	r3, [r7, #7]
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	2b1d      	cmp	r3, #29
 8008142:	d9f7      	bls.n	8008134 <INIT_Check+0xc>

  if(u16_DebugFlag == 1)
 8008144:	4b5b      	ldr	r3, [pc, #364]	; (80082b4 <INIT_Check+0x18c>)
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d127      	bne.n	800819c <INIT_Check+0x74>
  {
    if(uSysStatusFlag & f_OPT_AutodrvSPD)
 800814c:	4b5a      	ldr	r3, [pc, #360]	; (80082b8 <INIT_Check+0x190>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <INIT_Check+0x38>
    cliPrintf("\n AUTO DRV SPEED : HIGH(3)");
 8008158:	4858      	ldr	r0, [pc, #352]	; (80082bc <INIT_Check+0x194>)
 800815a:	f7fb fd7b 	bl	8003c54 <cliPrintf>
 800815e:	e002      	b.n	8008166 <INIT_Check+0x3e>
    else
    cliPrintf("\n AUTO DRV SPEED : LOW(2)");
 8008160:	4857      	ldr	r0, [pc, #348]	; (80082c0 <INIT_Check+0x198>)
 8008162:	f7fb fd77 	bl	8003c54 <cliPrintf>
    
    if(uSysStatusFlag & f_OPT_Pumpspeed)
 8008166:	4b54      	ldr	r3, [pc, #336]	; (80082b8 <INIT_Check+0x190>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <INIT_Check+0x52>
      cliPrintf("   PUMP_HIGH(5_LEVEL)");
 8008172:	4854      	ldr	r0, [pc, #336]	; (80082c4 <INIT_Check+0x19c>)
 8008174:	f7fb fd6e 	bl	8003c54 <cliPrintf>
 8008178:	e002      	b.n	8008180 <INIT_Check+0x58>
    else
    cliPrintf("   PUMP_LOW(3_LEVEL)");
 800817a:	4853      	ldr	r0, [pc, #332]	; (80082c8 <INIT_Check+0x1a0>)
 800817c:	f7fb fd6a 	bl	8003c54 <cliPrintf>
    //
    if(f_commCAN)
 8008180:	4b52      	ldr	r3, [pc, #328]	; (80082cc <INIT_Check+0x1a4>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <INIT_Check+0x68>
      cliPrintf("  --> CAN");
 8008188:	4851      	ldr	r0, [pc, #324]	; (80082d0 <INIT_Check+0x1a8>)
 800818a:	f7fb fd63 	bl	8003c54 <cliPrintf>
 800818e:	e002      	b.n	8008196 <INIT_Check+0x6e>
    else
    cliPrintf("  --> UART");
 8008190:	4850      	ldr	r0, [pc, #320]	; (80082d4 <INIT_Check+0x1ac>)
 8008192:	f7fb fd5f 	bl	8003c54 <cliPrintf>

  #if _PT_NPN
    cliPrintf("  NPN");	
 8008196:	4850      	ldr	r0, [pc, #320]	; (80082d8 <INIT_Check+0x1b0>)
 8008198:	f7fb fd5c 	bl	8003c54 <cliPrintf>
    cliPrintf("  PNP");	
  #endif
  }
  
  
  for(iii = 0; iii < 5; iii++)
 800819c:	2300      	movs	r3, #0
 800819e:	71fb      	strb	r3, [r7, #7]
 80081a0:	e032      	b.n	8008208 <INIT_Check+0xe0>
  {
	bcon_Req = 0;
 80081a2:	4b4e      	ldr	r3, [pc, #312]	; (80082dc <INIT_Check+0x1b4>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
	Bcon_Out();
 80081a8:	f7ff fddc 	bl	8007d64 <Bcon_Out>
	R_LED_Off();
 80081ac:	f7ff faaa 	bl	8007704 <R_LED_Off>
	G_LED_On();
 80081b0:	f7ff fab4 	bl	800771c <G_LED_On>
	for(jjj = 0; jjj < 5; jjj++)
 80081b4:	2300      	movs	r3, #0
 80081b6:	71bb      	strb	r3, [r7, #6]
 80081b8:	e007      	b.n	80081ca <INIT_Check+0xa2>
	{
    	HAL_Delay(80);
 80081ba:	2050      	movs	r0, #80	; 0x50
 80081bc:	f000 fa0c 	bl	80085d8 <HAL_Delay>
		WL_CheckInit(); 		/* */
 80081c0:	f7ff fea0 	bl	8007f04 <WL_CheckInit>
	for(jjj = 0; jjj < 5; jjj++)
 80081c4:	79bb      	ldrb	r3, [r7, #6]
 80081c6:	3301      	adds	r3, #1
 80081c8:	71bb      	strb	r3, [r7, #6]
 80081ca:	79bb      	ldrb	r3, [r7, #6]
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d9f4      	bls.n	80081ba <INIT_Check+0x92>
	}
	Battery_Check();
 80081d0:	f7ff fb22 	bl	8007818 <Battery_Check>
	bcon_Req = bcon_R;
 80081d4:	4b41      	ldr	r3, [pc, #260]	; (80082dc <INIT_Check+0x1b4>)
 80081d6:	2201      	movs	r2, #1
 80081d8:	701a      	strb	r2, [r3, #0]
	Bcon_Out();
 80081da:	f7ff fdc3 	bl	8007d64 <Bcon_Out>
	R_LED_On();
 80081de:	f7ff fa85 	bl	80076ec <R_LED_On>
	G_LED_Off();
 80081e2:	f7ff faa7 	bl	8007734 <G_LED_Off>
	for(jjj = 0; jjj < 5; jjj++)
 80081e6:	2300      	movs	r3, #0
 80081e8:	71bb      	strb	r3, [r7, #6]
 80081ea:	e007      	b.n	80081fc <INIT_Check+0xd4>
	{
		HAL_Delay(80);
 80081ec:	2050      	movs	r0, #80	; 0x50
 80081ee:	f000 f9f3 	bl	80085d8 <HAL_Delay>
		WL_CheckInit(); 
 80081f2:	f7ff fe87 	bl	8007f04 <WL_CheckInit>
	for(jjj = 0; jjj < 5; jjj++)
 80081f6:	79bb      	ldrb	r3, [r7, #6]
 80081f8:	3301      	adds	r3, #1
 80081fa:	71bb      	strb	r3, [r7, #6]
 80081fc:	79bb      	ldrb	r3, [r7, #6]
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d9f4      	bls.n	80081ec <INIT_Check+0xc4>
  for(iii = 0; iii < 5; iii++)
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	3301      	adds	r3, #1
 8008206:	71fb      	strb	r3, [r7, #7]
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b04      	cmp	r3, #4
 800820c:	d9c9      	bls.n	80081a2 <INIT_Check+0x7a>
	}

  }
  
  // Init Sol_V 정열
  if((uSysStatusFlag & f_WLEmpty1) == 0)
 800820e:	4b2a      	ldr	r3, [pc, #168]	; (80082b8 <INIT_Check+0x190>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <INIT_Check+0x100>
  {	
    /* 견인 물통 Full */
	  HAL_GPIO_WritePin(GPIOE, E_SOLv_1, GPIO_PIN_RESET);
 800821a:	2200      	movs	r2, #0
 800821c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008220:	482f      	ldr	r0, [pc, #188]	; (80082e0 <INIT_Check+0x1b8>)
 8008222:	f002 fdce 	bl	800adc2 <HAL_GPIO_WritePin>
 8008226:	e012      	b.n	800824e <INIT_Check+0x126>
  }
  else if((uSysStatusFlag & f_WLEmpty2) == 0)
 8008228:	4b23      	ldr	r3, [pc, #140]	; (80082b8 <INIT_Check+0x190>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d106      	bne.n	8008242 <INIT_Check+0x11a>
  {	
    /* 본체 물통 Full */	
	  HAL_GPIO_WritePin(GPIOE, E_SOLv_1, GPIO_PIN_SET);
 8008234:	2201      	movs	r2, #1
 8008236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800823a:	4829      	ldr	r0, [pc, #164]	; (80082e0 <INIT_Check+0x1b8>)
 800823c:	f002 fdc1 	bl	800adc2 <HAL_GPIO_WritePin>
 8008240:	e005      	b.n	800824e <INIT_Check+0x126>
  }
  else
  {	
    /* All WT Empty */
	  HAL_GPIO_WritePin(GPIOE, E_SOLv_1, GPIO_PIN_RESET);
 8008242:	2200      	movs	r2, #0
 8008244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008248:	4825      	ldr	r0, [pc, #148]	; (80082e0 <INIT_Check+0x1b8>)
 800824a:	f002 fdba 	bl	800adc2 <HAL_GPIO_WritePin>
  }
  // Sys 안정화 Delay 5초 
  for(m8_Buff = 0; m8_Buff < 4; m8_Buff++)
 800824e:	4b25      	ldr	r3, [pc, #148]	; (80082e4 <INIT_Check+0x1bc>)
 8008250:	2200      	movs	r2, #0
 8008252:	701a      	strb	r2, [r3, #0]
 8008254:	e01d      	b.n	8008292 <INIT_Check+0x16a>
  {
    bcon_Req = 0;
 8008256:	4b21      	ldr	r3, [pc, #132]	; (80082dc <INIT_Check+0x1b4>)
 8008258:	2200      	movs	r2, #0
 800825a:	701a      	strb	r2, [r3, #0]
    Bcon_Out();
 800825c:	f7ff fd82 	bl	8007d64 <Bcon_Out>
    R_LED_Off();
 8008260:	f7ff fa50 	bl	8007704 <R_LED_Off>
    G_LED_On();
 8008264:	f7ff fa5a 	bl	800771c <G_LED_On>
    HAL_Delay(250);
 8008268:	20fa      	movs	r0, #250	; 0xfa
 800826a:	f000 f9b5 	bl	80085d8 <HAL_Delay>
        
    bcon_Req = bcon_R;
 800826e:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <INIT_Check+0x1b4>)
 8008270:	2201      	movs	r2, #1
 8008272:	701a      	strb	r2, [r3, #0]
    Bcon_Out();
 8008274:	f7ff fd76 	bl	8007d64 <Bcon_Out>
    R_LED_On();
 8008278:	f7ff fa38 	bl	80076ec <R_LED_On>
    G_LED_Off();
 800827c:	f7ff fa5a 	bl	8007734 <G_LED_Off>
    HAL_Delay(250);
 8008280:	20fa      	movs	r0, #250	; 0xfa
 8008282:	f000 f9a9 	bl	80085d8 <HAL_Delay>
  for(m8_Buff = 0; m8_Buff < 4; m8_Buff++)
 8008286:	4b17      	ldr	r3, [pc, #92]	; (80082e4 <INIT_Check+0x1bc>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	3301      	adds	r3, #1
 800828c:	b2da      	uxtb	r2, r3
 800828e:	4b15      	ldr	r3, [pc, #84]	; (80082e4 <INIT_Check+0x1bc>)
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	4b14      	ldr	r3, [pc, #80]	; (80082e4 <INIT_Check+0x1bc>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b03      	cmp	r3, #3
 8008298:	d9dd      	bls.n	8008256 <INIT_Check+0x12e>
  }
  //  
  bcon_Req = 0;
 800829a:	4b10      	ldr	r3, [pc, #64]	; (80082dc <INIT_Check+0x1b4>)
 800829c:	2200      	movs	r2, #0
 800829e:	701a      	strb	r2, [r3, #0]
  Bcon_Out();
 80082a0:	f7ff fd60 	bl	8007d64 <Bcon_Out>
  R_LED_Off();
 80082a4:	f7ff fa2e 	bl	8007704 <R_LED_Off>
  G_LED_On();	/* Run Indicator */
 80082a8:	f7ff fa38 	bl	800771c <G_LED_On>
  
}
 80082ac:	bf00      	nop
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000d08 	.word	0x20000d08
 80082b8:	20000cf8 	.word	0x20000cf8
 80082bc:	08012e04 	.word	0x08012e04
 80082c0:	08012e20 	.word	0x08012e20
 80082c4:	08012e3c 	.word	0x08012e3c
 80082c8:	08012e54 	.word	0x08012e54
 80082cc:	20000cf2 	.word	0x20000cf2
 80082d0:	08012e6c 	.word	0x08012e6c
 80082d4:	08012e78 	.word	0x08012e78
 80082d8:	08012e84 	.word	0x08012e84
 80082dc:	20000d33 	.word	0x20000d33
 80082e0:	40011800 	.word	0x40011800
 80082e4:	20000d49 	.word	0x20000d49

080082e8 <NotEmpty_WL>:
//
/*
	본체와 견인물통이 한족이라도 물이 잇으면, 1을 리턴 함.
*/
uint8_t NotEmpty_WL()
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
  if((uSysStatusFlag & f_WLEmpty1) && (uSysStatusFlag & f_WLEmpty2))
 80082ec:	4b09      	ldr	r3, [pc, #36]	; (8008314 <NotEmpty_WL+0x2c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <NotEmpty_WL+0x20>
 80082f8:	4b06      	ldr	r3, [pc, #24]	; (8008314 <NotEmpty_WL+0x2c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <NotEmpty_WL+0x20>
	  return 0;
 8008304:	2300      	movs	r3, #0
 8008306:	e000      	b.n	800830a <NotEmpty_WL+0x22>
  else
	  return 1;
 8008308:	2301      	movs	r3, #1
}
 800830a:	4618      	mov	r0, r3
 800830c:	46bd      	mov	sp, r7
 800830e:	bc80      	pop	{r7}
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	20000cf8 	.word	0x20000cf8

08008318 <Var_Init>:
//
void Var_Init()
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  uSysStatusFlag = 0;
 800831c:	4b40      	ldr	r3, [pc, #256]	; (8008420 <Var_Init+0x108>)
 800831e:	2200      	movs	r2, #0
 8008320:	601a      	str	r2, [r3, #0]
  
  Local_Key.lK_ChatCnt = 0;
 8008322:	4b40      	ldr	r3, [pc, #256]	; (8008424 <Var_Init+0x10c>)
 8008324:	2200      	movs	r2, #0
 8008326:	80da      	strh	r2, [r3, #6]
  RFR_Key.rK_ChatCnt = 0;
 8008328:	4b3f      	ldr	r3, [pc, #252]	; (8008428 <Var_Init+0x110>)
 800832a:	2200      	movs	r2, #0
 800832c:	80da      	strh	r2, [r3, #6]
  RK_PermitTime = 0;
 800832e:	4b3f      	ldr	r3, [pc, #252]	; (800842c <Var_Init+0x114>)
 8008330:	2200      	movs	r2, #0
 8008332:	801a      	strh	r2, [r3, #0]
  	
  smt_Command = 0;
 8008334:	4b3e      	ldr	r3, [pc, #248]	; (8008430 <Var_Init+0x118>)
 8008336:	2200      	movs	r2, #0
 8008338:	801a      	strh	r2, [r3, #0]
  u16_DebugFlag = 0;
 800833a:	4b3e      	ldr	r3, [pc, #248]	; (8008434 <Var_Init+0x11c>)
 800833c:	2200      	movs	r2, #0
 800833e:	801a      	strh	r2, [r3, #0]
  u8_TestFlag = 0;
 8008340:	4b3d      	ldr	r3, [pc, #244]	; (8008438 <Var_Init+0x120>)
 8008342:	2200      	movs	r2, #0
 8008344:	701a      	strb	r2, [r3, #0]
  uTimerFlag = 0;
 8008346:	4b3d      	ldr	r3, [pc, #244]	; (800843c <Var_Init+0x124>)
 8008348:	2200      	movs	r2, #0
 800834a:	801a      	strh	r2, [r3, #0]
	  
  WLEmptyCnt1 = 0;		  /* 견인 Empty Count 4초 */
 800834c:	4b3c      	ldr	r3, [pc, #240]	; (8008440 <Var_Init+0x128>)
 800834e:	2200      	movs	r2, #0
 8008350:	701a      	strb	r2, [r3, #0]
  WLEmptyCnt2 = 0;		  /* 본체 Empty Count 4초 */
 8008352:	4b3c      	ldr	r3, [pc, #240]	; (8008444 <Var_Init+0x12c>)
 8008354:	2200      	movs	r2, #0
 8008356:	701a      	strb	r2, [r3, #0]
  WLFullCnt1 = 0;		  /* 견인 Full Count  2초 */
 8008358:	4b3b      	ldr	r3, [pc, #236]	; (8008448 <Var_Init+0x130>)
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]
  WLFullCnt2 = 0;		  /* 본체 Full Count  2초 */
 800835e:	4b3b      	ldr	r3, [pc, #236]	; (800844c <Var_Init+0x134>)
 8008360:	2200      	movs	r2, #0
 8008362:	701a      	strb	r2, [r3, #0]
  	
  ADC10_Cnt = 0;
 8008364:	4b3a      	ldr	r3, [pc, #232]	; (8008450 <Var_Init+0x138>)
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
  LowBat_Cnt = 0;
 800836a:	4b3a      	ldr	r3, [pc, #232]	; (8008454 <Var_Init+0x13c>)
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
  	  
  DMotorSeq = DMOTOR_STOP;
 8008370:	4b39      	ldr	r3, [pc, #228]	; (8008458 <Var_Init+0x140>)
 8008372:	2200      	movs	r2, #0
 8008374:	701a      	strb	r2, [r3, #0]
  SMotorSeq = SMOTOR_STOP;
 8008376:	4b39      	ldr	r3, [pc, #228]	; (800845c <Var_Init+0x144>)
 8008378:	2200      	movs	r2, #0
 800837a:	701a      	strb	r2, [r3, #0]
  FanSeq = FAN_STOP;
 800837c:	4b38      	ldr	r3, [pc, #224]	; (8008460 <Var_Init+0x148>)
 800837e:	2205      	movs	r2, #5
 8008380:	701a      	strb	r2, [r3, #0]
  PumpSeq = PUMP_STOP;
 8008382:	4b38      	ldr	r3, [pc, #224]	; (8008464 <Var_Init+0x14c>)
 8008384:	220d      	movs	r2, #13
 8008386:	701a      	strb	r2, [r3, #0]
	  
  FAN_Speed = 1;
 8008388:	4b37      	ldr	r3, [pc, #220]	; (8008468 <Var_Init+0x150>)
 800838a:	2201      	movs	r2, #1
 800838c:	701a      	strb	r2, [r3, #0]
  DRV_Speed = 1;
 800838e:	4b37      	ldr	r3, [pc, #220]	; (800846c <Var_Init+0x154>)
 8008390:	2201      	movs	r2, #1
 8008392:	701a      	strb	r2, [r3, #0]
  	  
  DMotorTKPWM = DRV_ADC[DRV_SPDTBNo][DRV_Speed];
 8008394:	4b36      	ldr	r3, [pc, #216]	; (8008470 <Var_Init+0x158>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	4619      	mov	r1, r3
 800839a:	4b34      	ldr	r3, [pc, #208]	; (800846c <Var_Init+0x154>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	4a34      	ldr	r2, [pc, #208]	; (8008474 <Var_Init+0x15c>)
 80083a2:	460b      	mov	r3, r1
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	440b      	add	r3, r1
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	4413      	add	r3, r2
 80083ac:	4403      	add	r3, r0
 80083ae:	781a      	ldrb	r2, [r3, #0]
 80083b0:	4b31      	ldr	r3, [pc, #196]	; (8008478 <Var_Init+0x160>)
 80083b2:	701a      	strb	r2, [r3, #0]
  SMotorTKPWM = STR_ADC[2];
 80083b4:	4b31      	ldr	r3, [pc, #196]	; (800847c <Var_Init+0x164>)
 80083b6:	789a      	ldrb	r2, [r3, #2]
 80083b8:	4b31      	ldr	r3, [pc, #196]	; (8008480 <Var_Init+0x168>)
 80083ba:	701a      	strb	r2, [r3, #0]
  FanTKPWM = FAN_PWM[FAN_Speed];
 80083bc:	4b2a      	ldr	r3, [pc, #168]	; (8008468 <Var_Init+0x150>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	4b30      	ldr	r3, [pc, #192]	; (8008484 <Var_Init+0x16c>)
 80083c4:	5c9a      	ldrb	r2, [r3, r2]
 80083c6:	4b30      	ldr	r3, [pc, #192]	; (8008488 <Var_Init+0x170>)
 80083c8:	701a      	strb	r2, [r3, #0]
  	
  u8_pumpspdCnt = 20;
 80083ca:	4b30      	ldr	r3, [pc, #192]	; (800848c <Var_Init+0x174>)
 80083cc:	2214      	movs	r2, #20
 80083ce:	701a      	strb	r2, [r3, #0]
  u8_AutospdCnt = 20; 
 80083d0:	4b2f      	ldr	r3, [pc, #188]	; (8008490 <Var_Init+0x178>)
 80083d2:	2214      	movs	r2, #20
 80083d4:	701a      	strb	r2, [r3, #0]
  
  	
  u8_SMTDlmitErCnt = 0; 
 80083d6:	4b2f      	ldr	r3, [pc, #188]	; (8008494 <Var_Init+0x17c>)
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
  u8_SMTCsumErCnt = 0;
 80083dc:	4b2e      	ldr	r3, [pc, #184]	; (8008498 <Var_Init+0x180>)
 80083de:	2200      	movs	r2, #0
 80083e0:	701a      	strb	r2, [r3, #0]
  u2_ErCnt = 0;
 80083e2:	4b2e      	ldr	r3, [pc, #184]	; (800849c <Var_Init+0x184>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	701a      	strb	r2, [r3, #0]
	
  u16_TestCnt = 0;
 80083e8:	4b2d      	ldr	r3, [pc, #180]	; (80084a0 <Var_Init+0x188>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	801a      	strh	r2, [r3, #0]
  smt_DbgCommand = 0;
 80083ee:	4b2d      	ldr	r3, [pc, #180]	; (80084a4 <Var_Init+0x18c>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	701a      	strb	r2, [r3, #0]

  LKAUTOSeq = 0;
 80083f4:	4b2c      	ldr	r3, [pc, #176]	; (80084a8 <Var_Init+0x190>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	701a      	strb	r2, [r3, #0]

  uSysStatusFlag |= f_Pump1st;
 80083fa:	4b09      	ldr	r3, [pc, #36]	; (8008420 <Var_Init+0x108>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008402:	4a07      	ldr	r2, [pc, #28]	; (8008420 <Var_Init+0x108>)
 8008404:	6013      	str	r3, [r2, #0]
  
  bcon_Req = 0;
 8008406:	4b29      	ldr	r3, [pc, #164]	; (80084ac <Var_Init+0x194>)
 8008408:	2200      	movs	r2, #0
 800840a:	701a      	strb	r2, [r3, #0]
  bcon_Out = 0;
 800840c:	4b28      	ldr	r3, [pc, #160]	; (80084b0 <Var_Init+0x198>)
 800840e:	2200      	movs	r2, #0
 8008410:	701a      	strb	r2, [r3, #0]
  bcon_Req = bcon_R;
 8008412:	4b26      	ldr	r3, [pc, #152]	; (80084ac <Var_Init+0x194>)
 8008414:	2201      	movs	r2, #1
 8008416:	701a      	strb	r2, [r3, #0]
  Bcon_Out();
 8008418:	f7ff fca4 	bl	8007d64 <Bcon_Out>
}
 800841c:	bf00      	nop
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20000cf8 	.word	0x20000cf8
 8008424:	20000cdc 	.word	0x20000cdc
 8008428:	20000ce8 	.word	0x20000ce8
 800842c:	20000d30 	.word	0x20000d30
 8008430:	20000d36 	.word	0x20000d36
 8008434:	20000d08 	.word	0x20000d08
 8008438:	20000d0a 	.word	0x20000d0a
 800843c:	20000cf4 	.word	0x20000cf4
 8008440:	20000d42 	.word	0x20000d42
 8008444:	20000d43 	.word	0x20000d43
 8008448:	20000d44 	.word	0x20000d44
 800844c:	20000d45 	.word	0x20000d45
 8008450:	20000d0d 	.word	0x20000d0d
 8008454:	20000d38 	.word	0x20000d38
 8008458:	20000d1c 	.word	0x20000d1c
 800845c:	20000d1d 	.word	0x20000d1d
 8008460:	20000d1f 	.word	0x20000d1f
 8008464:	20000d1e 	.word	0x20000d1e
 8008468:	20000d32 	.word	0x20000d32
 800846c:	20000038 	.word	0x20000038
 8008470:	20000d5d 	.word	0x20000d5d
 8008474:	08012ea4 	.word	0x08012ea4
 8008478:	20000d28 	.word	0x20000d28
 800847c:	08012eb0 	.word	0x08012eb0
 8008480:	20000d29 	.word	0x20000d29
 8008484:	08012eb4 	.word	0x08012eb4
 8008488:	20000d2a 	.word	0x20000d2a
 800848c:	20000d46 	.word	0x20000d46
 8008490:	20000d47 	.word	0x20000d47
 8008494:	20000d0b 	.word	0x20000d0b
 8008498:	20000d0c 	.word	0x20000d0c
 800849c:	20000d48 	.word	0x20000d48
 80084a0:	20000d3e 	.word	0x20000d3e
 80084a4:	20000d40 	.word	0x20000d40
 80084a8:	20000d59 	.word	0x20000d59
 80084ac:	20000d33 	.word	0x20000d33
 80084b0:	20000d34 	.word	0x20000d34

080084b4 <init_set>:
void init_set()
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
	if ( load_value.Motor_type == 1)
 80084b8:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <init_set+0x44>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d103      	bne.n	80084c8 <init_set+0x14>
	{
		DRV_SPDTBNo = 0; // Curtis type
 80084c0:	4b0e      	ldr	r3, [pc, #56]	; (80084fc <init_set+0x48>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	e002      	b.n	80084ce <init_set+0x1a>
	}
	else 
	{
		DRV_SPDTBNo = 1; // DMCS type
 80084c8:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <init_set+0x48>)
 80084ca:	2201      	movs	r2, #1
 80084cc:	701a      	strb	r2, [r3, #0]
	}
	

	if ( load_value.Battery_type == 1 )
 80084ce:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <init_set+0x44>)
 80084d0:	78db      	ldrb	r3, [r3, #3]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d106      	bne.n	80084e4 <init_set+0x30>
	{
		
		Idle_bat_limit = 48;   // Atlas
 80084d6:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <init_set+0x4c>)
 80084d8:	4a0a      	ldr	r2, [pc, #40]	; (8008504 <init_set+0x50>)
 80084da:	601a      	str	r2, [r3, #0]
		DisCharge_bat_limit = 44.5; 
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <init_set+0x54>)
 80084de:	4a0b      	ldr	r2, [pc, #44]	; (800850c <init_set+0x58>)
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	e005      	b.n	80084f0 <init_set+0x3c>
	}
	else  
	{
		Idle_bat_limit = 47;   // Longist
 80084e4:	4b06      	ldr	r3, [pc, #24]	; (8008500 <init_set+0x4c>)
 80084e6:	4a0a      	ldr	r2, [pc, #40]	; (8008510 <init_set+0x5c>)
 80084e8:	601a      	str	r2, [r3, #0]
		DisCharge_bat_limit = 44.5;
 80084ea:	4b07      	ldr	r3, [pc, #28]	; (8008508 <init_set+0x54>)
 80084ec:	4a07      	ldr	r2, [pc, #28]	; (800850c <init_set+0x58>)
 80084ee:	601a      	str	r2, [r3, #0]



	

}
 80084f0:	bf00      	nop
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bc80      	pop	{r7}
 80084f6:	4770      	bx	lr
 80084f8:	20000ddc 	.word	0x20000ddc
 80084fc:	20000d5d 	.word	0x20000d5d
 8008500:	20000dd4 	.word	0x20000dd4
 8008504:	42400000 	.word	0x42400000
 8008508:	20000dd8 	.word	0x20000dd8
 800850c:	42320000 	.word	0x42320000
 8008510:	423c0000 	.word	0x423c0000

08008514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008518:	4b08      	ldr	r3, [pc, #32]	; (800853c <HAL_Init+0x28>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a07      	ldr	r2, [pc, #28]	; (800853c <HAL_Init+0x28>)
 800851e:	f043 0310 	orr.w	r3, r3, #16
 8008522:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008524:	2003      	movs	r0, #3
 8008526:	f001 fb91 	bl	8009c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800852a:	200f      	movs	r0, #15
 800852c:	f000 f808 	bl	8008540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008530:	f7f9 fa44 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40022000 	.word	0x40022000

08008540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008548:	4b12      	ldr	r3, [pc, #72]	; (8008594 <HAL_InitTick+0x54>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	4b12      	ldr	r3, [pc, #72]	; (8008598 <HAL_InitTick+0x58>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	4619      	mov	r1, r3
 8008552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008556:	fbb3 f3f1 	udiv	r3, r3, r1
 800855a:	fbb2 f3f3 	udiv	r3, r2, r3
 800855e:	4618      	mov	r0, r3
 8008560:	f001 fbb7 	bl	8009cd2 <HAL_SYSTICK_Config>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e00e      	b.n	800858c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b0f      	cmp	r3, #15
 8008572:	d80a      	bhi.n	800858a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008574:	2200      	movs	r2, #0
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	f001 fb71 	bl	8009c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008580:	4a06      	ldr	r2, [pc, #24]	; (800859c <HAL_InitTick+0x5c>)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	e000      	b.n	800858c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	20000000 	.word	0x20000000
 8008598:	2000004c 	.word	0x2000004c
 800859c:	20000048 	.word	0x20000048

080085a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80085a4:	4b05      	ldr	r3, [pc, #20]	; (80085bc <HAL_IncTick+0x1c>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	461a      	mov	r2, r3
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <HAL_IncTick+0x20>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4413      	add	r3, r2
 80085b0:	4a03      	ldr	r2, [pc, #12]	; (80085c0 <HAL_IncTick+0x20>)
 80085b2:	6013      	str	r3, [r2, #0]
}
 80085b4:	bf00      	nop
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr
 80085bc:	2000004c 	.word	0x2000004c
 80085c0:	20000df8 	.word	0x20000df8

080085c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80085c4:	b480      	push	{r7}
 80085c6:	af00      	add	r7, sp, #0
  return uwTick;
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <HAL_GetTick+0x10>)
 80085ca:	681b      	ldr	r3, [r3, #0]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr
 80085d4:	20000df8 	.word	0x20000df8

080085d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80085e0:	f7ff fff0 	bl	80085c4 <HAL_GetTick>
 80085e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f0:	d005      	beq.n	80085fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80085f2:	4b0a      	ldr	r3, [pc, #40]	; (800861c <HAL_Delay+0x44>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]
  }


  while ((HAL_GetTick() - tickstart) < wait)
 80085fe:	bf00      	nop
 8008600:	f7ff ffe0 	bl	80085c4 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	429a      	cmp	r2, r3
 800860e:	d8f7      	bhi.n	8008600 <HAL_Delay+0x28>
  {
  }
}
 8008610:	bf00      	nop
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	2000004c 	.word	0x2000004c

08008620 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e0ce      	b.n	80087e0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864c:	2b00      	cmp	r3, #0
 800864e:	d109      	bne.n	8008664 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7f8 fe7c 	bl	800135c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fb11 	bl	8008c8c <ADC_ConversionStop_Disable>
 800866a:	4603      	mov	r3, r0
 800866c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	f003 0310 	and.w	r3, r3, #16
 8008676:	2b00      	cmp	r3, #0
 8008678:	f040 80a9 	bne.w	80087ce <HAL_ADC_Init+0x1ae>
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f040 80a5 	bne.w	80087ce <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800868c:	f023 0302 	bic.w	r3, r3, #2
 8008690:	f043 0202 	orr.w	r2, r3, #2
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4951      	ldr	r1, [pc, #324]	; (80087e8 <HAL_ADC_Init+0x1c8>)
 80086a2:	428b      	cmp	r3, r1
 80086a4:	d10a      	bne.n	80086bc <HAL_ADC_Init+0x9c>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80086ae:	d002      	beq.n	80086b6 <HAL_ADC_Init+0x96>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	e004      	b.n	80086c0 <HAL_ADC_Init+0xa0>
 80086b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80086ba:	e001      	b.n	80086c0 <HAL_ADC_Init+0xa0>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80086c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	7b1b      	ldrb	r3, [r3, #12]
 80086c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80086c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d8:	d003      	beq.n	80086e2 <HAL_ADC_Init+0xc2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d102      	bne.n	80086e8 <HAL_ADC_Init+0xc8>
 80086e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086e6:	e000      	b.n	80086ea <HAL_ADC_Init+0xca>
 80086e8:	2300      	movs	r3, #0
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7d1b      	ldrb	r3, [r3, #20]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d119      	bne.n	800872c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	7b1b      	ldrb	r3, [r3, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d109      	bne.n	8008714 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	3b01      	subs	r3, #1
 8008706:	035a      	lsls	r2, r3, #13
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	4313      	orrs	r3, r2
 800870c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	e00b      	b.n	800872c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	f043 0220 	orr.w	r2, r3, #32
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	f043 0201 	orr.w	r2, r3, #1
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	430a      	orrs	r2, r1
 800873e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689a      	ldr	r2, [r3, #8]
 8008746:	4b29      	ldr	r3, [pc, #164]	; (80087ec <HAL_ADC_Init+0x1cc>)
 8008748:	4013      	ands	r3, r2
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	6812      	ldr	r2, [r2, #0]
 800874e:	68b9      	ldr	r1, [r7, #8]
 8008750:	430b      	orrs	r3, r1
 8008752:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800875c:	d003      	beq.n	8008766 <HAL_ADC_Init+0x146>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d104      	bne.n	8008770 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	3b01      	subs	r3, #1
 800876c:	051b      	lsls	r3, r3, #20
 800876e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008776:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	430a      	orrs	r2, r1
 8008782:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	4b19      	ldr	r3, [pc, #100]	; (80087f0 <HAL_ADC_Init+0x1d0>)
 800878c:	4013      	ands	r3, r2
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	429a      	cmp	r2, r3
 8008792:	d10b      	bne.n	80087ac <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	f023 0303 	bic.w	r3, r3, #3
 80087a2:	f043 0201 	orr.w	r2, r3, #1
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80087aa:	e018      	b.n	80087de <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b0:	f023 0312 	bic.w	r3, r3, #18
 80087b4:	f043 0210 	orr.w	r2, r3, #16
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	f043 0201 	orr.w	r2, r3, #1
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80087cc:	e007      	b.n	80087de <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	f043 0210 	orr.w	r2, r3, #16
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80087de:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	40013c00 	.word	0x40013c00
 80087ec:	ffe1f7fd 	.word	0xffe1f7fd
 80087f0:	ff1f0efe 	.word	0xff1f0efe

080087f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a64      	ldr	r2, [pc, #400]	; (800899c <HAL_ADC_Start_DMA+0x1a8>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d004      	beq.n	8008818 <HAL_ADC_Start_DMA+0x24>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a63      	ldr	r2, [pc, #396]	; (80089a0 <HAL_ADC_Start_DMA+0x1ac>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d106      	bne.n	8008826 <HAL_ADC_Start_DMA+0x32>
 8008818:	4b60      	ldr	r3, [pc, #384]	; (800899c <HAL_ADC_Start_DMA+0x1a8>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008820:	2b00      	cmp	r3, #0
 8008822:	f040 80b3 	bne.w	800898c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800882c:	2b01      	cmp	r3, #1
 800882e:	d101      	bne.n	8008834 <HAL_ADC_Start_DMA+0x40>
 8008830:	2302      	movs	r3, #2
 8008832:	e0ae      	b.n	8008992 <HAL_ADC_Start_DMA+0x19e>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 f9cb 	bl	8008bd8 <ADC_Enable>
 8008842:	4603      	mov	r3, r0
 8008844:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	2b00      	cmp	r3, #0
 800884a:	f040 809a 	bne.w	8008982 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008852:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008856:	f023 0301 	bic.w	r3, r3, #1
 800885a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a4e      	ldr	r2, [pc, #312]	; (80089a0 <HAL_ADC_Start_DMA+0x1ac>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d105      	bne.n	8008878 <HAL_ADC_Start_DMA+0x84>
 800886c:	4b4b      	ldr	r3, [pc, #300]	; (800899c <HAL_ADC_Start_DMA+0x1a8>)
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d115      	bne.n	80088a4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800888e:	2b00      	cmp	r3, #0
 8008890:	d026      	beq.n	80088e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008896:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800889a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80088a2:	e01d      	b.n	80088e0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a39      	ldr	r2, [pc, #228]	; (800899c <HAL_ADC_Start_DMA+0x1a8>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d004      	beq.n	80088c4 <HAL_ADC_Start_DMA+0xd0>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a38      	ldr	r2, [pc, #224]	; (80089a0 <HAL_ADC_Start_DMA+0x1ac>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d10d      	bne.n	80088e0 <HAL_ADC_Start_DMA+0xec>
 80088c4:	4b35      	ldr	r3, [pc, #212]	; (800899c <HAL_ADC_Start_DMA+0x1a8>)
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d007      	beq.n	80088e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80088d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d006      	beq.n	80088fa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	f023 0206 	bic.w	r2, r3, #6
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80088f8:	e002      	b.n	8008900 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	4a25      	ldr	r2, [pc, #148]	; (80089a4 <HAL_ADC_Start_DMA+0x1b0>)
 800890e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	4a24      	ldr	r2, [pc, #144]	; (80089a8 <HAL_ADC_Start_DMA+0x1b4>)
 8008916:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	4a23      	ldr	r2, [pc, #140]	; (80089ac <HAL_ADC_Start_DMA+0x1b8>)
 800891e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f06f 0202 	mvn.w	r2, #2
 8008928:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008938:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a18      	ldr	r0, [r3, #32]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	334c      	adds	r3, #76	; 0x4c
 8008944:	4619      	mov	r1, r3
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f001 fbb5 	bl	800a0b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008958:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800895c:	d108      	bne.n	8008970 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800896c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800896e:	e00f      	b.n	8008990 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800897e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8008980:	e006      	b.n	8008990 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800898a:	e001      	b.n	8008990 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	40012400 	.word	0x40012400
 80089a0:	40012800 	.word	0x40012800
 80089a4:	08008d0f 	.word	0x08008d0f
 80089a8:	08008d8b 	.word	0x08008d8b
 80089ac:	08008da7 	.word	0x08008da7

080089b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	bc80      	pop	{r7}
 80089c0:	4770      	bx	lr

080089c2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bc80      	pop	{r7}
 80089d2:	4770      	bx	lr

080089d4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bc80      	pop	{r7}
 80089e4:	4770      	bx	lr
	...

080089e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d101      	bne.n	8008a08 <HAL_ADC_ConfigChannel+0x20>
 8008a04:	2302      	movs	r3, #2
 8008a06:	e0dc      	b.n	8008bc2 <HAL_ADC_ConfigChannel+0x1da>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	2b06      	cmp	r3, #6
 8008a16:	d81c      	bhi.n	8008a52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	3b05      	subs	r3, #5
 8008a2a:	221f      	movs	r2, #31
 8008a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a30:	43db      	mvns	r3, r3
 8008a32:	4019      	ands	r1, r3
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	3b05      	subs	r3, #5
 8008a44:	fa00 f203 	lsl.w	r2, r0, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	430a      	orrs	r2, r1
 8008a4e:	635a      	str	r2, [r3, #52]	; 0x34
 8008a50:	e03c      	b.n	8008acc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b0c      	cmp	r3, #12
 8008a58:	d81c      	bhi.n	8008a94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	4613      	mov	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	3b23      	subs	r3, #35	; 0x23
 8008a6c:	221f      	movs	r2, #31
 8008a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a72:	43db      	mvns	r3, r3
 8008a74:	4019      	ands	r1, r3
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	3b23      	subs	r3, #35	; 0x23
 8008a86:	fa00 f203 	lsl.w	r2, r0, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	631a      	str	r2, [r3, #48]	; 0x30
 8008a92:	e01b      	b.n	8008acc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3b41      	subs	r3, #65	; 0x41
 8008aa6:	221f      	movs	r2, #31
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	43db      	mvns	r3, r3
 8008aae:	4019      	ands	r1, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	6818      	ldr	r0, [r3, #0]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	3b41      	subs	r3, #65	; 0x41
 8008ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b09      	cmp	r3, #9
 8008ad2:	d91c      	bls.n	8008b0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68d9      	ldr	r1, [r3, #12]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	4413      	add	r3, r2
 8008ae4:	3b1e      	subs	r3, #30
 8008ae6:	2207      	movs	r2, #7
 8008ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aec:	43db      	mvns	r3, r3
 8008aee:	4019      	ands	r1, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	6898      	ldr	r0, [r3, #8]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	4613      	mov	r3, r2
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	4413      	add	r3, r2
 8008afe:	3b1e      	subs	r3, #30
 8008b00:	fa00 f203 	lsl.w	r2, r0, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	60da      	str	r2, [r3, #12]
 8008b0c:	e019      	b.n	8008b42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6919      	ldr	r1, [r3, #16]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	4413      	add	r3, r2
 8008b1e:	2207      	movs	r2, #7
 8008b20:	fa02 f303 	lsl.w	r3, r2, r3
 8008b24:	43db      	mvns	r3, r3
 8008b26:	4019      	ands	r1, r3
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	6898      	ldr	r0, [r3, #8]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	4613      	mov	r3, r2
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	4413      	add	r3, r2
 8008b36:	fa00 f203 	lsl.w	r2, r0, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b10      	cmp	r3, #16
 8008b48:	d003      	beq.n	8008b52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008b4e:	2b11      	cmp	r3, #17
 8008b50:	d132      	bne.n	8008bb8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1d      	ldr	r2, [pc, #116]	; (8008bcc <HAL_ADC_ConfigChannel+0x1e4>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d125      	bne.n	8008ba8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d126      	bne.n	8008bb8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689a      	ldr	r2, [r3, #8]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008b78:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b10      	cmp	r3, #16
 8008b80:	d11a      	bne.n	8008bb8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008b82:	4b13      	ldr	r3, [pc, #76]	; (8008bd0 <HAL_ADC_ConfigChannel+0x1e8>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a13      	ldr	r2, [pc, #76]	; (8008bd4 <HAL_ADC_ConfigChannel+0x1ec>)
 8008b88:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8c:	0c9a      	lsrs	r2, r3, #18
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008b98:	e002      	b.n	8008ba0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1f9      	bne.n	8008b9a <HAL_ADC_ConfigChannel+0x1b2>
 8008ba6:	e007      	b.n	8008bb8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bac:	f043 0220 	orr.w	r2, r3, #32
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bc80      	pop	{r7}
 8008bca:	4770      	bx	lr
 8008bcc:	40012400 	.word	0x40012400
 8008bd0:	20000000 	.word	0x20000000
 8008bd4:	431bde83 	.word	0x431bde83

08008bd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d040      	beq.n	8008c78 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f042 0201 	orr.w	r2, r2, #1
 8008c04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008c06:	4b1f      	ldr	r3, [pc, #124]	; (8008c84 <ADC_Enable+0xac>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a1f      	ldr	r2, [pc, #124]	; (8008c88 <ADC_Enable+0xb0>)
 8008c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c10:	0c9b      	lsrs	r3, r3, #18
 8008c12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008c14:	e002      	b.n	8008c1c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1f9      	bne.n	8008c16 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008c22:	f7ff fccf 	bl	80085c4 <HAL_GetTick>
 8008c26:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008c28:	e01f      	b.n	8008c6a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008c2a:	f7ff fccb 	bl	80085c4 <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d918      	bls.n	8008c6a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d011      	beq.n	8008c6a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	f043 0210 	orr.w	r2, r3, #16
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c56:	f043 0201 	orr.w	r2, r3, #1
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e007      	b.n	8008c7a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d1d8      	bne.n	8008c2a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000000 	.word	0x20000000
 8008c88:	431bde83 	.word	0x431bde83

08008c8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d12e      	bne.n	8008d04 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0201 	bic.w	r2, r2, #1
 8008cb4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008cb6:	f7ff fc85 	bl	80085c4 <HAL_GetTick>
 8008cba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008cbc:	e01b      	b.n	8008cf6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008cbe:	f7ff fc81 	bl	80085c4 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d914      	bls.n	8008cf6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d10d      	bne.n	8008cf6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cde:	f043 0210 	orr.w	r2, r3, #16
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cea:	f043 0201 	orr.w	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e007      	b.n	8008d06 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d0dc      	beq.n	8008cbe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d127      	bne.n	8008d78 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008d3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8008d42:	d115      	bne.n	8008d70 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d111      	bne.n	8008d70 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d105      	bne.n	8008d70 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d68:	f043 0201 	orr.w	r2, r3, #1
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f7ff fe1d 	bl	80089b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8008d76:	e004      	b.n	8008d82 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	4798      	blx	r3
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7ff fe12 	bl	80089c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008d9e:	bf00      	nop
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc4:	f043 0204 	orr.w	r2, r3, #4
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7ff fe01 	bl	80089d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e0ed      	b.n	8008fc8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7f8 fb4d 	bl	8001498 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f042 0201 	orr.w	r2, r2, #1
 8008e0c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e0e:	f7ff fbd9 	bl	80085c4 <HAL_GetTick>
 8008e12:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008e14:	e012      	b.n	8008e3c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008e16:	f7ff fbd5 	bl	80085c4 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b0a      	cmp	r3, #10
 8008e22:	d90b      	bls.n	8008e3c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2205      	movs	r2, #5
 8008e34:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e0c5      	b.n	8008fc8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d0e5      	beq.n	8008e16 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0202 	bic.w	r2, r2, #2
 8008e58:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e5a:	f7ff fbb3 	bl	80085c4 <HAL_GetTick>
 8008e5e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008e60:	e012      	b.n	8008e88 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008e62:	f7ff fbaf 	bl	80085c4 <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	2b0a      	cmp	r3, #10
 8008e6e:	d90b      	bls.n	8008e88 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2205      	movs	r2, #5
 8008e80:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e09f      	b.n	8008fc8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e5      	bne.n	8008e62 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	7e1b      	ldrb	r3, [r3, #24]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d108      	bne.n	8008eb0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	e007      	b.n	8008ec0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	7e5b      	ldrb	r3, [r3, #25]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d108      	bne.n	8008eda <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	e007      	b.n	8008eea <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7e9b      	ldrb	r3, [r3, #26]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d108      	bne.n	8008f04 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0220 	orr.w	r2, r2, #32
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	e007      	b.n	8008f14 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0220 	bic.w	r2, r2, #32
 8008f12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	7edb      	ldrb	r3, [r3, #27]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d108      	bne.n	8008f2e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f022 0210 	bic.w	r2, r2, #16
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	e007      	b.n	8008f3e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f042 0210 	orr.w	r2, r2, #16
 8008f3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	7f1b      	ldrb	r3, [r3, #28]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d108      	bne.n	8008f58 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0208 	orr.w	r2, r2, #8
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	e007      	b.n	8008f68 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0208 	bic.w	r2, r2, #8
 8008f66:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7f5b      	ldrb	r3, [r3, #29]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d108      	bne.n	8008f82 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0204 	orr.w	r2, r2, #4
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	e007      	b.n	8008f92 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f022 0204 	bic.w	r2, r2, #4
 8008f90:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	689a      	ldr	r2, [r3, #8]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	ea42 0103 	orr.w	r1, r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	1e5a      	subs	r2, r3, #1
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fe6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008fe8:	7cfb      	ldrb	r3, [r7, #19]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d003      	beq.n	8008ff6 <HAL_CAN_ConfigFilter+0x26>
 8008fee:	7cfb      	ldrb	r3, [r7, #19]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	f040 80aa 	bne.w	800914a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ffc:	f043 0201 	orr.w	r2, r3, #1
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	f003 031f 	and.w	r3, r3, #31
 800900e:	2201      	movs	r2, #1
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	43db      	mvns	r3, r3
 8009020:	401a      	ands	r2, r3
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	69db      	ldr	r3, [r3, #28]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d123      	bne.n	8009078 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	43db      	mvns	r3, r3
 800903a:	401a      	ands	r2, r3
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009052:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	3248      	adds	r2, #72	; 0x48
 8009058:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800906c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800906e:	6979      	ldr	r1, [r7, #20]
 8009070:	3348      	adds	r3, #72	; 0x48
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	440b      	add	r3, r1
 8009076:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d122      	bne.n	80090c6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	431a      	orrs	r2, r3
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80090a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	3248      	adds	r2, #72	; 0x48
 80090a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80090ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80090bc:	6979      	ldr	r1, [r7, #20]
 80090be:	3348      	adds	r3, #72	; 0x48
 80090c0:	00db      	lsls	r3, r3, #3
 80090c2:	440b      	add	r3, r1
 80090c4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	43db      	mvns	r3, r3
 80090d8:	401a      	ands	r2, r3
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80090e0:	e007      	b.n	80090f2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	431a      	orrs	r2, r3
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d109      	bne.n	800910e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	43db      	mvns	r3, r3
 8009104:	401a      	ands	r2, r3
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800910c:	e007      	b.n	800911e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	431a      	orrs	r2, r3
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d107      	bne.n	8009136 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	431a      	orrs	r2, r3
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800913c:	f023 0201 	bic.w	r2, r3, #1
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	e006      	b.n	8009158 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
  }
}
 8009158:	4618      	mov	r0, r3
 800915a:	371c      	adds	r7, #28
 800915c:	46bd      	mov	sp, r7
 800915e:	bc80      	pop	{r7}
 8009160:	4770      	bx	lr

08009162 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b01      	cmp	r3, #1
 8009174:	d12e      	bne.n	80091d4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2202      	movs	r2, #2
 800917a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0201 	bic.w	r2, r2, #1
 800918c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800918e:	f7ff fa19 	bl	80085c4 <HAL_GetTick>
 8009192:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009194:	e012      	b.n	80091bc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009196:	f7ff fa15 	bl	80085c4 <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	2b0a      	cmp	r3, #10
 80091a2:	d90b      	bls.n	80091bc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2205      	movs	r2, #5
 80091b4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e012      	b.n	80091e2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1e5      	bne.n	8009196 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	e006      	b.n	80091e2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
  }
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b089      	sub	sp, #36	; 0x24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009208:	7ffb      	ldrb	r3, [r7, #31]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d003      	beq.n	8009216 <HAL_CAN_AddTxMessage+0x2c>
 800920e:	7ffb      	ldrb	r3, [r7, #31]
 8009210:	2b02      	cmp	r3, #2
 8009212:	f040 80ad 	bne.w	8009370 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10a      	bne.n	8009236 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009226:	2b00      	cmp	r3, #0
 8009228:	d105      	bne.n	8009236 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 8095 	beq.w	8009360 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	0e1b      	lsrs	r3, r3, #24
 800923a:	f003 0303 	and.w	r3, r3, #3
 800923e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009240:	2201      	movs	r2, #1
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	409a      	lsls	r2, r3
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10d      	bne.n	800926e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800925c:	68f9      	ldr	r1, [r7, #12]
 800925e:	6809      	ldr	r1, [r1, #0]
 8009260:	431a      	orrs	r2, r3
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	3318      	adds	r3, #24
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	440b      	add	r3, r1
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	e00f      	b.n	800928e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009278:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009282:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	3318      	adds	r3, #24
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	440b      	add	r3, r1
 800928c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6819      	ldr	r1, [r3, #0]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	691a      	ldr	r2, [r3, #16]
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	3318      	adds	r3, #24
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	440b      	add	r3, r1
 800929e:	3304      	adds	r3, #4
 80092a0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	7d1b      	ldrb	r3, [r3, #20]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d111      	bne.n	80092ce <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	3318      	adds	r3, #24
 80092b2:	011b      	lsls	r3, r3, #4
 80092b4:	4413      	add	r3, r2
 80092b6:	3304      	adds	r3, #4
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	6811      	ldr	r1, [r2, #0]
 80092be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	3318      	adds	r3, #24
 80092c6:	011b      	lsls	r3, r3, #4
 80092c8:	440b      	add	r3, r1
 80092ca:	3304      	adds	r3, #4
 80092cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3307      	adds	r3, #7
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	061a      	lsls	r2, r3, #24
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3306      	adds	r3, #6
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	041b      	lsls	r3, r3, #16
 80092de:	431a      	orrs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3305      	adds	r3, #5
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	021b      	lsls	r3, r3, #8
 80092e8:	4313      	orrs	r3, r2
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	3204      	adds	r2, #4
 80092ee:	7812      	ldrb	r2, [r2, #0]
 80092f0:	4610      	mov	r0, r2
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	6811      	ldr	r1, [r2, #0]
 80092f6:	ea43 0200 	orr.w	r2, r3, r0
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	440b      	add	r3, r1
 8009300:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009304:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3303      	adds	r3, #3
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	061a      	lsls	r2, r3, #24
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3302      	adds	r3, #2
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	041b      	lsls	r3, r3, #16
 8009316:	431a      	orrs	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3301      	adds	r3, #1
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	021b      	lsls	r3, r3, #8
 8009320:	4313      	orrs	r3, r2
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	7812      	ldrb	r2, [r2, #0]
 8009326:	4610      	mov	r0, r2
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	6811      	ldr	r1, [r2, #0]
 800932c:	ea43 0200 	orr.w	r2, r3, r0
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	011b      	lsls	r3, r3, #4
 8009334:	440b      	add	r3, r1
 8009336:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800933a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	3318      	adds	r3, #24
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	4413      	add	r3, r2
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	6811      	ldr	r1, [r2, #0]
 800934e:	f043 0201 	orr.w	r2, r3, #1
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	3318      	adds	r3, #24
 8009356:	011b      	lsls	r3, r3, #4
 8009358:	440b      	add	r3, r1
 800935a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	e00e      	b.n	800937e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e006      	b.n	800937e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
  }
}
 800937e:	4618      	mov	r0, r3
 8009380:	3724      	adds	r7, #36	; 0x24
 8009382:	46bd      	mov	sp, r7
 8009384:	bc80      	pop	{r7}
 8009386:	4770      	bx	lr

08009388 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800939c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d003      	beq.n	80093ac <HAL_CAN_GetRxMessage+0x24>
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	f040 8103 	bne.w	80095b2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10e      	bne.n	80093d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f003 0303 	and.w	r3, r3, #3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d116      	bne.n	80093ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e0f7      	b.n	80095c0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	f003 0303 	and.w	r3, r3, #3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d107      	bne.n	80093ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e0e8      	b.n	80095c0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	331b      	adds	r3, #27
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	4413      	add	r3, r2
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0204 	and.w	r2, r3, #4
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10c      	bne.n	8009426 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	331b      	adds	r3, #27
 8009414:	011b      	lsls	r3, r3, #4
 8009416:	4413      	add	r3, r2
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	0d5b      	lsrs	r3, r3, #21
 800941c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	e00b      	b.n	800943e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	331b      	adds	r3, #27
 800942e:	011b      	lsls	r3, r3, #4
 8009430:	4413      	add	r3, r2
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	08db      	lsrs	r3, r3, #3
 8009436:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	331b      	adds	r3, #27
 8009446:	011b      	lsls	r3, r3, #4
 8009448:	4413      	add	r3, r2
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0202 	and.w	r2, r3, #2
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	331b      	adds	r3, #27
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	4413      	add	r3, r2
 8009460:	3304      	adds	r3, #4
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0308 	and.w	r3, r3, #8
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2208      	movs	r2, #8
 8009470:	611a      	str	r2, [r3, #16]
 8009472:	e00b      	b.n	800948c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	331b      	adds	r3, #27
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	4413      	add	r3, r2
 8009480:	3304      	adds	r3, #4
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 020f 	and.w	r2, r3, #15
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	331b      	adds	r3, #27
 8009494:	011b      	lsls	r3, r3, #4
 8009496:	4413      	add	r3, r2
 8009498:	3304      	adds	r3, #4
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	0a1b      	lsrs	r3, r3, #8
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	331b      	adds	r3, #27
 80094ac:	011b      	lsls	r3, r3, #4
 80094ae:	4413      	add	r3, r2
 80094b0:	3304      	adds	r3, #4
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	0c1b      	lsrs	r3, r3, #16
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	011b      	lsls	r3, r3, #4
 80094c4:	4413      	add	r3, r2
 80094c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	011b      	lsls	r3, r3, #4
 80094da:	4413      	add	r3, r2
 80094dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	0a1a      	lsrs	r2, r3, #8
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	3301      	adds	r3, #1
 80094e8:	b2d2      	uxtb	r2, r2
 80094ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	0c1a      	lsrs	r2, r3, #16
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	3302      	adds	r3, #2
 8009502:	b2d2      	uxtb	r2, r2
 8009504:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	011b      	lsls	r3, r3, #4
 800950e:	4413      	add	r3, r2
 8009510:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	0e1a      	lsrs	r2, r3, #24
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	3303      	adds	r3, #3
 800951c:	b2d2      	uxtb	r2, r2
 800951e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	011b      	lsls	r3, r3, #4
 8009528:	4413      	add	r3, r2
 800952a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	3304      	adds	r3, #4
 8009534:	b2d2      	uxtb	r2, r2
 8009536:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	011b      	lsls	r3, r3, #4
 8009540:	4413      	add	r3, r2
 8009542:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	0a1a      	lsrs	r2, r3, #8
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	3305      	adds	r3, #5
 800954e:	b2d2      	uxtb	r2, r2
 8009550:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	4413      	add	r3, r2
 800955c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	0c1a      	lsrs	r2, r3, #16
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	3306      	adds	r3, #6
 8009568:	b2d2      	uxtb	r2, r2
 800956a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	011b      	lsls	r3, r3, #4
 8009574:	4413      	add	r3, r2
 8009576:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	0e1a      	lsrs	r2, r3, #24
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	3307      	adds	r3, #7
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d108      	bne.n	800959e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68da      	ldr	r2, [r3, #12]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0220 	orr.w	r2, r2, #32
 800959a:	60da      	str	r2, [r3, #12]
 800959c:	e007      	b.n	80095ae <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	691a      	ldr	r2, [r3, #16]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f042 0220 	orr.w	r2, r2, #32
 80095ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e006      	b.n	80095c0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
  }
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	371c      	adds	r7, #28
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bc80      	pop	{r7}
 80095c8:	4770      	bx	lr

080095ca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b085      	sub	sp, #20
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095da:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d002      	beq.n	80095e8 <HAL_CAN_ActivateNotification+0x1e>
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d109      	bne.n	80095fc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6959      	ldr	r1, [r3, #20]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	e006      	b.n	800960a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
  }
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	bc80      	pop	{r7}
 8009612:	4770      	bx	lr

08009614 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08a      	sub	sp, #40	; 0x28
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800961c:	2300      	movs	r3, #0
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d07c      	beq.n	8009754 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	d023      	beq.n	80096ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2201      	movs	r2, #1
 800966a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f983 	bl	8009982 <HAL_CAN_TxMailbox0CompleteCallback>
 800967c:	e016      	b.n	80096ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b00      	cmp	r3, #0
 8009686:	d004      	beq.n	8009692 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
 8009690:	e00c      	b.n	80096ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	f003 0308 	and.w	r3, r3, #8
 8009698:	2b00      	cmp	r3, #0
 800969a:	d004      	beq.n	80096a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80096a2:	627b      	str	r3, [r7, #36]	; 0x24
 80096a4:	e002      	b.n	80096ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f986 	bl	80099b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d024      	beq.n	8009700 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f962 	bl	8009994 <HAL_CAN_TxMailbox1CompleteCallback>
 80096d0:	e016      	b.n	8009700 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d004      	beq.n	80096e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
 80096e4:	e00c      	b.n	8009700 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d004      	beq.n	80096fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096f6:	627b      	str	r3, [r7, #36]	; 0x24
 80096f8:	e002      	b.n	8009700 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f965 	bl	80099ca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d024      	beq.n	8009754 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009712:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d003      	beq.n	8009726 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f941 	bl	80099a6 <HAL_CAN_TxMailbox2CompleteCallback>
 8009724:	e016      	b.n	8009754 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d004      	beq.n	800973a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
 8009738:	e00c      	b.n	8009754 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d004      	beq.n	800974e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800974a:	627b      	str	r3, [r7, #36]	; 0x24
 800974c:	e002      	b.n	8009754 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f944 	bl	80099dc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	f003 0308 	and.w	r3, r3, #8
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00c      	beq.n	8009778 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f003 0310 	and.w	r3, r3, #16
 8009764:	2b00      	cmp	r3, #0
 8009766:	d007      	beq.n	8009778 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800976e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2210      	movs	r2, #16
 8009776:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00b      	beq.n	800979a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f003 0308 	and.w	r3, r3, #8
 8009788:	2b00      	cmp	r3, #0
 800978a:	d006      	beq.n	800979a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2208      	movs	r2, #8
 8009792:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f933 	bl	8009a00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d009      	beq.n	80097b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	f003 0303 	and.w	r3, r3, #3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f91b 	bl	80099ee <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00c      	beq.n	80097dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f003 0310 	and.w	r3, r3, #16
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d007      	beq.n	80097dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2210      	movs	r2, #16
 80097da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	f003 0320 	and.w	r3, r3, #32
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00b      	beq.n	80097fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f003 0308 	and.w	r3, r3, #8
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d006      	beq.n	80097fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2208      	movs	r2, #8
 80097f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f913 	bl	8009a24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	f003 0310 	and.w	r3, r3, #16
 8009804:	2b00      	cmp	r3, #0
 8009806:	d009      	beq.n	800981c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f8fb 	bl	8009a12 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00b      	beq.n	800983e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	f003 0310 	and.w	r3, r3, #16
 800982c:	2b00      	cmp	r3, #0
 800982e:	d006      	beq.n	800983e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2210      	movs	r2, #16
 8009836:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f8fc 	bl	8009a36 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	f003 0308 	and.w	r3, r3, #8
 800984e:	2b00      	cmp	r3, #0
 8009850:	d006      	beq.n	8009860 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2208      	movs	r2, #8
 8009858:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f8f4 	bl	8009a48 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d07b      	beq.n	8009962 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	f003 0304 	and.w	r3, r3, #4
 8009870:	2b00      	cmp	r3, #0
 8009872:	d072      	beq.n	800995a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987a:	2b00      	cmp	r3, #0
 800987c:	d008      	beq.n	8009890 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	f043 0301 	orr.w	r3, r3, #1
 800988e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009896:	2b00      	cmp	r3, #0
 8009898:	d008      	beq.n	80098ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d003      	beq.n	80098ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	f043 0302 	orr.w	r3, r3, #2
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d008      	beq.n	80098c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c2:	f043 0304 	orr.w	r3, r3, #4
 80098c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d043      	beq.n	800995a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d03e      	beq.n	800995a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098e2:	2b60      	cmp	r3, #96	; 0x60
 80098e4:	d02b      	beq.n	800993e <HAL_CAN_IRQHandler+0x32a>
 80098e6:	2b60      	cmp	r3, #96	; 0x60
 80098e8:	d82e      	bhi.n	8009948 <HAL_CAN_IRQHandler+0x334>
 80098ea:	2b50      	cmp	r3, #80	; 0x50
 80098ec:	d022      	beq.n	8009934 <HAL_CAN_IRQHandler+0x320>
 80098ee:	2b50      	cmp	r3, #80	; 0x50
 80098f0:	d82a      	bhi.n	8009948 <HAL_CAN_IRQHandler+0x334>
 80098f2:	2b40      	cmp	r3, #64	; 0x40
 80098f4:	d019      	beq.n	800992a <HAL_CAN_IRQHandler+0x316>
 80098f6:	2b40      	cmp	r3, #64	; 0x40
 80098f8:	d826      	bhi.n	8009948 <HAL_CAN_IRQHandler+0x334>
 80098fa:	2b30      	cmp	r3, #48	; 0x30
 80098fc:	d010      	beq.n	8009920 <HAL_CAN_IRQHandler+0x30c>
 80098fe:	2b30      	cmp	r3, #48	; 0x30
 8009900:	d822      	bhi.n	8009948 <HAL_CAN_IRQHandler+0x334>
 8009902:	2b10      	cmp	r3, #16
 8009904:	d002      	beq.n	800990c <HAL_CAN_IRQHandler+0x2f8>
 8009906:	2b20      	cmp	r3, #32
 8009908:	d005      	beq.n	8009916 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800990a:	e01d      	b.n	8009948 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	f043 0308 	orr.w	r3, r3, #8
 8009912:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009914:	e019      	b.n	800994a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009918:	f043 0310 	orr.w	r3, r3, #16
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800991e:	e014      	b.n	800994a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	f043 0320 	orr.w	r3, r3, #32
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009928:	e00f      	b.n	800994a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009932:	e00a      	b.n	800994a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800993c:	e005      	b.n	800994a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009944:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009946:	e000      	b.n	800994a <HAL_CAN_IRQHandler+0x336>
            break;
 8009948:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	699a      	ldr	r2, [r3, #24]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009958:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2204      	movs	r2, #4
 8009960:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	2b00      	cmp	r3, #0
 8009966:	d008      	beq.n	800997a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	431a      	orrs	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f870 	bl	8009a5a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800997a:	bf00      	nop
 800997c:	3728      	adds	r7, #40	; 0x28
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800998a:	bf00      	nop
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	bc80      	pop	{r7}
 8009992:	4770      	bx	lr

08009994 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bc80      	pop	{r7}
 80099a4:	4770      	bx	lr

080099a6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b083      	sub	sp, #12
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80099ae:	bf00      	nop
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bc80      	pop	{r7}
 80099b6:	4770      	bx	lr

080099b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bc80      	pop	{r7}
 80099c8:	4770      	bx	lr

080099ca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b083      	sub	sp, #12
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80099d2:	bf00      	nop
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bc80      	pop	{r7}
 80099da:	4770      	bx	lr

080099dc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bc80      	pop	{r7}
 80099ec:	4770      	bx	lr

080099ee <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b083      	sub	sp, #12
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80099f6:	bf00      	nop
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bc80      	pop	{r7}
 80099fe:	4770      	bx	lr

08009a00 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bc80      	pop	{r7}
 8009a10:	4770      	bx	lr

08009a12 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b083      	sub	sp, #12
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009a1a:	bf00      	nop
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bc80      	pop	{r7}
 8009a22:	4770      	bx	lr

08009a24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bc80      	pop	{r7}
 8009a34:	4770      	bx	lr

08009a36 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009a3e:	bf00      	nop
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bc80      	pop	{r7}
 8009a46:	4770      	bx	lr

08009a48 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bc80      	pop	{r7}
 8009a58:	4770      	bx	lr

08009a5a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009a62:	bf00      	nop
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bc80      	pop	{r7}
 8009a6a:	4770      	bx	lr

08009a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f003 0307 	and.w	r3, r3, #7
 8009a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a7c:	4b0c      	ldr	r3, [pc, #48]	; (8009ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009a88:	4013      	ands	r3, r2
 8009a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a9e:	4a04      	ldr	r2, [pc, #16]	; (8009ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	60d3      	str	r3, [r2, #12]
}
 8009aa4:	bf00      	nop
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bc80      	pop	{r7}
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	e000ed00 	.word	0xe000ed00

08009ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009ab8:	4b04      	ldr	r3, [pc, #16]	; (8009acc <__NVIC_GetPriorityGrouping+0x18>)
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	0a1b      	lsrs	r3, r3, #8
 8009abe:	f003 0307 	and.w	r3, r3, #7
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bc80      	pop	{r7}
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	e000ed00 	.word	0xe000ed00

08009ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	db0b      	blt.n	8009afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	f003 021f 	and.w	r2, r3, #31
 8009ae8:	4906      	ldr	r1, [pc, #24]	; (8009b04 <__NVIC_EnableIRQ+0x34>)
 8009aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aee:	095b      	lsrs	r3, r3, #5
 8009af0:	2001      	movs	r0, #1
 8009af2:	fa00 f202 	lsl.w	r2, r0, r2
 8009af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009afa:	bf00      	nop
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bc80      	pop	{r7}
 8009b02:	4770      	bx	lr
 8009b04:	e000e100 	.word	0xe000e100

08009b08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	db12      	blt.n	8009b40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	f003 021f 	and.w	r2, r3, #31
 8009b20:	490a      	ldr	r1, [pc, #40]	; (8009b4c <__NVIC_DisableIRQ+0x44>)
 8009b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b26:	095b      	lsrs	r3, r3, #5
 8009b28:	2001      	movs	r0, #1
 8009b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8009b2e:	3320      	adds	r3, #32
 8009b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009b34:	f3bf 8f4f 	dsb	sy
}
 8009b38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009b3a:	f3bf 8f6f 	isb	sy
}
 8009b3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bc80      	pop	{r7}
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	e000e100 	.word	0xe000e100

08009b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	6039      	str	r1, [r7, #0]
 8009b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	db0a      	blt.n	8009b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	490c      	ldr	r1, [pc, #48]	; (8009b9c <__NVIC_SetPriority+0x4c>)
 8009b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b6e:	0112      	lsls	r2, r2, #4
 8009b70:	b2d2      	uxtb	r2, r2
 8009b72:	440b      	add	r3, r1
 8009b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009b78:	e00a      	b.n	8009b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	4908      	ldr	r1, [pc, #32]	; (8009ba0 <__NVIC_SetPriority+0x50>)
 8009b80:	79fb      	ldrb	r3, [r7, #7]
 8009b82:	f003 030f 	and.w	r3, r3, #15
 8009b86:	3b04      	subs	r3, #4
 8009b88:	0112      	lsls	r2, r2, #4
 8009b8a:	b2d2      	uxtb	r2, r2
 8009b8c:	440b      	add	r3, r1
 8009b8e:	761a      	strb	r2, [r3, #24]
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bc80      	pop	{r7}
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	e000e100 	.word	0xe000e100
 8009ba0:	e000ed00 	.word	0xe000ed00

08009ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b089      	sub	sp, #36	; 0x24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	f1c3 0307 	rsb	r3, r3, #7
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	bf28      	it	cs
 8009bc2:	2304      	movcs	r3, #4
 8009bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	2b06      	cmp	r3, #6
 8009bcc:	d902      	bls.n	8009bd4 <NVIC_EncodePriority+0x30>
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	3b03      	subs	r3, #3
 8009bd2:	e000      	b.n	8009bd6 <NVIC_EncodePriority+0x32>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	fa02 f303 	lsl.w	r3, r2, r3
 8009be2:	43da      	mvns	r2, r3
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	401a      	ands	r2, r3
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009bec:	f04f 31ff 	mov.w	r1, #4294967295
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf6:	43d9      	mvns	r1, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009bfc:	4313      	orrs	r3, r2
         );
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3724      	adds	r7, #36	; 0x24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bc80      	pop	{r7}
 8009c06:	4770      	bx	lr

08009c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c18:	d301      	bcc.n	8009c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e00f      	b.n	8009c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009c1e:	4a0a      	ldr	r2, [pc, #40]	; (8009c48 <SysTick_Config+0x40>)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009c26:	210f      	movs	r1, #15
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	f7ff ff90 	bl	8009b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009c30:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <SysTick_Config+0x40>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009c36:	4b04      	ldr	r3, [pc, #16]	; (8009c48 <SysTick_Config+0x40>)
 8009c38:	2207      	movs	r2, #7
 8009c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	e000e010 	.word	0xe000e010

08009c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7ff ff09 	bl	8009a6c <__NVIC_SetPriorityGrouping>
}
 8009c5a:	bf00      	nop
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b086      	sub	sp, #24
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	4603      	mov	r3, r0
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	607a      	str	r2, [r7, #4]
 8009c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009c74:	f7ff ff1e 	bl	8009ab4 <__NVIC_GetPriorityGrouping>
 8009c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	68b9      	ldr	r1, [r7, #8]
 8009c7e:	6978      	ldr	r0, [r7, #20]
 8009c80:	f7ff ff90 	bl	8009ba4 <NVIC_EncodePriority>
 8009c84:	4602      	mov	r2, r0
 8009c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7ff ff5f 	bl	8009b50 <__NVIC_SetPriority>
}
 8009c92:	bf00      	nop
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff ff11 	bl	8009ad0 <__NVIC_EnableIRQ>
}
 8009cae:	bf00      	nop
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7ff ff1f 	bl	8009b08 <__NVIC_DisableIRQ>
}
 8009cca:	bf00      	nop
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff ff94 	bl	8009c08 <SysTick_Config>
 8009ce0:	4603      	mov	r3, r0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b082      	sub	sp, #8
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e014      	b.n	8009d26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	791b      	ldrb	r3, [r3, #4]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d105      	bne.n	8009d12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7f7 fc63 	bl	80015d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2202      	movs	r2, #2
 8009d16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e046      	b.n	8009dd0 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	795b      	ldrb	r3, [r3, #5]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <HAL_DAC_Start+0x20>
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	e040      	b.n	8009dd0 <HAL_DAC_Start+0xa2>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	6819      	ldr	r1, [r3, #0]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	f003 0310 	and.w	r3, r3, #16
 8009d66:	2201      	movs	r2, #1
 8009d68:	409a      	lsls	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10f      	bne.n	8009d98 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009d82:	2b3c      	cmp	r3, #60	; 0x3c
 8009d84:	d11d      	bne.n	8009dc2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f042 0201 	orr.w	r2, r2, #1
 8009d94:	605a      	str	r2, [r3, #4]
 8009d96:	e014      	b.n	8009dc2 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	f003 0310 	and.w	r3, r3, #16
 8009da8:	213c      	movs	r1, #60	; 0x3c
 8009daa:	fa01 f303 	lsl.w	r3, r1, r3
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d107      	bne.n	8009dc2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f042 0202 	orr.w	r2, r2, #2
 8009dc0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bc80      	pop	{r7}
 8009dd8:	4770      	bx	lr

08009dda <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b087      	sub	sp, #28
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	607a      	str	r2, [r7, #4]
 8009de6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8009de8:	2300      	movs	r3, #0
 8009dea:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e015      	b.n	8009e22 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d105      	bne.n	8009e0e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4413      	add	r3, r2
 8009e08:	3308      	adds	r3, #8
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	e004      	b.n	8009e18 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4413      	add	r3, r2
 8009e14:	3314      	adds	r3, #20
 8009e16:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	371c      	adds	r7, #28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bc80      	pop	{r7}
 8009e2a:	4770      	bx	lr

08009e2c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b089      	sub	sp, #36	; 0x24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <HAL_DAC_ConfigChannel+0x1c>
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e042      	b.n	8009ed2 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	795b      	ldrb	r3, [r3, #5]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d101      	bne.n	8009e58 <HAL_DAC_ConfigChannel+0x2c>
 8009e54:	2302      	movs	r3, #2
 8009e56:	e03c      	b.n	8009ed2 <HAL_DAC_ConfigChannel+0xa6>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2202      	movs	r2, #2
 8009e62:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f003 0310 	and.w	r3, r3, #16
 8009e72:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009e76:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8009e7a:	43db      	mvns	r3, r3
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	4013      	ands	r3, r2
 8009e80:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f003 0310 	and.w	r3, r3, #16
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9a:	69ba      	ldr	r2, [r7, #24]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	69ba      	ldr	r2, [r7, #24]
 8009ea6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6819      	ldr	r1, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f003 0310 	and.w	r3, r3, #16
 8009eb4:	22c0      	movs	r2, #192	; 0xc0
 8009eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eba:	43da      	mvns	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	400a      	ands	r2, r1
 8009ec2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8009ed0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3724      	adds	r7, #36	; 0x24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bc80      	pop	{r7}
 8009eda:	4770      	bx	lr

08009edc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e059      	b.n	8009fa6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	4b2d      	ldr	r3, [pc, #180]	; (8009fb0 <HAL_DMA_Init+0xd4>)
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d80f      	bhi.n	8009f1e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	4b2b      	ldr	r3, [pc, #172]	; (8009fb4 <HAL_DMA_Init+0xd8>)
 8009f06:	4413      	add	r3, r2
 8009f08:	4a2b      	ldr	r2, [pc, #172]	; (8009fb8 <HAL_DMA_Init+0xdc>)
 8009f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0e:	091b      	lsrs	r3, r3, #4
 8009f10:	009a      	lsls	r2, r3, #2
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a28      	ldr	r2, [pc, #160]	; (8009fbc <HAL_DMA_Init+0xe0>)
 8009f1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8009f1c:	e00e      	b.n	8009f3c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	4b26      	ldr	r3, [pc, #152]	; (8009fc0 <HAL_DMA_Init+0xe4>)
 8009f26:	4413      	add	r3, r2
 8009f28:	4a23      	ldr	r2, [pc, #140]	; (8009fb8 <HAL_DMA_Init+0xdc>)
 8009f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2e:	091b      	lsrs	r3, r3, #4
 8009f30:	009a      	lsls	r2, r3, #2
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a22      	ldr	r2, [pc, #136]	; (8009fc4 <HAL_DMA_Init+0xe8>)
 8009f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009f52:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009f56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8009f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bc80      	pop	{r7}
 8009fae:	4770      	bx	lr
 8009fb0:	40020407 	.word	0x40020407
 8009fb4:	bffdfff8 	.word	0xbffdfff8
 8009fb8:	cccccccd 	.word	0xcccccccd
 8009fbc:	40020000 	.word	0x40020000
 8009fc0:	bffdfbf8 	.word	0xbffdfbf8
 8009fc4:	40020400 	.word	0x40020400

08009fc8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e05c      	b.n	800a094 <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f022 0201 	bic.w	r2, r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2200      	movs	r2, #0
 800a000:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2200      	movs	r2, #0
 800a008:	60da      	str	r2, [r3, #12]

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	4b23      	ldr	r3, [pc, #140]	; (800a0a0 <HAL_DMA_DeInit+0xd8>)
 800a012:	429a      	cmp	r2, r3
 800a014:	d80f      	bhi.n	800a036 <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	4b21      	ldr	r3, [pc, #132]	; (800a0a4 <HAL_DMA_DeInit+0xdc>)
 800a01e:	4413      	add	r3, r2
 800a020:	4a21      	ldr	r2, [pc, #132]	; (800a0a8 <HAL_DMA_DeInit+0xe0>)
 800a022:	fba2 2303 	umull	r2, r3, r2, r3
 800a026:	091b      	lsrs	r3, r3, #4
 800a028:	009a      	lsls	r2, r3, #2
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a1e      	ldr	r2, [pc, #120]	; (800a0ac <HAL_DMA_DeInit+0xe4>)
 800a032:	63da      	str	r2, [r3, #60]	; 0x3c
 800a034:	e00e      	b.n	800a054 <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	461a      	mov	r2, r3
 800a03c:	4b1c      	ldr	r3, [pc, #112]	; (800a0b0 <HAL_DMA_DeInit+0xe8>)
 800a03e:	4413      	add	r3, r2
 800a040:	4a19      	ldr	r2, [pc, #100]	; (800a0a8 <HAL_DMA_DeInit+0xe0>)
 800a042:	fba2 2303 	umull	r2, r3, r2, r3
 800a046:	091b      	lsrs	r3, r3, #4
 800a048:	009a      	lsls	r2, r3, #2
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a18      	ldr	r2, [pc, #96]	; (800a0b4 <HAL_DMA_DeInit+0xec>)
 800a052:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05c:	2101      	movs	r1, #1
 800a05e:	fa01 f202 	lsl.w	r2, r1, r2
 800a062:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	bc80      	pop	{r7}
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	40020407 	.word	0x40020407
 800a0a4:	bffdfff8 	.word	0xbffdfff8
 800a0a8:	cccccccd 	.word	0xcccccccd
 800a0ac:	40020000 	.word	0x40020000
 800a0b0:	bffdfbf8 	.word	0xbffdfbf8
 800a0b4:	40020400 	.word	0x40020400

0800a0b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d101      	bne.n	800a0d8 <HAL_DMA_Start_IT+0x20>
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e04b      	b.n	800a170 <HAL_DMA_Start_IT+0xb8>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d13a      	bne.n	800a162 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f022 0201 	bic.w	r2, r2, #1
 800a108:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f000 fbb1 	bl	800a878 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d008      	beq.n	800a130 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 020e 	orr.w	r2, r2, #14
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	e00f      	b.n	800a150 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0204 	bic.w	r2, r2, #4
 800a13e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f042 020a 	orr.w	r2, r2, #10
 800a14e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f042 0201 	orr.w	r2, r2, #1
 800a15e:	601a      	str	r2, [r3, #0]
 800a160:	e005      	b.n	800a16e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a16a:	2302      	movs	r3, #2
 800a16c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d008      	beq.n	800a1a2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2204      	movs	r2, #4
 800a194:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e020      	b.n	800a1e4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f022 020e 	bic.w	r2, r2, #14
 800a1b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f022 0201 	bic.w	r2, r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	fa01 f202 	lsl.w	r2, r1, r2
 800a1d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bc80      	pop	{r7}
 800a1ec:	4770      	bx	lr
	...

0800a1f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b02      	cmp	r3, #2
 800a206:	d005      	beq.n	800a214 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2204      	movs	r2, #4
 800a20c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	73fb      	strb	r3, [r7, #15]
 800a212:	e0d6      	b.n	800a3c2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f022 020e 	bic.w	r2, r2, #14
 800a222:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f022 0201 	bic.w	r2, r2, #1
 800a232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	461a      	mov	r2, r3
 800a23a:	4b64      	ldr	r3, [pc, #400]	; (800a3cc <HAL_DMA_Abort_IT+0x1dc>)
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d958      	bls.n	800a2f2 <HAL_DMA_Abort_IT+0x102>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a62      	ldr	r2, [pc, #392]	; (800a3d0 <HAL_DMA_Abort_IT+0x1e0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d04f      	beq.n	800a2ea <HAL_DMA_Abort_IT+0xfa>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a61      	ldr	r2, [pc, #388]	; (800a3d4 <HAL_DMA_Abort_IT+0x1e4>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d048      	beq.n	800a2e6 <HAL_DMA_Abort_IT+0xf6>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a5f      	ldr	r2, [pc, #380]	; (800a3d8 <HAL_DMA_Abort_IT+0x1e8>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d040      	beq.n	800a2e0 <HAL_DMA_Abort_IT+0xf0>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a5e      	ldr	r2, [pc, #376]	; (800a3dc <HAL_DMA_Abort_IT+0x1ec>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d038      	beq.n	800a2da <HAL_DMA_Abort_IT+0xea>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a5c      	ldr	r2, [pc, #368]	; (800a3e0 <HAL_DMA_Abort_IT+0x1f0>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d030      	beq.n	800a2d4 <HAL_DMA_Abort_IT+0xe4>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a5b      	ldr	r2, [pc, #364]	; (800a3e4 <HAL_DMA_Abort_IT+0x1f4>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d028      	beq.n	800a2ce <HAL_DMA_Abort_IT+0xde>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a52      	ldr	r2, [pc, #328]	; (800a3cc <HAL_DMA_Abort_IT+0x1dc>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d020      	beq.n	800a2c8 <HAL_DMA_Abort_IT+0xd8>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a57      	ldr	r2, [pc, #348]	; (800a3e8 <HAL_DMA_Abort_IT+0x1f8>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d019      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xd4>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a55      	ldr	r2, [pc, #340]	; (800a3ec <HAL_DMA_Abort_IT+0x1fc>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d012      	beq.n	800a2c0 <HAL_DMA_Abort_IT+0xd0>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a54      	ldr	r2, [pc, #336]	; (800a3f0 <HAL_DMA_Abort_IT+0x200>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d00a      	beq.n	800a2ba <HAL_DMA_Abort_IT+0xca>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a52      	ldr	r2, [pc, #328]	; (800a3f4 <HAL_DMA_Abort_IT+0x204>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d102      	bne.n	800a2b4 <HAL_DMA_Abort_IT+0xc4>
 800a2ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2b2:	e01b      	b.n	800a2ec <HAL_DMA_Abort_IT+0xfc>
 800a2b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a2b8:	e018      	b.n	800a2ec <HAL_DMA_Abort_IT+0xfc>
 800a2ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2be:	e015      	b.n	800a2ec <HAL_DMA_Abort_IT+0xfc>
 800a2c0:	2310      	movs	r3, #16
 800a2c2:	e013      	b.n	800a2ec <HAL_DMA_Abort_IT+0xfc>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e011      	b.n	800a2ec <HAL_DMA_Abort_IT+0xfc>
 800a2c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2cc:	e00e      	b.n	800a2ec <HAL_DMA_Abort_IT+0xfc>
 800a2ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a2d2:	e00b      	b.n	800a2ec <HAL_DMA_Abort_IT+0xfc>
 800a2d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a2d8:	e008      	b.n	800a2ec <HAL_DMA_Abort_IT+0xfc>
 800a2da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2de:	e005      	b.n	800a2ec <HAL_DMA_Abort_IT+0xfc>
 800a2e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2e4:	e002      	b.n	800a2ec <HAL_DMA_Abort_IT+0xfc>
 800a2e6:	2310      	movs	r3, #16
 800a2e8:	e000      	b.n	800a2ec <HAL_DMA_Abort_IT+0xfc>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	4a42      	ldr	r2, [pc, #264]	; (800a3f8 <HAL_DMA_Abort_IT+0x208>)
 800a2ee:	6053      	str	r3, [r2, #4]
 800a2f0:	e057      	b.n	800a3a2 <HAL_DMA_Abort_IT+0x1b2>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a36      	ldr	r2, [pc, #216]	; (800a3d0 <HAL_DMA_Abort_IT+0x1e0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d04f      	beq.n	800a39c <HAL_DMA_Abort_IT+0x1ac>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a34      	ldr	r2, [pc, #208]	; (800a3d4 <HAL_DMA_Abort_IT+0x1e4>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d048      	beq.n	800a398 <HAL_DMA_Abort_IT+0x1a8>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a33      	ldr	r2, [pc, #204]	; (800a3d8 <HAL_DMA_Abort_IT+0x1e8>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d040      	beq.n	800a392 <HAL_DMA_Abort_IT+0x1a2>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a31      	ldr	r2, [pc, #196]	; (800a3dc <HAL_DMA_Abort_IT+0x1ec>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d038      	beq.n	800a38c <HAL_DMA_Abort_IT+0x19c>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a30      	ldr	r2, [pc, #192]	; (800a3e0 <HAL_DMA_Abort_IT+0x1f0>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d030      	beq.n	800a386 <HAL_DMA_Abort_IT+0x196>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a2e      	ldr	r2, [pc, #184]	; (800a3e4 <HAL_DMA_Abort_IT+0x1f4>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d028      	beq.n	800a380 <HAL_DMA_Abort_IT+0x190>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a26      	ldr	r2, [pc, #152]	; (800a3cc <HAL_DMA_Abort_IT+0x1dc>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d020      	beq.n	800a37a <HAL_DMA_Abort_IT+0x18a>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a2a      	ldr	r2, [pc, #168]	; (800a3e8 <HAL_DMA_Abort_IT+0x1f8>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d019      	beq.n	800a376 <HAL_DMA_Abort_IT+0x186>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a29      	ldr	r2, [pc, #164]	; (800a3ec <HAL_DMA_Abort_IT+0x1fc>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d012      	beq.n	800a372 <HAL_DMA_Abort_IT+0x182>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a27      	ldr	r2, [pc, #156]	; (800a3f0 <HAL_DMA_Abort_IT+0x200>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d00a      	beq.n	800a36c <HAL_DMA_Abort_IT+0x17c>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a26      	ldr	r2, [pc, #152]	; (800a3f4 <HAL_DMA_Abort_IT+0x204>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d102      	bne.n	800a366 <HAL_DMA_Abort_IT+0x176>
 800a360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a364:	e01b      	b.n	800a39e <HAL_DMA_Abort_IT+0x1ae>
 800a366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a36a:	e018      	b.n	800a39e <HAL_DMA_Abort_IT+0x1ae>
 800a36c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a370:	e015      	b.n	800a39e <HAL_DMA_Abort_IT+0x1ae>
 800a372:	2310      	movs	r3, #16
 800a374:	e013      	b.n	800a39e <HAL_DMA_Abort_IT+0x1ae>
 800a376:	2301      	movs	r3, #1
 800a378:	e011      	b.n	800a39e <HAL_DMA_Abort_IT+0x1ae>
 800a37a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a37e:	e00e      	b.n	800a39e <HAL_DMA_Abort_IT+0x1ae>
 800a380:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a384:	e00b      	b.n	800a39e <HAL_DMA_Abort_IT+0x1ae>
 800a386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a38a:	e008      	b.n	800a39e <HAL_DMA_Abort_IT+0x1ae>
 800a38c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a390:	e005      	b.n	800a39e <HAL_DMA_Abort_IT+0x1ae>
 800a392:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a396:	e002      	b.n	800a39e <HAL_DMA_Abort_IT+0x1ae>
 800a398:	2310      	movs	r3, #16
 800a39a:	e000      	b.n	800a39e <HAL_DMA_Abort_IT+0x1ae>
 800a39c:	2301      	movs	r3, #1
 800a39e:	4a17      	ldr	r2, [pc, #92]	; (800a3fc <HAL_DMA_Abort_IT+0x20c>)
 800a3a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	4798      	blx	r3
    } 
  }
  return status;
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	40020080 	.word	0x40020080
 800a3d0:	40020008 	.word	0x40020008
 800a3d4:	4002001c 	.word	0x4002001c
 800a3d8:	40020030 	.word	0x40020030
 800a3dc:	40020044 	.word	0x40020044
 800a3e0:	40020058 	.word	0x40020058
 800a3e4:	4002006c 	.word	0x4002006c
 800a3e8:	40020408 	.word	0x40020408
 800a3ec:	4002041c 	.word	0x4002041c
 800a3f0:	40020430 	.word	0x40020430
 800a3f4:	40020444 	.word	0x40020444
 800a3f8:	40020400 	.word	0x40020400
 800a3fc:	40020000 	.word	0x40020000

0800a400 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41c:	2204      	movs	r2, #4
 800a41e:	409a      	lsls	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4013      	ands	r3, r2
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 80f1 	beq.w	800a60c <HAL_DMA_IRQHandler+0x20c>
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 80eb 	beq.w	800a60c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0320 	and.w	r3, r3, #32
 800a440:	2b00      	cmp	r3, #0
 800a442:	d107      	bne.n	800a454 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f022 0204 	bic.w	r2, r2, #4
 800a452:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	461a      	mov	r2, r3
 800a45a:	4b5f      	ldr	r3, [pc, #380]	; (800a5d8 <HAL_DMA_IRQHandler+0x1d8>)
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d958      	bls.n	800a512 <HAL_DMA_IRQHandler+0x112>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a5d      	ldr	r2, [pc, #372]	; (800a5dc <HAL_DMA_IRQHandler+0x1dc>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d04f      	beq.n	800a50a <HAL_DMA_IRQHandler+0x10a>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a5c      	ldr	r2, [pc, #368]	; (800a5e0 <HAL_DMA_IRQHandler+0x1e0>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d048      	beq.n	800a506 <HAL_DMA_IRQHandler+0x106>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a5a      	ldr	r2, [pc, #360]	; (800a5e4 <HAL_DMA_IRQHandler+0x1e4>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d040      	beq.n	800a500 <HAL_DMA_IRQHandler+0x100>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a59      	ldr	r2, [pc, #356]	; (800a5e8 <HAL_DMA_IRQHandler+0x1e8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d038      	beq.n	800a4fa <HAL_DMA_IRQHandler+0xfa>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a57      	ldr	r2, [pc, #348]	; (800a5ec <HAL_DMA_IRQHandler+0x1ec>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d030      	beq.n	800a4f4 <HAL_DMA_IRQHandler+0xf4>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a56      	ldr	r2, [pc, #344]	; (800a5f0 <HAL_DMA_IRQHandler+0x1f0>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d028      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xee>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a4d      	ldr	r2, [pc, #308]	; (800a5d8 <HAL_DMA_IRQHandler+0x1d8>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d020      	beq.n	800a4e8 <HAL_DMA_IRQHandler+0xe8>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a52      	ldr	r2, [pc, #328]	; (800a5f4 <HAL_DMA_IRQHandler+0x1f4>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d019      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0xe4>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a50      	ldr	r2, [pc, #320]	; (800a5f8 <HAL_DMA_IRQHandler+0x1f8>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d012      	beq.n	800a4e0 <HAL_DMA_IRQHandler+0xe0>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a4f      	ldr	r2, [pc, #316]	; (800a5fc <HAL_DMA_IRQHandler+0x1fc>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d00a      	beq.n	800a4da <HAL_DMA_IRQHandler+0xda>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a4d      	ldr	r2, [pc, #308]	; (800a600 <HAL_DMA_IRQHandler+0x200>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d102      	bne.n	800a4d4 <HAL_DMA_IRQHandler+0xd4>
 800a4ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4d2:	e01b      	b.n	800a50c <HAL_DMA_IRQHandler+0x10c>
 800a4d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a4d8:	e018      	b.n	800a50c <HAL_DMA_IRQHandler+0x10c>
 800a4da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4de:	e015      	b.n	800a50c <HAL_DMA_IRQHandler+0x10c>
 800a4e0:	2340      	movs	r3, #64	; 0x40
 800a4e2:	e013      	b.n	800a50c <HAL_DMA_IRQHandler+0x10c>
 800a4e4:	2304      	movs	r3, #4
 800a4e6:	e011      	b.n	800a50c <HAL_DMA_IRQHandler+0x10c>
 800a4e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a4ec:	e00e      	b.n	800a50c <HAL_DMA_IRQHandler+0x10c>
 800a4ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a4f2:	e00b      	b.n	800a50c <HAL_DMA_IRQHandler+0x10c>
 800a4f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a4f8:	e008      	b.n	800a50c <HAL_DMA_IRQHandler+0x10c>
 800a4fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4fe:	e005      	b.n	800a50c <HAL_DMA_IRQHandler+0x10c>
 800a500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a504:	e002      	b.n	800a50c <HAL_DMA_IRQHandler+0x10c>
 800a506:	2340      	movs	r3, #64	; 0x40
 800a508:	e000      	b.n	800a50c <HAL_DMA_IRQHandler+0x10c>
 800a50a:	2304      	movs	r3, #4
 800a50c:	4a3d      	ldr	r2, [pc, #244]	; (800a604 <HAL_DMA_IRQHandler+0x204>)
 800a50e:	6053      	str	r3, [r2, #4]
 800a510:	e057      	b.n	800a5c2 <HAL_DMA_IRQHandler+0x1c2>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a31      	ldr	r2, [pc, #196]	; (800a5dc <HAL_DMA_IRQHandler+0x1dc>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d04f      	beq.n	800a5bc <HAL_DMA_IRQHandler+0x1bc>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a2f      	ldr	r2, [pc, #188]	; (800a5e0 <HAL_DMA_IRQHandler+0x1e0>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d048      	beq.n	800a5b8 <HAL_DMA_IRQHandler+0x1b8>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a2e      	ldr	r2, [pc, #184]	; (800a5e4 <HAL_DMA_IRQHandler+0x1e4>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d040      	beq.n	800a5b2 <HAL_DMA_IRQHandler+0x1b2>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a2c      	ldr	r2, [pc, #176]	; (800a5e8 <HAL_DMA_IRQHandler+0x1e8>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d038      	beq.n	800a5ac <HAL_DMA_IRQHandler+0x1ac>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a2b      	ldr	r2, [pc, #172]	; (800a5ec <HAL_DMA_IRQHandler+0x1ec>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d030      	beq.n	800a5a6 <HAL_DMA_IRQHandler+0x1a6>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a29      	ldr	r2, [pc, #164]	; (800a5f0 <HAL_DMA_IRQHandler+0x1f0>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d028      	beq.n	800a5a0 <HAL_DMA_IRQHandler+0x1a0>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a21      	ldr	r2, [pc, #132]	; (800a5d8 <HAL_DMA_IRQHandler+0x1d8>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d020      	beq.n	800a59a <HAL_DMA_IRQHandler+0x19a>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a25      	ldr	r2, [pc, #148]	; (800a5f4 <HAL_DMA_IRQHandler+0x1f4>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d019      	beq.n	800a596 <HAL_DMA_IRQHandler+0x196>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a24      	ldr	r2, [pc, #144]	; (800a5f8 <HAL_DMA_IRQHandler+0x1f8>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d012      	beq.n	800a592 <HAL_DMA_IRQHandler+0x192>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a22      	ldr	r2, [pc, #136]	; (800a5fc <HAL_DMA_IRQHandler+0x1fc>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d00a      	beq.n	800a58c <HAL_DMA_IRQHandler+0x18c>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a21      	ldr	r2, [pc, #132]	; (800a600 <HAL_DMA_IRQHandler+0x200>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d102      	bne.n	800a586 <HAL_DMA_IRQHandler+0x186>
 800a580:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a584:	e01b      	b.n	800a5be <HAL_DMA_IRQHandler+0x1be>
 800a586:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a58a:	e018      	b.n	800a5be <HAL_DMA_IRQHandler+0x1be>
 800a58c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a590:	e015      	b.n	800a5be <HAL_DMA_IRQHandler+0x1be>
 800a592:	2340      	movs	r3, #64	; 0x40
 800a594:	e013      	b.n	800a5be <HAL_DMA_IRQHandler+0x1be>
 800a596:	2304      	movs	r3, #4
 800a598:	e011      	b.n	800a5be <HAL_DMA_IRQHandler+0x1be>
 800a59a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a59e:	e00e      	b.n	800a5be <HAL_DMA_IRQHandler+0x1be>
 800a5a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a5a4:	e00b      	b.n	800a5be <HAL_DMA_IRQHandler+0x1be>
 800a5a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a5aa:	e008      	b.n	800a5be <HAL_DMA_IRQHandler+0x1be>
 800a5ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a5b0:	e005      	b.n	800a5be <HAL_DMA_IRQHandler+0x1be>
 800a5b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5b6:	e002      	b.n	800a5be <HAL_DMA_IRQHandler+0x1be>
 800a5b8:	2340      	movs	r3, #64	; 0x40
 800a5ba:	e000      	b.n	800a5be <HAL_DMA_IRQHandler+0x1be>
 800a5bc:	2304      	movs	r3, #4
 800a5be:	4a12      	ldr	r2, [pc, #72]	; (800a608 <HAL_DMA_IRQHandler+0x208>)
 800a5c0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 8136 	beq.w	800a838 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800a5d4:	e130      	b.n	800a838 <HAL_DMA_IRQHandler+0x438>
 800a5d6:	bf00      	nop
 800a5d8:	40020080 	.word	0x40020080
 800a5dc:	40020008 	.word	0x40020008
 800a5e0:	4002001c 	.word	0x4002001c
 800a5e4:	40020030 	.word	0x40020030
 800a5e8:	40020044 	.word	0x40020044
 800a5ec:	40020058 	.word	0x40020058
 800a5f0:	4002006c 	.word	0x4002006c
 800a5f4:	40020408 	.word	0x40020408
 800a5f8:	4002041c 	.word	0x4002041c
 800a5fc:	40020430 	.word	0x40020430
 800a600:	40020444 	.word	0x40020444
 800a604:	40020400 	.word	0x40020400
 800a608:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a610:	2202      	movs	r2, #2
 800a612:	409a      	lsls	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4013      	ands	r3, r2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 80dd 	beq.w	800a7d8 <HAL_DMA_IRQHandler+0x3d8>
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	f003 0302 	and.w	r3, r3, #2
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 80d7 	beq.w	800a7d8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0320 	and.w	r3, r3, #32
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10b      	bne.n	800a650 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f022 020a 	bic.w	r2, r2, #10
 800a646:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	461a      	mov	r2, r3
 800a656:	4b7b      	ldr	r3, [pc, #492]	; (800a844 <HAL_DMA_IRQHandler+0x444>)
 800a658:	429a      	cmp	r2, r3
 800a65a:	d958      	bls.n	800a70e <HAL_DMA_IRQHandler+0x30e>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a79      	ldr	r2, [pc, #484]	; (800a848 <HAL_DMA_IRQHandler+0x448>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d04f      	beq.n	800a706 <HAL_DMA_IRQHandler+0x306>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a78      	ldr	r2, [pc, #480]	; (800a84c <HAL_DMA_IRQHandler+0x44c>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d048      	beq.n	800a702 <HAL_DMA_IRQHandler+0x302>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a76      	ldr	r2, [pc, #472]	; (800a850 <HAL_DMA_IRQHandler+0x450>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d040      	beq.n	800a6fc <HAL_DMA_IRQHandler+0x2fc>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a75      	ldr	r2, [pc, #468]	; (800a854 <HAL_DMA_IRQHandler+0x454>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d038      	beq.n	800a6f6 <HAL_DMA_IRQHandler+0x2f6>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a73      	ldr	r2, [pc, #460]	; (800a858 <HAL_DMA_IRQHandler+0x458>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d030      	beq.n	800a6f0 <HAL_DMA_IRQHandler+0x2f0>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a72      	ldr	r2, [pc, #456]	; (800a85c <HAL_DMA_IRQHandler+0x45c>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d028      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x2ea>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a69      	ldr	r2, [pc, #420]	; (800a844 <HAL_DMA_IRQHandler+0x444>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d020      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x2e4>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a6e      	ldr	r2, [pc, #440]	; (800a860 <HAL_DMA_IRQHandler+0x460>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d019      	beq.n	800a6e0 <HAL_DMA_IRQHandler+0x2e0>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a6c      	ldr	r2, [pc, #432]	; (800a864 <HAL_DMA_IRQHandler+0x464>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d012      	beq.n	800a6dc <HAL_DMA_IRQHandler+0x2dc>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a6b      	ldr	r2, [pc, #428]	; (800a868 <HAL_DMA_IRQHandler+0x468>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d00a      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x2d6>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a69      	ldr	r2, [pc, #420]	; (800a86c <HAL_DMA_IRQHandler+0x46c>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d102      	bne.n	800a6d0 <HAL_DMA_IRQHandler+0x2d0>
 800a6ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6ce:	e01b      	b.n	800a708 <HAL_DMA_IRQHandler+0x308>
 800a6d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a6d4:	e018      	b.n	800a708 <HAL_DMA_IRQHandler+0x308>
 800a6d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6da:	e015      	b.n	800a708 <HAL_DMA_IRQHandler+0x308>
 800a6dc:	2320      	movs	r3, #32
 800a6de:	e013      	b.n	800a708 <HAL_DMA_IRQHandler+0x308>
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e011      	b.n	800a708 <HAL_DMA_IRQHandler+0x308>
 800a6e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6e8:	e00e      	b.n	800a708 <HAL_DMA_IRQHandler+0x308>
 800a6ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6ee:	e00b      	b.n	800a708 <HAL_DMA_IRQHandler+0x308>
 800a6f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a6f4:	e008      	b.n	800a708 <HAL_DMA_IRQHandler+0x308>
 800a6f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6fa:	e005      	b.n	800a708 <HAL_DMA_IRQHandler+0x308>
 800a6fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a700:	e002      	b.n	800a708 <HAL_DMA_IRQHandler+0x308>
 800a702:	2320      	movs	r3, #32
 800a704:	e000      	b.n	800a708 <HAL_DMA_IRQHandler+0x308>
 800a706:	2302      	movs	r3, #2
 800a708:	4a59      	ldr	r2, [pc, #356]	; (800a870 <HAL_DMA_IRQHandler+0x470>)
 800a70a:	6053      	str	r3, [r2, #4]
 800a70c:	e057      	b.n	800a7be <HAL_DMA_IRQHandler+0x3be>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a4d      	ldr	r2, [pc, #308]	; (800a848 <HAL_DMA_IRQHandler+0x448>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d04f      	beq.n	800a7b8 <HAL_DMA_IRQHandler+0x3b8>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a4b      	ldr	r2, [pc, #300]	; (800a84c <HAL_DMA_IRQHandler+0x44c>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d048      	beq.n	800a7b4 <HAL_DMA_IRQHandler+0x3b4>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a4a      	ldr	r2, [pc, #296]	; (800a850 <HAL_DMA_IRQHandler+0x450>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d040      	beq.n	800a7ae <HAL_DMA_IRQHandler+0x3ae>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a48      	ldr	r2, [pc, #288]	; (800a854 <HAL_DMA_IRQHandler+0x454>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d038      	beq.n	800a7a8 <HAL_DMA_IRQHandler+0x3a8>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a47      	ldr	r2, [pc, #284]	; (800a858 <HAL_DMA_IRQHandler+0x458>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d030      	beq.n	800a7a2 <HAL_DMA_IRQHandler+0x3a2>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a45      	ldr	r2, [pc, #276]	; (800a85c <HAL_DMA_IRQHandler+0x45c>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d028      	beq.n	800a79c <HAL_DMA_IRQHandler+0x39c>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a3d      	ldr	r2, [pc, #244]	; (800a844 <HAL_DMA_IRQHandler+0x444>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d020      	beq.n	800a796 <HAL_DMA_IRQHandler+0x396>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a41      	ldr	r2, [pc, #260]	; (800a860 <HAL_DMA_IRQHandler+0x460>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d019      	beq.n	800a792 <HAL_DMA_IRQHandler+0x392>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a40      	ldr	r2, [pc, #256]	; (800a864 <HAL_DMA_IRQHandler+0x464>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d012      	beq.n	800a78e <HAL_DMA_IRQHandler+0x38e>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a3e      	ldr	r2, [pc, #248]	; (800a868 <HAL_DMA_IRQHandler+0x468>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d00a      	beq.n	800a788 <HAL_DMA_IRQHandler+0x388>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a3d      	ldr	r2, [pc, #244]	; (800a86c <HAL_DMA_IRQHandler+0x46c>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d102      	bne.n	800a782 <HAL_DMA_IRQHandler+0x382>
 800a77c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a780:	e01b      	b.n	800a7ba <HAL_DMA_IRQHandler+0x3ba>
 800a782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a786:	e018      	b.n	800a7ba <HAL_DMA_IRQHandler+0x3ba>
 800a788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a78c:	e015      	b.n	800a7ba <HAL_DMA_IRQHandler+0x3ba>
 800a78e:	2320      	movs	r3, #32
 800a790:	e013      	b.n	800a7ba <HAL_DMA_IRQHandler+0x3ba>
 800a792:	2302      	movs	r3, #2
 800a794:	e011      	b.n	800a7ba <HAL_DMA_IRQHandler+0x3ba>
 800a796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a79a:	e00e      	b.n	800a7ba <HAL_DMA_IRQHandler+0x3ba>
 800a79c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a7a0:	e00b      	b.n	800a7ba <HAL_DMA_IRQHandler+0x3ba>
 800a7a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a7a6:	e008      	b.n	800a7ba <HAL_DMA_IRQHandler+0x3ba>
 800a7a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7ac:	e005      	b.n	800a7ba <HAL_DMA_IRQHandler+0x3ba>
 800a7ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7b2:	e002      	b.n	800a7ba <HAL_DMA_IRQHandler+0x3ba>
 800a7b4:	2320      	movs	r3, #32
 800a7b6:	e000      	b.n	800a7ba <HAL_DMA_IRQHandler+0x3ba>
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	4a2e      	ldr	r2, [pc, #184]	; (800a874 <HAL_DMA_IRQHandler+0x474>)
 800a7bc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d034      	beq.n	800a838 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800a7d6:	e02f      	b.n	800a838 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7dc:	2208      	movs	r2, #8
 800a7de:	409a      	lsls	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d028      	beq.n	800a83a <HAL_DMA_IRQHandler+0x43a>
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	f003 0308 	and.w	r3, r3, #8
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d023      	beq.n	800a83a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 020e 	bic.w	r2, r2, #14
 800a800:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a80a:	2101      	movs	r1, #1
 800a80c:	fa01 f202 	lsl.w	r2, r1, r2
 800a810:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d004      	beq.n	800a83a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	4798      	blx	r3
    }
  }
  return;
 800a838:	bf00      	nop
 800a83a:	bf00      	nop
}
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	40020080 	.word	0x40020080
 800a848:	40020008 	.word	0x40020008
 800a84c:	4002001c 	.word	0x4002001c
 800a850:	40020030 	.word	0x40020030
 800a854:	40020044 	.word	0x40020044
 800a858:	40020058 	.word	0x40020058
 800a85c:	4002006c 	.word	0x4002006c
 800a860:	40020408 	.word	0x40020408
 800a864:	4002041c 	.word	0x4002041c
 800a868:	40020430 	.word	0x40020430
 800a86c:	40020444 	.word	0x40020444
 800a870:	40020400 	.word	0x40020400
 800a874:	40020000 	.word	0x40020000

0800a878 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
 800a884:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88e:	2101      	movs	r1, #1
 800a890:	fa01 f202 	lsl.w	r2, r1, r2
 800a894:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	2b10      	cmp	r3, #16
 800a8a4:	d108      	bne.n	800a8b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a8b6:	e007      	b.n	800a8c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	60da      	str	r2, [r3, #12]
}
 800a8c8:	bf00      	nop
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bc80      	pop	{r7}
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b08b      	sub	sp, #44	; 0x2c
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a8e6:	e179      	b.n	800abdc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	69fa      	ldr	r2, [r7, #28]
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a8fc:	69ba      	ldr	r2, [r7, #24]
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	429a      	cmp	r2, r3
 800a902:	f040 8168 	bne.w	800abd6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	4a96      	ldr	r2, [pc, #600]	; (800ab64 <HAL_GPIO_Init+0x290>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d05e      	beq.n	800a9ce <HAL_GPIO_Init+0xfa>
 800a910:	4a94      	ldr	r2, [pc, #592]	; (800ab64 <HAL_GPIO_Init+0x290>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d875      	bhi.n	800aa02 <HAL_GPIO_Init+0x12e>
 800a916:	4a94      	ldr	r2, [pc, #592]	; (800ab68 <HAL_GPIO_Init+0x294>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d058      	beq.n	800a9ce <HAL_GPIO_Init+0xfa>
 800a91c:	4a92      	ldr	r2, [pc, #584]	; (800ab68 <HAL_GPIO_Init+0x294>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d86f      	bhi.n	800aa02 <HAL_GPIO_Init+0x12e>
 800a922:	4a92      	ldr	r2, [pc, #584]	; (800ab6c <HAL_GPIO_Init+0x298>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d052      	beq.n	800a9ce <HAL_GPIO_Init+0xfa>
 800a928:	4a90      	ldr	r2, [pc, #576]	; (800ab6c <HAL_GPIO_Init+0x298>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d869      	bhi.n	800aa02 <HAL_GPIO_Init+0x12e>
 800a92e:	4a90      	ldr	r2, [pc, #576]	; (800ab70 <HAL_GPIO_Init+0x29c>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d04c      	beq.n	800a9ce <HAL_GPIO_Init+0xfa>
 800a934:	4a8e      	ldr	r2, [pc, #568]	; (800ab70 <HAL_GPIO_Init+0x29c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d863      	bhi.n	800aa02 <HAL_GPIO_Init+0x12e>
 800a93a:	4a8e      	ldr	r2, [pc, #568]	; (800ab74 <HAL_GPIO_Init+0x2a0>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d046      	beq.n	800a9ce <HAL_GPIO_Init+0xfa>
 800a940:	4a8c      	ldr	r2, [pc, #560]	; (800ab74 <HAL_GPIO_Init+0x2a0>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d85d      	bhi.n	800aa02 <HAL_GPIO_Init+0x12e>
 800a946:	2b12      	cmp	r3, #18
 800a948:	d82a      	bhi.n	800a9a0 <HAL_GPIO_Init+0xcc>
 800a94a:	2b12      	cmp	r3, #18
 800a94c:	d859      	bhi.n	800aa02 <HAL_GPIO_Init+0x12e>
 800a94e:	a201      	add	r2, pc, #4	; (adr r2, 800a954 <HAL_GPIO_Init+0x80>)
 800a950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a954:	0800a9cf 	.word	0x0800a9cf
 800a958:	0800a9a9 	.word	0x0800a9a9
 800a95c:	0800a9bb 	.word	0x0800a9bb
 800a960:	0800a9fd 	.word	0x0800a9fd
 800a964:	0800aa03 	.word	0x0800aa03
 800a968:	0800aa03 	.word	0x0800aa03
 800a96c:	0800aa03 	.word	0x0800aa03
 800a970:	0800aa03 	.word	0x0800aa03
 800a974:	0800aa03 	.word	0x0800aa03
 800a978:	0800aa03 	.word	0x0800aa03
 800a97c:	0800aa03 	.word	0x0800aa03
 800a980:	0800aa03 	.word	0x0800aa03
 800a984:	0800aa03 	.word	0x0800aa03
 800a988:	0800aa03 	.word	0x0800aa03
 800a98c:	0800aa03 	.word	0x0800aa03
 800a990:	0800aa03 	.word	0x0800aa03
 800a994:	0800aa03 	.word	0x0800aa03
 800a998:	0800a9b1 	.word	0x0800a9b1
 800a99c:	0800a9c5 	.word	0x0800a9c5
 800a9a0:	4a75      	ldr	r2, [pc, #468]	; (800ab78 <HAL_GPIO_Init+0x2a4>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d013      	beq.n	800a9ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a9a6:	e02c      	b.n	800aa02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	623b      	str	r3, [r7, #32]
          break;
 800a9ae:	e029      	b.n	800aa04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	3304      	adds	r3, #4
 800a9b6:	623b      	str	r3, [r7, #32]
          break;
 800a9b8:	e024      	b.n	800aa04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	3308      	adds	r3, #8
 800a9c0:	623b      	str	r3, [r7, #32]
          break;
 800a9c2:	e01f      	b.n	800aa04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	330c      	adds	r3, #12
 800a9ca:	623b      	str	r3, [r7, #32]
          break;
 800a9cc:	e01a      	b.n	800aa04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d102      	bne.n	800a9dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a9d6:	2304      	movs	r3, #4
 800a9d8:	623b      	str	r3, [r7, #32]
          break;
 800a9da:	e013      	b.n	800aa04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d105      	bne.n	800a9f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a9e4:	2308      	movs	r3, #8
 800a9e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	69fa      	ldr	r2, [r7, #28]
 800a9ec:	611a      	str	r2, [r3, #16]
          break;
 800a9ee:	e009      	b.n	800aa04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a9f0:	2308      	movs	r3, #8
 800a9f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	69fa      	ldr	r2, [r7, #28]
 800a9f8:	615a      	str	r2, [r3, #20]
          break;
 800a9fa:	e003      	b.n	800aa04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	623b      	str	r3, [r7, #32]
          break;
 800aa00:	e000      	b.n	800aa04 <HAL_GPIO_Init+0x130>
          break;
 800aa02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	2bff      	cmp	r3, #255	; 0xff
 800aa08:	d801      	bhi.n	800aa0e <HAL_GPIO_Init+0x13a>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	e001      	b.n	800aa12 <HAL_GPIO_Init+0x13e>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3304      	adds	r3, #4
 800aa12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	2bff      	cmp	r3, #255	; 0xff
 800aa18:	d802      	bhi.n	800aa20 <HAL_GPIO_Init+0x14c>
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	e002      	b.n	800aa26 <HAL_GPIO_Init+0x152>
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	3b08      	subs	r3, #8
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	210f      	movs	r1, #15
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	fa01 f303 	lsl.w	r3, r1, r3
 800aa34:	43db      	mvns	r3, r3
 800aa36:	401a      	ands	r2, r3
 800aa38:	6a39      	ldr	r1, [r7, #32]
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	fa01 f303 	lsl.w	r3, r1, r3
 800aa40:	431a      	orrs	r2, r3
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 80c1 	beq.w	800abd6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800aa54:	4b49      	ldr	r3, [pc, #292]	; (800ab7c <HAL_GPIO_Init+0x2a8>)
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	4a48      	ldr	r2, [pc, #288]	; (800ab7c <HAL_GPIO_Init+0x2a8>)
 800aa5a:	f043 0301 	orr.w	r3, r3, #1
 800aa5e:	6193      	str	r3, [r2, #24]
 800aa60:	4b46      	ldr	r3, [pc, #280]	; (800ab7c <HAL_GPIO_Init+0x2a8>)
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	60bb      	str	r3, [r7, #8]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800aa6c:	4a44      	ldr	r2, [pc, #272]	; (800ab80 <HAL_GPIO_Init+0x2ac>)
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	089b      	lsrs	r3, r3, #2
 800aa72:	3302      	adds	r3, #2
 800aa74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7c:	f003 0303 	and.w	r3, r3, #3
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	220f      	movs	r2, #15
 800aa84:	fa02 f303 	lsl.w	r3, r2, r3
 800aa88:	43db      	mvns	r3, r3
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a3c      	ldr	r2, [pc, #240]	; (800ab84 <HAL_GPIO_Init+0x2b0>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d01f      	beq.n	800aad8 <HAL_GPIO_Init+0x204>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a3b      	ldr	r2, [pc, #236]	; (800ab88 <HAL_GPIO_Init+0x2b4>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d019      	beq.n	800aad4 <HAL_GPIO_Init+0x200>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a3a      	ldr	r2, [pc, #232]	; (800ab8c <HAL_GPIO_Init+0x2b8>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d013      	beq.n	800aad0 <HAL_GPIO_Init+0x1fc>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a39      	ldr	r2, [pc, #228]	; (800ab90 <HAL_GPIO_Init+0x2bc>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d00d      	beq.n	800aacc <HAL_GPIO_Init+0x1f8>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a38      	ldr	r2, [pc, #224]	; (800ab94 <HAL_GPIO_Init+0x2c0>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d007      	beq.n	800aac8 <HAL_GPIO_Init+0x1f4>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a37      	ldr	r2, [pc, #220]	; (800ab98 <HAL_GPIO_Init+0x2c4>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d101      	bne.n	800aac4 <HAL_GPIO_Init+0x1f0>
 800aac0:	2305      	movs	r3, #5
 800aac2:	e00a      	b.n	800aada <HAL_GPIO_Init+0x206>
 800aac4:	2306      	movs	r3, #6
 800aac6:	e008      	b.n	800aada <HAL_GPIO_Init+0x206>
 800aac8:	2304      	movs	r3, #4
 800aaca:	e006      	b.n	800aada <HAL_GPIO_Init+0x206>
 800aacc:	2303      	movs	r3, #3
 800aace:	e004      	b.n	800aada <HAL_GPIO_Init+0x206>
 800aad0:	2302      	movs	r3, #2
 800aad2:	e002      	b.n	800aada <HAL_GPIO_Init+0x206>
 800aad4:	2301      	movs	r3, #1
 800aad6:	e000      	b.n	800aada <HAL_GPIO_Init+0x206>
 800aad8:	2300      	movs	r3, #0
 800aada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aadc:	f002 0203 	and.w	r2, r2, #3
 800aae0:	0092      	lsls	r2, r2, #2
 800aae2:	4093      	lsls	r3, r2
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800aaea:	4925      	ldr	r1, [pc, #148]	; (800ab80 <HAL_GPIO_Init+0x2ac>)
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	089b      	lsrs	r3, r3, #2
 800aaf0:	3302      	adds	r3, #2
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d006      	beq.n	800ab12 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800ab04:	4b25      	ldr	r3, [pc, #148]	; (800ab9c <HAL_GPIO_Init+0x2c8>)
 800ab06:	689a      	ldr	r2, [r3, #8]
 800ab08:	4924      	ldr	r1, [pc, #144]	; (800ab9c <HAL_GPIO_Init+0x2c8>)
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	608b      	str	r3, [r1, #8]
 800ab10:	e006      	b.n	800ab20 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800ab12:	4b22      	ldr	r3, [pc, #136]	; (800ab9c <HAL_GPIO_Init+0x2c8>)
 800ab14:	689a      	ldr	r2, [r3, #8]
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	43db      	mvns	r3, r3
 800ab1a:	4920      	ldr	r1, [pc, #128]	; (800ab9c <HAL_GPIO_Init+0x2c8>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d006      	beq.n	800ab3a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800ab2c:	4b1b      	ldr	r3, [pc, #108]	; (800ab9c <HAL_GPIO_Init+0x2c8>)
 800ab2e:	68da      	ldr	r2, [r3, #12]
 800ab30:	491a      	ldr	r1, [pc, #104]	; (800ab9c <HAL_GPIO_Init+0x2c8>)
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	60cb      	str	r3, [r1, #12]
 800ab38:	e006      	b.n	800ab48 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800ab3a:	4b18      	ldr	r3, [pc, #96]	; (800ab9c <HAL_GPIO_Init+0x2c8>)
 800ab3c:	68da      	ldr	r2, [r3, #12]
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	43db      	mvns	r3, r3
 800ab42:	4916      	ldr	r1, [pc, #88]	; (800ab9c <HAL_GPIO_Init+0x2c8>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d025      	beq.n	800aba0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800ab54:	4b11      	ldr	r3, [pc, #68]	; (800ab9c <HAL_GPIO_Init+0x2c8>)
 800ab56:	685a      	ldr	r2, [r3, #4]
 800ab58:	4910      	ldr	r1, [pc, #64]	; (800ab9c <HAL_GPIO_Init+0x2c8>)
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	604b      	str	r3, [r1, #4]
 800ab60:	e025      	b.n	800abae <HAL_GPIO_Init+0x2da>
 800ab62:	bf00      	nop
 800ab64:	10320000 	.word	0x10320000
 800ab68:	10310000 	.word	0x10310000
 800ab6c:	10220000 	.word	0x10220000
 800ab70:	10210000 	.word	0x10210000
 800ab74:	10120000 	.word	0x10120000
 800ab78:	10110000 	.word	0x10110000
 800ab7c:	40021000 	.word	0x40021000
 800ab80:	40010000 	.word	0x40010000
 800ab84:	40010800 	.word	0x40010800
 800ab88:	40010c00 	.word	0x40010c00
 800ab8c:	40011000 	.word	0x40011000
 800ab90:	40011400 	.word	0x40011400
 800ab94:	40011800 	.word	0x40011800
 800ab98:	40011c00 	.word	0x40011c00
 800ab9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800aba0:	4b15      	ldr	r3, [pc, #84]	; (800abf8 <HAL_GPIO_Init+0x324>)
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	43db      	mvns	r3, r3
 800aba8:	4913      	ldr	r1, [pc, #76]	; (800abf8 <HAL_GPIO_Init+0x324>)
 800abaa:	4013      	ands	r3, r2
 800abac:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d006      	beq.n	800abc8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800abba:	4b0f      	ldr	r3, [pc, #60]	; (800abf8 <HAL_GPIO_Init+0x324>)
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	490e      	ldr	r1, [pc, #56]	; (800abf8 <HAL_GPIO_Init+0x324>)
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	600b      	str	r3, [r1, #0]
 800abc6:	e006      	b.n	800abd6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800abc8:	4b0b      	ldr	r3, [pc, #44]	; (800abf8 <HAL_GPIO_Init+0x324>)
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	43db      	mvns	r3, r3
 800abd0:	4909      	ldr	r1, [pc, #36]	; (800abf8 <HAL_GPIO_Init+0x324>)
 800abd2:	4013      	ands	r3, r2
 800abd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	3301      	adds	r3, #1
 800abda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	fa22 f303 	lsr.w	r3, r2, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f47f ae7e 	bne.w	800a8e8 <HAL_GPIO_Init+0x14>
  }
}
 800abec:	bf00      	nop
 800abee:	bf00      	nop
 800abf0:	372c      	adds	r7, #44	; 0x2c
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bc80      	pop	{r7}
 800abf6:	4770      	bx	lr
 800abf8:	40010400 	.word	0x40010400

0800abfc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b089      	sub	sp, #36	; 0x24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ac06:	2300      	movs	r3, #0
 800ac08:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800ac0a:	e0a6      	b.n	800ad5a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	fa02 f303 	lsl.w	r3, r2, r3
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	4013      	ands	r3, r2
 800ac18:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 8099 	beq.w	800ad54 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800ac22:	4a54      	ldr	r2, [pc, #336]	; (800ad74 <HAL_GPIO_DeInit+0x178>)
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	089b      	lsrs	r3, r3, #2
 800ac28:	3302      	adds	r3, #2
 800ac2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac2e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	f003 0303 	and.w	r3, r3, #3
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	220f      	movs	r2, #15
 800ac3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	4013      	ands	r3, r2
 800ac42:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a4c      	ldr	r2, [pc, #304]	; (800ad78 <HAL_GPIO_DeInit+0x17c>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d01f      	beq.n	800ac8c <HAL_GPIO_DeInit+0x90>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a4b      	ldr	r2, [pc, #300]	; (800ad7c <HAL_GPIO_DeInit+0x180>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d019      	beq.n	800ac88 <HAL_GPIO_DeInit+0x8c>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a4a      	ldr	r2, [pc, #296]	; (800ad80 <HAL_GPIO_DeInit+0x184>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d013      	beq.n	800ac84 <HAL_GPIO_DeInit+0x88>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a49      	ldr	r2, [pc, #292]	; (800ad84 <HAL_GPIO_DeInit+0x188>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d00d      	beq.n	800ac80 <HAL_GPIO_DeInit+0x84>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a48      	ldr	r2, [pc, #288]	; (800ad88 <HAL_GPIO_DeInit+0x18c>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d007      	beq.n	800ac7c <HAL_GPIO_DeInit+0x80>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a47      	ldr	r2, [pc, #284]	; (800ad8c <HAL_GPIO_DeInit+0x190>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d101      	bne.n	800ac78 <HAL_GPIO_DeInit+0x7c>
 800ac74:	2305      	movs	r3, #5
 800ac76:	e00a      	b.n	800ac8e <HAL_GPIO_DeInit+0x92>
 800ac78:	2306      	movs	r3, #6
 800ac7a:	e008      	b.n	800ac8e <HAL_GPIO_DeInit+0x92>
 800ac7c:	2304      	movs	r3, #4
 800ac7e:	e006      	b.n	800ac8e <HAL_GPIO_DeInit+0x92>
 800ac80:	2303      	movs	r3, #3
 800ac82:	e004      	b.n	800ac8e <HAL_GPIO_DeInit+0x92>
 800ac84:	2302      	movs	r3, #2
 800ac86:	e002      	b.n	800ac8e <HAL_GPIO_DeInit+0x92>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e000      	b.n	800ac8e <HAL_GPIO_DeInit+0x92>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	69fa      	ldr	r2, [r7, #28]
 800ac90:	f002 0203 	and.w	r2, r2, #3
 800ac94:	0092      	lsls	r2, r2, #2
 800ac96:	4093      	lsls	r3, r2
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d132      	bne.n	800ad04 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800ac9e:	4b3c      	ldr	r3, [pc, #240]	; (800ad90 <HAL_GPIO_DeInit+0x194>)
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	43db      	mvns	r3, r3
 800aca6:	493a      	ldr	r1, [pc, #232]	; (800ad90 <HAL_GPIO_DeInit+0x194>)
 800aca8:	4013      	ands	r3, r2
 800acaa:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800acac:	4b38      	ldr	r3, [pc, #224]	; (800ad90 <HAL_GPIO_DeInit+0x194>)
 800acae:	685a      	ldr	r2, [r3, #4]
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	43db      	mvns	r3, r3
 800acb4:	4936      	ldr	r1, [pc, #216]	; (800ad90 <HAL_GPIO_DeInit+0x194>)
 800acb6:	4013      	ands	r3, r2
 800acb8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800acba:	4b35      	ldr	r3, [pc, #212]	; (800ad90 <HAL_GPIO_DeInit+0x194>)
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	43db      	mvns	r3, r3
 800acc2:	4933      	ldr	r1, [pc, #204]	; (800ad90 <HAL_GPIO_DeInit+0x194>)
 800acc4:	4013      	ands	r3, r2
 800acc6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800acc8:	4b31      	ldr	r3, [pc, #196]	; (800ad90 <HAL_GPIO_DeInit+0x194>)
 800acca:	689a      	ldr	r2, [r3, #8]
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	43db      	mvns	r3, r3
 800acd0:	492f      	ldr	r1, [pc, #188]	; (800ad90 <HAL_GPIO_DeInit+0x194>)
 800acd2:	4013      	ands	r3, r2
 800acd4:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	f003 0303 	and.w	r3, r3, #3
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	220f      	movs	r2, #15
 800ace0:	fa02 f303 	lsl.w	r3, r2, r3
 800ace4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800ace6:	4a23      	ldr	r2, [pc, #140]	; (800ad74 <HAL_GPIO_DeInit+0x178>)
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	089b      	lsrs	r3, r3, #2
 800acec:	3302      	adds	r3, #2
 800acee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	43da      	mvns	r2, r3
 800acf6:	481f      	ldr	r0, [pc, #124]	; (800ad74 <HAL_GPIO_DeInit+0x178>)
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	089b      	lsrs	r3, r3, #2
 800acfc:	400a      	ands	r2, r1
 800acfe:	3302      	adds	r3, #2
 800ad00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	2bff      	cmp	r3, #255	; 0xff
 800ad08:	d801      	bhi.n	800ad0e <HAL_GPIO_DeInit+0x112>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	e001      	b.n	800ad12 <HAL_GPIO_DeInit+0x116>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3304      	adds	r3, #4
 800ad12:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	2bff      	cmp	r3, #255	; 0xff
 800ad18:	d802      	bhi.n	800ad20 <HAL_GPIO_DeInit+0x124>
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	e002      	b.n	800ad26 <HAL_GPIO_DeInit+0x12a>
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	3b08      	subs	r3, #8
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	210f      	movs	r1, #15
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	fa01 f303 	lsl.w	r3, r1, r3
 800ad34:	43db      	mvns	r3, r3
 800ad36:	401a      	ands	r2, r3
 800ad38:	2104      	movs	r1, #4
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad40:	431a      	orrs	r2, r3
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	68da      	ldr	r2, [r3, #12]
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	43db      	mvns	r3, r3
 800ad4e:	401a      	ands	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	60da      	str	r2, [r3, #12]
    }

    position++;
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	3301      	adds	r3, #1
 800ad58:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f47f af52 	bne.w	800ac0c <HAL_GPIO_DeInit+0x10>
  }
}
 800ad68:	bf00      	nop
 800ad6a:	bf00      	nop
 800ad6c:	3724      	adds	r7, #36	; 0x24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bc80      	pop	{r7}
 800ad72:	4770      	bx	lr
 800ad74:	40010000 	.word	0x40010000
 800ad78:	40010800 	.word	0x40010800
 800ad7c:	40010c00 	.word	0x40010c00
 800ad80:	40011000 	.word	0x40011000
 800ad84:	40011400 	.word	0x40011400
 800ad88:	40011800 	.word	0x40011800
 800ad8c:	40011c00 	.word	0x40011c00
 800ad90:	40010400 	.word	0x40010400

0800ad94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	689a      	ldr	r2, [r3, #8]
 800ada4:	887b      	ldrh	r3, [r7, #2]
 800ada6:	4013      	ands	r3, r2
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800adac:	2301      	movs	r3, #1
 800adae:	73fb      	strb	r3, [r7, #15]
 800adb0:	e001      	b.n	800adb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800adb2:	2300      	movs	r3, #0
 800adb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3714      	adds	r7, #20
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bc80      	pop	{r7}
 800adc0:	4770      	bx	lr

0800adc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b083      	sub	sp, #12
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	460b      	mov	r3, r1
 800adcc:	807b      	strh	r3, [r7, #2]
 800adce:	4613      	mov	r3, r2
 800add0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800add2:	787b      	ldrb	r3, [r7, #1]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d003      	beq.n	800ade0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800add8:	887a      	ldrh	r2, [r7, #2]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800adde:	e003      	b.n	800ade8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800ade0:	887b      	ldrh	r3, [r7, #2]
 800ade2:	041a      	lsls	r2, r3, #16
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	611a      	str	r2, [r3, #16]
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	bc80      	pop	{r7}
 800adf0:	4770      	bx	lr

0800adf2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b085      	sub	sp, #20
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	460b      	mov	r3, r1
 800adfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ae04:	887a      	ldrh	r2, [r7, #2]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	4013      	ands	r3, r2
 800ae0a:	041a      	lsls	r2, r3, #16
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	43d9      	mvns	r1, r3
 800ae10:	887b      	ldrh	r3, [r7, #2]
 800ae12:	400b      	ands	r3, r1
 800ae14:	431a      	orrs	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	611a      	str	r2, [r3, #16]
}
 800ae1a:	bf00      	nop
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bc80      	pop	{r7}
 800ae22:	4770      	bx	lr

0800ae24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d101      	bne.n	800ae36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e12b      	b.n	800b08e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d106      	bne.n	800ae50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7f6 fc78 	bl	8001740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2224      	movs	r2, #36	; 0x24
 800ae54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f022 0201 	bic.w	r2, r2, #1
 800ae66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ae88:	f001 fbf0 	bl	800c66c <HAL_RCC_GetPCLK1Freq>
 800ae8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	4a81      	ldr	r2, [pc, #516]	; (800b098 <HAL_I2C_Init+0x274>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d807      	bhi.n	800aea8 <HAL_I2C_Init+0x84>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	4a80      	ldr	r2, [pc, #512]	; (800b09c <HAL_I2C_Init+0x278>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	bf94      	ite	ls
 800aea0:	2301      	movls	r3, #1
 800aea2:	2300      	movhi	r3, #0
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	e006      	b.n	800aeb6 <HAL_I2C_Init+0x92>
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4a7d      	ldr	r2, [pc, #500]	; (800b0a0 <HAL_I2C_Init+0x27c>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	bf94      	ite	ls
 800aeb0:	2301      	movls	r3, #1
 800aeb2:	2300      	movhi	r3, #0
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e0e7      	b.n	800b08e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	4a78      	ldr	r2, [pc, #480]	; (800b0a4 <HAL_I2C_Init+0x280>)
 800aec2:	fba2 2303 	umull	r2, r3, r2, r3
 800aec6:	0c9b      	lsrs	r3, r3, #18
 800aec8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	430a      	orrs	r2, r1
 800aedc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	4a6a      	ldr	r2, [pc, #424]	; (800b098 <HAL_I2C_Init+0x274>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d802      	bhi.n	800aef8 <HAL_I2C_Init+0xd4>
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	3301      	adds	r3, #1
 800aef6:	e009      	b.n	800af0c <HAL_I2C_Init+0xe8>
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aefe:	fb02 f303 	mul.w	r3, r2, r3
 800af02:	4a69      	ldr	r2, [pc, #420]	; (800b0a8 <HAL_I2C_Init+0x284>)
 800af04:	fba2 2303 	umull	r2, r3, r2, r3
 800af08:	099b      	lsrs	r3, r3, #6
 800af0a:	3301      	adds	r3, #1
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	6812      	ldr	r2, [r2, #0]
 800af10:	430b      	orrs	r3, r1
 800af12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800af1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	495c      	ldr	r1, [pc, #368]	; (800b098 <HAL_I2C_Init+0x274>)
 800af28:	428b      	cmp	r3, r1
 800af2a:	d819      	bhi.n	800af60 <HAL_I2C_Init+0x13c>
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	1e59      	subs	r1, r3, #1
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	005b      	lsls	r3, r3, #1
 800af36:	fbb1 f3f3 	udiv	r3, r1, r3
 800af3a:	1c59      	adds	r1, r3, #1
 800af3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800af40:	400b      	ands	r3, r1
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00a      	beq.n	800af5c <HAL_I2C_Init+0x138>
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	1e59      	subs	r1, r3, #1
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	005b      	lsls	r3, r3, #1
 800af50:	fbb1 f3f3 	udiv	r3, r1, r3
 800af54:	3301      	adds	r3, #1
 800af56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af5a:	e051      	b.n	800b000 <HAL_I2C_Init+0x1dc>
 800af5c:	2304      	movs	r3, #4
 800af5e:	e04f      	b.n	800b000 <HAL_I2C_Init+0x1dc>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d111      	bne.n	800af8c <HAL_I2C_Init+0x168>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	1e58      	subs	r0, r3, #1
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6859      	ldr	r1, [r3, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	440b      	add	r3, r1
 800af76:	fbb0 f3f3 	udiv	r3, r0, r3
 800af7a:	3301      	adds	r3, #1
 800af7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af80:	2b00      	cmp	r3, #0
 800af82:	bf0c      	ite	eq
 800af84:	2301      	moveq	r3, #1
 800af86:	2300      	movne	r3, #0
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	e012      	b.n	800afb2 <HAL_I2C_Init+0x18e>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	1e58      	subs	r0, r3, #1
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6859      	ldr	r1, [r3, #4]
 800af94:	460b      	mov	r3, r1
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	440b      	add	r3, r1
 800af9a:	0099      	lsls	r1, r3, #2
 800af9c:	440b      	add	r3, r1
 800af9e:	fbb0 f3f3 	udiv	r3, r0, r3
 800afa2:	3301      	adds	r3, #1
 800afa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	bf0c      	ite	eq
 800afac:	2301      	moveq	r3, #1
 800afae:	2300      	movne	r3, #0
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <HAL_I2C_Init+0x196>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e022      	b.n	800b000 <HAL_I2C_Init+0x1dc>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10e      	bne.n	800afe0 <HAL_I2C_Init+0x1bc>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	1e58      	subs	r0, r3, #1
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6859      	ldr	r1, [r3, #4]
 800afca:	460b      	mov	r3, r1
 800afcc:	005b      	lsls	r3, r3, #1
 800afce:	440b      	add	r3, r1
 800afd0:	fbb0 f3f3 	udiv	r3, r0, r3
 800afd4:	3301      	adds	r3, #1
 800afd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afde:	e00f      	b.n	800b000 <HAL_I2C_Init+0x1dc>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	1e58      	subs	r0, r3, #1
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6859      	ldr	r1, [r3, #4]
 800afe8:	460b      	mov	r3, r1
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	440b      	add	r3, r1
 800afee:	0099      	lsls	r1, r3, #2
 800aff0:	440b      	add	r3, r1
 800aff2:	fbb0 f3f3 	udiv	r3, r0, r3
 800aff6:	3301      	adds	r3, #1
 800aff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800affc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	6809      	ldr	r1, [r1, #0]
 800b004:	4313      	orrs	r3, r2
 800b006:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	69da      	ldr	r2, [r3, #28]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	431a      	orrs	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	430a      	orrs	r2, r1
 800b022:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b02e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	6911      	ldr	r1, [r2, #16]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	68d2      	ldr	r2, [r2, #12]
 800b03a:	4311      	orrs	r1, r2
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	6812      	ldr	r2, [r2, #0]
 800b040:	430b      	orrs	r3, r1
 800b042:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	695a      	ldr	r2, [r3, #20]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	431a      	orrs	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	430a      	orrs	r2, r1
 800b05e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f042 0201 	orr.w	r2, r2, #1
 800b06e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2220      	movs	r2, #32
 800b07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	000186a0 	.word	0x000186a0
 800b09c:	001e847f 	.word	0x001e847f
 800b0a0:	003d08ff 	.word	0x003d08ff
 800b0a4:	431bde83 	.word	0x431bde83
 800b0a8:	10624dd3 	.word	0x10624dd3

0800b0ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b088      	sub	sp, #32
 800b0b0:	af02      	add	r7, sp, #8
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	817b      	strh	r3, [r7, #10]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	813b      	strh	r3, [r7, #8]
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b0c6:	f7fd fa7d 	bl	80085c4 <HAL_GetTick>
 800b0ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b20      	cmp	r3, #32
 800b0d6:	f040 80d9 	bne.w	800b28c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	2319      	movs	r3, #25
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	496d      	ldr	r1, [pc, #436]	; (800b298 <HAL_I2C_Mem_Write+0x1ec>)
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 fcc1 	bl	800ba6c <I2C_WaitOnFlagUntilTimeout>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	e0cc      	b.n	800b28e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d101      	bne.n	800b102 <HAL_I2C_Mem_Write+0x56>
 800b0fe:	2302      	movs	r3, #2
 800b100:	e0c5      	b.n	800b28e <HAL_I2C_Mem_Write+0x1e2>
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2201      	movs	r2, #1
 800b106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b01      	cmp	r3, #1
 800b116:	d007      	beq.n	800b128 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f042 0201 	orr.w	r2, r2, #1
 800b126:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b136:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2221      	movs	r2, #33	; 0x21
 800b13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2240      	movs	r2, #64	; 0x40
 800b144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2200      	movs	r2, #0
 800b14c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6a3a      	ldr	r2, [r7, #32]
 800b152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b158:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b15e:	b29a      	uxth	r2, r3
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	4a4d      	ldr	r2, [pc, #308]	; (800b29c <HAL_I2C_Mem_Write+0x1f0>)
 800b168:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b16a:	88f8      	ldrh	r0, [r7, #6]
 800b16c:	893a      	ldrh	r2, [r7, #8]
 800b16e:	8979      	ldrh	r1, [r7, #10]
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	9301      	str	r3, [sp, #4]
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	4603      	mov	r3, r0
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f000 faf8 	bl	800b770 <I2C_RequestMemoryWrite>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d052      	beq.n	800b22c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	e081      	b.n	800b28e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f000 fd86 	bl	800bca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00d      	beq.n	800b1b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	d107      	bne.n	800b1b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e06b      	b.n	800b28e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ba:	781a      	ldrb	r2, [r3, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	f003 0304 	and.w	r3, r3, #4
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d11b      	bne.n	800b22c <HAL_I2C_Mem_Write+0x180>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d017      	beq.n	800b22c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	781a      	ldrb	r2, [r3, #0]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20c:	1c5a      	adds	r2, r3, #1
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b216:	3b01      	subs	r3, #1
 800b218:	b29a      	uxth	r2, r3
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b222:	b29b      	uxth	r3, r3
 800b224:	3b01      	subs	r3, #1
 800b226:	b29a      	uxth	r2, r3
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1aa      	bne.n	800b18a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b234:	697a      	ldr	r2, [r7, #20]
 800b236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 fd79 	bl	800bd30 <I2C_WaitOnBTFFlagUntilTimeout>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00d      	beq.n	800b260 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b248:	2b04      	cmp	r3, #4
 800b24a:	d107      	bne.n	800b25c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b25a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e016      	b.n	800b28e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b26e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2220      	movs	r2, #32
 800b274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	e000      	b.n	800b28e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b28c:	2302      	movs	r3, #2
  }
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3718      	adds	r7, #24
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	00100002 	.word	0x00100002
 800b29c:	ffff0000 	.word	0xffff0000

0800b2a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08c      	sub	sp, #48	; 0x30
 800b2a4:	af02      	add	r7, sp, #8
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	4608      	mov	r0, r1
 800b2aa:	4611      	mov	r1, r2
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	817b      	strh	r3, [r7, #10]
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	813b      	strh	r3, [r7, #8]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b2be:	f7fd f981 	bl	80085c4 <HAL_GetTick>
 800b2c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b20      	cmp	r3, #32
 800b2ce:	f040 8244 	bne.w	800b75a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	2319      	movs	r3, #25
 800b2d8:	2201      	movs	r2, #1
 800b2da:	4982      	ldr	r1, [pc, #520]	; (800b4e4 <HAL_I2C_Mem_Read+0x244>)
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 fbc5 	bl	800ba6c <I2C_WaitOnFlagUntilTimeout>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	e237      	b.n	800b75c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d101      	bne.n	800b2fa <HAL_I2C_Mem_Read+0x5a>
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	e230      	b.n	800b75c <HAL_I2C_Mem_Read+0x4bc>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d007      	beq.n	800b320 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f042 0201 	orr.w	r2, r2, #1
 800b31e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b32e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2222      	movs	r2, #34	; 0x22
 800b334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2240      	movs	r2, #64	; 0x40
 800b33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b34a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b350:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b356:	b29a      	uxth	r2, r3
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4a62      	ldr	r2, [pc, #392]	; (800b4e8 <HAL_I2C_Mem_Read+0x248>)
 800b360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b362:	88f8      	ldrh	r0, [r7, #6]
 800b364:	893a      	ldrh	r2, [r7, #8]
 800b366:	8979      	ldrh	r1, [r7, #10]
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	9301      	str	r3, [sp, #4]
 800b36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	4603      	mov	r3, r0
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f000 fa92 	bl	800b89c <I2C_RequestMemoryRead>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e1ec      	b.n	800b75c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b386:	2b00      	cmp	r3, #0
 800b388:	d113      	bne.n	800b3b2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b38a:	2300      	movs	r3, #0
 800b38c:	61fb      	str	r3, [r7, #28]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	695b      	ldr	r3, [r3, #20]
 800b394:	61fb      	str	r3, [r7, #28]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	61fb      	str	r3, [r7, #28]
 800b39e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	e1c0      	b.n	800b734 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d11e      	bne.n	800b3f8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3ca:	b672      	cpsid	i
}
 800b3cc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	61bb      	str	r3, [r7, #24]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	695b      	ldr	r3, [r3, #20]
 800b3d8:	61bb      	str	r3, [r7, #24]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	61bb      	str	r3, [r7, #24]
 800b3e2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b3f4:	b662      	cpsie	i
}
 800b3f6:	e035      	b.n	800b464 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d11e      	bne.n	800b43e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b40e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b410:	b672      	cpsid	i
}
 800b412:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b414:	2300      	movs	r3, #0
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	617b      	str	r3, [r7, #20]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	617b      	str	r3, [r7, #20]
 800b428:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b438:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b43a:	b662      	cpsie	i
}
 800b43c:	e012      	b.n	800b464 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b44c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b44e:	2300      	movs	r3, #0
 800b450:	613b      	str	r3, [r7, #16]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	695b      	ldr	r3, [r3, #20]
 800b458:	613b      	str	r3, [r7, #16]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	699b      	ldr	r3, [r3, #24]
 800b460:	613b      	str	r3, [r7, #16]
 800b462:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b464:	e166      	b.n	800b734 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b46a:	2b03      	cmp	r3, #3
 800b46c:	f200 811f 	bhi.w	800b6ae <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b474:	2b01      	cmp	r3, #1
 800b476:	d123      	bne.n	800b4c0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b47a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f000 fc9f 	bl	800bdc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d001      	beq.n	800b48c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	e167      	b.n	800b75c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	691a      	ldr	r2, [r3, #16]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	b2d2      	uxtb	r2, r2
 800b498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	1c5a      	adds	r2, r3, #1
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4be:	e139      	b.n	800b734 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d152      	bne.n	800b56e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	4906      	ldr	r1, [pc, #24]	; (800b4ec <HAL_I2C_Mem_Read+0x24c>)
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f000 faca 	bl	800ba6c <I2C_WaitOnFlagUntilTimeout>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d008      	beq.n	800b4f0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e13c      	b.n	800b75c <HAL_I2C_Mem_Read+0x4bc>
 800b4e2:	bf00      	nop
 800b4e4:	00100002 	.word	0x00100002
 800b4e8:	ffff0000 	.word	0xffff0000
 800b4ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b4f0:	b672      	cpsid	i
}
 800b4f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	691a      	ldr	r2, [r3, #16]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50e:	b2d2      	uxtb	r2, r2
 800b510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b516:	1c5a      	adds	r2, r3, #1
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b520:	3b01      	subs	r3, #1
 800b522:	b29a      	uxth	r2, r3
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	3b01      	subs	r3, #1
 800b530:	b29a      	uxth	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b536:	b662      	cpsie	i
}
 800b538:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	691a      	ldr	r2, [r3, #16]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	b2d2      	uxtb	r2, r2
 800b546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	1c5a      	adds	r2, r3, #1
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b556:	3b01      	subs	r3, #1
 800b558:	b29a      	uxth	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b562:	b29b      	uxth	r3, r3
 800b564:	3b01      	subs	r3, #1
 800b566:	b29a      	uxth	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b56c:	e0e2      	b.n	800b734 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b574:	2200      	movs	r2, #0
 800b576:	497b      	ldr	r1, [pc, #492]	; (800b764 <HAL_I2C_Mem_Read+0x4c4>)
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 fa77 	bl	800ba6c <I2C_WaitOnFlagUntilTimeout>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	e0e9      	b.n	800b75c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b596:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b598:	b672      	cpsid	i
}
 800b59a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	691a      	ldr	r2, [r3, #16]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a6:	b2d2      	uxtb	r2, r2
 800b5a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ae:	1c5a      	adds	r2, r3, #1
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b5ce:	4b66      	ldr	r3, [pc, #408]	; (800b768 <HAL_I2C_Mem_Read+0x4c8>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	08db      	lsrs	r3, r3, #3
 800b5d4:	4a65      	ldr	r2, [pc, #404]	; (800b76c <HAL_I2C_Mem_Read+0x4cc>)
 800b5d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5da:	0a1a      	lsrs	r2, r3, #8
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	00da      	lsls	r2, r3, #3
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b5ee:	6a3b      	ldr	r3, [r7, #32]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d118      	bne.n	800b626 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2220      	movs	r2, #32
 800b5fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60e:	f043 0220 	orr.w	r2, r3, #32
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b616:	b662      	cpsie	i
}
 800b618:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	e09a      	b.n	800b75c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	f003 0304 	and.w	r3, r3, #4
 800b630:	2b04      	cmp	r3, #4
 800b632:	d1d9      	bne.n	800b5e8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	691a      	ldr	r2, [r3, #16]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64e:	b2d2      	uxtb	r2, r2
 800b650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b656:	1c5a      	adds	r2, r3, #1
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b660:	3b01      	subs	r3, #1
 800b662:	b29a      	uxth	r2, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	3b01      	subs	r3, #1
 800b670:	b29a      	uxth	r2, r3
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b676:	b662      	cpsie	i
}
 800b678:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	691a      	ldr	r2, [r3, #16]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b684:	b2d2      	uxtb	r2, r2
 800b686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	1c5a      	adds	r2, r3, #1
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b696:	3b01      	subs	r3, #1
 800b698:	b29a      	uxth	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6ac:	e042      	b.n	800b734 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f000 fb84 	bl	800bdc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d001      	beq.n	800b6c2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e04c      	b.n	800b75c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	691a      	ldr	r2, [r3, #16]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	b2d2      	uxtb	r2, r2
 800b6ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d4:	1c5a      	adds	r2, r3, #1
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	f003 0304 	and.w	r3, r3, #4
 800b6fe:	2b04      	cmp	r3, #4
 800b700:	d118      	bne.n	800b734 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	691a      	ldr	r2, [r3, #16]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70c:	b2d2      	uxtb	r2, r2
 800b70e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b714:	1c5a      	adds	r2, r3, #1
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b71e:	3b01      	subs	r3, #1
 800b720:	b29a      	uxth	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	3b01      	subs	r3, #1
 800b72e:	b29a      	uxth	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f47f ae94 	bne.w	800b466 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2220      	movs	r2, #32
 800b742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b756:	2300      	movs	r3, #0
 800b758:	e000      	b.n	800b75c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b75a:	2302      	movs	r3, #2
  }
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3728      	adds	r7, #40	; 0x28
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	00010004 	.word	0x00010004
 800b768:	20000000 	.word	0x20000000
 800b76c:	14f8b589 	.word	0x14f8b589

0800b770 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b088      	sub	sp, #32
 800b774:	af02      	add	r7, sp, #8
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	4608      	mov	r0, r1
 800b77a:	4611      	mov	r1, r2
 800b77c:	461a      	mov	r2, r3
 800b77e:	4603      	mov	r3, r0
 800b780:	817b      	strh	r3, [r7, #10]
 800b782:	460b      	mov	r3, r1
 800b784:	813b      	strh	r3, [r7, #8]
 800b786:	4613      	mov	r3, r2
 800b788:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	6a3b      	ldr	r3, [r7, #32]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f000 f960 	bl	800ba6c <I2C_WaitOnFlagUntilTimeout>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00d      	beq.n	800b7ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7c0:	d103      	bne.n	800b7ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	e05f      	b.n	800b88e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b7ce:	897b      	ldrh	r3, [r7, #10]
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b7dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e0:	6a3a      	ldr	r2, [r7, #32]
 800b7e2:	492d      	ldr	r1, [pc, #180]	; (800b898 <I2C_RequestMemoryWrite+0x128>)
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f000 f9bb 	bl	800bb60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e04c      	b.n	800b88e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	617b      	str	r3, [r7, #20]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	617b      	str	r3, [r7, #20]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	617b      	str	r3, [r7, #20]
 800b808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b80a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b80c:	6a39      	ldr	r1, [r7, #32]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 fa46 	bl	800bca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00d      	beq.n	800b836 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b81e:	2b04      	cmp	r3, #4
 800b820:	d107      	bne.n	800b832 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	e02b      	b.n	800b88e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b836:	88fb      	ldrh	r3, [r7, #6]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d105      	bne.n	800b848 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b83c:	893b      	ldrh	r3, [r7, #8]
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	611a      	str	r2, [r3, #16]
 800b846:	e021      	b.n	800b88c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b848:	893b      	ldrh	r3, [r7, #8]
 800b84a:	0a1b      	lsrs	r3, r3, #8
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b858:	6a39      	ldr	r1, [r7, #32]
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f000 fa20 	bl	800bca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00d      	beq.n	800b882 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86a:	2b04      	cmp	r3, #4
 800b86c:	d107      	bne.n	800b87e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b87c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e005      	b.n	800b88e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b882:	893b      	ldrh	r3, [r7, #8]
 800b884:	b2da      	uxtb	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	00010002 	.word	0x00010002

0800b89c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af02      	add	r7, sp, #8
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	817b      	strh	r3, [r7, #10]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	813b      	strh	r3, [r7, #8]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f000 f8c2 	bl	800ba6c <I2C_WaitOnFlagUntilTimeout>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00d      	beq.n	800b90a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8fc:	d103      	bne.n	800b906 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b906:	2303      	movs	r3, #3
 800b908:	e0aa      	b.n	800ba60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b90a:	897b      	ldrh	r3, [r7, #10]
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	461a      	mov	r2, r3
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	6a3a      	ldr	r2, [r7, #32]
 800b91e:	4952      	ldr	r1, [pc, #328]	; (800ba68 <I2C_RequestMemoryRead+0x1cc>)
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f000 f91d 	bl	800bb60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d001      	beq.n	800b930 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e097      	b.n	800ba60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b930:	2300      	movs	r3, #0
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	617b      	str	r3, [r7, #20]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	617b      	str	r3, [r7, #20]
 800b944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b948:	6a39      	ldr	r1, [r7, #32]
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f000 f9a8 	bl	800bca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00d      	beq.n	800b972 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95a:	2b04      	cmp	r3, #4
 800b95c:	d107      	bne.n	800b96e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b96c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	e076      	b.n	800ba60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b972:	88fb      	ldrh	r3, [r7, #6]
 800b974:	2b01      	cmp	r3, #1
 800b976:	d105      	bne.n	800b984 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b978:	893b      	ldrh	r3, [r7, #8]
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	611a      	str	r2, [r3, #16]
 800b982:	e021      	b.n	800b9c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b984:	893b      	ldrh	r3, [r7, #8]
 800b986:	0a1b      	lsrs	r3, r3, #8
 800b988:	b29b      	uxth	r3, r3
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b994:	6a39      	ldr	r1, [r7, #32]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 f982 	bl	800bca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00d      	beq.n	800b9be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a6:	2b04      	cmp	r3, #4
 800b9a8:	d107      	bne.n	800b9ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e050      	b.n	800ba60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b9be:	893b      	ldrh	r3, [r7, #8]
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ca:	6a39      	ldr	r1, [r7, #32]
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f000 f967 	bl	800bca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00d      	beq.n	800b9f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9dc:	2b04      	cmp	r3, #4
 800b9de:	d107      	bne.n	800b9f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e035      	b.n	800ba60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	6a3b      	ldr	r3, [r7, #32]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 f82b 	bl	800ba6c <I2C_WaitOnFlagUntilTimeout>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00d      	beq.n	800ba38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba2a:	d103      	bne.n	800ba34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ba34:	2303      	movs	r3, #3
 800ba36:	e013      	b.n	800ba60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ba38:	897b      	ldrh	r3, [r7, #10]
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	f043 0301 	orr.w	r3, r3, #1
 800ba40:	b2da      	uxtb	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	6a3a      	ldr	r2, [r7, #32]
 800ba4c:	4906      	ldr	r1, [pc, #24]	; (800ba68 <I2C_RequestMemoryRead+0x1cc>)
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f000 f886 	bl	800bb60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e000      	b.n	800ba60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	00010002 	.word	0x00010002

0800ba6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	603b      	str	r3, [r7, #0]
 800ba78:	4613      	mov	r3, r2
 800ba7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba7c:	e048      	b.n	800bb10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba84:	d044      	beq.n	800bb10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba86:	f7fc fd9d 	bl	80085c4 <HAL_GetTick>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d302      	bcc.n	800ba9c <I2C_WaitOnFlagUntilTimeout+0x30>
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d139      	bne.n	800bb10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	0c1b      	lsrs	r3, r3, #16
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d10d      	bne.n	800bac2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	695b      	ldr	r3, [r3, #20]
 800baac:	43da      	mvns	r2, r3
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	4013      	ands	r3, r2
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	bf0c      	ite	eq
 800bab8:	2301      	moveq	r3, #1
 800baba:	2300      	movne	r3, #0
 800babc:	b2db      	uxtb	r3, r3
 800babe:	461a      	mov	r2, r3
 800bac0:	e00c      	b.n	800badc <I2C_WaitOnFlagUntilTimeout+0x70>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	43da      	mvns	r2, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	4013      	ands	r3, r2
 800bace:	b29b      	uxth	r3, r3
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	bf0c      	ite	eq
 800bad4:	2301      	moveq	r3, #1
 800bad6:	2300      	movne	r3, #0
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	461a      	mov	r2, r3
 800badc:	79fb      	ldrb	r3, [r7, #7]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d116      	bne.n	800bb10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2200      	movs	r2, #0
 800bae6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2220      	movs	r2, #32
 800baec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafc:	f043 0220 	orr.w	r2, r3, #32
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e023      	b.n	800bb58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	0c1b      	lsrs	r3, r3, #16
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d10d      	bne.n	800bb36 <I2C_WaitOnFlagUntilTimeout+0xca>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	695b      	ldr	r3, [r3, #20]
 800bb20:	43da      	mvns	r2, r3
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	4013      	ands	r3, r2
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bf0c      	ite	eq
 800bb2c:	2301      	moveq	r3, #1
 800bb2e:	2300      	movne	r3, #0
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	461a      	mov	r2, r3
 800bb34:	e00c      	b.n	800bb50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	699b      	ldr	r3, [r3, #24]
 800bb3c:	43da      	mvns	r2, r3
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	4013      	ands	r3, r2
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	bf0c      	ite	eq
 800bb48:	2301      	moveq	r3, #1
 800bb4a:	2300      	movne	r3, #0
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	461a      	mov	r2, r3
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d093      	beq.n	800ba7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb6e:	e071      	b.n	800bc54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb7e:	d123      	bne.n	800bbc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2220      	movs	r2, #32
 800bba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb4:	f043 0204 	orr.w	r2, r3, #4
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e067      	b.n	800bc98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbce:	d041      	beq.n	800bc54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbd0:	f7fc fcf8 	bl	80085c4 <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d302      	bcc.n	800bbe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d136      	bne.n	800bc54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	0c1b      	lsrs	r3, r3, #16
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d10c      	bne.n	800bc0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	43da      	mvns	r2, r3
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	bf14      	ite	ne
 800bc02:	2301      	movne	r3, #1
 800bc04:	2300      	moveq	r3, #0
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	e00b      	b.n	800bc22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	43da      	mvns	r2, r3
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	4013      	ands	r3, r2
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bf14      	ite	ne
 800bc1c:	2301      	movne	r3, #1
 800bc1e:	2300      	moveq	r3, #0
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d016      	beq.n	800bc54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2220      	movs	r2, #32
 800bc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc40:	f043 0220 	orr.w	r2, r3, #32
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	e021      	b.n	800bc98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	0c1b      	lsrs	r3, r3, #16
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d10c      	bne.n	800bc78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	43da      	mvns	r2, r3
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	4013      	ands	r3, r2
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	bf14      	ite	ne
 800bc70:	2301      	movne	r3, #1
 800bc72:	2300      	moveq	r3, #0
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	e00b      	b.n	800bc90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	699b      	ldr	r3, [r3, #24]
 800bc7e:	43da      	mvns	r2, r3
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	4013      	ands	r3, r2
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	bf14      	ite	ne
 800bc8a:	2301      	movne	r3, #1
 800bc8c:	2300      	moveq	r3, #0
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f47f af6d 	bne.w	800bb70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bcac:	e034      	b.n	800bd18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f000 f8e3 	bl	800be7a <I2C_IsAcknowledgeFailed>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e034      	b.n	800bd28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc4:	d028      	beq.n	800bd18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcc6:	f7fc fc7d 	bl	80085c4 <HAL_GetTick>
 800bcca:	4602      	mov	r2, r0
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d302      	bcc.n	800bcdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d11d      	bne.n	800bd18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce6:	2b80      	cmp	r3, #128	; 0x80
 800bce8:	d016      	beq.n	800bd18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2220      	movs	r2, #32
 800bcf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd04:	f043 0220 	orr.w	r2, r3, #32
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	e007      	b.n	800bd28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd22:	2b80      	cmp	r3, #128	; 0x80
 800bd24:	d1c3      	bne.n	800bcae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bd3c:	e034      	b.n	800bda8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f000 f89b 	bl	800be7a <I2C_IsAcknowledgeFailed>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d001      	beq.n	800bd4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e034      	b.n	800bdb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd54:	d028      	beq.n	800bda8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd56:	f7fc fc35 	bl	80085c4 <HAL_GetTick>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d302      	bcc.n	800bd6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d11d      	bne.n	800bda8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	695b      	ldr	r3, [r3, #20]
 800bd72:	f003 0304 	and.w	r3, r3, #4
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d016      	beq.n	800bda8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2220      	movs	r2, #32
 800bd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd94:	f043 0220 	orr.w	r2, r3, #32
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	e007      	b.n	800bdb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	f003 0304 	and.w	r3, r3, #4
 800bdb2:	2b04      	cmp	r3, #4
 800bdb4:	d1c3      	bne.n	800bd3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bdcc:	e049      	b.n	800be62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	695b      	ldr	r3, [r3, #20]
 800bdd4:	f003 0310 	and.w	r3, r3, #16
 800bdd8:	2b10      	cmp	r3, #16
 800bdda:	d119      	bne.n	800be10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f06f 0210 	mvn.w	r2, #16
 800bde4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2220      	movs	r2, #32
 800bdf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	e030      	b.n	800be72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be10:	f7fc fbd8 	bl	80085c4 <HAL_GetTick>
 800be14:	4602      	mov	r2, r0
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d302      	bcc.n	800be26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d11d      	bne.n	800be62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	695b      	ldr	r3, [r3, #20]
 800be2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be30:	2b40      	cmp	r3, #64	; 0x40
 800be32:	d016      	beq.n	800be62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2220      	movs	r2, #32
 800be3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2200      	movs	r2, #0
 800be46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4e:	f043 0220 	orr.w	r2, r3, #32
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2200      	movs	r2, #0
 800be5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e007      	b.n	800be72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	695b      	ldr	r3, [r3, #20]
 800be68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be6c:	2b40      	cmp	r3, #64	; 0x40
 800be6e:	d1ae      	bne.n	800bdce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800be7a:	b480      	push	{r7}
 800be7c:	b083      	sub	sp, #12
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be90:	d11b      	bne.n	800beca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800be9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2220      	movs	r2, #32
 800bea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb6:	f043 0204 	orr.w	r2, r3, #4
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e000      	b.n	800becc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bc80      	pop	{r7}
 800bed4:	4770      	bx	lr
	...

0800bed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b086      	sub	sp, #24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	e272      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 0301 	and.w	r3, r3, #1
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 8087 	beq.w	800c006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bef8:	4b92      	ldr	r3, [pc, #584]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	f003 030c 	and.w	r3, r3, #12
 800bf00:	2b04      	cmp	r3, #4
 800bf02:	d00c      	beq.n	800bf1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bf04:	4b8f      	ldr	r3, [pc, #572]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	f003 030c 	and.w	r3, r3, #12
 800bf0c:	2b08      	cmp	r3, #8
 800bf0e:	d112      	bne.n	800bf36 <HAL_RCC_OscConfig+0x5e>
 800bf10:	4b8c      	ldr	r3, [pc, #560]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf1c:	d10b      	bne.n	800bf36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf1e:	4b89      	ldr	r3, [pc, #548]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d06c      	beq.n	800c004 <HAL_RCC_OscConfig+0x12c>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d168      	bne.n	800c004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	e24c      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf3e:	d106      	bne.n	800bf4e <HAL_RCC_OscConfig+0x76>
 800bf40:	4b80      	ldr	r3, [pc, #512]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a7f      	ldr	r2, [pc, #508]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf4a:	6013      	str	r3, [r2, #0]
 800bf4c:	e02e      	b.n	800bfac <HAL_RCC_OscConfig+0xd4>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10c      	bne.n	800bf70 <HAL_RCC_OscConfig+0x98>
 800bf56:	4b7b      	ldr	r3, [pc, #492]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a7a      	ldr	r2, [pc, #488]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf60:	6013      	str	r3, [r2, #0]
 800bf62:	4b78      	ldr	r3, [pc, #480]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a77      	ldr	r2, [pc, #476]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf6c:	6013      	str	r3, [r2, #0]
 800bf6e:	e01d      	b.n	800bfac <HAL_RCC_OscConfig+0xd4>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf78:	d10c      	bne.n	800bf94 <HAL_RCC_OscConfig+0xbc>
 800bf7a:	4b72      	ldr	r3, [pc, #456]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a71      	ldr	r2, [pc, #452]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	4b6f      	ldr	r3, [pc, #444]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a6e      	ldr	r2, [pc, #440]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf90:	6013      	str	r3, [r2, #0]
 800bf92:	e00b      	b.n	800bfac <HAL_RCC_OscConfig+0xd4>
 800bf94:	4b6b      	ldr	r3, [pc, #428]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a6a      	ldr	r2, [pc, #424]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bf9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf9e:	6013      	str	r3, [r2, #0]
 800bfa0:	4b68      	ldr	r3, [pc, #416]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a67      	ldr	r2, [pc, #412]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bfa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bfaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d013      	beq.n	800bfdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfb4:	f7fc fb06 	bl	80085c4 <HAL_GetTick>
 800bfb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfba:	e008      	b.n	800bfce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfbc:	f7fc fb02 	bl	80085c4 <HAL_GetTick>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	2b64      	cmp	r3, #100	; 0x64
 800bfc8:	d901      	bls.n	800bfce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	e200      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfce:	4b5d      	ldr	r3, [pc, #372]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d0f0      	beq.n	800bfbc <HAL_RCC_OscConfig+0xe4>
 800bfda:	e014      	b.n	800c006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfdc:	f7fc faf2 	bl	80085c4 <HAL_GetTick>
 800bfe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bfe2:	e008      	b.n	800bff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfe4:	f7fc faee 	bl	80085c4 <HAL_GetTick>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	2b64      	cmp	r3, #100	; 0x64
 800bff0:	d901      	bls.n	800bff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800bff2:	2303      	movs	r3, #3
 800bff4:	e1ec      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bff6:	4b53      	ldr	r3, [pc, #332]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1f0      	bne.n	800bfe4 <HAL_RCC_OscConfig+0x10c>
 800c002:	e000      	b.n	800c006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f003 0302 	and.w	r3, r3, #2
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d063      	beq.n	800c0da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c012:	4b4c      	ldr	r3, [pc, #304]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f003 030c 	and.w	r3, r3, #12
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00b      	beq.n	800c036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800c01e:	4b49      	ldr	r3, [pc, #292]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	f003 030c 	and.w	r3, r3, #12
 800c026:	2b08      	cmp	r3, #8
 800c028:	d11c      	bne.n	800c064 <HAL_RCC_OscConfig+0x18c>
 800c02a:	4b46      	ldr	r3, [pc, #280]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d116      	bne.n	800c064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c036:	4b43      	ldr	r3, [pc, #268]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 0302 	and.w	r3, r3, #2
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d005      	beq.n	800c04e <HAL_RCC_OscConfig+0x176>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d001      	beq.n	800c04e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	e1c0      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c04e:	4b3d      	ldr	r3, [pc, #244]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	695b      	ldr	r3, [r3, #20]
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	4939      	ldr	r1, [pc, #228]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800c05e:	4313      	orrs	r3, r2
 800c060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c062:	e03a      	b.n	800c0da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d020      	beq.n	800c0ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c06c:	4b36      	ldr	r3, [pc, #216]	; (800c148 <HAL_RCC_OscConfig+0x270>)
 800c06e:	2201      	movs	r2, #1
 800c070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c072:	f7fc faa7 	bl	80085c4 <HAL_GetTick>
 800c076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c078:	e008      	b.n	800c08c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c07a:	f7fc faa3 	bl	80085c4 <HAL_GetTick>
 800c07e:	4602      	mov	r2, r0
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	2b02      	cmp	r3, #2
 800c086:	d901      	bls.n	800c08c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800c088:	2303      	movs	r3, #3
 800c08a:	e1a1      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c08c:	4b2d      	ldr	r3, [pc, #180]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 0302 	and.w	r3, r3, #2
 800c094:	2b00      	cmp	r3, #0
 800c096:	d0f0      	beq.n	800c07a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c098:	4b2a      	ldr	r3, [pc, #168]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	695b      	ldr	r3, [r3, #20]
 800c0a4:	00db      	lsls	r3, r3, #3
 800c0a6:	4927      	ldr	r1, [pc, #156]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	600b      	str	r3, [r1, #0]
 800c0ac:	e015      	b.n	800c0da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c0ae:	4b26      	ldr	r3, [pc, #152]	; (800c148 <HAL_RCC_OscConfig+0x270>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c0b4:	f7fc fa86 	bl	80085c4 <HAL_GetTick>
 800c0b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0ba:	e008      	b.n	800c0ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c0bc:	f7fc fa82 	bl	80085c4 <HAL_GetTick>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	1ad3      	subs	r3, r2, r3
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d901      	bls.n	800c0ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	e180      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0ce:	4b1d      	ldr	r3, [pc, #116]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 0302 	and.w	r3, r3, #2
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1f0      	bne.n	800c0bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0308 	and.w	r3, r3, #8
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d03a      	beq.n	800c15c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d019      	beq.n	800c122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c0ee:	4b17      	ldr	r3, [pc, #92]	; (800c14c <HAL_RCC_OscConfig+0x274>)
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0f4:	f7fc fa66 	bl	80085c4 <HAL_GetTick>
 800c0f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c0fa:	e008      	b.n	800c10e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0fc:	f7fc fa62 	bl	80085c4 <HAL_GetTick>
 800c100:	4602      	mov	r2, r0
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	2b02      	cmp	r3, #2
 800c108:	d901      	bls.n	800c10e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800c10a:	2303      	movs	r3, #3
 800c10c:	e160      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c10e:	4b0d      	ldr	r3, [pc, #52]	; (800c144 <HAL_RCC_OscConfig+0x26c>)
 800c110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c112:	f003 0302 	and.w	r3, r3, #2
 800c116:	2b00      	cmp	r3, #0
 800c118:	d0f0      	beq.n	800c0fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800c11a:	2001      	movs	r0, #1
 800c11c:	f000 face 	bl	800c6bc <RCC_Delay>
 800c120:	e01c      	b.n	800c15c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c122:	4b0a      	ldr	r3, [pc, #40]	; (800c14c <HAL_RCC_OscConfig+0x274>)
 800c124:	2200      	movs	r2, #0
 800c126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c128:	f7fc fa4c 	bl	80085c4 <HAL_GetTick>
 800c12c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c12e:	e00f      	b.n	800c150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c130:	f7fc fa48 	bl	80085c4 <HAL_GetTick>
 800c134:	4602      	mov	r2, r0
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d908      	bls.n	800c150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c13e:	2303      	movs	r3, #3
 800c140:	e146      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
 800c142:	bf00      	nop
 800c144:	40021000 	.word	0x40021000
 800c148:	42420000 	.word	0x42420000
 800c14c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c150:	4b92      	ldr	r3, [pc, #584]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c154:	f003 0302 	and.w	r3, r3, #2
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d1e9      	bne.n	800c130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	f000 80a6 	beq.w	800c2b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c16a:	2300      	movs	r3, #0
 800c16c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c16e:	4b8b      	ldr	r3, [pc, #556]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c170:	69db      	ldr	r3, [r3, #28]
 800c172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10d      	bne.n	800c196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c17a:	4b88      	ldr	r3, [pc, #544]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c17c:	69db      	ldr	r3, [r3, #28]
 800c17e:	4a87      	ldr	r2, [pc, #540]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c184:	61d3      	str	r3, [r2, #28]
 800c186:	4b85      	ldr	r3, [pc, #532]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c188:	69db      	ldr	r3, [r3, #28]
 800c18a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c18e:	60bb      	str	r3, [r7, #8]
 800c190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c192:	2301      	movs	r3, #1
 800c194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c196:	4b82      	ldr	r3, [pc, #520]	; (800c3a0 <HAL_RCC_OscConfig+0x4c8>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d118      	bne.n	800c1d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c1a2:	4b7f      	ldr	r3, [pc, #508]	; (800c3a0 <HAL_RCC_OscConfig+0x4c8>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a7e      	ldr	r2, [pc, #504]	; (800c3a0 <HAL_RCC_OscConfig+0x4c8>)
 800c1a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c1ae:	f7fc fa09 	bl	80085c4 <HAL_GetTick>
 800c1b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1b4:	e008      	b.n	800c1c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1b6:	f7fc fa05 	bl	80085c4 <HAL_GetTick>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	2b64      	cmp	r3, #100	; 0x64
 800c1c2:	d901      	bls.n	800c1c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e103      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1c8:	4b75      	ldr	r3, [pc, #468]	; (800c3a0 <HAL_RCC_OscConfig+0x4c8>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d0f0      	beq.n	800c1b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d106      	bne.n	800c1ea <HAL_RCC_OscConfig+0x312>
 800c1dc:	4b6f      	ldr	r3, [pc, #444]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c1de:	6a1b      	ldr	r3, [r3, #32]
 800c1e0:	4a6e      	ldr	r2, [pc, #440]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c1e2:	f043 0301 	orr.w	r3, r3, #1
 800c1e6:	6213      	str	r3, [r2, #32]
 800c1e8:	e02d      	b.n	800c246 <HAL_RCC_OscConfig+0x36e>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10c      	bne.n	800c20c <HAL_RCC_OscConfig+0x334>
 800c1f2:	4b6a      	ldr	r3, [pc, #424]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c1f4:	6a1b      	ldr	r3, [r3, #32]
 800c1f6:	4a69      	ldr	r2, [pc, #420]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c1f8:	f023 0301 	bic.w	r3, r3, #1
 800c1fc:	6213      	str	r3, [r2, #32]
 800c1fe:	4b67      	ldr	r3, [pc, #412]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	4a66      	ldr	r2, [pc, #408]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c204:	f023 0304 	bic.w	r3, r3, #4
 800c208:	6213      	str	r3, [r2, #32]
 800c20a:	e01c      	b.n	800c246 <HAL_RCC_OscConfig+0x36e>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	2b05      	cmp	r3, #5
 800c212:	d10c      	bne.n	800c22e <HAL_RCC_OscConfig+0x356>
 800c214:	4b61      	ldr	r3, [pc, #388]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c216:	6a1b      	ldr	r3, [r3, #32]
 800c218:	4a60      	ldr	r2, [pc, #384]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c21a:	f043 0304 	orr.w	r3, r3, #4
 800c21e:	6213      	str	r3, [r2, #32]
 800c220:	4b5e      	ldr	r3, [pc, #376]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c222:	6a1b      	ldr	r3, [r3, #32]
 800c224:	4a5d      	ldr	r2, [pc, #372]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c226:	f043 0301 	orr.w	r3, r3, #1
 800c22a:	6213      	str	r3, [r2, #32]
 800c22c:	e00b      	b.n	800c246 <HAL_RCC_OscConfig+0x36e>
 800c22e:	4b5b      	ldr	r3, [pc, #364]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	4a5a      	ldr	r2, [pc, #360]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c234:	f023 0301 	bic.w	r3, r3, #1
 800c238:	6213      	str	r3, [r2, #32]
 800c23a:	4b58      	ldr	r3, [pc, #352]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	4a57      	ldr	r2, [pc, #348]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c240:	f023 0304 	bic.w	r3, r3, #4
 800c244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d015      	beq.n	800c27a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c24e:	f7fc f9b9 	bl	80085c4 <HAL_GetTick>
 800c252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c254:	e00a      	b.n	800c26c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c256:	f7fc f9b5 	bl	80085c4 <HAL_GetTick>
 800c25a:	4602      	mov	r2, r0
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	f241 3288 	movw	r2, #5000	; 0x1388
 800c264:	4293      	cmp	r3, r2
 800c266:	d901      	bls.n	800c26c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c268:	2303      	movs	r3, #3
 800c26a:	e0b1      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c26c:	4b4b      	ldr	r3, [pc, #300]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c26e:	6a1b      	ldr	r3, [r3, #32]
 800c270:	f003 0302 	and.w	r3, r3, #2
 800c274:	2b00      	cmp	r3, #0
 800c276:	d0ee      	beq.n	800c256 <HAL_RCC_OscConfig+0x37e>
 800c278:	e014      	b.n	800c2a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c27a:	f7fc f9a3 	bl	80085c4 <HAL_GetTick>
 800c27e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c280:	e00a      	b.n	800c298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c282:	f7fc f99f 	bl	80085c4 <HAL_GetTick>
 800c286:	4602      	mov	r2, r0
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c290:	4293      	cmp	r3, r2
 800c292:	d901      	bls.n	800c298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c294:	2303      	movs	r3, #3
 800c296:	e09b      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c298:	4b40      	ldr	r3, [pc, #256]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c29a:	6a1b      	ldr	r3, [r3, #32]
 800c29c:	f003 0302 	and.w	r3, r3, #2
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1ee      	bne.n	800c282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c2a4:	7dfb      	ldrb	r3, [r7, #23]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d105      	bne.n	800c2b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2aa:	4b3c      	ldr	r3, [pc, #240]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c2ac:	69db      	ldr	r3, [r3, #28]
 800c2ae:	4a3b      	ldr	r2, [pc, #236]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c2b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	69db      	ldr	r3, [r3, #28]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f000 8087 	beq.w	800c3ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c2c0:	4b36      	ldr	r3, [pc, #216]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	f003 030c 	and.w	r3, r3, #12
 800c2c8:	2b08      	cmp	r3, #8
 800c2ca:	d061      	beq.n	800c390 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	69db      	ldr	r3, [r3, #28]
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d146      	bne.n	800c362 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2d4:	4b33      	ldr	r3, [pc, #204]	; (800c3a4 <HAL_RCC_OscConfig+0x4cc>)
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2da:	f7fc f973 	bl	80085c4 <HAL_GetTick>
 800c2de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c2e0:	e008      	b.n	800c2f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2e2:	f7fc f96f 	bl	80085c4 <HAL_GetTick>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d901      	bls.n	800c2f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e06d      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c2f4:	4b29      	ldr	r3, [pc, #164]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1f0      	bne.n	800c2e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a1b      	ldr	r3, [r3, #32]
 800c304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c308:	d108      	bne.n	800c31c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c30a:	4b24      	ldr	r3, [pc, #144]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	4921      	ldr	r1, [pc, #132]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c318:	4313      	orrs	r3, r2
 800c31a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c31c:	4b1f      	ldr	r3, [pc, #124]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a19      	ldr	r1, [r3, #32]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32c:	430b      	orrs	r3, r1
 800c32e:	491b      	ldr	r1, [pc, #108]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c330:	4313      	orrs	r3, r2
 800c332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c334:	4b1b      	ldr	r3, [pc, #108]	; (800c3a4 <HAL_RCC_OscConfig+0x4cc>)
 800c336:	2201      	movs	r2, #1
 800c338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c33a:	f7fc f943 	bl	80085c4 <HAL_GetTick>
 800c33e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c340:	e008      	b.n	800c354 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c342:	f7fc f93f 	bl	80085c4 <HAL_GetTick>
 800c346:	4602      	mov	r2, r0
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d901      	bls.n	800c354 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c350:	2303      	movs	r3, #3
 800c352:	e03d      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c354:	4b11      	ldr	r3, [pc, #68]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d0f0      	beq.n	800c342 <HAL_RCC_OscConfig+0x46a>
 800c360:	e035      	b.n	800c3ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c362:	4b10      	ldr	r3, [pc, #64]	; (800c3a4 <HAL_RCC_OscConfig+0x4cc>)
 800c364:	2200      	movs	r2, #0
 800c366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c368:	f7fc f92c 	bl	80085c4 <HAL_GetTick>
 800c36c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c36e:	e008      	b.n	800c382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c370:	f7fc f928 	bl	80085c4 <HAL_GetTick>
 800c374:	4602      	mov	r2, r0
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	1ad3      	subs	r3, r2, r3
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	d901      	bls.n	800c382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c37e:	2303      	movs	r3, #3
 800c380:	e026      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c382:	4b06      	ldr	r3, [pc, #24]	; (800c39c <HAL_RCC_OscConfig+0x4c4>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1f0      	bne.n	800c370 <HAL_RCC_OscConfig+0x498>
 800c38e:	e01e      	b.n	800c3ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	69db      	ldr	r3, [r3, #28]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d107      	bne.n	800c3a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	e019      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
 800c39c:	40021000 	.word	0x40021000
 800c3a0:	40007000 	.word	0x40007000
 800c3a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c3a8:	4b0b      	ldr	r3, [pc, #44]	; (800c3d8 <HAL_RCC_OscConfig+0x500>)
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a1b      	ldr	r3, [r3, #32]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d106      	bne.n	800c3ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d001      	beq.n	800c3ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e000      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3718      	adds	r7, #24
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	40021000 	.word	0x40021000

0800c3dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d101      	bne.n	800c3f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e0d0      	b.n	800c592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c3f0:	4b6a      	ldr	r3, [pc, #424]	; (800c59c <HAL_RCC_ClockConfig+0x1c0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f003 0307 	and.w	r3, r3, #7
 800c3f8:	683a      	ldr	r2, [r7, #0]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d910      	bls.n	800c420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3fe:	4b67      	ldr	r3, [pc, #412]	; (800c59c <HAL_RCC_ClockConfig+0x1c0>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f023 0207 	bic.w	r2, r3, #7
 800c406:	4965      	ldr	r1, [pc, #404]	; (800c59c <HAL_RCC_ClockConfig+0x1c0>)
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c40e:	4b63      	ldr	r3, [pc, #396]	; (800c59c <HAL_RCC_ClockConfig+0x1c0>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 0307 	and.w	r3, r3, #7
 800c416:	683a      	ldr	r2, [r7, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d001      	beq.n	800c420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e0b8      	b.n	800c592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 0302 	and.w	r3, r3, #2
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d020      	beq.n	800c46e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 0304 	and.w	r3, r3, #4
 800c434:	2b00      	cmp	r3, #0
 800c436:	d005      	beq.n	800c444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c438:	4b59      	ldr	r3, [pc, #356]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	4a58      	ldr	r2, [pc, #352]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c43e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 0308 	and.w	r3, r3, #8
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d005      	beq.n	800c45c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c450:	4b53      	ldr	r3, [pc, #332]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	4a52      	ldr	r2, [pc, #328]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800c45a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c45c:	4b50      	ldr	r3, [pc, #320]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	494d      	ldr	r1, [pc, #308]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 0301 	and.w	r3, r3, #1
 800c476:	2b00      	cmp	r3, #0
 800c478:	d040      	beq.n	800c4fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d107      	bne.n	800c492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c482:	4b47      	ldr	r3, [pc, #284]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d115      	bne.n	800c4ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c48e:	2301      	movs	r3, #1
 800c490:	e07f      	b.n	800c592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	2b02      	cmp	r3, #2
 800c498:	d107      	bne.n	800c4aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c49a:	4b41      	ldr	r3, [pc, #260]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d109      	bne.n	800c4ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e073      	b.n	800c592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4aa:	4b3d      	ldr	r3, [pc, #244]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 0302 	and.w	r3, r3, #2
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e06b      	b.n	800c592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c4ba:	4b39      	ldr	r3, [pc, #228]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	f023 0203 	bic.w	r2, r3, #3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	4936      	ldr	r1, [pc, #216]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c4cc:	f7fc f87a 	bl	80085c4 <HAL_GetTick>
 800c4d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4d2:	e00a      	b.n	800c4ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4d4:	f7fc f876 	bl	80085c4 <HAL_GetTick>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d901      	bls.n	800c4ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c4e6:	2303      	movs	r3, #3
 800c4e8:	e053      	b.n	800c592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4ea:	4b2d      	ldr	r3, [pc, #180]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f003 020c 	and.w	r2, r3, #12
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d1eb      	bne.n	800c4d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c4fc:	4b27      	ldr	r3, [pc, #156]	; (800c59c <HAL_RCC_ClockConfig+0x1c0>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0307 	and.w	r3, r3, #7
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	429a      	cmp	r2, r3
 800c508:	d210      	bcs.n	800c52c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c50a:	4b24      	ldr	r3, [pc, #144]	; (800c59c <HAL_RCC_ClockConfig+0x1c0>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f023 0207 	bic.w	r2, r3, #7
 800c512:	4922      	ldr	r1, [pc, #136]	; (800c59c <HAL_RCC_ClockConfig+0x1c0>)
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	4313      	orrs	r3, r2
 800c518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c51a:	4b20      	ldr	r3, [pc, #128]	; (800c59c <HAL_RCC_ClockConfig+0x1c0>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f003 0307 	and.w	r3, r3, #7
 800c522:	683a      	ldr	r2, [r7, #0]
 800c524:	429a      	cmp	r2, r3
 800c526:	d001      	beq.n	800c52c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c528:	2301      	movs	r3, #1
 800c52a:	e032      	b.n	800c592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f003 0304 	and.w	r3, r3, #4
 800c534:	2b00      	cmp	r3, #0
 800c536:	d008      	beq.n	800c54a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c538:	4b19      	ldr	r3, [pc, #100]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	4916      	ldr	r1, [pc, #88]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c546:	4313      	orrs	r3, r2
 800c548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 0308 	and.w	r3, r3, #8
 800c552:	2b00      	cmp	r3, #0
 800c554:	d009      	beq.n	800c56a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c556:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	00db      	lsls	r3, r3, #3
 800c564:	490e      	ldr	r1, [pc, #56]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c566:	4313      	orrs	r3, r2
 800c568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c56a:	f000 f821 	bl	800c5b0 <HAL_RCC_GetSysClockFreq>
 800c56e:	4602      	mov	r2, r0
 800c570:	4b0b      	ldr	r3, [pc, #44]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	091b      	lsrs	r3, r3, #4
 800c576:	f003 030f 	and.w	r3, r3, #15
 800c57a:	490a      	ldr	r1, [pc, #40]	; (800c5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800c57c:	5ccb      	ldrb	r3, [r1, r3]
 800c57e:	fa22 f303 	lsr.w	r3, r2, r3
 800c582:	4a09      	ldr	r2, [pc, #36]	; (800c5a8 <HAL_RCC_ClockConfig+0x1cc>)
 800c584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c586:	4b09      	ldr	r3, [pc, #36]	; (800c5ac <HAL_RCC_ClockConfig+0x1d0>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fb ffd8 	bl	8008540 <HAL_InitTick>

  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	40022000 	.word	0x40022000
 800c5a0:	40021000 	.word	0x40021000
 800c5a4:	08012e8c 	.word	0x08012e8c
 800c5a8:	20000000 	.word	0x20000000
 800c5ac:	20000048 	.word	0x20000048

0800c5b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b087      	sub	sp, #28
 800c5b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	60fb      	str	r3, [r7, #12]
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	60bb      	str	r3, [r7, #8]
 800c5be:	2300      	movs	r3, #0
 800c5c0:	617b      	str	r3, [r7, #20]
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c5ca:	4b1e      	ldr	r3, [pc, #120]	; (800c644 <HAL_RCC_GetSysClockFreq+0x94>)
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f003 030c 	and.w	r3, r3, #12
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	d002      	beq.n	800c5e0 <HAL_RCC_GetSysClockFreq+0x30>
 800c5da:	2b08      	cmp	r3, #8
 800c5dc:	d003      	beq.n	800c5e6 <HAL_RCC_GetSysClockFreq+0x36>
 800c5de:	e027      	b.n	800c630 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c5e0:	4b19      	ldr	r3, [pc, #100]	; (800c648 <HAL_RCC_GetSysClockFreq+0x98>)
 800c5e2:	613b      	str	r3, [r7, #16]
      break;
 800c5e4:	e027      	b.n	800c636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	0c9b      	lsrs	r3, r3, #18
 800c5ea:	f003 030f 	and.w	r3, r3, #15
 800c5ee:	4a17      	ldr	r2, [pc, #92]	; (800c64c <HAL_RCC_GetSysClockFreq+0x9c>)
 800c5f0:	5cd3      	ldrb	r3, [r2, r3]
 800c5f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d010      	beq.n	800c620 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c5fe:	4b11      	ldr	r3, [pc, #68]	; (800c644 <HAL_RCC_GetSysClockFreq+0x94>)
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	0c5b      	lsrs	r3, r3, #17
 800c604:	f003 0301 	and.w	r3, r3, #1
 800c608:	4a11      	ldr	r2, [pc, #68]	; (800c650 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c60a:	5cd3      	ldrb	r3, [r2, r3]
 800c60c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4a0d      	ldr	r2, [pc, #52]	; (800c648 <HAL_RCC_GetSysClockFreq+0x98>)
 800c612:	fb03 f202 	mul.w	r2, r3, r2
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	fbb2 f3f3 	udiv	r3, r2, r3
 800c61c:	617b      	str	r3, [r7, #20]
 800c61e:	e004      	b.n	800c62a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a0c      	ldr	r2, [pc, #48]	; (800c654 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c624:	fb02 f303 	mul.w	r3, r2, r3
 800c628:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	613b      	str	r3, [r7, #16]
      break;
 800c62e:	e002      	b.n	800c636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c630:	4b05      	ldr	r3, [pc, #20]	; (800c648 <HAL_RCC_GetSysClockFreq+0x98>)
 800c632:	613b      	str	r3, [r7, #16]
      break;
 800c634:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c636:	693b      	ldr	r3, [r7, #16]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	371c      	adds	r7, #28
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bc80      	pop	{r7}
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	40021000 	.word	0x40021000
 800c648:	007a1200 	.word	0x007a1200
 800c64c:	08012eb8 	.word	0x08012eb8
 800c650:	08012ec8 	.word	0x08012ec8
 800c654:	003d0900 	.word	0x003d0900

0800c658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c658:	b480      	push	{r7}
 800c65a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c65c:	4b02      	ldr	r3, [pc, #8]	; (800c668 <HAL_RCC_GetHCLKFreq+0x10>)
 800c65e:	681b      	ldr	r3, [r3, #0]
}
 800c660:	4618      	mov	r0, r3
 800c662:	46bd      	mov	sp, r7
 800c664:	bc80      	pop	{r7}
 800c666:	4770      	bx	lr
 800c668:	20000000 	.word	0x20000000

0800c66c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c670:	f7ff fff2 	bl	800c658 <HAL_RCC_GetHCLKFreq>
 800c674:	4602      	mov	r2, r0
 800c676:	4b05      	ldr	r3, [pc, #20]	; (800c68c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	0a1b      	lsrs	r3, r3, #8
 800c67c:	f003 0307 	and.w	r3, r3, #7
 800c680:	4903      	ldr	r1, [pc, #12]	; (800c690 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c682:	5ccb      	ldrb	r3, [r1, r3]
 800c684:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c688:	4618      	mov	r0, r3
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	40021000 	.word	0x40021000
 800c690:	08012e9c 	.word	0x08012e9c

0800c694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c698:	f7ff ffde 	bl	800c658 <HAL_RCC_GetHCLKFreq>
 800c69c:	4602      	mov	r2, r0
 800c69e:	4b05      	ldr	r3, [pc, #20]	; (800c6b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	0adb      	lsrs	r3, r3, #11
 800c6a4:	f003 0307 	and.w	r3, r3, #7
 800c6a8:	4903      	ldr	r1, [pc, #12]	; (800c6b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c6aa:	5ccb      	ldrb	r3, [r1, r3]
 800c6ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	40021000 	.word	0x40021000
 800c6b8:	08012e9c 	.word	0x08012e9c

0800c6bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c6c4:	4b0a      	ldr	r3, [pc, #40]	; (800c6f0 <RCC_Delay+0x34>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a0a      	ldr	r2, [pc, #40]	; (800c6f4 <RCC_Delay+0x38>)
 800c6ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ce:	0a5b      	lsrs	r3, r3, #9
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	fb02 f303 	mul.w	r3, r2, r3
 800c6d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c6d8:	bf00      	nop
  }
  while (Delay --);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	1e5a      	subs	r2, r3, #1
 800c6de:	60fa      	str	r2, [r7, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1f9      	bne.n	800c6d8 <RCC_Delay+0x1c>
}
 800c6e4:	bf00      	nop
 800c6e6:	bf00      	nop
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bc80      	pop	{r7}
 800c6ee:	4770      	bx	lr
 800c6f0:	20000000 	.word	0x20000000
 800c6f4:	10624dd3 	.word	0x10624dd3

0800c6f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	613b      	str	r3, [r7, #16]
 800c704:	2300      	movs	r3, #0
 800c706:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	2b00      	cmp	r3, #0
 800c712:	d07d      	beq.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800c714:	2300      	movs	r3, #0
 800c716:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c718:	4b4f      	ldr	r3, [pc, #316]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c71a:	69db      	ldr	r3, [r3, #28]
 800c71c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10d      	bne.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c724:	4b4c      	ldr	r3, [pc, #304]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c726:	69db      	ldr	r3, [r3, #28]
 800c728:	4a4b      	ldr	r2, [pc, #300]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c72a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c72e:	61d3      	str	r3, [r2, #28]
 800c730:	4b49      	ldr	r3, [pc, #292]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c732:	69db      	ldr	r3, [r3, #28]
 800c734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c738:	60bb      	str	r3, [r7, #8]
 800c73a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c73c:	2301      	movs	r3, #1
 800c73e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c740:	4b46      	ldr	r3, [pc, #280]	; (800c85c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d118      	bne.n	800c77e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c74c:	4b43      	ldr	r3, [pc, #268]	; (800c85c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a42      	ldr	r2, [pc, #264]	; (800c85c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c758:	f7fb ff34 	bl	80085c4 <HAL_GetTick>
 800c75c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c75e:	e008      	b.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c760:	f7fb ff30 	bl	80085c4 <HAL_GetTick>
 800c764:	4602      	mov	r2, r0
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	2b64      	cmp	r3, #100	; 0x64
 800c76c:	d901      	bls.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800c76e:	2303      	movs	r3, #3
 800c770:	e06d      	b.n	800c84e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c772:	4b3a      	ldr	r3, [pc, #232]	; (800c85c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0f0      	beq.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c77e:	4b36      	ldr	r3, [pc, #216]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c786:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d02e      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d027      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c79c:	4b2e      	ldr	r3, [pc, #184]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c79e:	6a1b      	ldr	r3, [r3, #32]
 800c7a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c7a6:	4b2e      	ldr	r3, [pc, #184]	; (800c860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c7ac:	4b2c      	ldr	r3, [pc, #176]	; (800c860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800c7b2:	4a29      	ldr	r2, [pc, #164]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d014      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7c2:	f7fb feff 	bl	80085c4 <HAL_GetTick>
 800c7c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7c8:	e00a      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7ca:	f7fb fefb 	bl	80085c4 <HAL_GetTick>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d901      	bls.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	e036      	b.n	800c84e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7e0:	4b1d      	ldr	r3, [pc, #116]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c7e2:	6a1b      	ldr	r3, [r3, #32]
 800c7e4:	f003 0302 	and.w	r3, r3, #2
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d0ee      	beq.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c7ec:	4b1a      	ldr	r3, [pc, #104]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c7ee:	6a1b      	ldr	r3, [r3, #32]
 800c7f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	4917      	ldr	r1, [pc, #92]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d105      	bne.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c804:	4b14      	ldr	r3, [pc, #80]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c806:	69db      	ldr	r3, [r3, #28]
 800c808:	4a13      	ldr	r2, [pc, #76]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c80a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c80e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 0302 	and.w	r3, r3, #2
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d008      	beq.n	800c82e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c81c:	4b0e      	ldr	r3, [pc, #56]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	490b      	ldr	r1, [pc, #44]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c82a:	4313      	orrs	r3, r2
 800c82c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 0310 	and.w	r3, r3, #16
 800c836:	2b00      	cmp	r3, #0
 800c838:	d008      	beq.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c83a:	4b07      	ldr	r3, [pc, #28]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	4904      	ldr	r1, [pc, #16]	; (800c858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c848:	4313      	orrs	r3, r2
 800c84a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3718      	adds	r7, #24
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	40021000 	.word	0x40021000
 800c85c:	40007000 	.word	0x40007000
 800c860:	42420440 	.word	0x42420440

0800c864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d101      	bne.n	800c876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e041      	b.n	800c8fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7f5 fca2 	bl	80021d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2202      	movs	r2, #2
 800c894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	3304      	adds	r3, #4
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	4610      	mov	r0, r2
 800c8a4:	f000 fc5e 	bl	800d164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
	...

0800c904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c904:	b480      	push	{r7}
 800c906:	b085      	sub	sp, #20
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b01      	cmp	r3, #1
 800c916:	d001      	beq.n	800c91c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	e044      	b.n	800c9a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2202      	movs	r2, #2
 800c920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68da      	ldr	r2, [r3, #12]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f042 0201 	orr.w	r2, r2, #1
 800c932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a1d      	ldr	r2, [pc, #116]	; (800c9b0 <HAL_TIM_Base_Start_IT+0xac>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d018      	beq.n	800c970 <HAL_TIM_Base_Start_IT+0x6c>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a1c      	ldr	r2, [pc, #112]	; (800c9b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d013      	beq.n	800c970 <HAL_TIM_Base_Start_IT+0x6c>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c950:	d00e      	beq.n	800c970 <HAL_TIM_Base_Start_IT+0x6c>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a18      	ldr	r2, [pc, #96]	; (800c9b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d009      	beq.n	800c970 <HAL_TIM_Base_Start_IT+0x6c>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a16      	ldr	r2, [pc, #88]	; (800c9bc <HAL_TIM_Base_Start_IT+0xb8>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d004      	beq.n	800c970 <HAL_TIM_Base_Start_IT+0x6c>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a15      	ldr	r2, [pc, #84]	; (800c9c0 <HAL_TIM_Base_Start_IT+0xbc>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d111      	bne.n	800c994 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	f003 0307 	and.w	r3, r3, #7
 800c97a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b06      	cmp	r3, #6
 800c980:	d010      	beq.n	800c9a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f042 0201 	orr.w	r2, r2, #1
 800c990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c992:	e007      	b.n	800c9a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f042 0201 	orr.w	r2, r2, #1
 800c9a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bc80      	pop	{r7}
 800c9ae:	4770      	bx	lr
 800c9b0:	40012c00 	.word	0x40012c00
 800c9b4:	40013400 	.word	0x40013400
 800c9b8:	40000400 	.word	0x40000400
 800c9bc:	40000800 	.word	0x40000800
 800c9c0:	40000c00 	.word	0x40000c00

0800c9c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e041      	b.n	800ca5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d106      	bne.n	800c9f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 f839 	bl	800ca62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2202      	movs	r2, #2
 800c9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	3304      	adds	r3, #4
 800ca00:	4619      	mov	r1, r3
 800ca02:	4610      	mov	r0, r2
 800ca04:	f000 fbae 	bl	800d164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2201      	movs	r2, #1
 800ca24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2201      	movs	r2, #1
 800ca34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2201      	movs	r2, #1
 800ca44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ca6a:	bf00      	nop
 800ca6c:	370c      	adds	r7, #12
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bc80      	pop	{r7}
 800ca72:	4770      	bx	lr

0800ca74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d109      	bne.n	800ca98 <HAL_TIM_PWM_Start+0x24>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	bf14      	ite	ne
 800ca90:	2301      	movne	r3, #1
 800ca92:	2300      	moveq	r3, #0
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	e022      	b.n	800cade <HAL_TIM_PWM_Start+0x6a>
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	2b04      	cmp	r3, #4
 800ca9c:	d109      	bne.n	800cab2 <HAL_TIM_PWM_Start+0x3e>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	bf14      	ite	ne
 800caaa:	2301      	movne	r3, #1
 800caac:	2300      	moveq	r3, #0
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	e015      	b.n	800cade <HAL_TIM_PWM_Start+0x6a>
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	2b08      	cmp	r3, #8
 800cab6:	d109      	bne.n	800cacc <HAL_TIM_PWM_Start+0x58>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	bf14      	ite	ne
 800cac4:	2301      	movne	r3, #1
 800cac6:	2300      	moveq	r3, #0
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	e008      	b.n	800cade <HAL_TIM_PWM_Start+0x6a>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	bf14      	ite	ne
 800cad8:	2301      	movne	r3, #1
 800cada:	2300      	moveq	r3, #0
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d001      	beq.n	800cae6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e072      	b.n	800cbcc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d104      	bne.n	800caf6 <HAL_TIM_PWM_Start+0x82>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2202      	movs	r2, #2
 800caf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800caf4:	e013      	b.n	800cb1e <HAL_TIM_PWM_Start+0xaa>
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2b04      	cmp	r3, #4
 800cafa:	d104      	bne.n	800cb06 <HAL_TIM_PWM_Start+0x92>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2202      	movs	r2, #2
 800cb00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb04:	e00b      	b.n	800cb1e <HAL_TIM_PWM_Start+0xaa>
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	2b08      	cmp	r3, #8
 800cb0a:	d104      	bne.n	800cb16 <HAL_TIM_PWM_Start+0xa2>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2202      	movs	r2, #2
 800cb10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb14:	e003      	b.n	800cb1e <HAL_TIM_PWM_Start+0xaa>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2202      	movs	r2, #2
 800cb1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2201      	movs	r2, #1
 800cb24:	6839      	ldr	r1, [r7, #0]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 fdd8 	bl	800d6dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a28      	ldr	r2, [pc, #160]	; (800cbd4 <HAL_TIM_PWM_Start+0x160>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d004      	beq.n	800cb40 <HAL_TIM_PWM_Start+0xcc>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a27      	ldr	r2, [pc, #156]	; (800cbd8 <HAL_TIM_PWM_Start+0x164>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d101      	bne.n	800cb44 <HAL_TIM_PWM_Start+0xd0>
 800cb40:	2301      	movs	r3, #1
 800cb42:	e000      	b.n	800cb46 <HAL_TIM_PWM_Start+0xd2>
 800cb44:	2300      	movs	r3, #0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d007      	beq.n	800cb5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a1d      	ldr	r2, [pc, #116]	; (800cbd4 <HAL_TIM_PWM_Start+0x160>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d018      	beq.n	800cb96 <HAL_TIM_PWM_Start+0x122>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a1b      	ldr	r2, [pc, #108]	; (800cbd8 <HAL_TIM_PWM_Start+0x164>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d013      	beq.n	800cb96 <HAL_TIM_PWM_Start+0x122>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb76:	d00e      	beq.n	800cb96 <HAL_TIM_PWM_Start+0x122>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a17      	ldr	r2, [pc, #92]	; (800cbdc <HAL_TIM_PWM_Start+0x168>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d009      	beq.n	800cb96 <HAL_TIM_PWM_Start+0x122>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a16      	ldr	r2, [pc, #88]	; (800cbe0 <HAL_TIM_PWM_Start+0x16c>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d004      	beq.n	800cb96 <HAL_TIM_PWM_Start+0x122>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a14      	ldr	r2, [pc, #80]	; (800cbe4 <HAL_TIM_PWM_Start+0x170>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d111      	bne.n	800cbba <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	f003 0307 	and.w	r3, r3, #7
 800cba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2b06      	cmp	r3, #6
 800cba6:	d010      	beq.n	800cbca <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f042 0201 	orr.w	r2, r2, #1
 800cbb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbb8:	e007      	b.n	800cbca <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f042 0201 	orr.w	r2, r2, #1
 800cbc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	40012c00 	.word	0x40012c00
 800cbd8:	40013400 	.word	0x40013400
 800cbdc:	40000400 	.word	0x40000400
 800cbe0:	40000800 	.word	0x40000800
 800cbe4:	40000c00 	.word	0x40000c00

0800cbe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	f003 0302 	and.w	r3, r3, #2
 800cbfa:	2b02      	cmp	r3, #2
 800cbfc:	d122      	bne.n	800cc44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	f003 0302 	and.w	r3, r3, #2
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d11b      	bne.n	800cc44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f06f 0202 	mvn.w	r2, #2
 800cc14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	699b      	ldr	r3, [r3, #24]
 800cc22:	f003 0303 	and.w	r3, r3, #3
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d003      	beq.n	800cc32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fa7f 	bl	800d12e <HAL_TIM_IC_CaptureCallback>
 800cc30:	e005      	b.n	800cc3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 fa72 	bl	800d11c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 fa81 	bl	800d140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	f003 0304 	and.w	r3, r3, #4
 800cc4e:	2b04      	cmp	r3, #4
 800cc50:	d122      	bne.n	800cc98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	f003 0304 	and.w	r3, r3, #4
 800cc5c:	2b04      	cmp	r3, #4
 800cc5e:	d11b      	bne.n	800cc98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f06f 0204 	mvn.w	r2, #4
 800cc68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	699b      	ldr	r3, [r3, #24]
 800cc76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d003      	beq.n	800cc86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fa55 	bl	800d12e <HAL_TIM_IC_CaptureCallback>
 800cc84:	e005      	b.n	800cc92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fa48 	bl	800d11c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fa57 	bl	800d140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	691b      	ldr	r3, [r3, #16]
 800cc9e:	f003 0308 	and.w	r3, r3, #8
 800cca2:	2b08      	cmp	r3, #8
 800cca4:	d122      	bne.n	800ccec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	f003 0308 	and.w	r3, r3, #8
 800ccb0:	2b08      	cmp	r3, #8
 800ccb2:	d11b      	bne.n	800ccec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f06f 0208 	mvn.w	r2, #8
 800ccbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2204      	movs	r2, #4
 800ccc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	f003 0303 	and.w	r3, r3, #3
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d003      	beq.n	800ccda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fa2b 	bl	800d12e <HAL_TIM_IC_CaptureCallback>
 800ccd8:	e005      	b.n	800cce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 fa1e 	bl	800d11c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 fa2d 	bl	800d140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	f003 0310 	and.w	r3, r3, #16
 800ccf6:	2b10      	cmp	r3, #16
 800ccf8:	d122      	bne.n	800cd40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	f003 0310 	and.w	r3, r3, #16
 800cd04:	2b10      	cmp	r3, #16
 800cd06:	d11b      	bne.n	800cd40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f06f 0210 	mvn.w	r2, #16
 800cd10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2208      	movs	r2, #8
 800cd16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	69db      	ldr	r3, [r3, #28]
 800cd1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d003      	beq.n	800cd2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fa01 	bl	800d12e <HAL_TIM_IC_CaptureCallback>
 800cd2c:	e005      	b.n	800cd3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 f9f4 	bl	800d11c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 fa03 	bl	800d140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	f003 0301 	and.w	r3, r3, #1
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d10e      	bne.n	800cd6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	f003 0301 	and.w	r3, r3, #1
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d107      	bne.n	800cd6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f06f 0201 	mvn.w	r2, #1
 800cd64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f9cf 	bl	800d10a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd76:	2b80      	cmp	r3, #128	; 0x80
 800cd78:	d10e      	bne.n	800cd98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd84:	2b80      	cmp	r3, #128	; 0x80
 800cd86:	d107      	bne.n	800cd98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cd90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fd3b 	bl	800d80e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	691b      	ldr	r3, [r3, #16]
 800cd9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda2:	2b40      	cmp	r3, #64	; 0x40
 800cda4:	d10e      	bne.n	800cdc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb0:	2b40      	cmp	r3, #64	; 0x40
 800cdb2:	d107      	bne.n	800cdc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cdbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 f9c7 	bl	800d152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	f003 0320 	and.w	r3, r3, #32
 800cdce:	2b20      	cmp	r3, #32
 800cdd0:	d10e      	bne.n	800cdf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	f003 0320 	and.w	r3, r3, #32
 800cddc:	2b20      	cmp	r3, #32
 800cdde:	d107      	bne.n	800cdf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f06f 0220 	mvn.w	r2, #32
 800cde8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fd06 	bl	800d7fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cdf0:	bf00      	nop
 800cdf2:	3708      	adds	r7, #8
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b086      	sub	sp, #24
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d101      	bne.n	800ce16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ce12:	2302      	movs	r3, #2
 800ce14:	e0ae      	b.n	800cf74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2b0c      	cmp	r3, #12
 800ce22:	f200 809f 	bhi.w	800cf64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ce26:	a201      	add	r2, pc, #4	; (adr r2, 800ce2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ce28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2c:	0800ce61 	.word	0x0800ce61
 800ce30:	0800cf65 	.word	0x0800cf65
 800ce34:	0800cf65 	.word	0x0800cf65
 800ce38:	0800cf65 	.word	0x0800cf65
 800ce3c:	0800cea1 	.word	0x0800cea1
 800ce40:	0800cf65 	.word	0x0800cf65
 800ce44:	0800cf65 	.word	0x0800cf65
 800ce48:	0800cf65 	.word	0x0800cf65
 800ce4c:	0800cee3 	.word	0x0800cee3
 800ce50:	0800cf65 	.word	0x0800cf65
 800ce54:	0800cf65 	.word	0x0800cf65
 800ce58:	0800cf65 	.word	0x0800cf65
 800ce5c:	0800cf23 	.word	0x0800cf23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	68b9      	ldr	r1, [r7, #8]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f000 f9f6 	bl	800d258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	699a      	ldr	r2, [r3, #24]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f042 0208 	orr.w	r2, r2, #8
 800ce7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	699a      	ldr	r2, [r3, #24]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f022 0204 	bic.w	r2, r2, #4
 800ce8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	6999      	ldr	r1, [r3, #24]
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	691a      	ldr	r2, [r3, #16]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	430a      	orrs	r2, r1
 800ce9c:	619a      	str	r2, [r3, #24]
      break;
 800ce9e:	e064      	b.n	800cf6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	68b9      	ldr	r1, [r7, #8]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 fa46 	bl	800d338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	699a      	ldr	r2, [r3, #24]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ceba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	699a      	ldr	r2, [r3, #24]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ceca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	6999      	ldr	r1, [r3, #24]
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	021a      	lsls	r2, r3, #8
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	430a      	orrs	r2, r1
 800cede:	619a      	str	r2, [r3, #24]
      break;
 800cee0:	e043      	b.n	800cf6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68b9      	ldr	r1, [r7, #8]
 800cee8:	4618      	mov	r0, r3
 800ceea:	f000 fa99 	bl	800d420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	69da      	ldr	r2, [r3, #28]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f042 0208 	orr.w	r2, r2, #8
 800cefc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	69da      	ldr	r2, [r3, #28]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f022 0204 	bic.w	r2, r2, #4
 800cf0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	69d9      	ldr	r1, [r3, #28]
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	691a      	ldr	r2, [r3, #16]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	430a      	orrs	r2, r1
 800cf1e:	61da      	str	r2, [r3, #28]
      break;
 800cf20:	e023      	b.n	800cf6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	68b9      	ldr	r1, [r7, #8]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 faed 	bl	800d508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	69da      	ldr	r2, [r3, #28]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	69da      	ldr	r2, [r3, #28]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	69d9      	ldr	r1, [r3, #28]
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	021a      	lsls	r2, r3, #8
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	430a      	orrs	r2, r1
 800cf60:	61da      	str	r2, [r3, #28]
      break;
 800cf62:	e002      	b.n	800cf6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	75fb      	strb	r3, [r7, #23]
      break;
 800cf68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cf72:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3718      	adds	r7, #24
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d101      	bne.n	800cf98 <HAL_TIM_ConfigClockSource+0x1c>
 800cf94:	2302      	movs	r3, #2
 800cf96:	e0b4      	b.n	800d102 <HAL_TIM_ConfigClockSource+0x186>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2202      	movs	r2, #2
 800cfa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cfb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cfbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfd0:	d03e      	beq.n	800d050 <HAL_TIM_ConfigClockSource+0xd4>
 800cfd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfd6:	f200 8087 	bhi.w	800d0e8 <HAL_TIM_ConfigClockSource+0x16c>
 800cfda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfde:	f000 8086 	beq.w	800d0ee <HAL_TIM_ConfigClockSource+0x172>
 800cfe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfe6:	d87f      	bhi.n	800d0e8 <HAL_TIM_ConfigClockSource+0x16c>
 800cfe8:	2b70      	cmp	r3, #112	; 0x70
 800cfea:	d01a      	beq.n	800d022 <HAL_TIM_ConfigClockSource+0xa6>
 800cfec:	2b70      	cmp	r3, #112	; 0x70
 800cfee:	d87b      	bhi.n	800d0e8 <HAL_TIM_ConfigClockSource+0x16c>
 800cff0:	2b60      	cmp	r3, #96	; 0x60
 800cff2:	d050      	beq.n	800d096 <HAL_TIM_ConfigClockSource+0x11a>
 800cff4:	2b60      	cmp	r3, #96	; 0x60
 800cff6:	d877      	bhi.n	800d0e8 <HAL_TIM_ConfigClockSource+0x16c>
 800cff8:	2b50      	cmp	r3, #80	; 0x50
 800cffa:	d03c      	beq.n	800d076 <HAL_TIM_ConfigClockSource+0xfa>
 800cffc:	2b50      	cmp	r3, #80	; 0x50
 800cffe:	d873      	bhi.n	800d0e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d000:	2b40      	cmp	r3, #64	; 0x40
 800d002:	d058      	beq.n	800d0b6 <HAL_TIM_ConfigClockSource+0x13a>
 800d004:	2b40      	cmp	r3, #64	; 0x40
 800d006:	d86f      	bhi.n	800d0e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d008:	2b30      	cmp	r3, #48	; 0x30
 800d00a:	d064      	beq.n	800d0d6 <HAL_TIM_ConfigClockSource+0x15a>
 800d00c:	2b30      	cmp	r3, #48	; 0x30
 800d00e:	d86b      	bhi.n	800d0e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d010:	2b20      	cmp	r3, #32
 800d012:	d060      	beq.n	800d0d6 <HAL_TIM_ConfigClockSource+0x15a>
 800d014:	2b20      	cmp	r3, #32
 800d016:	d867      	bhi.n	800d0e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d05c      	beq.n	800d0d6 <HAL_TIM_ConfigClockSource+0x15a>
 800d01c:	2b10      	cmp	r3, #16
 800d01e:	d05a      	beq.n	800d0d6 <HAL_TIM_ConfigClockSource+0x15a>
 800d020:	e062      	b.n	800d0e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6818      	ldr	r0, [r3, #0]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	6899      	ldr	r1, [r3, #8]
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	f000 fb34 	bl	800d69e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	609a      	str	r2, [r3, #8]
      break;
 800d04e:	e04f      	b.n	800d0f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6818      	ldr	r0, [r3, #0]
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	6899      	ldr	r1, [r3, #8]
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	f000 fb1d 	bl	800d69e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	689a      	ldr	r2, [r3, #8]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d072:	609a      	str	r2, [r3, #8]
      break;
 800d074:	e03c      	b.n	800d0f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6818      	ldr	r0, [r3, #0]
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	6859      	ldr	r1, [r3, #4]
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	461a      	mov	r2, r3
 800d084:	f000 fa94 	bl	800d5b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2150      	movs	r1, #80	; 0x50
 800d08e:	4618      	mov	r0, r3
 800d090:	f000 faeb 	bl	800d66a <TIM_ITRx_SetConfig>
      break;
 800d094:	e02c      	b.n	800d0f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6818      	ldr	r0, [r3, #0]
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	6859      	ldr	r1, [r3, #4]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	f000 fab2 	bl	800d60c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2160      	movs	r1, #96	; 0x60
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f000 fadb 	bl	800d66a <TIM_ITRx_SetConfig>
      break;
 800d0b4:	e01c      	b.n	800d0f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6818      	ldr	r0, [r3, #0]
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	6859      	ldr	r1, [r3, #4]
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	f000 fa74 	bl	800d5b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2140      	movs	r1, #64	; 0x40
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 facb 	bl	800d66a <TIM_ITRx_SetConfig>
      break;
 800d0d4:	e00c      	b.n	800d0f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4619      	mov	r1, r3
 800d0e0:	4610      	mov	r0, r2
 800d0e2:	f000 fac2 	bl	800d66a <TIM_ITRx_SetConfig>
      break;
 800d0e6:	e003      	b.n	800d0f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	73fb      	strb	r3, [r7, #15]
      break;
 800d0ec:	e000      	b.n	800d0f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d0ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d100:	7bfb      	ldrb	r3, [r7, #15]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d10a:	b480      	push	{r7}
 800d10c:	b083      	sub	sp, #12
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d112:	bf00      	nop
 800d114:	370c      	adds	r7, #12
 800d116:	46bd      	mov	sp, r7
 800d118:	bc80      	pop	{r7}
 800d11a:	4770      	bx	lr

0800d11c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	bc80      	pop	{r7}
 800d12c:	4770      	bx	lr

0800d12e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d12e:	b480      	push	{r7}
 800d130:	b083      	sub	sp, #12
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d136:	bf00      	nop
 800d138:	370c      	adds	r7, #12
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bc80      	pop	{r7}
 800d13e:	4770      	bx	lr

0800d140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d148:	bf00      	nop
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bc80      	pop	{r7}
 800d150:	4770      	bx	lr

0800d152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d152:	b480      	push	{r7}
 800d154:	b083      	sub	sp, #12
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d15a:	bf00      	nop
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	bc80      	pop	{r7}
 800d162:	4770      	bx	lr

0800d164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a33      	ldr	r2, [pc, #204]	; (800d244 <TIM_Base_SetConfig+0xe0>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d013      	beq.n	800d1a4 <TIM_Base_SetConfig+0x40>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4a32      	ldr	r2, [pc, #200]	; (800d248 <TIM_Base_SetConfig+0xe4>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d00f      	beq.n	800d1a4 <TIM_Base_SetConfig+0x40>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d18a:	d00b      	beq.n	800d1a4 <TIM_Base_SetConfig+0x40>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	4a2f      	ldr	r2, [pc, #188]	; (800d24c <TIM_Base_SetConfig+0xe8>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d007      	beq.n	800d1a4 <TIM_Base_SetConfig+0x40>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	4a2e      	ldr	r2, [pc, #184]	; (800d250 <TIM_Base_SetConfig+0xec>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d003      	beq.n	800d1a4 <TIM_Base_SetConfig+0x40>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4a2d      	ldr	r2, [pc, #180]	; (800d254 <TIM_Base_SetConfig+0xf0>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d108      	bne.n	800d1b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4a22      	ldr	r2, [pc, #136]	; (800d244 <TIM_Base_SetConfig+0xe0>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d013      	beq.n	800d1e6 <TIM_Base_SetConfig+0x82>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	4a21      	ldr	r2, [pc, #132]	; (800d248 <TIM_Base_SetConfig+0xe4>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d00f      	beq.n	800d1e6 <TIM_Base_SetConfig+0x82>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1cc:	d00b      	beq.n	800d1e6 <TIM_Base_SetConfig+0x82>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4a1e      	ldr	r2, [pc, #120]	; (800d24c <TIM_Base_SetConfig+0xe8>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d007      	beq.n	800d1e6 <TIM_Base_SetConfig+0x82>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4a1d      	ldr	r2, [pc, #116]	; (800d250 <TIM_Base_SetConfig+0xec>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d003      	beq.n	800d1e6 <TIM_Base_SetConfig+0x82>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4a1c      	ldr	r2, [pc, #112]	; (800d254 <TIM_Base_SetConfig+0xf0>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d108      	bne.n	800d1f8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	68fa      	ldr	r2, [r7, #12]
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	4313      	orrs	r3, r2
 800d204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	689a      	ldr	r2, [r3, #8]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a09      	ldr	r2, [pc, #36]	; (800d244 <TIM_Base_SetConfig+0xe0>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d003      	beq.n	800d22c <TIM_Base_SetConfig+0xc8>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a08      	ldr	r2, [pc, #32]	; (800d248 <TIM_Base_SetConfig+0xe4>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d103      	bne.n	800d234 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	691a      	ldr	r2, [r3, #16]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2201      	movs	r2, #1
 800d238:	615a      	str	r2, [r3, #20]
}
 800d23a:	bf00      	nop
 800d23c:	3714      	adds	r7, #20
 800d23e:	46bd      	mov	sp, r7
 800d240:	bc80      	pop	{r7}
 800d242:	4770      	bx	lr
 800d244:	40012c00 	.word	0x40012c00
 800d248:	40013400 	.word	0x40013400
 800d24c:	40000400 	.word	0x40000400
 800d250:	40000800 	.word	0x40000800
 800d254:	40000c00 	.word	0x40000c00

0800d258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d258:	b480      	push	{r7}
 800d25a:	b087      	sub	sp, #28
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a1b      	ldr	r3, [r3, #32]
 800d266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6a1b      	ldr	r3, [r3, #32]
 800d26c:	f023 0201 	bic.w	r2, r3, #1
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	699b      	ldr	r3, [r3, #24]
 800d27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f023 0303 	bic.w	r3, r3, #3
 800d28e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	4313      	orrs	r3, r2
 800d298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	f023 0302 	bic.w	r3, r3, #2
 800d2a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	697a      	ldr	r2, [r7, #20]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a20      	ldr	r2, [pc, #128]	; (800d330 <TIM_OC1_SetConfig+0xd8>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d003      	beq.n	800d2bc <TIM_OC1_SetConfig+0x64>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a1f      	ldr	r2, [pc, #124]	; (800d334 <TIM_OC1_SetConfig+0xdc>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d10c      	bne.n	800d2d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	f023 0308 	bic.w	r3, r3, #8
 800d2c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	f023 0304 	bic.w	r3, r3, #4
 800d2d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a15      	ldr	r2, [pc, #84]	; (800d330 <TIM_OC1_SetConfig+0xd8>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d003      	beq.n	800d2e6 <TIM_OC1_SetConfig+0x8e>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a14      	ldr	r2, [pc, #80]	; (800d334 <TIM_OC1_SetConfig+0xdc>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d111      	bne.n	800d30a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d2f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	4313      	orrs	r3, r2
 800d308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	685a      	ldr	r2, [r3, #4]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	621a      	str	r2, [r3, #32]
}
 800d324:	bf00      	nop
 800d326:	371c      	adds	r7, #28
 800d328:	46bd      	mov	sp, r7
 800d32a:	bc80      	pop	{r7}
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	40012c00 	.word	0x40012c00
 800d334:	40013400 	.word	0x40013400

0800d338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d338:	b480      	push	{r7}
 800d33a:	b087      	sub	sp, #28
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6a1b      	ldr	r3, [r3, #32]
 800d34c:	f023 0210 	bic.w	r2, r3, #16
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d36e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	021b      	lsls	r3, r3, #8
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	4313      	orrs	r3, r2
 800d37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	f023 0320 	bic.w	r3, r3, #32
 800d382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	011b      	lsls	r3, r3, #4
 800d38a:	697a      	ldr	r2, [r7, #20]
 800d38c:	4313      	orrs	r3, r2
 800d38e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a21      	ldr	r2, [pc, #132]	; (800d418 <TIM_OC2_SetConfig+0xe0>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d003      	beq.n	800d3a0 <TIM_OC2_SetConfig+0x68>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4a20      	ldr	r2, [pc, #128]	; (800d41c <TIM_OC2_SetConfig+0xe4>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d10d      	bne.n	800d3bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d3a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	011b      	lsls	r3, r3, #4
 800d3ae:	697a      	ldr	r2, [r7, #20]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	4a16      	ldr	r2, [pc, #88]	; (800d418 <TIM_OC2_SetConfig+0xe0>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d003      	beq.n	800d3cc <TIM_OC2_SetConfig+0x94>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4a15      	ldr	r2, [pc, #84]	; (800d41c <TIM_OC2_SetConfig+0xe4>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d113      	bne.n	800d3f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d3d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	695b      	ldr	r3, [r3, #20]
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	699b      	ldr	r3, [r3, #24]
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	693a      	ldr	r2, [r7, #16]
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	685a      	ldr	r2, [r3, #4]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	621a      	str	r2, [r3, #32]
}
 800d40e:	bf00      	nop
 800d410:	371c      	adds	r7, #28
 800d412:	46bd      	mov	sp, r7
 800d414:	bc80      	pop	{r7}
 800d416:	4770      	bx	lr
 800d418:	40012c00 	.word	0x40012c00
 800d41c:	40013400 	.word	0x40013400

0800d420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d420:	b480      	push	{r7}
 800d422:	b087      	sub	sp, #28
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a1b      	ldr	r3, [r3, #32]
 800d42e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a1b      	ldr	r3, [r3, #32]
 800d434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	69db      	ldr	r3, [r3, #28]
 800d446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d44e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f023 0303 	bic.w	r3, r3, #3
 800d456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	4313      	orrs	r3, r2
 800d460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	689b      	ldr	r3, [r3, #8]
 800d46e:	021b      	lsls	r3, r3, #8
 800d470:	697a      	ldr	r2, [r7, #20]
 800d472:	4313      	orrs	r3, r2
 800d474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4a21      	ldr	r2, [pc, #132]	; (800d500 <TIM_OC3_SetConfig+0xe0>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d003      	beq.n	800d486 <TIM_OC3_SetConfig+0x66>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4a20      	ldr	r2, [pc, #128]	; (800d504 <TIM_OC3_SetConfig+0xe4>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d10d      	bne.n	800d4a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d48c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	021b      	lsls	r3, r3, #8
 800d494:	697a      	ldr	r2, [r7, #20]
 800d496:	4313      	orrs	r3, r2
 800d498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d4a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4a16      	ldr	r2, [pc, #88]	; (800d500 <TIM_OC3_SetConfig+0xe0>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d003      	beq.n	800d4b2 <TIM_OC3_SetConfig+0x92>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4a15      	ldr	r2, [pc, #84]	; (800d504 <TIM_OC3_SetConfig+0xe4>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d113      	bne.n	800d4da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	695b      	ldr	r3, [r3, #20]
 800d4c6:	011b      	lsls	r3, r3, #4
 800d4c8:	693a      	ldr	r2, [r7, #16]
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	699b      	ldr	r3, [r3, #24]
 800d4d2:	011b      	lsls	r3, r3, #4
 800d4d4:	693a      	ldr	r2, [r7, #16]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	693a      	ldr	r2, [r7, #16]
 800d4de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	685a      	ldr	r2, [r3, #4]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	697a      	ldr	r2, [r7, #20]
 800d4f2:	621a      	str	r2, [r3, #32]
}
 800d4f4:	bf00      	nop
 800d4f6:	371c      	adds	r7, #28
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bc80      	pop	{r7}
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	40012c00 	.word	0x40012c00
 800d504:	40013400 	.word	0x40013400

0800d508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d508:	b480      	push	{r7}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a1b      	ldr	r3, [r3, #32]
 800d516:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6a1b      	ldr	r3, [r3, #32]
 800d51c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	69db      	ldr	r3, [r3, #28]
 800d52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d53e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	021b      	lsls	r3, r3, #8
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	4313      	orrs	r3, r2
 800d54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	031b      	lsls	r3, r3, #12
 800d55a:	693a      	ldr	r2, [r7, #16]
 800d55c:	4313      	orrs	r3, r2
 800d55e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4a11      	ldr	r2, [pc, #68]	; (800d5a8 <TIM_OC4_SetConfig+0xa0>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d003      	beq.n	800d570 <TIM_OC4_SetConfig+0x68>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4a10      	ldr	r2, [pc, #64]	; (800d5ac <TIM_OC4_SetConfig+0xa4>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d109      	bne.n	800d584 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	695b      	ldr	r3, [r3, #20]
 800d57c:	019b      	lsls	r3, r3, #6
 800d57e:	697a      	ldr	r2, [r7, #20]
 800d580:	4313      	orrs	r3, r2
 800d582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	693a      	ldr	r2, [r7, #16]
 800d59c:	621a      	str	r2, [r3, #32]
}
 800d59e:	bf00      	nop
 800d5a0:	371c      	adds	r7, #28
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bc80      	pop	{r7}
 800d5a6:	4770      	bx	lr
 800d5a8:	40012c00 	.word	0x40012c00
 800d5ac:	40013400 	.word	0x40013400

0800d5b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b087      	sub	sp, #28
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6a1b      	ldr	r3, [r3, #32]
 800d5c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	6a1b      	ldr	r3, [r3, #32]
 800d5c6:	f023 0201 	bic.w	r2, r3, #1
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	699b      	ldr	r3, [r3, #24]
 800d5d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d5da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	011b      	lsls	r3, r3, #4
 800d5e0:	693a      	ldr	r2, [r7, #16]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	f023 030a 	bic.w	r3, r3, #10
 800d5ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d5ee:	697a      	ldr	r2, [r7, #20]
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	693a      	ldr	r2, [r7, #16]
 800d5fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	697a      	ldr	r2, [r7, #20]
 800d600:	621a      	str	r2, [r3, #32]
}
 800d602:	bf00      	nop
 800d604:	371c      	adds	r7, #28
 800d606:	46bd      	mov	sp, r7
 800d608:	bc80      	pop	{r7}
 800d60a:	4770      	bx	lr

0800d60c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b087      	sub	sp, #28
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6a1b      	ldr	r3, [r3, #32]
 800d61c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6a1b      	ldr	r3, [r3, #32]
 800d622:	f023 0210 	bic.w	r2, r3, #16
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	699b      	ldr	r3, [r3, #24]
 800d62e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	031b      	lsls	r3, r3, #12
 800d63c:	693a      	ldr	r2, [r7, #16]
 800d63e:	4313      	orrs	r3, r2
 800d640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d648:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	011b      	lsls	r3, r3, #4
 800d64e:	697a      	ldr	r2, [r7, #20]
 800d650:	4313      	orrs	r3, r2
 800d652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	693a      	ldr	r2, [r7, #16]
 800d658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	621a      	str	r2, [r3, #32]
}
 800d660:	bf00      	nop
 800d662:	371c      	adds	r7, #28
 800d664:	46bd      	mov	sp, r7
 800d666:	bc80      	pop	{r7}
 800d668:	4770      	bx	lr

0800d66a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d66a:	b480      	push	{r7}
 800d66c:	b085      	sub	sp, #20
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
 800d672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d682:	683a      	ldr	r2, [r7, #0]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	4313      	orrs	r3, r2
 800d688:	f043 0307 	orr.w	r3, r3, #7
 800d68c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	68fa      	ldr	r2, [r7, #12]
 800d692:	609a      	str	r2, [r3, #8]
}
 800d694:	bf00      	nop
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	bc80      	pop	{r7}
 800d69c:	4770      	bx	lr

0800d69e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d69e:	b480      	push	{r7}
 800d6a0:	b087      	sub	sp, #28
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	60f8      	str	r0, [r7, #12]
 800d6a6:	60b9      	str	r1, [r7, #8]
 800d6a8:	607a      	str	r2, [r7, #4]
 800d6aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d6b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	021a      	lsls	r2, r3, #8
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	431a      	orrs	r2, r3
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	697a      	ldr	r2, [r7, #20]
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	697a      	ldr	r2, [r7, #20]
 800d6d0:	609a      	str	r2, [r3, #8]
}
 800d6d2:	bf00      	nop
 800d6d4:	371c      	adds	r7, #28
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bc80      	pop	{r7}
 800d6da:	4770      	bx	lr

0800d6dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b087      	sub	sp, #28
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	f003 031f 	and.w	r3, r3, #31
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d6f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6a1a      	ldr	r2, [r3, #32]
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	43db      	mvns	r3, r3
 800d6fe:	401a      	ands	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6a1a      	ldr	r2, [r3, #32]
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	f003 031f 	and.w	r3, r3, #31
 800d70e:	6879      	ldr	r1, [r7, #4]
 800d710:	fa01 f303 	lsl.w	r3, r1, r3
 800d714:	431a      	orrs	r2, r3
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	621a      	str	r2, [r3, #32]
}
 800d71a:	bf00      	nop
 800d71c:	371c      	adds	r7, #28
 800d71e:	46bd      	mov	sp, r7
 800d720:	bc80      	pop	{r7}
 800d722:	4770      	bx	lr

0800d724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d734:	2b01      	cmp	r3, #1
 800d736:	d101      	bne.n	800d73c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d738:	2302      	movs	r3, #2
 800d73a:	e050      	b.n	800d7de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2201      	movs	r2, #1
 800d740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2202      	movs	r2, #2
 800d748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68fa      	ldr	r2, [r7, #12]
 800d76a:	4313      	orrs	r3, r2
 800d76c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a1b      	ldr	r2, [pc, #108]	; (800d7e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d018      	beq.n	800d7b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a19      	ldr	r2, [pc, #100]	; (800d7ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d013      	beq.n	800d7b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d792:	d00e      	beq.n	800d7b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a15      	ldr	r2, [pc, #84]	; (800d7f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d009      	beq.n	800d7b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a14      	ldr	r2, [pc, #80]	; (800d7f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d004      	beq.n	800d7b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a12      	ldr	r2, [pc, #72]	; (800d7f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d10c      	bne.n	800d7cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	68ba      	ldr	r2, [r7, #8]
 800d7ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3714      	adds	r7, #20
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bc80      	pop	{r7}
 800d7e6:	4770      	bx	lr
 800d7e8:	40012c00 	.word	0x40012c00
 800d7ec:	40013400 	.word	0x40013400
 800d7f0:	40000400 	.word	0x40000400
 800d7f4:	40000800 	.word	0x40000800
 800d7f8:	40000c00 	.word	0x40000c00

0800d7fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d804:	bf00      	nop
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	bc80      	pop	{r7}
 800d80c:	4770      	bx	lr

0800d80e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d816:	bf00      	nop
 800d818:	370c      	adds	r7, #12
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bc80      	pop	{r7}
 800d81e:	4770      	bx	lr

0800d820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d101      	bne.n	800d832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	e042      	b.n	800d8b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2200      	movs	r2, #0
 800d842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7f4 fdf2 	bl	8002430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2224      	movs	r2, #36	; 0x24
 800d850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	68da      	ldr	r2, [r3, #12]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 ff7d 	bl	800e764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	691a      	ldr	r2, [r3, #16]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	695a      	ldr	r2, [r3, #20]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	68da      	ldr	r2, [r3, #12]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2220      	movs	r2, #32
 800d8a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2220      	movs	r2, #32
 800d8ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d101      	bne.n	800d8d2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e024      	b.n	800d91c <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2224      	movs	r2, #36	; 0x24
 800d8d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68da      	ldr	r2, [r3, #12]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d8e8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7f4 ff7a 	bl	80027e4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b08a      	sub	sp, #40	; 0x28
 800d928:	af02      	add	r7, sp, #8
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	603b      	str	r3, [r7, #0]
 800d930:	4613      	mov	r3, r2
 800d932:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d934:	2300      	movs	r3, #0
 800d936:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	2b20      	cmp	r3, #32
 800d942:	d16d      	bne.n	800da20 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d002      	beq.n	800d950 <HAL_UART_Transmit+0x2c>
 800d94a:	88fb      	ldrh	r3, [r7, #6]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d950:	2301      	movs	r3, #1
 800d952:	e066      	b.n	800da22 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2200      	movs	r2, #0
 800d958:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2221      	movs	r2, #33	; 0x21
 800d95e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d962:	f7fa fe2f 	bl	80085c4 <HAL_GetTick>
 800d966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	88fa      	ldrh	r2, [r7, #6]
 800d96c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	88fa      	ldrh	r2, [r7, #6]
 800d972:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d97c:	d108      	bne.n	800d990 <HAL_UART_Transmit+0x6c>
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d104      	bne.n	800d990 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d986:	2300      	movs	r3, #0
 800d988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	61bb      	str	r3, [r7, #24]
 800d98e:	e003      	b.n	800d998 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d994:	2300      	movs	r3, #0
 800d996:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d998:	e02a      	b.n	800d9f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2180      	movs	r1, #128	; 0x80
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f000 fc12 	bl	800e1ce <UART_WaitOnFlagUntilTimeout>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d001      	beq.n	800d9b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800d9b0:	2303      	movs	r3, #3
 800d9b2:	e036      	b.n	800da22 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d10b      	bne.n	800d9d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d9c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	3302      	adds	r3, #2
 800d9ce:	61bb      	str	r3, [r7, #24]
 800d9d0:	e007      	b.n	800d9e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	781a      	ldrb	r2, [r3, #0]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d1cf      	bne.n	800d99a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	2200      	movs	r2, #0
 800da02:	2140      	movs	r1, #64	; 0x40
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f000 fbe2 	bl	800e1ce <UART_WaitOnFlagUntilTimeout>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800da10:	2303      	movs	r3, #3
 800da12:	e006      	b.n	800da22 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2220      	movs	r2, #32
 800da18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	e000      	b.n	800da22 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800da20:	2302      	movs	r3, #2
  }
}
 800da22:	4618      	mov	r0, r3
 800da24:	3720      	adds	r7, #32
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b084      	sub	sp, #16
 800da2e:	af00      	add	r7, sp, #0
 800da30:	60f8      	str	r0, [r7, #12]
 800da32:	60b9      	str	r1, [r7, #8]
 800da34:	4613      	mov	r3, r2
 800da36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	2b20      	cmp	r3, #32
 800da42:	d112      	bne.n	800da6a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d002      	beq.n	800da50 <HAL_UART_Receive_DMA+0x26>
 800da4a:	88fb      	ldrh	r3, [r7, #6]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d101      	bne.n	800da54 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800da50:	2301      	movs	r3, #1
 800da52:	e00b      	b.n	800da6c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2200      	movs	r2, #0
 800da58:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800da5a:	88fb      	ldrh	r3, [r7, #6]
 800da5c:	461a      	mov	r2, r3
 800da5e:	68b9      	ldr	r1, [r7, #8]
 800da60:	68f8      	ldr	r0, [r7, #12]
 800da62:	f000 fc23 	bl	800e2ac <UART_Start_Receive_DMA>
 800da66:	4603      	mov	r3, r0
 800da68:	e000      	b.n	800da6c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800da6a:	2302      	movs	r3, #2
  }
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b0ba      	sub	sp, #232	; 0xe8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	68db      	ldr	r3, [r3, #12]
 800da8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800da9a:	2300      	movs	r3, #0
 800da9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800daa0:	2300      	movs	r3, #0
 800daa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800daa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800daaa:	f003 030f 	and.w	r3, r3, #15
 800daae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800dab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d10f      	bne.n	800dada <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800daba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dabe:	f003 0320 	and.w	r3, r3, #32
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d009      	beq.n	800dada <HAL_UART_IRQHandler+0x66>
 800dac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800daca:	f003 0320 	and.w	r3, r3, #32
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d003      	beq.n	800dada <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 fd88 	bl	800e5e8 <UART_Receive_IT>
      return;
 800dad8:	e25b      	b.n	800df92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800dada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f000 80de 	beq.w	800dca0 <HAL_UART_IRQHandler+0x22c>
 800dae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dae8:	f003 0301 	and.w	r3, r3, #1
 800daec:	2b00      	cmp	r3, #0
 800daee:	d106      	bne.n	800dafe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800daf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800daf4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f000 80d1 	beq.w	800dca0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dafe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db02:	f003 0301 	and.w	r3, r3, #1
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00b      	beq.n	800db22 <HAL_UART_IRQHandler+0xae>
 800db0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db12:	2b00      	cmp	r3, #0
 800db14:	d005      	beq.n	800db22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db1a:	f043 0201 	orr.w	r2, r3, #1
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800db22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db26:	f003 0304 	and.w	r3, r3, #4
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d00b      	beq.n	800db46 <HAL_UART_IRQHandler+0xd2>
 800db2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db32:	f003 0301 	and.w	r3, r3, #1
 800db36:	2b00      	cmp	r3, #0
 800db38:	d005      	beq.n	800db46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db3e:	f043 0202 	orr.w	r2, r3, #2
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800db46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db4a:	f003 0302 	and.w	r3, r3, #2
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00b      	beq.n	800db6a <HAL_UART_IRQHandler+0xf6>
 800db52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db56:	f003 0301 	and.w	r3, r3, #1
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d005      	beq.n	800db6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db62:	f043 0204 	orr.w	r2, r3, #4
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800db6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db6e:	f003 0308 	and.w	r3, r3, #8
 800db72:	2b00      	cmp	r3, #0
 800db74:	d011      	beq.n	800db9a <HAL_UART_IRQHandler+0x126>
 800db76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db7a:	f003 0320 	and.w	r3, r3, #32
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d105      	bne.n	800db8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800db82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db86:	f003 0301 	and.w	r3, r3, #1
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d005      	beq.n	800db9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db92:	f043 0208 	orr.w	r2, r3, #8
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f000 81f2 	beq.w	800df88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dba8:	f003 0320 	and.w	r3, r3, #32
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d008      	beq.n	800dbc2 <HAL_UART_IRQHandler+0x14e>
 800dbb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbb4:	f003 0320 	and.w	r3, r3, #32
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 fd13 	bl	800e5e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	695b      	ldr	r3, [r3, #20]
 800dbc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	bf14      	ite	ne
 800dbd0:	2301      	movne	r3, #1
 800dbd2:	2300      	moveq	r3, #0
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbde:	f003 0308 	and.w	r3, r3, #8
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d103      	bne.n	800dbee <HAL_UART_IRQHandler+0x17a>
 800dbe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d04f      	beq.n	800dc8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fc1d 	bl	800e42e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	695b      	ldr	r3, [r3, #20]
 800dbfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d041      	beq.n	800dc86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	3314      	adds	r3, #20
 800dc08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dc10:	e853 3f00 	ldrex	r3, [r3]
 800dc14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dc18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	3314      	adds	r3, #20
 800dc2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dc2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dc32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dc3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dc3e:	e841 2300 	strex	r3, r2, [r1]
 800dc42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dc46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d1d9      	bne.n	800dc02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d013      	beq.n	800dc7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc5a:	4a7e      	ldr	r2, [pc, #504]	; (800de54 <HAL_UART_IRQHandler+0x3e0>)
 800dc5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fc fac4 	bl	800a1f0 <HAL_DMA_Abort_IT>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d016      	beq.n	800dc9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800dc78:	4610      	mov	r0, r2
 800dc7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc7c:	e00e      	b.n	800dc9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f7f5 fa70 	bl	8003164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc84:	e00a      	b.n	800dc9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7f5 fa6c 	bl	8003164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc8c:	e006      	b.n	800dc9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7f5 fa68 	bl	8003164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800dc9a:	e175      	b.n	800df88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc9c:	bf00      	nop
    return;
 800dc9e:	e173      	b.n	800df88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	f040 814f 	bne.w	800df48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800dcaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcae:	f003 0310 	and.w	r3, r3, #16
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f000 8148 	beq.w	800df48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800dcb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcbc:	f003 0310 	and.w	r3, r3, #16
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f000 8141 	beq.w	800df48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60bb      	str	r3, [r7, #8]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	60bb      	str	r3, [r7, #8]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	60bb      	str	r3, [r7, #8]
 800dcda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	695b      	ldr	r3, [r3, #20]
 800dce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	f000 80b6 	beq.w	800de58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dcf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f000 8145 	beq.w	800df8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dd06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	f080 813e 	bcs.w	800df8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	2b20      	cmp	r3, #32
 800dd20:	f000 8088 	beq.w	800de34 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	330c      	adds	r3, #12
 800dd2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd32:	e853 3f00 	ldrex	r3, [r3]
 800dd36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dd3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	330c      	adds	r3, #12
 800dd4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800dd50:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800dd54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dd5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dd60:	e841 2300 	strex	r3, r2, [r1]
 800dd64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dd68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d1d9      	bne.n	800dd24 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	3314      	adds	r3, #20
 800dd76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd7a:	e853 3f00 	ldrex	r3, [r3]
 800dd7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dd80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd82:	f023 0301 	bic.w	r3, r3, #1
 800dd86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	3314      	adds	r3, #20
 800dd90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dd94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dd98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dd9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dda0:	e841 2300 	strex	r3, r2, [r1]
 800dda4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dda6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d1e1      	bne.n	800dd70 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	3314      	adds	r3, #20
 800ddb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddb6:	e853 3f00 	ldrex	r3, [r3]
 800ddba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ddbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	3314      	adds	r3, #20
 800ddcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ddd0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ddd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ddd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ddd8:	e841 2300 	strex	r3, r2, [r1]
 800dddc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ddde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d1e3      	bne.n	800ddac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2220      	movs	r2, #32
 800dde8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	330c      	adds	r3, #12
 800ddf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddfc:	e853 3f00 	ldrex	r3, [r3]
 800de00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de04:	f023 0310 	bic.w	r3, r3, #16
 800de08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	330c      	adds	r3, #12
 800de12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800de16:	65ba      	str	r2, [r7, #88]	; 0x58
 800de18:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de1e:	e841 2300 	strex	r3, r2, [r1]
 800de22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1e3      	bne.n	800ddf2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fc f9a2 	bl	800a178 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2202      	movs	r2, #2
 800de38:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800de42:	b29b      	uxth	r3, r3
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	b29b      	uxth	r3, r3
 800de48:	4619      	mov	r1, r3
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f8b6 	bl	800dfbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800de50:	e09c      	b.n	800df8c <HAL_UART_IRQHandler+0x518>
 800de52:	bf00      	nop
 800de54:	0800e4f3 	.word	0x0800e4f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800de60:	b29b      	uxth	r3, r3
 800de62:	1ad3      	subs	r3, r2, r3
 800de64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f000 808e 	beq.w	800df90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800de74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de78:	2b00      	cmp	r3, #0
 800de7a:	f000 8089 	beq.w	800df90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	330c      	adds	r3, #12
 800de84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de88:	e853 3f00 	ldrex	r3, [r3]
 800de8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800de8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	330c      	adds	r3, #12
 800de9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800dea2:	647a      	str	r2, [r7, #68]	; 0x44
 800dea4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800deaa:	e841 2300 	strex	r3, r2, [r1]
 800deae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800deb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d1e3      	bne.n	800de7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	3314      	adds	r3, #20
 800debc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec0:	e853 3f00 	ldrex	r3, [r3]
 800dec4:	623b      	str	r3, [r7, #32]
   return(result);
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	f023 0301 	bic.w	r3, r3, #1
 800decc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	3314      	adds	r3, #20
 800ded6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800deda:	633a      	str	r2, [r7, #48]	; 0x30
 800dedc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dee2:	e841 2300 	strex	r3, r2, [r1]
 800dee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1e3      	bne.n	800deb6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2220      	movs	r2, #32
 800def2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2200      	movs	r2, #0
 800defa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	330c      	adds	r3, #12
 800df02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	e853 3f00 	ldrex	r3, [r3]
 800df0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f023 0310 	bic.w	r3, r3, #16
 800df12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	330c      	adds	r3, #12
 800df1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800df20:	61fa      	str	r2, [r7, #28]
 800df22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df24:	69b9      	ldr	r1, [r7, #24]
 800df26:	69fa      	ldr	r2, [r7, #28]
 800df28:	e841 2300 	strex	r3, r2, [r1]
 800df2c:	617b      	str	r3, [r7, #20]
   return(result);
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1e3      	bne.n	800defc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2202      	movs	r2, #2
 800df38:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800df3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800df3e:	4619      	mov	r1, r3
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f83b 	bl	800dfbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800df46:	e023      	b.n	800df90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800df48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df50:	2b00      	cmp	r3, #0
 800df52:	d009      	beq.n	800df68 <HAL_UART_IRQHandler+0x4f4>
 800df54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d003      	beq.n	800df68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f000 fada 	bl	800e51a <UART_Transmit_IT>
    return;
 800df66:	e014      	b.n	800df92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800df68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df70:	2b00      	cmp	r3, #0
 800df72:	d00e      	beq.n	800df92 <HAL_UART_IRQHandler+0x51e>
 800df74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d008      	beq.n	800df92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 fb19 	bl	800e5b8 <UART_EndTransmit_IT>
    return;
 800df86:	e004      	b.n	800df92 <HAL_UART_IRQHandler+0x51e>
    return;
 800df88:	bf00      	nop
 800df8a:	e002      	b.n	800df92 <HAL_UART_IRQHandler+0x51e>
      return;
 800df8c:	bf00      	nop
 800df8e:	e000      	b.n	800df92 <HAL_UART_IRQHandler+0x51e>
      return;
 800df90:	bf00      	nop
  }
}
 800df92:	37e8      	adds	r7, #232	; 0xe8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bc80      	pop	{r7}
 800dfa8:	4770      	bx	lr

0800dfaa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dfaa:	b480      	push	{r7}
 800dfac:	b083      	sub	sp, #12
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800dfb2:	bf00      	nop
 800dfb4:	370c      	adds	r7, #12
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bc80      	pop	{r7}
 800dfba:	4770      	bx	lr

0800dfbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dfc8:	bf00      	nop
 800dfca:	370c      	adds	r7, #12
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bc80      	pop	{r7}
 800dfd0:	4770      	bx	lr

0800dfd2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b09c      	sub	sp, #112	; 0x70
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfde:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f003 0320 	and.w	r3, r3, #32
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d172      	bne.n	800e0d4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800dfee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dff0:	2200      	movs	r2, #0
 800dff2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	330c      	adds	r3, #12
 800dffa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dffe:	e853 3f00 	ldrex	r3, [r3]
 800e002:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e00a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e00c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	330c      	adds	r3, #12
 800e012:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e014:	65ba      	str	r2, [r7, #88]	; 0x58
 800e016:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e018:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e01a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e01c:	e841 2300 	strex	r3, r2, [r1]
 800e020:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1e5      	bne.n	800dff4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	3314      	adds	r3, #20
 800e02e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e032:	e853 3f00 	ldrex	r3, [r3]
 800e036:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e03a:	f023 0301 	bic.w	r3, r3, #1
 800e03e:	667b      	str	r3, [r7, #100]	; 0x64
 800e040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	3314      	adds	r3, #20
 800e046:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e048:	647a      	str	r2, [r7, #68]	; 0x44
 800e04a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e04e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e050:	e841 2300 	strex	r3, r2, [r1]
 800e054:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1e5      	bne.n	800e028 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e05c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3314      	adds	r3, #20
 800e062:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e066:	e853 3f00 	ldrex	r3, [r3]
 800e06a:	623b      	str	r3, [r7, #32]
   return(result);
 800e06c:	6a3b      	ldr	r3, [r7, #32]
 800e06e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e072:	663b      	str	r3, [r7, #96]	; 0x60
 800e074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	3314      	adds	r3, #20
 800e07a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e07c:	633a      	str	r2, [r7, #48]	; 0x30
 800e07e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e084:	e841 2300 	strex	r3, r2, [r1]
 800e088:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d1e5      	bne.n	800e05c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e092:	2220      	movs	r2, #32
 800e094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d119      	bne.n	800e0d4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	330c      	adds	r3, #12
 800e0a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	e853 3f00 	ldrex	r3, [r3]
 800e0ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f023 0310 	bic.w	r3, r3, #16
 800e0b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	330c      	adds	r3, #12
 800e0be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0c0:	61fa      	str	r2, [r7, #28]
 800e0c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c4:	69b9      	ldr	r1, [r7, #24]
 800e0c6:	69fa      	ldr	r2, [r7, #28]
 800e0c8:	e841 2300 	strex	r3, r2, [r1]
 800e0cc:	617b      	str	r3, [r7, #20]
   return(result);
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d1e5      	bne.n	800e0a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e0d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d106      	bne.n	800e0f0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e0ea:	f7ff ff67 	bl	800dfbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e0ee:	e002      	b.n	800e0f6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800e0f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e0f2:	f7f5 f840 	bl	8003176 <HAL_UART_RxCpltCallback>
}
 800e0f6:	bf00      	nop
 800e0f8:	3770      	adds	r7, #112	; 0x70
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b084      	sub	sp, #16
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2201      	movs	r2, #1
 800e110:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e116:	2b01      	cmp	r3, #1
 800e118:	d108      	bne.n	800e12c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e11e:	085b      	lsrs	r3, r3, #1
 800e120:	b29b      	uxth	r3, r3
 800e122:	4619      	mov	r1, r3
 800e124:	68f8      	ldr	r0, [r7, #12]
 800e126:	f7ff ff49 	bl	800dfbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e12a:	e002      	b.n	800e132 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f7ff ff3c 	bl	800dfaa <HAL_UART_RxHalfCpltCallback>
}
 800e132:	bf00      	nop
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b084      	sub	sp, #16
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e142:	2300      	movs	r3, #0
 800e144:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e156:	2b00      	cmp	r3, #0
 800e158:	bf14      	ite	ne
 800e15a:	2301      	movne	r3, #1
 800e15c:	2300      	moveq	r3, #0
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	2b21      	cmp	r3, #33	; 0x21
 800e16c:	d108      	bne.n	800e180 <UART_DMAError+0x46>
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d005      	beq.n	800e180 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	2200      	movs	r2, #0
 800e178:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e17a:	68b8      	ldr	r0, [r7, #8]
 800e17c:	f000 f930 	bl	800e3e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	695b      	ldr	r3, [r3, #20]
 800e186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	bf14      	ite	ne
 800e18e:	2301      	movne	r3, #1
 800e190:	2300      	moveq	r3, #0
 800e192:	b2db      	uxtb	r3, r3
 800e194:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	2b22      	cmp	r3, #34	; 0x22
 800e1a0:	d108      	bne.n	800e1b4 <UART_DMAError+0x7a>
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d005      	beq.n	800e1b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e1ae:	68b8      	ldr	r0, [r7, #8]
 800e1b0:	f000 f93d 	bl	800e42e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1b8:	f043 0210 	orr.w	r2, r3, #16
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e1c0:	68b8      	ldr	r0, [r7, #8]
 800e1c2:	f7f4 ffcf 	bl	8003164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1c6:	bf00      	nop
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b090      	sub	sp, #64	; 0x40
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	60f8      	str	r0, [r7, #12]
 800e1d6:	60b9      	str	r1, [r7, #8]
 800e1d8:	603b      	str	r3, [r7, #0]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1de:	e050      	b.n	800e282 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e6:	d04c      	beq.n	800e282 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e1e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d007      	beq.n	800e1fe <UART_WaitOnFlagUntilTimeout+0x30>
 800e1ee:	f7fa f9e9 	bl	80085c4 <HAL_GetTick>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d241      	bcs.n	800e282 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	330c      	adds	r3, #12
 800e204:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e208:	e853 3f00 	ldrex	r3, [r3]
 800e20c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e210:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e214:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	330c      	adds	r3, #12
 800e21c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e21e:	637a      	str	r2, [r7, #52]	; 0x34
 800e220:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e226:	e841 2300 	strex	r3, r2, [r1]
 800e22a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1e5      	bne.n	800e1fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	3314      	adds	r3, #20
 800e238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	e853 3f00 	ldrex	r3, [r3]
 800e240:	613b      	str	r3, [r7, #16]
   return(result);
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	f023 0301 	bic.w	r3, r3, #1
 800e248:	63bb      	str	r3, [r7, #56]	; 0x38
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	3314      	adds	r3, #20
 800e250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e252:	623a      	str	r2, [r7, #32]
 800e254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e256:	69f9      	ldr	r1, [r7, #28]
 800e258:	6a3a      	ldr	r2, [r7, #32]
 800e25a:	e841 2300 	strex	r3, r2, [r1]
 800e25e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1e5      	bne.n	800e232 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2220      	movs	r2, #32
 800e26a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2220      	movs	r2, #32
 800e272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2200      	movs	r2, #0
 800e27a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800e27e:	2303      	movs	r3, #3
 800e280:	e00f      	b.n	800e2a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	4013      	ands	r3, r2
 800e28c:	68ba      	ldr	r2, [r7, #8]
 800e28e:	429a      	cmp	r2, r3
 800e290:	bf0c      	ite	eq
 800e292:	2301      	moveq	r3, #1
 800e294:	2300      	movne	r3, #0
 800e296:	b2db      	uxtb	r3, r3
 800e298:	461a      	mov	r2, r3
 800e29a:	79fb      	ldrb	r3, [r7, #7]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d09f      	beq.n	800e1e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e2a0:	2300      	movs	r3, #0
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3740      	adds	r7, #64	; 0x40
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
	...

0800e2ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b098      	sub	sp, #96	; 0x60
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	60b9      	str	r1, [r7, #8]
 800e2b6:	4613      	mov	r3, r2
 800e2b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e2ba:	68ba      	ldr	r2, [r7, #8]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	88fa      	ldrh	r2, [r7, #6]
 800e2c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2222      	movs	r2, #34	; 0x22
 800e2d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2d8:	4a3e      	ldr	r2, [pc, #248]	; (800e3d4 <UART_Start_Receive_DMA+0x128>)
 800e2da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2e0:	4a3d      	ldr	r2, [pc, #244]	; (800e3d8 <UART_Start_Receive_DMA+0x12c>)
 800e2e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2e8:	4a3c      	ldr	r2, [pc, #240]	; (800e3dc <UART_Start_Receive_DMA+0x130>)
 800e2ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e2f4:	f107 0308 	add.w	r3, r7, #8
 800e2f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	3304      	adds	r3, #4
 800e304:	4619      	mov	r1, r3
 800e306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	88fb      	ldrh	r3, [r7, #6]
 800e30c:	f7fb fed4 	bl	800a0b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e310:	2300      	movs	r3, #0
 800e312:	613b      	str	r3, [r7, #16]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	613b      	str	r3, [r7, #16]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	613b      	str	r3, [r7, #16]
 800e324:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	691b      	ldr	r3, [r3, #16]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d019      	beq.n	800e362 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	330c      	adds	r3, #12
 800e334:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e338:	e853 3f00 	ldrex	r3, [r3]
 800e33c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e344:	65bb      	str	r3, [r7, #88]	; 0x58
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	330c      	adds	r3, #12
 800e34c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e34e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e350:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e352:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e356:	e841 2300 	strex	r3, r2, [r1]
 800e35a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d1e5      	bne.n	800e32e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	3314      	adds	r3, #20
 800e368:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36c:	e853 3f00 	ldrex	r3, [r3]
 800e370:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e374:	f043 0301 	orr.w	r3, r3, #1
 800e378:	657b      	str	r3, [r7, #84]	; 0x54
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3314      	adds	r3, #20
 800e380:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e382:	63ba      	str	r2, [r7, #56]	; 0x38
 800e384:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e386:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e38a:	e841 2300 	strex	r3, r2, [r1]
 800e38e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1e5      	bne.n	800e362 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3314      	adds	r3, #20
 800e39c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	e853 3f00 	ldrex	r3, [r3]
 800e3a4:	617b      	str	r3, [r7, #20]
   return(result);
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3ac:	653b      	str	r3, [r7, #80]	; 0x50
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	3314      	adds	r3, #20
 800e3b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3b6:	627a      	str	r2, [r7, #36]	; 0x24
 800e3b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ba:	6a39      	ldr	r1, [r7, #32]
 800e3bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3be:	e841 2300 	strex	r3, r2, [r1]
 800e3c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3c4:	69fb      	ldr	r3, [r7, #28]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1e5      	bne.n	800e396 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800e3ca:	2300      	movs	r3, #0
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3760      	adds	r7, #96	; 0x60
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	0800dfd3 	.word	0x0800dfd3
 800e3d8:	0800e0ff 	.word	0x0800e0ff
 800e3dc:	0800e13b 	.word	0x0800e13b

0800e3e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b089      	sub	sp, #36	; 0x24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	330c      	adds	r3, #12
 800e3ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	e853 3f00 	ldrex	r3, [r3]
 800e3f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e3fe:	61fb      	str	r3, [r7, #28]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	330c      	adds	r3, #12
 800e406:	69fa      	ldr	r2, [r7, #28]
 800e408:	61ba      	str	r2, [r7, #24]
 800e40a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e40c:	6979      	ldr	r1, [r7, #20]
 800e40e:	69ba      	ldr	r2, [r7, #24]
 800e410:	e841 2300 	strex	r3, r2, [r1]
 800e414:	613b      	str	r3, [r7, #16]
   return(result);
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1e5      	bne.n	800e3e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2220      	movs	r2, #32
 800e420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800e424:	bf00      	nop
 800e426:	3724      	adds	r7, #36	; 0x24
 800e428:	46bd      	mov	sp, r7
 800e42a:	bc80      	pop	{r7}
 800e42c:	4770      	bx	lr

0800e42e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e42e:	b480      	push	{r7}
 800e430:	b095      	sub	sp, #84	; 0x54
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	330c      	adds	r3, #12
 800e43c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e440:	e853 3f00 	ldrex	r3, [r3]
 800e444:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e448:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e44c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	330c      	adds	r3, #12
 800e454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e456:	643a      	str	r2, [r7, #64]	; 0x40
 800e458:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e45c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e45e:	e841 2300 	strex	r3, r2, [r1]
 800e462:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1e5      	bne.n	800e436 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	3314      	adds	r3, #20
 800e470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e472:	6a3b      	ldr	r3, [r7, #32]
 800e474:	e853 3f00 	ldrex	r3, [r3]
 800e478:	61fb      	str	r3, [r7, #28]
   return(result);
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	f023 0301 	bic.w	r3, r3, #1
 800e480:	64bb      	str	r3, [r7, #72]	; 0x48
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	3314      	adds	r3, #20
 800e488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e48a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e48c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e492:	e841 2300 	strex	r3, r2, [r1]
 800e496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1e5      	bne.n	800e46a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d119      	bne.n	800e4da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	330c      	adds	r3, #12
 800e4ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	e853 3f00 	ldrex	r3, [r3]
 800e4b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	f023 0310 	bic.w	r3, r3, #16
 800e4bc:	647b      	str	r3, [r7, #68]	; 0x44
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	330c      	adds	r3, #12
 800e4c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4c6:	61ba      	str	r2, [r7, #24]
 800e4c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ca:	6979      	ldr	r1, [r7, #20]
 800e4cc:	69ba      	ldr	r2, [r7, #24]
 800e4ce:	e841 2300 	strex	r3, r2, [r1]
 800e4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1e5      	bne.n	800e4a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2220      	movs	r2, #32
 800e4de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e4e8:	bf00      	nop
 800e4ea:	3754      	adds	r7, #84	; 0x54
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bc80      	pop	{r7}
 800e4f0:	4770      	bx	lr

0800e4f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b084      	sub	sp, #16
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2200      	movs	r2, #0
 800e504:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2200      	movs	r2, #0
 800e50a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f7f4 fe29 	bl	8003164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e512:	bf00      	nop
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e51a:	b480      	push	{r7}
 800e51c:	b085      	sub	sp, #20
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	2b21      	cmp	r3, #33	; 0x21
 800e52c:	d13e      	bne.n	800e5ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e536:	d114      	bne.n	800e562 <UART_Transmit_IT+0x48>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	691b      	ldr	r3, [r3, #16]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d110      	bne.n	800e562 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6a1b      	ldr	r3, [r3, #32]
 800e544:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	881b      	ldrh	r3, [r3, #0]
 800e54a:	461a      	mov	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e554:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6a1b      	ldr	r3, [r3, #32]
 800e55a:	1c9a      	adds	r2, r3, #2
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	621a      	str	r2, [r3, #32]
 800e560:	e008      	b.n	800e574 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6a1b      	ldr	r3, [r3, #32]
 800e566:	1c59      	adds	r1, r3, #1
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	6211      	str	r1, [r2, #32]
 800e56c:	781a      	ldrb	r2, [r3, #0]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e578:	b29b      	uxth	r3, r3
 800e57a:	3b01      	subs	r3, #1
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	4619      	mov	r1, r3
 800e582:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e584:	2b00      	cmp	r3, #0
 800e586:	d10f      	bne.n	800e5a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	68da      	ldr	r2, [r3, #12]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e596:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68da      	ldr	r2, [r3, #12]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	e000      	b.n	800e5ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e5ac:	2302      	movs	r3, #2
  }
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3714      	adds	r7, #20
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bc80      	pop	{r7}
 800e5b6:	4770      	bx	lr

0800e5b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	68da      	ldr	r2, [r3, #12]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2220      	movs	r2, #32
 800e5d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7ff fcdd 	bl	800df98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3708      	adds	r7, #8
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b08c      	sub	sp, #48	; 0x30
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	2b22      	cmp	r3, #34	; 0x22
 800e5fa:	f040 80ae 	bne.w	800e75a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	689b      	ldr	r3, [r3, #8]
 800e602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e606:	d117      	bne.n	800e638 <UART_Receive_IT+0x50>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	691b      	ldr	r3, [r3, #16]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d113      	bne.n	800e638 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e610:	2300      	movs	r3, #0
 800e612:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e618:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	b29b      	uxth	r3, r3
 800e622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e626:	b29a      	uxth	r2, r3
 800e628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e630:	1c9a      	adds	r2, r3, #2
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	629a      	str	r2, [r3, #40]	; 0x28
 800e636:	e026      	b.n	800e686 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e63c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800e63e:	2300      	movs	r3, #0
 800e640:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e64a:	d007      	beq.n	800e65c <UART_Receive_IT+0x74>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d10a      	bne.n	800e66a <UART_Receive_IT+0x82>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	691b      	ldr	r3, [r3, #16]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d106      	bne.n	800e66a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	b2da      	uxtb	r2, r3
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	701a      	strb	r2, [r3, #0]
 800e668:	e008      	b.n	800e67c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	b2db      	uxtb	r3, r3
 800e672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e676:	b2da      	uxtb	r2, r3
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e680:	1c5a      	adds	r2, r3, #1
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	3b01      	subs	r3, #1
 800e68e:	b29b      	uxth	r3, r3
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	4619      	mov	r1, r3
 800e694:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e696:	2b00      	cmp	r3, #0
 800e698:	d15d      	bne.n	800e756 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	68da      	ldr	r2, [r3, #12]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f022 0220 	bic.w	r2, r2, #32
 800e6a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	68da      	ldr	r2, [r3, #12]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e6b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	695a      	ldr	r2, [r3, #20]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f022 0201 	bic.w	r2, r2, #1
 800e6c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2220      	movs	r2, #32
 800e6ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d135      	bne.n	800e74c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	330c      	adds	r3, #12
 800e6ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	e853 3f00 	ldrex	r3, [r3]
 800e6f4:	613b      	str	r3, [r7, #16]
   return(result);
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	f023 0310 	bic.w	r3, r3, #16
 800e6fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	330c      	adds	r3, #12
 800e704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e706:	623a      	str	r2, [r7, #32]
 800e708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70a:	69f9      	ldr	r1, [r7, #28]
 800e70c:	6a3a      	ldr	r2, [r7, #32]
 800e70e:	e841 2300 	strex	r3, r2, [r1]
 800e712:	61bb      	str	r3, [r7, #24]
   return(result);
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d1e5      	bne.n	800e6e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f003 0310 	and.w	r3, r3, #16
 800e724:	2b10      	cmp	r3, #16
 800e726:	d10a      	bne.n	800e73e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e728:	2300      	movs	r3, #0
 800e72a:	60fb      	str	r3, [r7, #12]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	60fb      	str	r3, [r7, #12]
 800e73c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e742:	4619      	mov	r1, r3
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f7ff fc39 	bl	800dfbc <HAL_UARTEx_RxEventCallback>
 800e74a:	e002      	b.n	800e752 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7f4 fd12 	bl	8003176 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e752:	2300      	movs	r3, #0
 800e754:	e002      	b.n	800e75c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e756:	2300      	movs	r3, #0
 800e758:	e000      	b.n	800e75c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e75a:	2302      	movs	r3, #2
  }
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3730      	adds	r7, #48	; 0x30
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	691b      	ldr	r3, [r3, #16]
 800e772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	68da      	ldr	r2, [r3, #12]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	430a      	orrs	r2, r1
 800e780:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	689a      	ldr	r2, [r3, #8]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	431a      	orrs	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	695b      	ldr	r3, [r3, #20]
 800e790:	4313      	orrs	r3, r2
 800e792:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800e79e:	f023 030c 	bic.w	r3, r3, #12
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	6812      	ldr	r2, [r2, #0]
 800e7a6:	68b9      	ldr	r1, [r7, #8]
 800e7a8:	430b      	orrs	r3, r1
 800e7aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	695b      	ldr	r3, [r3, #20]
 800e7b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	699a      	ldr	r2, [r3, #24]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	430a      	orrs	r2, r1
 800e7c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4a2c      	ldr	r2, [pc, #176]	; (800e878 <UART_SetConfig+0x114>)
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d103      	bne.n	800e7d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800e7cc:	f7fd ff62 	bl	800c694 <HAL_RCC_GetPCLK2Freq>
 800e7d0:	60f8      	str	r0, [r7, #12]
 800e7d2:	e002      	b.n	800e7da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800e7d4:	f7fd ff4a 	bl	800c66c <HAL_RCC_GetPCLK1Freq>
 800e7d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e7da:	68fa      	ldr	r2, [r7, #12]
 800e7dc:	4613      	mov	r3, r2
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	4413      	add	r3, r2
 800e7e2:	009a      	lsls	r2, r3, #2
 800e7e4:	441a      	add	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	685b      	ldr	r3, [r3, #4]
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7f0:	4a22      	ldr	r2, [pc, #136]	; (800e87c <UART_SetConfig+0x118>)
 800e7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e7f6:	095b      	lsrs	r3, r3, #5
 800e7f8:	0119      	lsls	r1, r3, #4
 800e7fa:	68fa      	ldr	r2, [r7, #12]
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	4413      	add	r3, r2
 800e802:	009a      	lsls	r2, r3, #2
 800e804:	441a      	add	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e810:	4b1a      	ldr	r3, [pc, #104]	; (800e87c <UART_SetConfig+0x118>)
 800e812:	fba3 0302 	umull	r0, r3, r3, r2
 800e816:	095b      	lsrs	r3, r3, #5
 800e818:	2064      	movs	r0, #100	; 0x64
 800e81a:	fb00 f303 	mul.w	r3, r0, r3
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	011b      	lsls	r3, r3, #4
 800e822:	3332      	adds	r3, #50	; 0x32
 800e824:	4a15      	ldr	r2, [pc, #84]	; (800e87c <UART_SetConfig+0x118>)
 800e826:	fba2 2303 	umull	r2, r3, r2, r3
 800e82a:	095b      	lsrs	r3, r3, #5
 800e82c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e830:	4419      	add	r1, r3
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	4613      	mov	r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	4413      	add	r3, r2
 800e83a:	009a      	lsls	r2, r3, #2
 800e83c:	441a      	add	r2, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	fbb2 f2f3 	udiv	r2, r2, r3
 800e848:	4b0c      	ldr	r3, [pc, #48]	; (800e87c <UART_SetConfig+0x118>)
 800e84a:	fba3 0302 	umull	r0, r3, r3, r2
 800e84e:	095b      	lsrs	r3, r3, #5
 800e850:	2064      	movs	r0, #100	; 0x64
 800e852:	fb00 f303 	mul.w	r3, r0, r3
 800e856:	1ad3      	subs	r3, r2, r3
 800e858:	011b      	lsls	r3, r3, #4
 800e85a:	3332      	adds	r3, #50	; 0x32
 800e85c:	4a07      	ldr	r2, [pc, #28]	; (800e87c <UART_SetConfig+0x118>)
 800e85e:	fba2 2303 	umull	r2, r3, r2, r3
 800e862:	095b      	lsrs	r3, r3, #5
 800e864:	f003 020f 	and.w	r2, r3, #15
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	440a      	add	r2, r1
 800e86e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800e870:	bf00      	nop
 800e872:	3710      	adds	r7, #16
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}
 800e878:	40013800 	.word	0x40013800
 800e87c:	51eb851f 	.word	0x51eb851f

0800e880 <__errno>:
 800e880:	4b01      	ldr	r3, [pc, #4]	; (800e888 <__errno+0x8>)
 800e882:	6818      	ldr	r0, [r3, #0]
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	20000050 	.word	0x20000050

0800e88c <__libc_init_array>:
 800e88c:	b570      	push	{r4, r5, r6, lr}
 800e88e:	2600      	movs	r6, #0
 800e890:	4d0c      	ldr	r5, [pc, #48]	; (800e8c4 <__libc_init_array+0x38>)
 800e892:	4c0d      	ldr	r4, [pc, #52]	; (800e8c8 <__libc_init_array+0x3c>)
 800e894:	1b64      	subs	r4, r4, r5
 800e896:	10a4      	asrs	r4, r4, #2
 800e898:	42a6      	cmp	r6, r4
 800e89a:	d109      	bne.n	800e8b0 <__libc_init_array+0x24>
 800e89c:	f003 f9b0 	bl	8011c00 <_init>
 800e8a0:	2600      	movs	r6, #0
 800e8a2:	4d0a      	ldr	r5, [pc, #40]	; (800e8cc <__libc_init_array+0x40>)
 800e8a4:	4c0a      	ldr	r4, [pc, #40]	; (800e8d0 <__libc_init_array+0x44>)
 800e8a6:	1b64      	subs	r4, r4, r5
 800e8a8:	10a4      	asrs	r4, r4, #2
 800e8aa:	42a6      	cmp	r6, r4
 800e8ac:	d105      	bne.n	800e8ba <__libc_init_array+0x2e>
 800e8ae:	bd70      	pop	{r4, r5, r6, pc}
 800e8b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8b4:	4798      	blx	r3
 800e8b6:	3601      	adds	r6, #1
 800e8b8:	e7ee      	b.n	800e898 <__libc_init_array+0xc>
 800e8ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8be:	4798      	blx	r3
 800e8c0:	3601      	adds	r6, #1
 800e8c2:	e7f2      	b.n	800e8aa <__libc_init_array+0x1e>
 800e8c4:	08013304 	.word	0x08013304
 800e8c8:	08013304 	.word	0x08013304
 800e8cc:	08013304 	.word	0x08013304
 800e8d0:	08013308 	.word	0x08013308

0800e8d4 <memcpy>:
 800e8d4:	440a      	add	r2, r1
 800e8d6:	4291      	cmp	r1, r2
 800e8d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8dc:	d100      	bne.n	800e8e0 <memcpy+0xc>
 800e8de:	4770      	bx	lr
 800e8e0:	b510      	push	{r4, lr}
 800e8e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8e6:	4291      	cmp	r1, r2
 800e8e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8ec:	d1f9      	bne.n	800e8e2 <memcpy+0xe>
 800e8ee:	bd10      	pop	{r4, pc}

0800e8f0 <memset>:
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	4402      	add	r2, r0
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d100      	bne.n	800e8fa <memset+0xa>
 800e8f8:	4770      	bx	lr
 800e8fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e8fe:	e7f9      	b.n	800e8f4 <memset+0x4>

0800e900 <iprintf>:
 800e900:	b40f      	push	{r0, r1, r2, r3}
 800e902:	4b0a      	ldr	r3, [pc, #40]	; (800e92c <iprintf+0x2c>)
 800e904:	b513      	push	{r0, r1, r4, lr}
 800e906:	681c      	ldr	r4, [r3, #0]
 800e908:	b124      	cbz	r4, 800e914 <iprintf+0x14>
 800e90a:	69a3      	ldr	r3, [r4, #24]
 800e90c:	b913      	cbnz	r3, 800e914 <iprintf+0x14>
 800e90e:	4620      	mov	r0, r4
 800e910:	f000 ffae 	bl	800f870 <__sinit>
 800e914:	ab05      	add	r3, sp, #20
 800e916:	4620      	mov	r0, r4
 800e918:	9a04      	ldr	r2, [sp, #16]
 800e91a:	68a1      	ldr	r1, [r4, #8]
 800e91c:	9301      	str	r3, [sp, #4]
 800e91e:	f002 faa5 	bl	8010e6c <_vfiprintf_r>
 800e922:	b002      	add	sp, #8
 800e924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e928:	b004      	add	sp, #16
 800e92a:	4770      	bx	lr
 800e92c:	20000050 	.word	0x20000050

0800e930 <strcpy>:
 800e930:	4603      	mov	r3, r0
 800e932:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e936:	f803 2b01 	strb.w	r2, [r3], #1
 800e93a:	2a00      	cmp	r2, #0
 800e93c:	d1f9      	bne.n	800e932 <strcpy+0x2>
 800e93e:	4770      	bx	lr

0800e940 <sulp>:
 800e940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e944:	460f      	mov	r7, r1
 800e946:	4690      	mov	r8, r2
 800e948:	f001 ff1c 	bl	8010784 <__ulp>
 800e94c:	4604      	mov	r4, r0
 800e94e:	460d      	mov	r5, r1
 800e950:	f1b8 0f00 	cmp.w	r8, #0
 800e954:	d011      	beq.n	800e97a <sulp+0x3a>
 800e956:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800e95a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e95e:	2b00      	cmp	r3, #0
 800e960:	dd0b      	ble.n	800e97a <sulp+0x3a>
 800e962:	2400      	movs	r4, #0
 800e964:	051b      	lsls	r3, r3, #20
 800e966:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e96a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e96e:	4622      	mov	r2, r4
 800e970:	462b      	mov	r3, r5
 800e972:	f7f1 fe27 	bl	80005c4 <__aeabi_dmul>
 800e976:	4604      	mov	r4, r0
 800e978:	460d      	mov	r5, r1
 800e97a:	4620      	mov	r0, r4
 800e97c:	4629      	mov	r1, r5
 800e97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e982:	0000      	movs	r0, r0
 800e984:	0000      	movs	r0, r0
	...

0800e988 <_strtod_l>:
 800e988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e98c:	469b      	mov	fp, r3
 800e98e:	2300      	movs	r3, #0
 800e990:	b09f      	sub	sp, #124	; 0x7c
 800e992:	931a      	str	r3, [sp, #104]	; 0x68
 800e994:	4b9e      	ldr	r3, [pc, #632]	; (800ec10 <_strtod_l+0x288>)
 800e996:	4682      	mov	sl, r0
 800e998:	681f      	ldr	r7, [r3, #0]
 800e99a:	460e      	mov	r6, r1
 800e99c:	4638      	mov	r0, r7
 800e99e:	9215      	str	r2, [sp, #84]	; 0x54
 800e9a0:	f7f1 fc4c 	bl	800023c <strlen>
 800e9a4:	f04f 0800 	mov.w	r8, #0
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	f04f 0900 	mov.w	r9, #0
 800e9ae:	9619      	str	r6, [sp, #100]	; 0x64
 800e9b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e9b2:	781a      	ldrb	r2, [r3, #0]
 800e9b4:	2a2b      	cmp	r2, #43	; 0x2b
 800e9b6:	d04c      	beq.n	800ea52 <_strtod_l+0xca>
 800e9b8:	d83a      	bhi.n	800ea30 <_strtod_l+0xa8>
 800e9ba:	2a0d      	cmp	r2, #13
 800e9bc:	d833      	bhi.n	800ea26 <_strtod_l+0x9e>
 800e9be:	2a08      	cmp	r2, #8
 800e9c0:	d833      	bhi.n	800ea2a <_strtod_l+0xa2>
 800e9c2:	2a00      	cmp	r2, #0
 800e9c4:	d03d      	beq.n	800ea42 <_strtod_l+0xba>
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	930a      	str	r3, [sp, #40]	; 0x28
 800e9ca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800e9cc:	782b      	ldrb	r3, [r5, #0]
 800e9ce:	2b30      	cmp	r3, #48	; 0x30
 800e9d0:	f040 80aa 	bne.w	800eb28 <_strtod_l+0x1a0>
 800e9d4:	786b      	ldrb	r3, [r5, #1]
 800e9d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e9da:	2b58      	cmp	r3, #88	; 0x58
 800e9dc:	d166      	bne.n	800eaac <_strtod_l+0x124>
 800e9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9e0:	4650      	mov	r0, sl
 800e9e2:	9301      	str	r3, [sp, #4]
 800e9e4:	ab1a      	add	r3, sp, #104	; 0x68
 800e9e6:	9300      	str	r3, [sp, #0]
 800e9e8:	4a8a      	ldr	r2, [pc, #552]	; (800ec14 <_strtod_l+0x28c>)
 800e9ea:	f8cd b008 	str.w	fp, [sp, #8]
 800e9ee:	ab1b      	add	r3, sp, #108	; 0x6c
 800e9f0:	a919      	add	r1, sp, #100	; 0x64
 800e9f2:	f001 f843 	bl	800fa7c <__gethex>
 800e9f6:	f010 0607 	ands.w	r6, r0, #7
 800e9fa:	4604      	mov	r4, r0
 800e9fc:	d005      	beq.n	800ea0a <_strtod_l+0x82>
 800e9fe:	2e06      	cmp	r6, #6
 800ea00:	d129      	bne.n	800ea56 <_strtod_l+0xce>
 800ea02:	2300      	movs	r3, #0
 800ea04:	3501      	adds	r5, #1
 800ea06:	9519      	str	r5, [sp, #100]	; 0x64
 800ea08:	930a      	str	r3, [sp, #40]	; 0x28
 800ea0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	f040 858a 	bne.w	800f526 <_strtod_l+0xb9e>
 800ea12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea14:	b1d3      	cbz	r3, 800ea4c <_strtod_l+0xc4>
 800ea16:	4642      	mov	r2, r8
 800ea18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	4619      	mov	r1, r3
 800ea20:	b01f      	add	sp, #124	; 0x7c
 800ea22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea26:	2a20      	cmp	r2, #32
 800ea28:	d1cd      	bne.n	800e9c6 <_strtod_l+0x3e>
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	9319      	str	r3, [sp, #100]	; 0x64
 800ea2e:	e7bf      	b.n	800e9b0 <_strtod_l+0x28>
 800ea30:	2a2d      	cmp	r2, #45	; 0x2d
 800ea32:	d1c8      	bne.n	800e9c6 <_strtod_l+0x3e>
 800ea34:	2201      	movs	r2, #1
 800ea36:	920a      	str	r2, [sp, #40]	; 0x28
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	9219      	str	r2, [sp, #100]	; 0x64
 800ea3c:	785b      	ldrb	r3, [r3, #1]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1c3      	bne.n	800e9ca <_strtod_l+0x42>
 800ea42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea44:	9619      	str	r6, [sp, #100]	; 0x64
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	f040 856b 	bne.w	800f522 <_strtod_l+0xb9a>
 800ea4c:	4642      	mov	r2, r8
 800ea4e:	464b      	mov	r3, r9
 800ea50:	e7e4      	b.n	800ea1c <_strtod_l+0x94>
 800ea52:	2200      	movs	r2, #0
 800ea54:	e7ef      	b.n	800ea36 <_strtod_l+0xae>
 800ea56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ea58:	b13a      	cbz	r2, 800ea6a <_strtod_l+0xe2>
 800ea5a:	2135      	movs	r1, #53	; 0x35
 800ea5c:	a81c      	add	r0, sp, #112	; 0x70
 800ea5e:	f001 ff95 	bl	801098c <__copybits>
 800ea62:	4650      	mov	r0, sl
 800ea64:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ea66:	f001 fb5d 	bl	8010124 <_Bfree>
 800ea6a:	3e01      	subs	r6, #1
 800ea6c:	2e04      	cmp	r6, #4
 800ea6e:	d806      	bhi.n	800ea7e <_strtod_l+0xf6>
 800ea70:	e8df f006 	tbb	[pc, r6]
 800ea74:	1714030a 	.word	0x1714030a
 800ea78:	0a          	.byte	0x0a
 800ea79:	00          	.byte	0x00
 800ea7a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ea7e:	0721      	lsls	r1, r4, #28
 800ea80:	d5c3      	bpl.n	800ea0a <_strtod_l+0x82>
 800ea82:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ea86:	e7c0      	b.n	800ea0a <_strtod_l+0x82>
 800ea88:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ea8a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ea8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ea92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ea96:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ea9a:	e7f0      	b.n	800ea7e <_strtod_l+0xf6>
 800ea9c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ec18 <_strtod_l+0x290>
 800eaa0:	e7ed      	b.n	800ea7e <_strtod_l+0xf6>
 800eaa2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800eaa6:	f04f 38ff 	mov.w	r8, #4294967295
 800eaaa:	e7e8      	b.n	800ea7e <_strtod_l+0xf6>
 800eaac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eaae:	1c5a      	adds	r2, r3, #1
 800eab0:	9219      	str	r2, [sp, #100]	; 0x64
 800eab2:	785b      	ldrb	r3, [r3, #1]
 800eab4:	2b30      	cmp	r3, #48	; 0x30
 800eab6:	d0f9      	beq.n	800eaac <_strtod_l+0x124>
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d0a6      	beq.n	800ea0a <_strtod_l+0x82>
 800eabc:	2301      	movs	r3, #1
 800eabe:	9307      	str	r3, [sp, #28]
 800eac0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eac2:	220a      	movs	r2, #10
 800eac4:	9308      	str	r3, [sp, #32]
 800eac6:	2300      	movs	r3, #0
 800eac8:	469b      	mov	fp, r3
 800eaca:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800eace:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ead0:	7805      	ldrb	r5, [r0, #0]
 800ead2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ead6:	b2d9      	uxtb	r1, r3
 800ead8:	2909      	cmp	r1, #9
 800eada:	d927      	bls.n	800eb2c <_strtod_l+0x1a4>
 800eadc:	4622      	mov	r2, r4
 800eade:	4639      	mov	r1, r7
 800eae0:	f002 fce7 	bl	80114b2 <strncmp>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	d033      	beq.n	800eb50 <_strtod_l+0x1c8>
 800eae8:	2000      	movs	r0, #0
 800eaea:	462a      	mov	r2, r5
 800eaec:	465c      	mov	r4, fp
 800eaee:	4603      	mov	r3, r0
 800eaf0:	9004      	str	r0, [sp, #16]
 800eaf2:	2a65      	cmp	r2, #101	; 0x65
 800eaf4:	d001      	beq.n	800eafa <_strtod_l+0x172>
 800eaf6:	2a45      	cmp	r2, #69	; 0x45
 800eaf8:	d114      	bne.n	800eb24 <_strtod_l+0x19c>
 800eafa:	b91c      	cbnz	r4, 800eb04 <_strtod_l+0x17c>
 800eafc:	9a07      	ldr	r2, [sp, #28]
 800eafe:	4302      	orrs	r2, r0
 800eb00:	d09f      	beq.n	800ea42 <_strtod_l+0xba>
 800eb02:	2400      	movs	r4, #0
 800eb04:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800eb06:	1c72      	adds	r2, r6, #1
 800eb08:	9219      	str	r2, [sp, #100]	; 0x64
 800eb0a:	7872      	ldrb	r2, [r6, #1]
 800eb0c:	2a2b      	cmp	r2, #43	; 0x2b
 800eb0e:	d079      	beq.n	800ec04 <_strtod_l+0x27c>
 800eb10:	2a2d      	cmp	r2, #45	; 0x2d
 800eb12:	f000 8083 	beq.w	800ec1c <_strtod_l+0x294>
 800eb16:	2700      	movs	r7, #0
 800eb18:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800eb1c:	2909      	cmp	r1, #9
 800eb1e:	f240 8083 	bls.w	800ec28 <_strtod_l+0x2a0>
 800eb22:	9619      	str	r6, [sp, #100]	; 0x64
 800eb24:	2500      	movs	r5, #0
 800eb26:	e09f      	b.n	800ec68 <_strtod_l+0x2e0>
 800eb28:	2300      	movs	r3, #0
 800eb2a:	e7c8      	b.n	800eabe <_strtod_l+0x136>
 800eb2c:	f1bb 0f08 	cmp.w	fp, #8
 800eb30:	bfd5      	itete	le
 800eb32:	9906      	ldrle	r1, [sp, #24]
 800eb34:	9905      	ldrgt	r1, [sp, #20]
 800eb36:	fb02 3301 	mlale	r3, r2, r1, r3
 800eb3a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800eb3e:	f100 0001 	add.w	r0, r0, #1
 800eb42:	bfd4      	ite	le
 800eb44:	9306      	strle	r3, [sp, #24]
 800eb46:	9305      	strgt	r3, [sp, #20]
 800eb48:	f10b 0b01 	add.w	fp, fp, #1
 800eb4c:	9019      	str	r0, [sp, #100]	; 0x64
 800eb4e:	e7be      	b.n	800eace <_strtod_l+0x146>
 800eb50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb52:	191a      	adds	r2, r3, r4
 800eb54:	9219      	str	r2, [sp, #100]	; 0x64
 800eb56:	5d1a      	ldrb	r2, [r3, r4]
 800eb58:	f1bb 0f00 	cmp.w	fp, #0
 800eb5c:	d036      	beq.n	800ebcc <_strtod_l+0x244>
 800eb5e:	465c      	mov	r4, fp
 800eb60:	9004      	str	r0, [sp, #16]
 800eb62:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800eb66:	2b09      	cmp	r3, #9
 800eb68:	d912      	bls.n	800eb90 <_strtod_l+0x208>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e7c1      	b.n	800eaf2 <_strtod_l+0x16a>
 800eb6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb70:	3001      	adds	r0, #1
 800eb72:	1c5a      	adds	r2, r3, #1
 800eb74:	9219      	str	r2, [sp, #100]	; 0x64
 800eb76:	785a      	ldrb	r2, [r3, #1]
 800eb78:	2a30      	cmp	r2, #48	; 0x30
 800eb7a:	d0f8      	beq.n	800eb6e <_strtod_l+0x1e6>
 800eb7c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800eb80:	2b08      	cmp	r3, #8
 800eb82:	f200 84d5 	bhi.w	800f530 <_strtod_l+0xba8>
 800eb86:	9004      	str	r0, [sp, #16]
 800eb88:	2000      	movs	r0, #0
 800eb8a:	4604      	mov	r4, r0
 800eb8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb8e:	9308      	str	r3, [sp, #32]
 800eb90:	3a30      	subs	r2, #48	; 0x30
 800eb92:	f100 0301 	add.w	r3, r0, #1
 800eb96:	d013      	beq.n	800ebc0 <_strtod_l+0x238>
 800eb98:	9904      	ldr	r1, [sp, #16]
 800eb9a:	1905      	adds	r5, r0, r4
 800eb9c:	4419      	add	r1, r3
 800eb9e:	9104      	str	r1, [sp, #16]
 800eba0:	4623      	mov	r3, r4
 800eba2:	210a      	movs	r1, #10
 800eba4:	42ab      	cmp	r3, r5
 800eba6:	d113      	bne.n	800ebd0 <_strtod_l+0x248>
 800eba8:	1823      	adds	r3, r4, r0
 800ebaa:	2b08      	cmp	r3, #8
 800ebac:	f104 0401 	add.w	r4, r4, #1
 800ebb0:	4404      	add	r4, r0
 800ebb2:	dc1b      	bgt.n	800ebec <_strtod_l+0x264>
 800ebb4:	230a      	movs	r3, #10
 800ebb6:	9906      	ldr	r1, [sp, #24]
 800ebb8:	fb03 2301 	mla	r3, r3, r1, r2
 800ebbc:	9306      	str	r3, [sp, #24]
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	1c51      	adds	r1, r2, #1
 800ebc6:	9119      	str	r1, [sp, #100]	; 0x64
 800ebc8:	7852      	ldrb	r2, [r2, #1]
 800ebca:	e7ca      	b.n	800eb62 <_strtod_l+0x1da>
 800ebcc:	4658      	mov	r0, fp
 800ebce:	e7d3      	b.n	800eb78 <_strtod_l+0x1f0>
 800ebd0:	2b08      	cmp	r3, #8
 800ebd2:	dc04      	bgt.n	800ebde <_strtod_l+0x256>
 800ebd4:	9f06      	ldr	r7, [sp, #24]
 800ebd6:	434f      	muls	r7, r1
 800ebd8:	9706      	str	r7, [sp, #24]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	e7e2      	b.n	800eba4 <_strtod_l+0x21c>
 800ebde:	1c5f      	adds	r7, r3, #1
 800ebe0:	2f10      	cmp	r7, #16
 800ebe2:	bfde      	ittt	le
 800ebe4:	9f05      	ldrle	r7, [sp, #20]
 800ebe6:	434f      	mulle	r7, r1
 800ebe8:	9705      	strle	r7, [sp, #20]
 800ebea:	e7f6      	b.n	800ebda <_strtod_l+0x252>
 800ebec:	2c10      	cmp	r4, #16
 800ebee:	bfdf      	itttt	le
 800ebf0:	230a      	movle	r3, #10
 800ebf2:	9905      	ldrle	r1, [sp, #20]
 800ebf4:	fb03 2301 	mlale	r3, r3, r1, r2
 800ebf8:	9305      	strle	r3, [sp, #20]
 800ebfa:	e7e0      	b.n	800ebbe <_strtod_l+0x236>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	9304      	str	r3, [sp, #16]
 800ec00:	2301      	movs	r3, #1
 800ec02:	e77b      	b.n	800eafc <_strtod_l+0x174>
 800ec04:	2700      	movs	r7, #0
 800ec06:	1cb2      	adds	r2, r6, #2
 800ec08:	9219      	str	r2, [sp, #100]	; 0x64
 800ec0a:	78b2      	ldrb	r2, [r6, #2]
 800ec0c:	e784      	b.n	800eb18 <_strtod_l+0x190>
 800ec0e:	bf00      	nop
 800ec10:	0801310c 	.word	0x0801310c
 800ec14:	08012edc 	.word	0x08012edc
 800ec18:	7ff00000 	.word	0x7ff00000
 800ec1c:	2701      	movs	r7, #1
 800ec1e:	e7f2      	b.n	800ec06 <_strtod_l+0x27e>
 800ec20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ec22:	1c51      	adds	r1, r2, #1
 800ec24:	9119      	str	r1, [sp, #100]	; 0x64
 800ec26:	7852      	ldrb	r2, [r2, #1]
 800ec28:	2a30      	cmp	r2, #48	; 0x30
 800ec2a:	d0f9      	beq.n	800ec20 <_strtod_l+0x298>
 800ec2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ec30:	2908      	cmp	r1, #8
 800ec32:	f63f af77 	bhi.w	800eb24 <_strtod_l+0x19c>
 800ec36:	f04f 0e0a 	mov.w	lr, #10
 800ec3a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ec3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ec40:	9209      	str	r2, [sp, #36]	; 0x24
 800ec42:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ec44:	1c51      	adds	r1, r2, #1
 800ec46:	9119      	str	r1, [sp, #100]	; 0x64
 800ec48:	7852      	ldrb	r2, [r2, #1]
 800ec4a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ec4e:	2d09      	cmp	r5, #9
 800ec50:	d935      	bls.n	800ecbe <_strtod_l+0x336>
 800ec52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ec54:	1b49      	subs	r1, r1, r5
 800ec56:	2908      	cmp	r1, #8
 800ec58:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ec5c:	dc02      	bgt.n	800ec64 <_strtod_l+0x2dc>
 800ec5e:	4565      	cmp	r5, ip
 800ec60:	bfa8      	it	ge
 800ec62:	4665      	movge	r5, ip
 800ec64:	b107      	cbz	r7, 800ec68 <_strtod_l+0x2e0>
 800ec66:	426d      	negs	r5, r5
 800ec68:	2c00      	cmp	r4, #0
 800ec6a:	d14c      	bne.n	800ed06 <_strtod_l+0x37e>
 800ec6c:	9907      	ldr	r1, [sp, #28]
 800ec6e:	4301      	orrs	r1, r0
 800ec70:	f47f aecb 	bne.w	800ea0a <_strtod_l+0x82>
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f47f aee4 	bne.w	800ea42 <_strtod_l+0xba>
 800ec7a:	2a69      	cmp	r2, #105	; 0x69
 800ec7c:	d026      	beq.n	800eccc <_strtod_l+0x344>
 800ec7e:	dc23      	bgt.n	800ecc8 <_strtod_l+0x340>
 800ec80:	2a49      	cmp	r2, #73	; 0x49
 800ec82:	d023      	beq.n	800eccc <_strtod_l+0x344>
 800ec84:	2a4e      	cmp	r2, #78	; 0x4e
 800ec86:	f47f aedc 	bne.w	800ea42 <_strtod_l+0xba>
 800ec8a:	499d      	ldr	r1, [pc, #628]	; (800ef00 <_strtod_l+0x578>)
 800ec8c:	a819      	add	r0, sp, #100	; 0x64
 800ec8e:	f001 f943 	bl	800ff18 <__match>
 800ec92:	2800      	cmp	r0, #0
 800ec94:	f43f aed5 	beq.w	800ea42 <_strtod_l+0xba>
 800ec98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	2b28      	cmp	r3, #40	; 0x28
 800ec9e:	d12c      	bne.n	800ecfa <_strtod_l+0x372>
 800eca0:	4998      	ldr	r1, [pc, #608]	; (800ef04 <_strtod_l+0x57c>)
 800eca2:	aa1c      	add	r2, sp, #112	; 0x70
 800eca4:	a819      	add	r0, sp, #100	; 0x64
 800eca6:	f001 f94b 	bl	800ff40 <__hexnan>
 800ecaa:	2805      	cmp	r0, #5
 800ecac:	d125      	bne.n	800ecfa <_strtod_l+0x372>
 800ecae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ecb0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ecb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ecb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ecbc:	e6a5      	b.n	800ea0a <_strtod_l+0x82>
 800ecbe:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ecc2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ecc6:	e7bc      	b.n	800ec42 <_strtod_l+0x2ba>
 800ecc8:	2a6e      	cmp	r2, #110	; 0x6e
 800ecca:	e7dc      	b.n	800ec86 <_strtod_l+0x2fe>
 800eccc:	498e      	ldr	r1, [pc, #568]	; (800ef08 <_strtod_l+0x580>)
 800ecce:	a819      	add	r0, sp, #100	; 0x64
 800ecd0:	f001 f922 	bl	800ff18 <__match>
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	f43f aeb4 	beq.w	800ea42 <_strtod_l+0xba>
 800ecda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ecdc:	498b      	ldr	r1, [pc, #556]	; (800ef0c <_strtod_l+0x584>)
 800ecde:	3b01      	subs	r3, #1
 800ece0:	a819      	add	r0, sp, #100	; 0x64
 800ece2:	9319      	str	r3, [sp, #100]	; 0x64
 800ece4:	f001 f918 	bl	800ff18 <__match>
 800ece8:	b910      	cbnz	r0, 800ecf0 <_strtod_l+0x368>
 800ecea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ecec:	3301      	adds	r3, #1
 800ecee:	9319      	str	r3, [sp, #100]	; 0x64
 800ecf0:	f04f 0800 	mov.w	r8, #0
 800ecf4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800ef10 <_strtod_l+0x588>
 800ecf8:	e687      	b.n	800ea0a <_strtod_l+0x82>
 800ecfa:	4886      	ldr	r0, [pc, #536]	; (800ef14 <_strtod_l+0x58c>)
 800ecfc:	f002 fb7c 	bl	80113f8 <nan>
 800ed00:	4680      	mov	r8, r0
 800ed02:	4689      	mov	r9, r1
 800ed04:	e681      	b.n	800ea0a <_strtod_l+0x82>
 800ed06:	9b04      	ldr	r3, [sp, #16]
 800ed08:	f1bb 0f00 	cmp.w	fp, #0
 800ed0c:	bf08      	it	eq
 800ed0e:	46a3      	moveq	fp, r4
 800ed10:	1aeb      	subs	r3, r5, r3
 800ed12:	2c10      	cmp	r4, #16
 800ed14:	9806      	ldr	r0, [sp, #24]
 800ed16:	4626      	mov	r6, r4
 800ed18:	9307      	str	r3, [sp, #28]
 800ed1a:	bfa8      	it	ge
 800ed1c:	2610      	movge	r6, #16
 800ed1e:	f7f1 fbd7 	bl	80004d0 <__aeabi_ui2d>
 800ed22:	2c09      	cmp	r4, #9
 800ed24:	4680      	mov	r8, r0
 800ed26:	4689      	mov	r9, r1
 800ed28:	dd13      	ble.n	800ed52 <_strtod_l+0x3ca>
 800ed2a:	4b7b      	ldr	r3, [pc, #492]	; (800ef18 <_strtod_l+0x590>)
 800ed2c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed30:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ed34:	f7f1 fc46 	bl	80005c4 <__aeabi_dmul>
 800ed38:	4680      	mov	r8, r0
 800ed3a:	9805      	ldr	r0, [sp, #20]
 800ed3c:	4689      	mov	r9, r1
 800ed3e:	f7f1 fbc7 	bl	80004d0 <__aeabi_ui2d>
 800ed42:	4602      	mov	r2, r0
 800ed44:	460b      	mov	r3, r1
 800ed46:	4640      	mov	r0, r8
 800ed48:	4649      	mov	r1, r9
 800ed4a:	f7f1 fa85 	bl	8000258 <__adddf3>
 800ed4e:	4680      	mov	r8, r0
 800ed50:	4689      	mov	r9, r1
 800ed52:	2c0f      	cmp	r4, #15
 800ed54:	dc36      	bgt.n	800edc4 <_strtod_l+0x43c>
 800ed56:	9b07      	ldr	r3, [sp, #28]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f43f ae56 	beq.w	800ea0a <_strtod_l+0x82>
 800ed5e:	dd22      	ble.n	800eda6 <_strtod_l+0x41e>
 800ed60:	2b16      	cmp	r3, #22
 800ed62:	dc09      	bgt.n	800ed78 <_strtod_l+0x3f0>
 800ed64:	496c      	ldr	r1, [pc, #432]	; (800ef18 <_strtod_l+0x590>)
 800ed66:	4642      	mov	r2, r8
 800ed68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed6c:	464b      	mov	r3, r9
 800ed6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed72:	f7f1 fc27 	bl	80005c4 <__aeabi_dmul>
 800ed76:	e7c3      	b.n	800ed00 <_strtod_l+0x378>
 800ed78:	9a07      	ldr	r2, [sp, #28]
 800ed7a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	db20      	blt.n	800edc4 <_strtod_l+0x43c>
 800ed82:	4d65      	ldr	r5, [pc, #404]	; (800ef18 <_strtod_l+0x590>)
 800ed84:	f1c4 040f 	rsb	r4, r4, #15
 800ed88:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ed8c:	4642      	mov	r2, r8
 800ed8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed92:	464b      	mov	r3, r9
 800ed94:	f7f1 fc16 	bl	80005c4 <__aeabi_dmul>
 800ed98:	9b07      	ldr	r3, [sp, #28]
 800ed9a:	1b1c      	subs	r4, r3, r4
 800ed9c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800eda0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eda4:	e7e5      	b.n	800ed72 <_strtod_l+0x3ea>
 800eda6:	9b07      	ldr	r3, [sp, #28]
 800eda8:	3316      	adds	r3, #22
 800edaa:	db0b      	blt.n	800edc4 <_strtod_l+0x43c>
 800edac:	9b04      	ldr	r3, [sp, #16]
 800edae:	4640      	mov	r0, r8
 800edb0:	1b5d      	subs	r5, r3, r5
 800edb2:	4b59      	ldr	r3, [pc, #356]	; (800ef18 <_strtod_l+0x590>)
 800edb4:	4649      	mov	r1, r9
 800edb6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800edba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800edbe:	f7f1 fd2b 	bl	8000818 <__aeabi_ddiv>
 800edc2:	e79d      	b.n	800ed00 <_strtod_l+0x378>
 800edc4:	9b07      	ldr	r3, [sp, #28]
 800edc6:	1ba6      	subs	r6, r4, r6
 800edc8:	441e      	add	r6, r3
 800edca:	2e00      	cmp	r6, #0
 800edcc:	dd74      	ble.n	800eeb8 <_strtod_l+0x530>
 800edce:	f016 030f 	ands.w	r3, r6, #15
 800edd2:	d00a      	beq.n	800edea <_strtod_l+0x462>
 800edd4:	4950      	ldr	r1, [pc, #320]	; (800ef18 <_strtod_l+0x590>)
 800edd6:	4642      	mov	r2, r8
 800edd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ede0:	464b      	mov	r3, r9
 800ede2:	f7f1 fbef 	bl	80005c4 <__aeabi_dmul>
 800ede6:	4680      	mov	r8, r0
 800ede8:	4689      	mov	r9, r1
 800edea:	f036 060f 	bics.w	r6, r6, #15
 800edee:	d052      	beq.n	800ee96 <_strtod_l+0x50e>
 800edf0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800edf4:	dd27      	ble.n	800ee46 <_strtod_l+0x4be>
 800edf6:	f04f 0b00 	mov.w	fp, #0
 800edfa:	f8cd b010 	str.w	fp, [sp, #16]
 800edfe:	f8cd b020 	str.w	fp, [sp, #32]
 800ee02:	f8cd b018 	str.w	fp, [sp, #24]
 800ee06:	2322      	movs	r3, #34	; 0x22
 800ee08:	f04f 0800 	mov.w	r8, #0
 800ee0c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800ef10 <_strtod_l+0x588>
 800ee10:	f8ca 3000 	str.w	r3, [sl]
 800ee14:	9b08      	ldr	r3, [sp, #32]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	f43f adf7 	beq.w	800ea0a <_strtod_l+0x82>
 800ee1c:	4650      	mov	r0, sl
 800ee1e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ee20:	f001 f980 	bl	8010124 <_Bfree>
 800ee24:	4650      	mov	r0, sl
 800ee26:	9906      	ldr	r1, [sp, #24]
 800ee28:	f001 f97c 	bl	8010124 <_Bfree>
 800ee2c:	4650      	mov	r0, sl
 800ee2e:	9904      	ldr	r1, [sp, #16]
 800ee30:	f001 f978 	bl	8010124 <_Bfree>
 800ee34:	4650      	mov	r0, sl
 800ee36:	9908      	ldr	r1, [sp, #32]
 800ee38:	f001 f974 	bl	8010124 <_Bfree>
 800ee3c:	4659      	mov	r1, fp
 800ee3e:	4650      	mov	r0, sl
 800ee40:	f001 f970 	bl	8010124 <_Bfree>
 800ee44:	e5e1      	b.n	800ea0a <_strtod_l+0x82>
 800ee46:	4b35      	ldr	r3, [pc, #212]	; (800ef1c <_strtod_l+0x594>)
 800ee48:	4640      	mov	r0, r8
 800ee4a:	9305      	str	r3, [sp, #20]
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	4649      	mov	r1, r9
 800ee50:	461f      	mov	r7, r3
 800ee52:	1136      	asrs	r6, r6, #4
 800ee54:	2e01      	cmp	r6, #1
 800ee56:	dc21      	bgt.n	800ee9c <_strtod_l+0x514>
 800ee58:	b10b      	cbz	r3, 800ee5e <_strtod_l+0x4d6>
 800ee5a:	4680      	mov	r8, r0
 800ee5c:	4689      	mov	r9, r1
 800ee5e:	4b2f      	ldr	r3, [pc, #188]	; (800ef1c <_strtod_l+0x594>)
 800ee60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ee64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ee68:	4642      	mov	r2, r8
 800ee6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ee6e:	464b      	mov	r3, r9
 800ee70:	f7f1 fba8 	bl	80005c4 <__aeabi_dmul>
 800ee74:	4b26      	ldr	r3, [pc, #152]	; (800ef10 <_strtod_l+0x588>)
 800ee76:	460a      	mov	r2, r1
 800ee78:	400b      	ands	r3, r1
 800ee7a:	4929      	ldr	r1, [pc, #164]	; (800ef20 <_strtod_l+0x598>)
 800ee7c:	4680      	mov	r8, r0
 800ee7e:	428b      	cmp	r3, r1
 800ee80:	d8b9      	bhi.n	800edf6 <_strtod_l+0x46e>
 800ee82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ee86:	428b      	cmp	r3, r1
 800ee88:	bf86      	itte	hi
 800ee8a:	f04f 38ff 	movhi.w	r8, #4294967295
 800ee8e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800ef24 <_strtod_l+0x59c>
 800ee92:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ee96:	2300      	movs	r3, #0
 800ee98:	9305      	str	r3, [sp, #20]
 800ee9a:	e07f      	b.n	800ef9c <_strtod_l+0x614>
 800ee9c:	07f2      	lsls	r2, r6, #31
 800ee9e:	d505      	bpl.n	800eeac <_strtod_l+0x524>
 800eea0:	9b05      	ldr	r3, [sp, #20]
 800eea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea6:	f7f1 fb8d 	bl	80005c4 <__aeabi_dmul>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	9a05      	ldr	r2, [sp, #20]
 800eeae:	3701      	adds	r7, #1
 800eeb0:	3208      	adds	r2, #8
 800eeb2:	1076      	asrs	r6, r6, #1
 800eeb4:	9205      	str	r2, [sp, #20]
 800eeb6:	e7cd      	b.n	800ee54 <_strtod_l+0x4cc>
 800eeb8:	d0ed      	beq.n	800ee96 <_strtod_l+0x50e>
 800eeba:	4276      	negs	r6, r6
 800eebc:	f016 020f 	ands.w	r2, r6, #15
 800eec0:	d00a      	beq.n	800eed8 <_strtod_l+0x550>
 800eec2:	4b15      	ldr	r3, [pc, #84]	; (800ef18 <_strtod_l+0x590>)
 800eec4:	4640      	mov	r0, r8
 800eec6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eeca:	4649      	mov	r1, r9
 800eecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed0:	f7f1 fca2 	bl	8000818 <__aeabi_ddiv>
 800eed4:	4680      	mov	r8, r0
 800eed6:	4689      	mov	r9, r1
 800eed8:	1136      	asrs	r6, r6, #4
 800eeda:	d0dc      	beq.n	800ee96 <_strtod_l+0x50e>
 800eedc:	2e1f      	cmp	r6, #31
 800eede:	dd23      	ble.n	800ef28 <_strtod_l+0x5a0>
 800eee0:	f04f 0b00 	mov.w	fp, #0
 800eee4:	f8cd b010 	str.w	fp, [sp, #16]
 800eee8:	f8cd b020 	str.w	fp, [sp, #32]
 800eeec:	f8cd b018 	str.w	fp, [sp, #24]
 800eef0:	2322      	movs	r3, #34	; 0x22
 800eef2:	f04f 0800 	mov.w	r8, #0
 800eef6:	f04f 0900 	mov.w	r9, #0
 800eefa:	f8ca 3000 	str.w	r3, [sl]
 800eefe:	e789      	b.n	800ee14 <_strtod_l+0x48c>
 800ef00:	08012ed9 	.word	0x08012ed9
 800ef04:	08012ef0 	.word	0x08012ef0
 800ef08:	08012ed0 	.word	0x08012ed0
 800ef0c:	08012ed3 	.word	0x08012ed3
 800ef10:	7ff00000 	.word	0x7ff00000
 800ef14:	08013302 	.word	0x08013302
 800ef18:	080131c0 	.word	0x080131c0
 800ef1c:	08013198 	.word	0x08013198
 800ef20:	7ca00000 	.word	0x7ca00000
 800ef24:	7fefffff 	.word	0x7fefffff
 800ef28:	f016 0310 	ands.w	r3, r6, #16
 800ef2c:	bf18      	it	ne
 800ef2e:	236a      	movne	r3, #106	; 0x6a
 800ef30:	4640      	mov	r0, r8
 800ef32:	9305      	str	r3, [sp, #20]
 800ef34:	4649      	mov	r1, r9
 800ef36:	2300      	movs	r3, #0
 800ef38:	4fb0      	ldr	r7, [pc, #704]	; (800f1fc <_strtod_l+0x874>)
 800ef3a:	07f2      	lsls	r2, r6, #31
 800ef3c:	d504      	bpl.n	800ef48 <_strtod_l+0x5c0>
 800ef3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef42:	f7f1 fb3f 	bl	80005c4 <__aeabi_dmul>
 800ef46:	2301      	movs	r3, #1
 800ef48:	1076      	asrs	r6, r6, #1
 800ef4a:	f107 0708 	add.w	r7, r7, #8
 800ef4e:	d1f4      	bne.n	800ef3a <_strtod_l+0x5b2>
 800ef50:	b10b      	cbz	r3, 800ef56 <_strtod_l+0x5ce>
 800ef52:	4680      	mov	r8, r0
 800ef54:	4689      	mov	r9, r1
 800ef56:	9b05      	ldr	r3, [sp, #20]
 800ef58:	b1c3      	cbz	r3, 800ef8c <_strtod_l+0x604>
 800ef5a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ef5e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	4649      	mov	r1, r9
 800ef66:	dd11      	ble.n	800ef8c <_strtod_l+0x604>
 800ef68:	2b1f      	cmp	r3, #31
 800ef6a:	f340 8127 	ble.w	800f1bc <_strtod_l+0x834>
 800ef6e:	2b34      	cmp	r3, #52	; 0x34
 800ef70:	bfd8      	it	le
 800ef72:	f04f 33ff 	movle.w	r3, #4294967295
 800ef76:	f04f 0800 	mov.w	r8, #0
 800ef7a:	bfcf      	iteee	gt
 800ef7c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ef80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ef84:	fa03 f202 	lslle.w	r2, r3, r2
 800ef88:	ea02 0901 	andle.w	r9, r2, r1
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	2300      	movs	r3, #0
 800ef90:	4640      	mov	r0, r8
 800ef92:	4649      	mov	r1, r9
 800ef94:	f7f1 fd7e 	bl	8000a94 <__aeabi_dcmpeq>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	d1a1      	bne.n	800eee0 <_strtod_l+0x558>
 800ef9c:	9b06      	ldr	r3, [sp, #24]
 800ef9e:	465a      	mov	r2, fp
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	4650      	mov	r0, sl
 800efa4:	4623      	mov	r3, r4
 800efa6:	9908      	ldr	r1, [sp, #32]
 800efa8:	f001 f924 	bl	80101f4 <__s2b>
 800efac:	9008      	str	r0, [sp, #32]
 800efae:	2800      	cmp	r0, #0
 800efb0:	f43f af21 	beq.w	800edf6 <_strtod_l+0x46e>
 800efb4:	9b04      	ldr	r3, [sp, #16]
 800efb6:	f04f 0b00 	mov.w	fp, #0
 800efba:	1b5d      	subs	r5, r3, r5
 800efbc:	9b07      	ldr	r3, [sp, #28]
 800efbe:	f8cd b010 	str.w	fp, [sp, #16]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	bfb4      	ite	lt
 800efc6:	462b      	movlt	r3, r5
 800efc8:	2300      	movge	r3, #0
 800efca:	930e      	str	r3, [sp, #56]	; 0x38
 800efcc:	9b07      	ldr	r3, [sp, #28]
 800efce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800efd2:	9314      	str	r3, [sp, #80]	; 0x50
 800efd4:	9b08      	ldr	r3, [sp, #32]
 800efd6:	4650      	mov	r0, sl
 800efd8:	6859      	ldr	r1, [r3, #4]
 800efda:	f001 f863 	bl	80100a4 <_Balloc>
 800efde:	9006      	str	r0, [sp, #24]
 800efe0:	2800      	cmp	r0, #0
 800efe2:	f43f af10 	beq.w	800ee06 <_strtod_l+0x47e>
 800efe6:	9b08      	ldr	r3, [sp, #32]
 800efe8:	300c      	adds	r0, #12
 800efea:	691a      	ldr	r2, [r3, #16]
 800efec:	f103 010c 	add.w	r1, r3, #12
 800eff0:	3202      	adds	r2, #2
 800eff2:	0092      	lsls	r2, r2, #2
 800eff4:	f7ff fc6e 	bl	800e8d4 <memcpy>
 800eff8:	ab1c      	add	r3, sp, #112	; 0x70
 800effa:	9301      	str	r3, [sp, #4]
 800effc:	ab1b      	add	r3, sp, #108	; 0x6c
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	4642      	mov	r2, r8
 800f002:	464b      	mov	r3, r9
 800f004:	4650      	mov	r0, sl
 800f006:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800f00a:	f001 fc35 	bl	8010878 <__d2b>
 800f00e:	901a      	str	r0, [sp, #104]	; 0x68
 800f010:	2800      	cmp	r0, #0
 800f012:	f43f aef8 	beq.w	800ee06 <_strtod_l+0x47e>
 800f016:	2101      	movs	r1, #1
 800f018:	4650      	mov	r0, sl
 800f01a:	f001 f983 	bl	8010324 <__i2b>
 800f01e:	4603      	mov	r3, r0
 800f020:	9004      	str	r0, [sp, #16]
 800f022:	2800      	cmp	r0, #0
 800f024:	f43f aeef 	beq.w	800ee06 <_strtod_l+0x47e>
 800f028:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f02a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f02c:	2d00      	cmp	r5, #0
 800f02e:	bfab      	itete	ge
 800f030:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f032:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800f034:	18ee      	addge	r6, r5, r3
 800f036:	1b5c      	sublt	r4, r3, r5
 800f038:	9b05      	ldr	r3, [sp, #20]
 800f03a:	bfa8      	it	ge
 800f03c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800f03e:	eba5 0503 	sub.w	r5, r5, r3
 800f042:	4415      	add	r5, r2
 800f044:	4b6e      	ldr	r3, [pc, #440]	; (800f200 <_strtod_l+0x878>)
 800f046:	f105 35ff 	add.w	r5, r5, #4294967295
 800f04a:	bfb8      	it	lt
 800f04c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800f04e:	429d      	cmp	r5, r3
 800f050:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f054:	f280 80c4 	bge.w	800f1e0 <_strtod_l+0x858>
 800f058:	1b5b      	subs	r3, r3, r5
 800f05a:	2b1f      	cmp	r3, #31
 800f05c:	f04f 0701 	mov.w	r7, #1
 800f060:	eba2 0203 	sub.w	r2, r2, r3
 800f064:	f300 80b1 	bgt.w	800f1ca <_strtod_l+0x842>
 800f068:	2500      	movs	r5, #0
 800f06a:	fa07 f303 	lsl.w	r3, r7, r3
 800f06e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f070:	18b7      	adds	r7, r6, r2
 800f072:	9b05      	ldr	r3, [sp, #20]
 800f074:	42be      	cmp	r6, r7
 800f076:	4414      	add	r4, r2
 800f078:	441c      	add	r4, r3
 800f07a:	4633      	mov	r3, r6
 800f07c:	bfa8      	it	ge
 800f07e:	463b      	movge	r3, r7
 800f080:	42a3      	cmp	r3, r4
 800f082:	bfa8      	it	ge
 800f084:	4623      	movge	r3, r4
 800f086:	2b00      	cmp	r3, #0
 800f088:	bfc2      	ittt	gt
 800f08a:	1aff      	subgt	r7, r7, r3
 800f08c:	1ae4      	subgt	r4, r4, r3
 800f08e:	1af6      	subgt	r6, r6, r3
 800f090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f092:	2b00      	cmp	r3, #0
 800f094:	dd17      	ble.n	800f0c6 <_strtod_l+0x73e>
 800f096:	461a      	mov	r2, r3
 800f098:	4650      	mov	r0, sl
 800f09a:	9904      	ldr	r1, [sp, #16]
 800f09c:	f001 fa00 	bl	80104a0 <__pow5mult>
 800f0a0:	9004      	str	r0, [sp, #16]
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	f43f aeaf 	beq.w	800ee06 <_strtod_l+0x47e>
 800f0a8:	4601      	mov	r1, r0
 800f0aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f0ac:	4650      	mov	r0, sl
 800f0ae:	f001 f94f 	bl	8010350 <__multiply>
 800f0b2:	9009      	str	r0, [sp, #36]	; 0x24
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	f43f aea6 	beq.w	800ee06 <_strtod_l+0x47e>
 800f0ba:	4650      	mov	r0, sl
 800f0bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f0be:	f001 f831 	bl	8010124 <_Bfree>
 800f0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0c4:	931a      	str	r3, [sp, #104]	; 0x68
 800f0c6:	2f00      	cmp	r7, #0
 800f0c8:	f300 808e 	bgt.w	800f1e8 <_strtod_l+0x860>
 800f0cc:	9b07      	ldr	r3, [sp, #28]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	dd08      	ble.n	800f0e4 <_strtod_l+0x75c>
 800f0d2:	4650      	mov	r0, sl
 800f0d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0d6:	9906      	ldr	r1, [sp, #24]
 800f0d8:	f001 f9e2 	bl	80104a0 <__pow5mult>
 800f0dc:	9006      	str	r0, [sp, #24]
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	f43f ae91 	beq.w	800ee06 <_strtod_l+0x47e>
 800f0e4:	2c00      	cmp	r4, #0
 800f0e6:	dd08      	ble.n	800f0fa <_strtod_l+0x772>
 800f0e8:	4622      	mov	r2, r4
 800f0ea:	4650      	mov	r0, sl
 800f0ec:	9906      	ldr	r1, [sp, #24]
 800f0ee:	f001 fa31 	bl	8010554 <__lshift>
 800f0f2:	9006      	str	r0, [sp, #24]
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	f43f ae86 	beq.w	800ee06 <_strtod_l+0x47e>
 800f0fa:	2e00      	cmp	r6, #0
 800f0fc:	dd08      	ble.n	800f110 <_strtod_l+0x788>
 800f0fe:	4632      	mov	r2, r6
 800f100:	4650      	mov	r0, sl
 800f102:	9904      	ldr	r1, [sp, #16]
 800f104:	f001 fa26 	bl	8010554 <__lshift>
 800f108:	9004      	str	r0, [sp, #16]
 800f10a:	2800      	cmp	r0, #0
 800f10c:	f43f ae7b 	beq.w	800ee06 <_strtod_l+0x47e>
 800f110:	4650      	mov	r0, sl
 800f112:	9a06      	ldr	r2, [sp, #24]
 800f114:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f116:	f001 faa9 	bl	801066c <__mdiff>
 800f11a:	4683      	mov	fp, r0
 800f11c:	2800      	cmp	r0, #0
 800f11e:	f43f ae72 	beq.w	800ee06 <_strtod_l+0x47e>
 800f122:	2400      	movs	r4, #0
 800f124:	68c3      	ldr	r3, [r0, #12]
 800f126:	9904      	ldr	r1, [sp, #16]
 800f128:	60c4      	str	r4, [r0, #12]
 800f12a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f12c:	f001 fa82 	bl	8010634 <__mcmp>
 800f130:	42a0      	cmp	r0, r4
 800f132:	da6b      	bge.n	800f20c <_strtod_l+0x884>
 800f134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f136:	ea53 0308 	orrs.w	r3, r3, r8
 800f13a:	f040 8091 	bne.w	800f260 <_strtod_l+0x8d8>
 800f13e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f142:	2b00      	cmp	r3, #0
 800f144:	f040 808c 	bne.w	800f260 <_strtod_l+0x8d8>
 800f148:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f14c:	0d1b      	lsrs	r3, r3, #20
 800f14e:	051b      	lsls	r3, r3, #20
 800f150:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f154:	f240 8084 	bls.w	800f260 <_strtod_l+0x8d8>
 800f158:	f8db 3014 	ldr.w	r3, [fp, #20]
 800f15c:	b91b      	cbnz	r3, 800f166 <_strtod_l+0x7de>
 800f15e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f162:	2b01      	cmp	r3, #1
 800f164:	dd7c      	ble.n	800f260 <_strtod_l+0x8d8>
 800f166:	4659      	mov	r1, fp
 800f168:	2201      	movs	r2, #1
 800f16a:	4650      	mov	r0, sl
 800f16c:	f001 f9f2 	bl	8010554 <__lshift>
 800f170:	9904      	ldr	r1, [sp, #16]
 800f172:	4683      	mov	fp, r0
 800f174:	f001 fa5e 	bl	8010634 <__mcmp>
 800f178:	2800      	cmp	r0, #0
 800f17a:	dd71      	ble.n	800f260 <_strtod_l+0x8d8>
 800f17c:	9905      	ldr	r1, [sp, #20]
 800f17e:	464b      	mov	r3, r9
 800f180:	4a20      	ldr	r2, [pc, #128]	; (800f204 <_strtod_l+0x87c>)
 800f182:	2900      	cmp	r1, #0
 800f184:	f000 808c 	beq.w	800f2a0 <_strtod_l+0x918>
 800f188:	ea02 0109 	and.w	r1, r2, r9
 800f18c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f190:	f300 8086 	bgt.w	800f2a0 <_strtod_l+0x918>
 800f194:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f198:	f77f aeaa 	ble.w	800eef0 <_strtod_l+0x568>
 800f19c:	4640      	mov	r0, r8
 800f19e:	4649      	mov	r1, r9
 800f1a0:	4b19      	ldr	r3, [pc, #100]	; (800f208 <_strtod_l+0x880>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f7f1 fa0e 	bl	80005c4 <__aeabi_dmul>
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	4303      	orrs	r3, r0
 800f1ac:	bf08      	it	eq
 800f1ae:	2322      	moveq	r3, #34	; 0x22
 800f1b0:	4680      	mov	r8, r0
 800f1b2:	4689      	mov	r9, r1
 800f1b4:	bf08      	it	eq
 800f1b6:	f8ca 3000 	streq.w	r3, [sl]
 800f1ba:	e62f      	b.n	800ee1c <_strtod_l+0x494>
 800f1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f1c4:	ea03 0808 	and.w	r8, r3, r8
 800f1c8:	e6e0      	b.n	800ef8c <_strtod_l+0x604>
 800f1ca:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800f1ce:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800f1d2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800f1d6:	35e2      	adds	r5, #226	; 0xe2
 800f1d8:	fa07 f505 	lsl.w	r5, r7, r5
 800f1dc:	970f      	str	r7, [sp, #60]	; 0x3c
 800f1de:	e747      	b.n	800f070 <_strtod_l+0x6e8>
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	2500      	movs	r5, #0
 800f1e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1e6:	e743      	b.n	800f070 <_strtod_l+0x6e8>
 800f1e8:	463a      	mov	r2, r7
 800f1ea:	4650      	mov	r0, sl
 800f1ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f1ee:	f001 f9b1 	bl	8010554 <__lshift>
 800f1f2:	901a      	str	r0, [sp, #104]	; 0x68
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	f47f af69 	bne.w	800f0cc <_strtod_l+0x744>
 800f1fa:	e604      	b.n	800ee06 <_strtod_l+0x47e>
 800f1fc:	08012f08 	.word	0x08012f08
 800f200:	fffffc02 	.word	0xfffffc02
 800f204:	7ff00000 	.word	0x7ff00000
 800f208:	39500000 	.word	0x39500000
 800f20c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f210:	d165      	bne.n	800f2de <_strtod_l+0x956>
 800f212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f214:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f218:	b35a      	cbz	r2, 800f272 <_strtod_l+0x8ea>
 800f21a:	4a99      	ldr	r2, [pc, #612]	; (800f480 <_strtod_l+0xaf8>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d12b      	bne.n	800f278 <_strtod_l+0x8f0>
 800f220:	9b05      	ldr	r3, [sp, #20]
 800f222:	4641      	mov	r1, r8
 800f224:	b303      	cbz	r3, 800f268 <_strtod_l+0x8e0>
 800f226:	464a      	mov	r2, r9
 800f228:	4b96      	ldr	r3, [pc, #600]	; (800f484 <_strtod_l+0xafc>)
 800f22a:	4013      	ands	r3, r2
 800f22c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f230:	f04f 32ff 	mov.w	r2, #4294967295
 800f234:	d81b      	bhi.n	800f26e <_strtod_l+0x8e6>
 800f236:	0d1b      	lsrs	r3, r3, #20
 800f238:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f23c:	fa02 f303 	lsl.w	r3, r2, r3
 800f240:	4299      	cmp	r1, r3
 800f242:	d119      	bne.n	800f278 <_strtod_l+0x8f0>
 800f244:	4b90      	ldr	r3, [pc, #576]	; (800f488 <_strtod_l+0xb00>)
 800f246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f248:	429a      	cmp	r2, r3
 800f24a:	d102      	bne.n	800f252 <_strtod_l+0x8ca>
 800f24c:	3101      	adds	r1, #1
 800f24e:	f43f adda 	beq.w	800ee06 <_strtod_l+0x47e>
 800f252:	f04f 0800 	mov.w	r8, #0
 800f256:	4b8b      	ldr	r3, [pc, #556]	; (800f484 <_strtod_l+0xafc>)
 800f258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f25a:	401a      	ands	r2, r3
 800f25c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800f260:	9b05      	ldr	r3, [sp, #20]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d19a      	bne.n	800f19c <_strtod_l+0x814>
 800f266:	e5d9      	b.n	800ee1c <_strtod_l+0x494>
 800f268:	f04f 33ff 	mov.w	r3, #4294967295
 800f26c:	e7e8      	b.n	800f240 <_strtod_l+0x8b8>
 800f26e:	4613      	mov	r3, r2
 800f270:	e7e6      	b.n	800f240 <_strtod_l+0x8b8>
 800f272:	ea53 0308 	orrs.w	r3, r3, r8
 800f276:	d081      	beq.n	800f17c <_strtod_l+0x7f4>
 800f278:	b1e5      	cbz	r5, 800f2b4 <_strtod_l+0x92c>
 800f27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f27c:	421d      	tst	r5, r3
 800f27e:	d0ef      	beq.n	800f260 <_strtod_l+0x8d8>
 800f280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f282:	4640      	mov	r0, r8
 800f284:	4649      	mov	r1, r9
 800f286:	9a05      	ldr	r2, [sp, #20]
 800f288:	b1c3      	cbz	r3, 800f2bc <_strtod_l+0x934>
 800f28a:	f7ff fb59 	bl	800e940 <sulp>
 800f28e:	4602      	mov	r2, r0
 800f290:	460b      	mov	r3, r1
 800f292:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f296:	f7f0 ffdf 	bl	8000258 <__adddf3>
 800f29a:	4680      	mov	r8, r0
 800f29c:	4689      	mov	r9, r1
 800f29e:	e7df      	b.n	800f260 <_strtod_l+0x8d8>
 800f2a0:	4013      	ands	r3, r2
 800f2a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f2a6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f2aa:	f04f 38ff 	mov.w	r8, #4294967295
 800f2ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f2b2:	e7d5      	b.n	800f260 <_strtod_l+0x8d8>
 800f2b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2b6:	ea13 0f08 	tst.w	r3, r8
 800f2ba:	e7e0      	b.n	800f27e <_strtod_l+0x8f6>
 800f2bc:	f7ff fb40 	bl	800e940 <sulp>
 800f2c0:	4602      	mov	r2, r0
 800f2c2:	460b      	mov	r3, r1
 800f2c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f2c8:	f7f0 ffc4 	bl	8000254 <__aeabi_dsub>
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	4680      	mov	r8, r0
 800f2d2:	4689      	mov	r9, r1
 800f2d4:	f7f1 fbde 	bl	8000a94 <__aeabi_dcmpeq>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	d0c1      	beq.n	800f260 <_strtod_l+0x8d8>
 800f2dc:	e608      	b.n	800eef0 <_strtod_l+0x568>
 800f2de:	4658      	mov	r0, fp
 800f2e0:	9904      	ldr	r1, [sp, #16]
 800f2e2:	f001 fb25 	bl	8010930 <__ratio>
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	460f      	mov	r7, r1
 800f2f0:	f7f1 fbe4 	bl	8000abc <__aeabi_dcmple>
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d070      	beq.n	800f3da <_strtod_l+0xa52>
 800f2f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d042      	beq.n	800f384 <_strtod_l+0x9fc>
 800f2fe:	2600      	movs	r6, #0
 800f300:	4f62      	ldr	r7, [pc, #392]	; (800f48c <_strtod_l+0xb04>)
 800f302:	4d62      	ldr	r5, [pc, #392]	; (800f48c <_strtod_l+0xb04>)
 800f304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f30a:	0d1b      	lsrs	r3, r3, #20
 800f30c:	051b      	lsls	r3, r3, #20
 800f30e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f310:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f312:	4b5f      	ldr	r3, [pc, #380]	; (800f490 <_strtod_l+0xb08>)
 800f314:	429a      	cmp	r2, r3
 800f316:	f040 80c3 	bne.w	800f4a0 <_strtod_l+0xb18>
 800f31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f31c:	4640      	mov	r0, r8
 800f31e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800f322:	4649      	mov	r1, r9
 800f324:	f001 fa2e 	bl	8010784 <__ulp>
 800f328:	4602      	mov	r2, r0
 800f32a:	460b      	mov	r3, r1
 800f32c:	4630      	mov	r0, r6
 800f32e:	4639      	mov	r1, r7
 800f330:	f7f1 f948 	bl	80005c4 <__aeabi_dmul>
 800f334:	4642      	mov	r2, r8
 800f336:	464b      	mov	r3, r9
 800f338:	f7f0 ff8e 	bl	8000258 <__adddf3>
 800f33c:	460b      	mov	r3, r1
 800f33e:	4951      	ldr	r1, [pc, #324]	; (800f484 <_strtod_l+0xafc>)
 800f340:	4a54      	ldr	r2, [pc, #336]	; (800f494 <_strtod_l+0xb0c>)
 800f342:	4019      	ands	r1, r3
 800f344:	4291      	cmp	r1, r2
 800f346:	4680      	mov	r8, r0
 800f348:	d95d      	bls.n	800f406 <_strtod_l+0xa7e>
 800f34a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f34c:	4b4e      	ldr	r3, [pc, #312]	; (800f488 <_strtod_l+0xb00>)
 800f34e:	429a      	cmp	r2, r3
 800f350:	d103      	bne.n	800f35a <_strtod_l+0x9d2>
 800f352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f354:	3301      	adds	r3, #1
 800f356:	f43f ad56 	beq.w	800ee06 <_strtod_l+0x47e>
 800f35a:	f04f 38ff 	mov.w	r8, #4294967295
 800f35e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800f488 <_strtod_l+0xb00>
 800f362:	4650      	mov	r0, sl
 800f364:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f366:	f000 fedd 	bl	8010124 <_Bfree>
 800f36a:	4650      	mov	r0, sl
 800f36c:	9906      	ldr	r1, [sp, #24]
 800f36e:	f000 fed9 	bl	8010124 <_Bfree>
 800f372:	4650      	mov	r0, sl
 800f374:	9904      	ldr	r1, [sp, #16]
 800f376:	f000 fed5 	bl	8010124 <_Bfree>
 800f37a:	4659      	mov	r1, fp
 800f37c:	4650      	mov	r0, sl
 800f37e:	f000 fed1 	bl	8010124 <_Bfree>
 800f382:	e627      	b.n	800efd4 <_strtod_l+0x64c>
 800f384:	f1b8 0f00 	cmp.w	r8, #0
 800f388:	d119      	bne.n	800f3be <_strtod_l+0xa36>
 800f38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f38c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f390:	b9e3      	cbnz	r3, 800f3cc <_strtod_l+0xa44>
 800f392:	2200      	movs	r2, #0
 800f394:	4630      	mov	r0, r6
 800f396:	4639      	mov	r1, r7
 800f398:	4b3c      	ldr	r3, [pc, #240]	; (800f48c <_strtod_l+0xb04>)
 800f39a:	f7f1 fb85 	bl	8000aa8 <__aeabi_dcmplt>
 800f39e:	b9c8      	cbnz	r0, 800f3d4 <_strtod_l+0xa4c>
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	4639      	mov	r1, r7
 800f3a6:	4b3c      	ldr	r3, [pc, #240]	; (800f498 <_strtod_l+0xb10>)
 800f3a8:	f7f1 f90c 	bl	80005c4 <__aeabi_dmul>
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	460d      	mov	r5, r1
 800f3b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800f3b4:	9416      	str	r4, [sp, #88]	; 0x58
 800f3b6:	9317      	str	r3, [sp, #92]	; 0x5c
 800f3b8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800f3bc:	e7a2      	b.n	800f304 <_strtod_l+0x97c>
 800f3be:	f1b8 0f01 	cmp.w	r8, #1
 800f3c2:	d103      	bne.n	800f3cc <_strtod_l+0xa44>
 800f3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	f43f ad92 	beq.w	800eef0 <_strtod_l+0x568>
 800f3cc:	2600      	movs	r6, #0
 800f3ce:	2400      	movs	r4, #0
 800f3d0:	4f32      	ldr	r7, [pc, #200]	; (800f49c <_strtod_l+0xb14>)
 800f3d2:	e796      	b.n	800f302 <_strtod_l+0x97a>
 800f3d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f3d6:	4d30      	ldr	r5, [pc, #192]	; (800f498 <_strtod_l+0xb10>)
 800f3d8:	e7ea      	b.n	800f3b0 <_strtod_l+0xa28>
 800f3da:	4b2f      	ldr	r3, [pc, #188]	; (800f498 <_strtod_l+0xb10>)
 800f3dc:	2200      	movs	r2, #0
 800f3de:	4630      	mov	r0, r6
 800f3e0:	4639      	mov	r1, r7
 800f3e2:	f7f1 f8ef 	bl	80005c4 <__aeabi_dmul>
 800f3e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	460d      	mov	r5, r1
 800f3ec:	b933      	cbnz	r3, 800f3fc <_strtod_l+0xa74>
 800f3ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3f2:	9010      	str	r0, [sp, #64]	; 0x40
 800f3f4:	9311      	str	r3, [sp, #68]	; 0x44
 800f3f6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f3fa:	e783      	b.n	800f304 <_strtod_l+0x97c>
 800f3fc:	4602      	mov	r2, r0
 800f3fe:	460b      	mov	r3, r1
 800f400:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800f404:	e7f7      	b.n	800f3f6 <_strtod_l+0xa6e>
 800f406:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f40a:	9b05      	ldr	r3, [sp, #20]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d1a8      	bne.n	800f362 <_strtod_l+0x9da>
 800f410:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f414:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f416:	0d1b      	lsrs	r3, r3, #20
 800f418:	051b      	lsls	r3, r3, #20
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d1a1      	bne.n	800f362 <_strtod_l+0x9da>
 800f41e:	4620      	mov	r0, r4
 800f420:	4629      	mov	r1, r5
 800f422:	f7f1 fef9 	bl	8001218 <__aeabi_d2lz>
 800f426:	f7f1 f89f 	bl	8000568 <__aeabi_l2d>
 800f42a:	4602      	mov	r2, r0
 800f42c:	460b      	mov	r3, r1
 800f42e:	4620      	mov	r0, r4
 800f430:	4629      	mov	r1, r5
 800f432:	f7f0 ff0f 	bl	8000254 <__aeabi_dsub>
 800f436:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f438:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f43c:	ea43 0308 	orr.w	r3, r3, r8
 800f440:	4313      	orrs	r3, r2
 800f442:	4604      	mov	r4, r0
 800f444:	460d      	mov	r5, r1
 800f446:	d066      	beq.n	800f516 <_strtod_l+0xb8e>
 800f448:	a309      	add	r3, pc, #36	; (adr r3, 800f470 <_strtod_l+0xae8>)
 800f44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44e:	f7f1 fb2b 	bl	8000aa8 <__aeabi_dcmplt>
 800f452:	2800      	cmp	r0, #0
 800f454:	f47f ace2 	bne.w	800ee1c <_strtod_l+0x494>
 800f458:	a307      	add	r3, pc, #28	; (adr r3, 800f478 <_strtod_l+0xaf0>)
 800f45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45e:	4620      	mov	r0, r4
 800f460:	4629      	mov	r1, r5
 800f462:	f7f1 fb3f 	bl	8000ae4 <__aeabi_dcmpgt>
 800f466:	2800      	cmp	r0, #0
 800f468:	f43f af7b 	beq.w	800f362 <_strtod_l+0x9da>
 800f46c:	e4d6      	b.n	800ee1c <_strtod_l+0x494>
 800f46e:	bf00      	nop
 800f470:	94a03595 	.word	0x94a03595
 800f474:	3fdfffff 	.word	0x3fdfffff
 800f478:	35afe535 	.word	0x35afe535
 800f47c:	3fe00000 	.word	0x3fe00000
 800f480:	000fffff 	.word	0x000fffff
 800f484:	7ff00000 	.word	0x7ff00000
 800f488:	7fefffff 	.word	0x7fefffff
 800f48c:	3ff00000 	.word	0x3ff00000
 800f490:	7fe00000 	.word	0x7fe00000
 800f494:	7c9fffff 	.word	0x7c9fffff
 800f498:	3fe00000 	.word	0x3fe00000
 800f49c:	bff00000 	.word	0xbff00000
 800f4a0:	9b05      	ldr	r3, [sp, #20]
 800f4a2:	b313      	cbz	r3, 800f4ea <_strtod_l+0xb62>
 800f4a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f4aa:	d81e      	bhi.n	800f4ea <_strtod_l+0xb62>
 800f4ac:	a326      	add	r3, pc, #152	; (adr r3, 800f548 <_strtod_l+0xbc0>)
 800f4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	f7f1 fb01 	bl	8000abc <__aeabi_dcmple>
 800f4ba:	b190      	cbz	r0, 800f4e2 <_strtod_l+0xb5a>
 800f4bc:	4629      	mov	r1, r5
 800f4be:	4620      	mov	r0, r4
 800f4c0:	f7f1 fb30 	bl	8000b24 <__aeabi_d2uiz>
 800f4c4:	2801      	cmp	r0, #1
 800f4c6:	bf38      	it	cc
 800f4c8:	2001      	movcc	r0, #1
 800f4ca:	f7f1 f801 	bl	80004d0 <__aeabi_ui2d>
 800f4ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4d0:	4604      	mov	r4, r0
 800f4d2:	460d      	mov	r5, r1
 800f4d4:	b9d3      	cbnz	r3, 800f50c <_strtod_l+0xb84>
 800f4d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4da:	9012      	str	r0, [sp, #72]	; 0x48
 800f4dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800f4de:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800f4e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f4e4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800f4e8:	1a9f      	subs	r7, r3, r2
 800f4ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f4ee:	f001 f949 	bl	8010784 <__ulp>
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	4639      	mov	r1, r7
 800f4fa:	f7f1 f863 	bl	80005c4 <__aeabi_dmul>
 800f4fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f502:	f7f0 fea9 	bl	8000258 <__adddf3>
 800f506:	4680      	mov	r8, r0
 800f508:	4689      	mov	r9, r1
 800f50a:	e77e      	b.n	800f40a <_strtod_l+0xa82>
 800f50c:	4602      	mov	r2, r0
 800f50e:	460b      	mov	r3, r1
 800f510:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800f514:	e7e3      	b.n	800f4de <_strtod_l+0xb56>
 800f516:	a30e      	add	r3, pc, #56	; (adr r3, 800f550 <_strtod_l+0xbc8>)
 800f518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51c:	f7f1 fac4 	bl	8000aa8 <__aeabi_dcmplt>
 800f520:	e7a1      	b.n	800f466 <_strtod_l+0xade>
 800f522:	2300      	movs	r3, #0
 800f524:	930a      	str	r3, [sp, #40]	; 0x28
 800f526:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f528:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f52a:	6013      	str	r3, [r2, #0]
 800f52c:	f7ff ba71 	b.w	800ea12 <_strtod_l+0x8a>
 800f530:	2a65      	cmp	r2, #101	; 0x65
 800f532:	f43f ab63 	beq.w	800ebfc <_strtod_l+0x274>
 800f536:	2a45      	cmp	r2, #69	; 0x45
 800f538:	f43f ab60 	beq.w	800ebfc <_strtod_l+0x274>
 800f53c:	2301      	movs	r3, #1
 800f53e:	f7ff bb95 	b.w	800ec6c <_strtod_l+0x2e4>
 800f542:	bf00      	nop
 800f544:	f3af 8000 	nop.w
 800f548:	ffc00000 	.word	0xffc00000
 800f54c:	41dfffff 	.word	0x41dfffff
 800f550:	94a03595 	.word	0x94a03595
 800f554:	3fcfffff 	.word	0x3fcfffff

0800f558 <strtof>:
 800f558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f55c:	4f22      	ldr	r7, [pc, #136]	; (800f5e8 <strtof+0x90>)
 800f55e:	460a      	mov	r2, r1
 800f560:	4b22      	ldr	r3, [pc, #136]	; (800f5ec <strtof+0x94>)
 800f562:	4601      	mov	r1, r0
 800f564:	6838      	ldr	r0, [r7, #0]
 800f566:	f7ff fa0f 	bl	800e988 <_strtod_l>
 800f56a:	4602      	mov	r2, r0
 800f56c:	460b      	mov	r3, r1
 800f56e:	4606      	mov	r6, r0
 800f570:	460c      	mov	r4, r1
 800f572:	f7f1 fac1 	bl	8000af8 <__aeabi_dcmpun>
 800f576:	b168      	cbz	r0, 800f594 <strtof+0x3c>
 800f578:	2c00      	cmp	r4, #0
 800f57a:	481d      	ldr	r0, [pc, #116]	; (800f5f0 <strtof+0x98>)
 800f57c:	da06      	bge.n	800f58c <strtof+0x34>
 800f57e:	f001 ff51 	bl	8011424 <nanf>
 800f582:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800f586:	4628      	mov	r0, r5
 800f588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f58c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f590:	f001 bf48 	b.w	8011424 <nanf>
 800f594:	4621      	mov	r1, r4
 800f596:	4630      	mov	r0, r6
 800f598:	f7f1 fae4 	bl	8000b64 <__aeabi_d2f>
 800f59c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	4914      	ldr	r1, [pc, #80]	; (800f5f4 <strtof+0x9c>)
 800f5a4:	4640      	mov	r0, r8
 800f5a6:	f7f1 fe01 	bl	80011ac <__aeabi_fcmpun>
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d1eb      	bne.n	800f586 <strtof+0x2e>
 800f5ae:	4640      	mov	r0, r8
 800f5b0:	4910      	ldr	r1, [pc, #64]	; (800f5f4 <strtof+0x9c>)
 800f5b2:	f7f1 fddd 	bl	8001170 <__aeabi_fcmple>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	d1e5      	bne.n	800f586 <strtof+0x2e>
 800f5ba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f5be:	f04f 32ff 	mov.w	r2, #4294967295
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	4621      	mov	r1, r4
 800f5c6:	4b0c      	ldr	r3, [pc, #48]	; (800f5f8 <strtof+0xa0>)
 800f5c8:	f7f1 fa96 	bl	8000af8 <__aeabi_dcmpun>
 800f5cc:	b940      	cbnz	r0, 800f5e0 <strtof+0x88>
 800f5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	4621      	mov	r1, r4
 800f5d6:	4b08      	ldr	r3, [pc, #32]	; (800f5f8 <strtof+0xa0>)
 800f5d8:	f7f1 fa70 	bl	8000abc <__aeabi_dcmple>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d0d2      	beq.n	800f586 <strtof+0x2e>
 800f5e0:	2222      	movs	r2, #34	; 0x22
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	601a      	str	r2, [r3, #0]
 800f5e6:	e7ce      	b.n	800f586 <strtof+0x2e>
 800f5e8:	20000050 	.word	0x20000050
 800f5ec:	200000b8 	.word	0x200000b8
 800f5f0:	08013302 	.word	0x08013302
 800f5f4:	7f7fffff 	.word	0x7f7fffff
 800f5f8:	7fefffff 	.word	0x7fefffff

0800f5fc <__strtok_r>:
 800f5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5fe:	b908      	cbnz	r0, 800f604 <__strtok_r+0x8>
 800f600:	6810      	ldr	r0, [r2, #0]
 800f602:	b188      	cbz	r0, 800f628 <__strtok_r+0x2c>
 800f604:	4604      	mov	r4, r0
 800f606:	460f      	mov	r7, r1
 800f608:	4620      	mov	r0, r4
 800f60a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f60e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f612:	b91e      	cbnz	r6, 800f61c <__strtok_r+0x20>
 800f614:	b965      	cbnz	r5, 800f630 <__strtok_r+0x34>
 800f616:	4628      	mov	r0, r5
 800f618:	6015      	str	r5, [r2, #0]
 800f61a:	e005      	b.n	800f628 <__strtok_r+0x2c>
 800f61c:	42b5      	cmp	r5, r6
 800f61e:	d1f6      	bne.n	800f60e <__strtok_r+0x12>
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1f0      	bne.n	800f606 <__strtok_r+0xa>
 800f624:	6014      	str	r4, [r2, #0]
 800f626:	7003      	strb	r3, [r0, #0]
 800f628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f62a:	461c      	mov	r4, r3
 800f62c:	e00c      	b.n	800f648 <__strtok_r+0x4c>
 800f62e:	b915      	cbnz	r5, 800f636 <__strtok_r+0x3a>
 800f630:	460e      	mov	r6, r1
 800f632:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f636:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f63a:	42ab      	cmp	r3, r5
 800f63c:	d1f7      	bne.n	800f62e <__strtok_r+0x32>
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d0f3      	beq.n	800f62a <__strtok_r+0x2e>
 800f642:	2300      	movs	r3, #0
 800f644:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f648:	6014      	str	r4, [r2, #0]
 800f64a:	e7ed      	b.n	800f628 <__strtok_r+0x2c>

0800f64c <strtok_r>:
 800f64c:	2301      	movs	r3, #1
 800f64e:	f7ff bfd5 	b.w	800f5fc <__strtok_r>
	...

0800f654 <_strtoul_l.constprop.0>:
 800f654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f658:	4686      	mov	lr, r0
 800f65a:	460d      	mov	r5, r1
 800f65c:	4f35      	ldr	r7, [pc, #212]	; (800f734 <_strtoul_l.constprop.0+0xe0>)
 800f65e:	4628      	mov	r0, r5
 800f660:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f664:	5de6      	ldrb	r6, [r4, r7]
 800f666:	f016 0608 	ands.w	r6, r6, #8
 800f66a:	d1f8      	bne.n	800f65e <_strtoul_l.constprop.0+0xa>
 800f66c:	2c2d      	cmp	r4, #45	; 0x2d
 800f66e:	d12f      	bne.n	800f6d0 <_strtoul_l.constprop.0+0x7c>
 800f670:	2601      	movs	r6, #1
 800f672:	782c      	ldrb	r4, [r5, #0]
 800f674:	1c85      	adds	r5, r0, #2
 800f676:	2b00      	cmp	r3, #0
 800f678:	d057      	beq.n	800f72a <_strtoul_l.constprop.0+0xd6>
 800f67a:	2b10      	cmp	r3, #16
 800f67c:	d109      	bne.n	800f692 <_strtoul_l.constprop.0+0x3e>
 800f67e:	2c30      	cmp	r4, #48	; 0x30
 800f680:	d107      	bne.n	800f692 <_strtoul_l.constprop.0+0x3e>
 800f682:	7828      	ldrb	r0, [r5, #0]
 800f684:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f688:	2858      	cmp	r0, #88	; 0x58
 800f68a:	d149      	bne.n	800f720 <_strtoul_l.constprop.0+0xcc>
 800f68c:	2310      	movs	r3, #16
 800f68e:	786c      	ldrb	r4, [r5, #1]
 800f690:	3502      	adds	r5, #2
 800f692:	f04f 38ff 	mov.w	r8, #4294967295
 800f696:	fbb8 f8f3 	udiv	r8, r8, r3
 800f69a:	2700      	movs	r7, #0
 800f69c:	fb03 f908 	mul.w	r9, r3, r8
 800f6a0:	4638      	mov	r0, r7
 800f6a2:	ea6f 0909 	mvn.w	r9, r9
 800f6a6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f6aa:	f1bc 0f09 	cmp.w	ip, #9
 800f6ae:	d814      	bhi.n	800f6da <_strtoul_l.constprop.0+0x86>
 800f6b0:	4664      	mov	r4, ip
 800f6b2:	42a3      	cmp	r3, r4
 800f6b4:	dd22      	ble.n	800f6fc <_strtoul_l.constprop.0+0xa8>
 800f6b6:	2f00      	cmp	r7, #0
 800f6b8:	db1d      	blt.n	800f6f6 <_strtoul_l.constprop.0+0xa2>
 800f6ba:	4580      	cmp	r8, r0
 800f6bc:	d31b      	bcc.n	800f6f6 <_strtoul_l.constprop.0+0xa2>
 800f6be:	d101      	bne.n	800f6c4 <_strtoul_l.constprop.0+0x70>
 800f6c0:	45a1      	cmp	r9, r4
 800f6c2:	db18      	blt.n	800f6f6 <_strtoul_l.constprop.0+0xa2>
 800f6c4:	2701      	movs	r7, #1
 800f6c6:	fb00 4003 	mla	r0, r0, r3, r4
 800f6ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f6ce:	e7ea      	b.n	800f6a6 <_strtoul_l.constprop.0+0x52>
 800f6d0:	2c2b      	cmp	r4, #43	; 0x2b
 800f6d2:	bf04      	itt	eq
 800f6d4:	782c      	ldrbeq	r4, [r5, #0]
 800f6d6:	1c85      	addeq	r5, r0, #2
 800f6d8:	e7cd      	b.n	800f676 <_strtoul_l.constprop.0+0x22>
 800f6da:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f6de:	f1bc 0f19 	cmp.w	ip, #25
 800f6e2:	d801      	bhi.n	800f6e8 <_strtoul_l.constprop.0+0x94>
 800f6e4:	3c37      	subs	r4, #55	; 0x37
 800f6e6:	e7e4      	b.n	800f6b2 <_strtoul_l.constprop.0+0x5e>
 800f6e8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f6ec:	f1bc 0f19 	cmp.w	ip, #25
 800f6f0:	d804      	bhi.n	800f6fc <_strtoul_l.constprop.0+0xa8>
 800f6f2:	3c57      	subs	r4, #87	; 0x57
 800f6f4:	e7dd      	b.n	800f6b2 <_strtoul_l.constprop.0+0x5e>
 800f6f6:	f04f 37ff 	mov.w	r7, #4294967295
 800f6fa:	e7e6      	b.n	800f6ca <_strtoul_l.constprop.0+0x76>
 800f6fc:	2f00      	cmp	r7, #0
 800f6fe:	da07      	bge.n	800f710 <_strtoul_l.constprop.0+0xbc>
 800f700:	2322      	movs	r3, #34	; 0x22
 800f702:	f04f 30ff 	mov.w	r0, #4294967295
 800f706:	f8ce 3000 	str.w	r3, [lr]
 800f70a:	b932      	cbnz	r2, 800f71a <_strtoul_l.constprop.0+0xc6>
 800f70c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f710:	b106      	cbz	r6, 800f714 <_strtoul_l.constprop.0+0xc0>
 800f712:	4240      	negs	r0, r0
 800f714:	2a00      	cmp	r2, #0
 800f716:	d0f9      	beq.n	800f70c <_strtoul_l.constprop.0+0xb8>
 800f718:	b107      	cbz	r7, 800f71c <_strtoul_l.constprop.0+0xc8>
 800f71a:	1e69      	subs	r1, r5, #1
 800f71c:	6011      	str	r1, [r2, #0]
 800f71e:	e7f5      	b.n	800f70c <_strtoul_l.constprop.0+0xb8>
 800f720:	2430      	movs	r4, #48	; 0x30
 800f722:	2b00      	cmp	r3, #0
 800f724:	d1b5      	bne.n	800f692 <_strtoul_l.constprop.0+0x3e>
 800f726:	2308      	movs	r3, #8
 800f728:	e7b3      	b.n	800f692 <_strtoul_l.constprop.0+0x3e>
 800f72a:	2c30      	cmp	r4, #48	; 0x30
 800f72c:	d0a9      	beq.n	800f682 <_strtoul_l.constprop.0+0x2e>
 800f72e:	230a      	movs	r3, #10
 800f730:	e7af      	b.n	800f692 <_strtoul_l.constprop.0+0x3e>
 800f732:	bf00      	nop
 800f734:	08012f31 	.word	0x08012f31

0800f738 <strtoul>:
 800f738:	4613      	mov	r3, r2
 800f73a:	460a      	mov	r2, r1
 800f73c:	4601      	mov	r1, r0
 800f73e:	4802      	ldr	r0, [pc, #8]	; (800f748 <strtoul+0x10>)
 800f740:	6800      	ldr	r0, [r0, #0]
 800f742:	f7ff bf87 	b.w	800f654 <_strtoul_l.constprop.0>
 800f746:	bf00      	nop
 800f748:	20000050 	.word	0x20000050

0800f74c <_vsniprintf_r>:
 800f74c:	b530      	push	{r4, r5, lr}
 800f74e:	4614      	mov	r4, r2
 800f750:	2c00      	cmp	r4, #0
 800f752:	4605      	mov	r5, r0
 800f754:	461a      	mov	r2, r3
 800f756:	b09b      	sub	sp, #108	; 0x6c
 800f758:	da05      	bge.n	800f766 <_vsniprintf_r+0x1a>
 800f75a:	238b      	movs	r3, #139	; 0x8b
 800f75c:	6003      	str	r3, [r0, #0]
 800f75e:	f04f 30ff 	mov.w	r0, #4294967295
 800f762:	b01b      	add	sp, #108	; 0x6c
 800f764:	bd30      	pop	{r4, r5, pc}
 800f766:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f76a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f76e:	bf0c      	ite	eq
 800f770:	4623      	moveq	r3, r4
 800f772:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f776:	9302      	str	r3, [sp, #8]
 800f778:	9305      	str	r3, [sp, #20]
 800f77a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f77e:	9100      	str	r1, [sp, #0]
 800f780:	9104      	str	r1, [sp, #16]
 800f782:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f786:	4669      	mov	r1, sp
 800f788:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f78a:	f001 fa47 	bl	8010c1c <_svfiprintf_r>
 800f78e:	1c43      	adds	r3, r0, #1
 800f790:	bfbc      	itt	lt
 800f792:	238b      	movlt	r3, #139	; 0x8b
 800f794:	602b      	strlt	r3, [r5, #0]
 800f796:	2c00      	cmp	r4, #0
 800f798:	d0e3      	beq.n	800f762 <_vsniprintf_r+0x16>
 800f79a:	2200      	movs	r2, #0
 800f79c:	9b00      	ldr	r3, [sp, #0]
 800f79e:	701a      	strb	r2, [r3, #0]
 800f7a0:	e7df      	b.n	800f762 <_vsniprintf_r+0x16>
	...

0800f7a4 <vsniprintf>:
 800f7a4:	b507      	push	{r0, r1, r2, lr}
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	460a      	mov	r2, r1
 800f7ac:	4601      	mov	r1, r0
 800f7ae:	4803      	ldr	r0, [pc, #12]	; (800f7bc <vsniprintf+0x18>)
 800f7b0:	6800      	ldr	r0, [r0, #0]
 800f7b2:	f7ff ffcb 	bl	800f74c <_vsniprintf_r>
 800f7b6:	b003      	add	sp, #12
 800f7b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7bc:	20000050 	.word	0x20000050

0800f7c0 <std>:
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	b510      	push	{r4, lr}
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	e9c0 3300 	strd	r3, r3, [r0]
 800f7ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7ce:	6083      	str	r3, [r0, #8]
 800f7d0:	8181      	strh	r1, [r0, #12]
 800f7d2:	6643      	str	r3, [r0, #100]	; 0x64
 800f7d4:	81c2      	strh	r2, [r0, #14]
 800f7d6:	6183      	str	r3, [r0, #24]
 800f7d8:	4619      	mov	r1, r3
 800f7da:	2208      	movs	r2, #8
 800f7dc:	305c      	adds	r0, #92	; 0x5c
 800f7de:	f7ff f887 	bl	800e8f0 <memset>
 800f7e2:	4b05      	ldr	r3, [pc, #20]	; (800f7f8 <std+0x38>)
 800f7e4:	6224      	str	r4, [r4, #32]
 800f7e6:	6263      	str	r3, [r4, #36]	; 0x24
 800f7e8:	4b04      	ldr	r3, [pc, #16]	; (800f7fc <std+0x3c>)
 800f7ea:	62a3      	str	r3, [r4, #40]	; 0x28
 800f7ec:	4b04      	ldr	r3, [pc, #16]	; (800f800 <std+0x40>)
 800f7ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f7f0:	4b04      	ldr	r3, [pc, #16]	; (800f804 <std+0x44>)
 800f7f2:	6323      	str	r3, [r4, #48]	; 0x30
 800f7f4:	bd10      	pop	{r4, pc}
 800f7f6:	bf00      	nop
 800f7f8:	0801142d 	.word	0x0801142d
 800f7fc:	0801144f 	.word	0x0801144f
 800f800:	08011487 	.word	0x08011487
 800f804:	080114ab 	.word	0x080114ab

0800f808 <_cleanup_r>:
 800f808:	4901      	ldr	r1, [pc, #4]	; (800f810 <_cleanup_r+0x8>)
 800f80a:	f000 b8af 	b.w	800f96c <_fwalk_reent>
 800f80e:	bf00      	nop
 800f810:	080117fd 	.word	0x080117fd

0800f814 <__sfmoreglue>:
 800f814:	2268      	movs	r2, #104	; 0x68
 800f816:	b570      	push	{r4, r5, r6, lr}
 800f818:	1e4d      	subs	r5, r1, #1
 800f81a:	4355      	muls	r5, r2
 800f81c:	460e      	mov	r6, r1
 800f81e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f822:	f001 f92b 	bl	8010a7c <_malloc_r>
 800f826:	4604      	mov	r4, r0
 800f828:	b140      	cbz	r0, 800f83c <__sfmoreglue+0x28>
 800f82a:	2100      	movs	r1, #0
 800f82c:	e9c0 1600 	strd	r1, r6, [r0]
 800f830:	300c      	adds	r0, #12
 800f832:	60a0      	str	r0, [r4, #8]
 800f834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f838:	f7ff f85a 	bl	800e8f0 <memset>
 800f83c:	4620      	mov	r0, r4
 800f83e:	bd70      	pop	{r4, r5, r6, pc}

0800f840 <__sfp_lock_acquire>:
 800f840:	4801      	ldr	r0, [pc, #4]	; (800f848 <__sfp_lock_acquire+0x8>)
 800f842:	f000 bc1a 	b.w	801007a <__retarget_lock_acquire_recursive>
 800f846:	bf00      	nop
 800f848:	20000dfd 	.word	0x20000dfd

0800f84c <__sfp_lock_release>:
 800f84c:	4801      	ldr	r0, [pc, #4]	; (800f854 <__sfp_lock_release+0x8>)
 800f84e:	f000 bc15 	b.w	801007c <__retarget_lock_release_recursive>
 800f852:	bf00      	nop
 800f854:	20000dfd 	.word	0x20000dfd

0800f858 <__sinit_lock_acquire>:
 800f858:	4801      	ldr	r0, [pc, #4]	; (800f860 <__sinit_lock_acquire+0x8>)
 800f85a:	f000 bc0e 	b.w	801007a <__retarget_lock_acquire_recursive>
 800f85e:	bf00      	nop
 800f860:	20000dfe 	.word	0x20000dfe

0800f864 <__sinit_lock_release>:
 800f864:	4801      	ldr	r0, [pc, #4]	; (800f86c <__sinit_lock_release+0x8>)
 800f866:	f000 bc09 	b.w	801007c <__retarget_lock_release_recursive>
 800f86a:	bf00      	nop
 800f86c:	20000dfe 	.word	0x20000dfe

0800f870 <__sinit>:
 800f870:	b510      	push	{r4, lr}
 800f872:	4604      	mov	r4, r0
 800f874:	f7ff fff0 	bl	800f858 <__sinit_lock_acquire>
 800f878:	69a3      	ldr	r3, [r4, #24]
 800f87a:	b11b      	cbz	r3, 800f884 <__sinit+0x14>
 800f87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f880:	f7ff bff0 	b.w	800f864 <__sinit_lock_release>
 800f884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f888:	6523      	str	r3, [r4, #80]	; 0x50
 800f88a:	4b13      	ldr	r3, [pc, #76]	; (800f8d8 <__sinit+0x68>)
 800f88c:	4a13      	ldr	r2, [pc, #76]	; (800f8dc <__sinit+0x6c>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	62a2      	str	r2, [r4, #40]	; 0x28
 800f892:	42a3      	cmp	r3, r4
 800f894:	bf08      	it	eq
 800f896:	2301      	moveq	r3, #1
 800f898:	4620      	mov	r0, r4
 800f89a:	bf08      	it	eq
 800f89c:	61a3      	streq	r3, [r4, #24]
 800f89e:	f000 f81f 	bl	800f8e0 <__sfp>
 800f8a2:	6060      	str	r0, [r4, #4]
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f000 f81b 	bl	800f8e0 <__sfp>
 800f8aa:	60a0      	str	r0, [r4, #8]
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	f000 f817 	bl	800f8e0 <__sfp>
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	2104      	movs	r1, #4
 800f8b6:	60e0      	str	r0, [r4, #12]
 800f8b8:	6860      	ldr	r0, [r4, #4]
 800f8ba:	f7ff ff81 	bl	800f7c0 <std>
 800f8be:	2201      	movs	r2, #1
 800f8c0:	2109      	movs	r1, #9
 800f8c2:	68a0      	ldr	r0, [r4, #8]
 800f8c4:	f7ff ff7c 	bl	800f7c0 <std>
 800f8c8:	2202      	movs	r2, #2
 800f8ca:	2112      	movs	r1, #18
 800f8cc:	68e0      	ldr	r0, [r4, #12]
 800f8ce:	f7ff ff77 	bl	800f7c0 <std>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	61a3      	str	r3, [r4, #24]
 800f8d6:	e7d1      	b.n	800f87c <__sinit+0xc>
 800f8d8:	08012ecc 	.word	0x08012ecc
 800f8dc:	0800f809 	.word	0x0800f809

0800f8e0 <__sfp>:
 800f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e2:	4607      	mov	r7, r0
 800f8e4:	f7ff ffac 	bl	800f840 <__sfp_lock_acquire>
 800f8e8:	4b1e      	ldr	r3, [pc, #120]	; (800f964 <__sfp+0x84>)
 800f8ea:	681e      	ldr	r6, [r3, #0]
 800f8ec:	69b3      	ldr	r3, [r6, #24]
 800f8ee:	b913      	cbnz	r3, 800f8f6 <__sfp+0x16>
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	f7ff ffbd 	bl	800f870 <__sinit>
 800f8f6:	3648      	adds	r6, #72	; 0x48
 800f8f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	d503      	bpl.n	800f908 <__sfp+0x28>
 800f900:	6833      	ldr	r3, [r6, #0]
 800f902:	b30b      	cbz	r3, 800f948 <__sfp+0x68>
 800f904:	6836      	ldr	r6, [r6, #0]
 800f906:	e7f7      	b.n	800f8f8 <__sfp+0x18>
 800f908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f90c:	b9d5      	cbnz	r5, 800f944 <__sfp+0x64>
 800f90e:	4b16      	ldr	r3, [pc, #88]	; (800f968 <__sfp+0x88>)
 800f910:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f914:	60e3      	str	r3, [r4, #12]
 800f916:	6665      	str	r5, [r4, #100]	; 0x64
 800f918:	f000 fbae 	bl	8010078 <__retarget_lock_init_recursive>
 800f91c:	f7ff ff96 	bl	800f84c <__sfp_lock_release>
 800f920:	2208      	movs	r2, #8
 800f922:	4629      	mov	r1, r5
 800f924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f92c:	6025      	str	r5, [r4, #0]
 800f92e:	61a5      	str	r5, [r4, #24]
 800f930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f934:	f7fe ffdc 	bl	800e8f0 <memset>
 800f938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f93c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f940:	4620      	mov	r0, r4
 800f942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f944:	3468      	adds	r4, #104	; 0x68
 800f946:	e7d9      	b.n	800f8fc <__sfp+0x1c>
 800f948:	2104      	movs	r1, #4
 800f94a:	4638      	mov	r0, r7
 800f94c:	f7ff ff62 	bl	800f814 <__sfmoreglue>
 800f950:	4604      	mov	r4, r0
 800f952:	6030      	str	r0, [r6, #0]
 800f954:	2800      	cmp	r0, #0
 800f956:	d1d5      	bne.n	800f904 <__sfp+0x24>
 800f958:	f7ff ff78 	bl	800f84c <__sfp_lock_release>
 800f95c:	230c      	movs	r3, #12
 800f95e:	603b      	str	r3, [r7, #0]
 800f960:	e7ee      	b.n	800f940 <__sfp+0x60>
 800f962:	bf00      	nop
 800f964:	08012ecc 	.word	0x08012ecc
 800f968:	ffff0001 	.word	0xffff0001

0800f96c <_fwalk_reent>:
 800f96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f970:	4606      	mov	r6, r0
 800f972:	4688      	mov	r8, r1
 800f974:	2700      	movs	r7, #0
 800f976:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f97a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f97e:	f1b9 0901 	subs.w	r9, r9, #1
 800f982:	d505      	bpl.n	800f990 <_fwalk_reent+0x24>
 800f984:	6824      	ldr	r4, [r4, #0]
 800f986:	2c00      	cmp	r4, #0
 800f988:	d1f7      	bne.n	800f97a <_fwalk_reent+0xe>
 800f98a:	4638      	mov	r0, r7
 800f98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f990:	89ab      	ldrh	r3, [r5, #12]
 800f992:	2b01      	cmp	r3, #1
 800f994:	d907      	bls.n	800f9a6 <_fwalk_reent+0x3a>
 800f996:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f99a:	3301      	adds	r3, #1
 800f99c:	d003      	beq.n	800f9a6 <_fwalk_reent+0x3a>
 800f99e:	4629      	mov	r1, r5
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	47c0      	blx	r8
 800f9a4:	4307      	orrs	r7, r0
 800f9a6:	3568      	adds	r5, #104	; 0x68
 800f9a8:	e7e9      	b.n	800f97e <_fwalk_reent+0x12>

0800f9aa <rshift>:
 800f9aa:	6903      	ldr	r3, [r0, #16]
 800f9ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f9b4:	f100 0414 	add.w	r4, r0, #20
 800f9b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f9bc:	dd46      	ble.n	800fa4c <rshift+0xa2>
 800f9be:	f011 011f 	ands.w	r1, r1, #31
 800f9c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f9c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f9ca:	d10c      	bne.n	800f9e6 <rshift+0x3c>
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	f100 0710 	add.w	r7, r0, #16
 800f9d2:	42b1      	cmp	r1, r6
 800f9d4:	d335      	bcc.n	800fa42 <rshift+0x98>
 800f9d6:	1a9b      	subs	r3, r3, r2
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	1eea      	subs	r2, r5, #3
 800f9dc:	4296      	cmp	r6, r2
 800f9de:	bf38      	it	cc
 800f9e0:	2300      	movcc	r3, #0
 800f9e2:	4423      	add	r3, r4
 800f9e4:	e015      	b.n	800fa12 <rshift+0x68>
 800f9e6:	46a1      	mov	r9, r4
 800f9e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f9ec:	f1c1 0820 	rsb	r8, r1, #32
 800f9f0:	40cf      	lsrs	r7, r1
 800f9f2:	f105 0e04 	add.w	lr, r5, #4
 800f9f6:	4576      	cmp	r6, lr
 800f9f8:	46f4      	mov	ip, lr
 800f9fa:	d816      	bhi.n	800fa2a <rshift+0x80>
 800f9fc:	1a9a      	subs	r2, r3, r2
 800f9fe:	0092      	lsls	r2, r2, #2
 800fa00:	3a04      	subs	r2, #4
 800fa02:	3501      	adds	r5, #1
 800fa04:	42ae      	cmp	r6, r5
 800fa06:	bf38      	it	cc
 800fa08:	2200      	movcc	r2, #0
 800fa0a:	18a3      	adds	r3, r4, r2
 800fa0c:	50a7      	str	r7, [r4, r2]
 800fa0e:	b107      	cbz	r7, 800fa12 <rshift+0x68>
 800fa10:	3304      	adds	r3, #4
 800fa12:	42a3      	cmp	r3, r4
 800fa14:	eba3 0204 	sub.w	r2, r3, r4
 800fa18:	bf08      	it	eq
 800fa1a:	2300      	moveq	r3, #0
 800fa1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fa20:	6102      	str	r2, [r0, #16]
 800fa22:	bf08      	it	eq
 800fa24:	6143      	streq	r3, [r0, #20]
 800fa26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa2a:	f8dc c000 	ldr.w	ip, [ip]
 800fa2e:	fa0c fc08 	lsl.w	ip, ip, r8
 800fa32:	ea4c 0707 	orr.w	r7, ip, r7
 800fa36:	f849 7b04 	str.w	r7, [r9], #4
 800fa3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fa3e:	40cf      	lsrs	r7, r1
 800fa40:	e7d9      	b.n	800f9f6 <rshift+0x4c>
 800fa42:	f851 cb04 	ldr.w	ip, [r1], #4
 800fa46:	f847 cf04 	str.w	ip, [r7, #4]!
 800fa4a:	e7c2      	b.n	800f9d2 <rshift+0x28>
 800fa4c:	4623      	mov	r3, r4
 800fa4e:	e7e0      	b.n	800fa12 <rshift+0x68>

0800fa50 <__hexdig_fun>:
 800fa50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fa54:	2b09      	cmp	r3, #9
 800fa56:	d802      	bhi.n	800fa5e <__hexdig_fun+0xe>
 800fa58:	3820      	subs	r0, #32
 800fa5a:	b2c0      	uxtb	r0, r0
 800fa5c:	4770      	bx	lr
 800fa5e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fa62:	2b05      	cmp	r3, #5
 800fa64:	d801      	bhi.n	800fa6a <__hexdig_fun+0x1a>
 800fa66:	3847      	subs	r0, #71	; 0x47
 800fa68:	e7f7      	b.n	800fa5a <__hexdig_fun+0xa>
 800fa6a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fa6e:	2b05      	cmp	r3, #5
 800fa70:	d801      	bhi.n	800fa76 <__hexdig_fun+0x26>
 800fa72:	3827      	subs	r0, #39	; 0x27
 800fa74:	e7f1      	b.n	800fa5a <__hexdig_fun+0xa>
 800fa76:	2000      	movs	r0, #0
 800fa78:	4770      	bx	lr
	...

0800fa7c <__gethex>:
 800fa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa80:	b08b      	sub	sp, #44	; 0x2c
 800fa82:	9305      	str	r3, [sp, #20]
 800fa84:	4bb2      	ldr	r3, [pc, #712]	; (800fd50 <__gethex+0x2d4>)
 800fa86:	9002      	str	r0, [sp, #8]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	468b      	mov	fp, r1
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	4690      	mov	r8, r2
 800fa90:	9303      	str	r3, [sp, #12]
 800fa92:	f7f0 fbd3 	bl	800023c <strlen>
 800fa96:	4682      	mov	sl, r0
 800fa98:	9b03      	ldr	r3, [sp, #12]
 800fa9a:	f8db 2000 	ldr.w	r2, [fp]
 800fa9e:	4403      	add	r3, r0
 800faa0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800faa4:	9306      	str	r3, [sp, #24]
 800faa6:	1c93      	adds	r3, r2, #2
 800faa8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800faac:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fab0:	32fe      	adds	r2, #254	; 0xfe
 800fab2:	18d1      	adds	r1, r2, r3
 800fab4:	461f      	mov	r7, r3
 800fab6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800faba:	9101      	str	r1, [sp, #4]
 800fabc:	2830      	cmp	r0, #48	; 0x30
 800fabe:	d0f8      	beq.n	800fab2 <__gethex+0x36>
 800fac0:	f7ff ffc6 	bl	800fa50 <__hexdig_fun>
 800fac4:	4604      	mov	r4, r0
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d13a      	bne.n	800fb40 <__gethex+0xc4>
 800faca:	4652      	mov	r2, sl
 800facc:	4638      	mov	r0, r7
 800face:	9903      	ldr	r1, [sp, #12]
 800fad0:	f001 fcef 	bl	80114b2 <strncmp>
 800fad4:	4605      	mov	r5, r0
 800fad6:	2800      	cmp	r0, #0
 800fad8:	d166      	bne.n	800fba8 <__gethex+0x12c>
 800fada:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fade:	eb07 060a 	add.w	r6, r7, sl
 800fae2:	f7ff ffb5 	bl	800fa50 <__hexdig_fun>
 800fae6:	2800      	cmp	r0, #0
 800fae8:	d060      	beq.n	800fbac <__gethex+0x130>
 800faea:	4633      	mov	r3, r6
 800faec:	7818      	ldrb	r0, [r3, #0]
 800faee:	461f      	mov	r7, r3
 800faf0:	2830      	cmp	r0, #48	; 0x30
 800faf2:	f103 0301 	add.w	r3, r3, #1
 800faf6:	d0f9      	beq.n	800faec <__gethex+0x70>
 800faf8:	f7ff ffaa 	bl	800fa50 <__hexdig_fun>
 800fafc:	2301      	movs	r3, #1
 800fafe:	fab0 f480 	clz	r4, r0
 800fb02:	4635      	mov	r5, r6
 800fb04:	0964      	lsrs	r4, r4, #5
 800fb06:	9301      	str	r3, [sp, #4]
 800fb08:	463a      	mov	r2, r7
 800fb0a:	4616      	mov	r6, r2
 800fb0c:	7830      	ldrb	r0, [r6, #0]
 800fb0e:	3201      	adds	r2, #1
 800fb10:	f7ff ff9e 	bl	800fa50 <__hexdig_fun>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	d1f8      	bne.n	800fb0a <__gethex+0x8e>
 800fb18:	4652      	mov	r2, sl
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	9903      	ldr	r1, [sp, #12]
 800fb1e:	f001 fcc8 	bl	80114b2 <strncmp>
 800fb22:	b980      	cbnz	r0, 800fb46 <__gethex+0xca>
 800fb24:	b94d      	cbnz	r5, 800fb3a <__gethex+0xbe>
 800fb26:	eb06 050a 	add.w	r5, r6, sl
 800fb2a:	462a      	mov	r2, r5
 800fb2c:	4616      	mov	r6, r2
 800fb2e:	7830      	ldrb	r0, [r6, #0]
 800fb30:	3201      	adds	r2, #1
 800fb32:	f7ff ff8d 	bl	800fa50 <__hexdig_fun>
 800fb36:	2800      	cmp	r0, #0
 800fb38:	d1f8      	bne.n	800fb2c <__gethex+0xb0>
 800fb3a:	1bad      	subs	r5, r5, r6
 800fb3c:	00ad      	lsls	r5, r5, #2
 800fb3e:	e004      	b.n	800fb4a <__gethex+0xce>
 800fb40:	2400      	movs	r4, #0
 800fb42:	4625      	mov	r5, r4
 800fb44:	e7e0      	b.n	800fb08 <__gethex+0x8c>
 800fb46:	2d00      	cmp	r5, #0
 800fb48:	d1f7      	bne.n	800fb3a <__gethex+0xbe>
 800fb4a:	7833      	ldrb	r3, [r6, #0]
 800fb4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fb50:	2b50      	cmp	r3, #80	; 0x50
 800fb52:	d139      	bne.n	800fbc8 <__gethex+0x14c>
 800fb54:	7873      	ldrb	r3, [r6, #1]
 800fb56:	2b2b      	cmp	r3, #43	; 0x2b
 800fb58:	d02a      	beq.n	800fbb0 <__gethex+0x134>
 800fb5a:	2b2d      	cmp	r3, #45	; 0x2d
 800fb5c:	d02c      	beq.n	800fbb8 <__gethex+0x13c>
 800fb5e:	f04f 0900 	mov.w	r9, #0
 800fb62:	1c71      	adds	r1, r6, #1
 800fb64:	7808      	ldrb	r0, [r1, #0]
 800fb66:	f7ff ff73 	bl	800fa50 <__hexdig_fun>
 800fb6a:	1e43      	subs	r3, r0, #1
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	2b18      	cmp	r3, #24
 800fb70:	d82a      	bhi.n	800fbc8 <__gethex+0x14c>
 800fb72:	f1a0 0210 	sub.w	r2, r0, #16
 800fb76:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fb7a:	f7ff ff69 	bl	800fa50 <__hexdig_fun>
 800fb7e:	1e43      	subs	r3, r0, #1
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	2b18      	cmp	r3, #24
 800fb84:	d91b      	bls.n	800fbbe <__gethex+0x142>
 800fb86:	f1b9 0f00 	cmp.w	r9, #0
 800fb8a:	d000      	beq.n	800fb8e <__gethex+0x112>
 800fb8c:	4252      	negs	r2, r2
 800fb8e:	4415      	add	r5, r2
 800fb90:	f8cb 1000 	str.w	r1, [fp]
 800fb94:	b1d4      	cbz	r4, 800fbcc <__gethex+0x150>
 800fb96:	9b01      	ldr	r3, [sp, #4]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	bf14      	ite	ne
 800fb9c:	2700      	movne	r7, #0
 800fb9e:	2706      	moveq	r7, #6
 800fba0:	4638      	mov	r0, r7
 800fba2:	b00b      	add	sp, #44	; 0x2c
 800fba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba8:	463e      	mov	r6, r7
 800fbaa:	4625      	mov	r5, r4
 800fbac:	2401      	movs	r4, #1
 800fbae:	e7cc      	b.n	800fb4a <__gethex+0xce>
 800fbb0:	f04f 0900 	mov.w	r9, #0
 800fbb4:	1cb1      	adds	r1, r6, #2
 800fbb6:	e7d5      	b.n	800fb64 <__gethex+0xe8>
 800fbb8:	f04f 0901 	mov.w	r9, #1
 800fbbc:	e7fa      	b.n	800fbb4 <__gethex+0x138>
 800fbbe:	230a      	movs	r3, #10
 800fbc0:	fb03 0202 	mla	r2, r3, r2, r0
 800fbc4:	3a10      	subs	r2, #16
 800fbc6:	e7d6      	b.n	800fb76 <__gethex+0xfa>
 800fbc8:	4631      	mov	r1, r6
 800fbca:	e7e1      	b.n	800fb90 <__gethex+0x114>
 800fbcc:	4621      	mov	r1, r4
 800fbce:	1bf3      	subs	r3, r6, r7
 800fbd0:	3b01      	subs	r3, #1
 800fbd2:	2b07      	cmp	r3, #7
 800fbd4:	dc0a      	bgt.n	800fbec <__gethex+0x170>
 800fbd6:	9802      	ldr	r0, [sp, #8]
 800fbd8:	f000 fa64 	bl	80100a4 <_Balloc>
 800fbdc:	4604      	mov	r4, r0
 800fbde:	b940      	cbnz	r0, 800fbf2 <__gethex+0x176>
 800fbe0:	4602      	mov	r2, r0
 800fbe2:	21de      	movs	r1, #222	; 0xde
 800fbe4:	4b5b      	ldr	r3, [pc, #364]	; (800fd54 <__gethex+0x2d8>)
 800fbe6:	485c      	ldr	r0, [pc, #368]	; (800fd58 <__gethex+0x2dc>)
 800fbe8:	f001 fd58 	bl	801169c <__assert_func>
 800fbec:	3101      	adds	r1, #1
 800fbee:	105b      	asrs	r3, r3, #1
 800fbf0:	e7ef      	b.n	800fbd2 <__gethex+0x156>
 800fbf2:	f04f 0b00 	mov.w	fp, #0
 800fbf6:	f100 0914 	add.w	r9, r0, #20
 800fbfa:	f1ca 0301 	rsb	r3, sl, #1
 800fbfe:	f8cd 9010 	str.w	r9, [sp, #16]
 800fc02:	f8cd b004 	str.w	fp, [sp, #4]
 800fc06:	9308      	str	r3, [sp, #32]
 800fc08:	42b7      	cmp	r7, r6
 800fc0a:	d33f      	bcc.n	800fc8c <__gethex+0x210>
 800fc0c:	9f04      	ldr	r7, [sp, #16]
 800fc0e:	9b01      	ldr	r3, [sp, #4]
 800fc10:	f847 3b04 	str.w	r3, [r7], #4
 800fc14:	eba7 0709 	sub.w	r7, r7, r9
 800fc18:	10bf      	asrs	r7, r7, #2
 800fc1a:	6127      	str	r7, [r4, #16]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f000 fb33 	bl	8010288 <__hi0bits>
 800fc22:	017f      	lsls	r7, r7, #5
 800fc24:	f8d8 6000 	ldr.w	r6, [r8]
 800fc28:	1a3f      	subs	r7, r7, r0
 800fc2a:	42b7      	cmp	r7, r6
 800fc2c:	dd62      	ble.n	800fcf4 <__gethex+0x278>
 800fc2e:	1bbf      	subs	r7, r7, r6
 800fc30:	4639      	mov	r1, r7
 800fc32:	4620      	mov	r0, r4
 800fc34:	f000 fecd 	bl	80109d2 <__any_on>
 800fc38:	4682      	mov	sl, r0
 800fc3a:	b1a8      	cbz	r0, 800fc68 <__gethex+0x1ec>
 800fc3c:	f04f 0a01 	mov.w	sl, #1
 800fc40:	1e7b      	subs	r3, r7, #1
 800fc42:	1159      	asrs	r1, r3, #5
 800fc44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fc48:	f003 021f 	and.w	r2, r3, #31
 800fc4c:	fa0a f202 	lsl.w	r2, sl, r2
 800fc50:	420a      	tst	r2, r1
 800fc52:	d009      	beq.n	800fc68 <__gethex+0x1ec>
 800fc54:	4553      	cmp	r3, sl
 800fc56:	dd05      	ble.n	800fc64 <__gethex+0x1e8>
 800fc58:	4620      	mov	r0, r4
 800fc5a:	1eb9      	subs	r1, r7, #2
 800fc5c:	f000 feb9 	bl	80109d2 <__any_on>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d144      	bne.n	800fcee <__gethex+0x272>
 800fc64:	f04f 0a02 	mov.w	sl, #2
 800fc68:	4639      	mov	r1, r7
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f7ff fe9d 	bl	800f9aa <rshift>
 800fc70:	443d      	add	r5, r7
 800fc72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc76:	42ab      	cmp	r3, r5
 800fc78:	da4a      	bge.n	800fd10 <__gethex+0x294>
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	9802      	ldr	r0, [sp, #8]
 800fc7e:	f000 fa51 	bl	8010124 <_Bfree>
 800fc82:	2300      	movs	r3, #0
 800fc84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fc86:	27a3      	movs	r7, #163	; 0xa3
 800fc88:	6013      	str	r3, [r2, #0]
 800fc8a:	e789      	b.n	800fba0 <__gethex+0x124>
 800fc8c:	1e73      	subs	r3, r6, #1
 800fc8e:	9a06      	ldr	r2, [sp, #24]
 800fc90:	9307      	str	r3, [sp, #28]
 800fc92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d019      	beq.n	800fcce <__gethex+0x252>
 800fc9a:	f1bb 0f20 	cmp.w	fp, #32
 800fc9e:	d107      	bne.n	800fcb0 <__gethex+0x234>
 800fca0:	9b04      	ldr	r3, [sp, #16]
 800fca2:	9a01      	ldr	r2, [sp, #4]
 800fca4:	f843 2b04 	str.w	r2, [r3], #4
 800fca8:	9304      	str	r3, [sp, #16]
 800fcaa:	2300      	movs	r3, #0
 800fcac:	469b      	mov	fp, r3
 800fcae:	9301      	str	r3, [sp, #4]
 800fcb0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fcb4:	f7ff fecc 	bl	800fa50 <__hexdig_fun>
 800fcb8:	9b01      	ldr	r3, [sp, #4]
 800fcba:	f000 000f 	and.w	r0, r0, #15
 800fcbe:	fa00 f00b 	lsl.w	r0, r0, fp
 800fcc2:	4303      	orrs	r3, r0
 800fcc4:	9301      	str	r3, [sp, #4]
 800fcc6:	f10b 0b04 	add.w	fp, fp, #4
 800fcca:	9b07      	ldr	r3, [sp, #28]
 800fccc:	e00d      	b.n	800fcea <__gethex+0x26e>
 800fcce:	9a08      	ldr	r2, [sp, #32]
 800fcd0:	1e73      	subs	r3, r6, #1
 800fcd2:	4413      	add	r3, r2
 800fcd4:	42bb      	cmp	r3, r7
 800fcd6:	d3e0      	bcc.n	800fc9a <__gethex+0x21e>
 800fcd8:	4618      	mov	r0, r3
 800fcda:	4652      	mov	r2, sl
 800fcdc:	9903      	ldr	r1, [sp, #12]
 800fcde:	9309      	str	r3, [sp, #36]	; 0x24
 800fce0:	f001 fbe7 	bl	80114b2 <strncmp>
 800fce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fce6:	2800      	cmp	r0, #0
 800fce8:	d1d7      	bne.n	800fc9a <__gethex+0x21e>
 800fcea:	461e      	mov	r6, r3
 800fcec:	e78c      	b.n	800fc08 <__gethex+0x18c>
 800fcee:	f04f 0a03 	mov.w	sl, #3
 800fcf2:	e7b9      	b.n	800fc68 <__gethex+0x1ec>
 800fcf4:	da09      	bge.n	800fd0a <__gethex+0x28e>
 800fcf6:	1bf7      	subs	r7, r6, r7
 800fcf8:	4621      	mov	r1, r4
 800fcfa:	463a      	mov	r2, r7
 800fcfc:	9802      	ldr	r0, [sp, #8]
 800fcfe:	f000 fc29 	bl	8010554 <__lshift>
 800fd02:	4604      	mov	r4, r0
 800fd04:	1bed      	subs	r5, r5, r7
 800fd06:	f100 0914 	add.w	r9, r0, #20
 800fd0a:	f04f 0a00 	mov.w	sl, #0
 800fd0e:	e7b0      	b.n	800fc72 <__gethex+0x1f6>
 800fd10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fd14:	42a8      	cmp	r0, r5
 800fd16:	dd72      	ble.n	800fdfe <__gethex+0x382>
 800fd18:	1b45      	subs	r5, r0, r5
 800fd1a:	42ae      	cmp	r6, r5
 800fd1c:	dc35      	bgt.n	800fd8a <__gethex+0x30e>
 800fd1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd22:	2b02      	cmp	r3, #2
 800fd24:	d029      	beq.n	800fd7a <__gethex+0x2fe>
 800fd26:	2b03      	cmp	r3, #3
 800fd28:	d02b      	beq.n	800fd82 <__gethex+0x306>
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d11c      	bne.n	800fd68 <__gethex+0x2ec>
 800fd2e:	42ae      	cmp	r6, r5
 800fd30:	d11a      	bne.n	800fd68 <__gethex+0x2ec>
 800fd32:	2e01      	cmp	r6, #1
 800fd34:	d112      	bne.n	800fd5c <__gethex+0x2e0>
 800fd36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fd3a:	9a05      	ldr	r2, [sp, #20]
 800fd3c:	2762      	movs	r7, #98	; 0x62
 800fd3e:	6013      	str	r3, [r2, #0]
 800fd40:	2301      	movs	r3, #1
 800fd42:	6123      	str	r3, [r4, #16]
 800fd44:	f8c9 3000 	str.w	r3, [r9]
 800fd48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd4a:	601c      	str	r4, [r3, #0]
 800fd4c:	e728      	b.n	800fba0 <__gethex+0x124>
 800fd4e:	bf00      	nop
 800fd50:	0801310c 	.word	0x0801310c
 800fd54:	08013094 	.word	0x08013094
 800fd58:	080130a5 	.word	0x080130a5
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	1e71      	subs	r1, r6, #1
 800fd60:	f000 fe37 	bl	80109d2 <__any_on>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d1e6      	bne.n	800fd36 <__gethex+0x2ba>
 800fd68:	4621      	mov	r1, r4
 800fd6a:	9802      	ldr	r0, [sp, #8]
 800fd6c:	f000 f9da 	bl	8010124 <_Bfree>
 800fd70:	2300      	movs	r3, #0
 800fd72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fd74:	2750      	movs	r7, #80	; 0x50
 800fd76:	6013      	str	r3, [r2, #0]
 800fd78:	e712      	b.n	800fba0 <__gethex+0x124>
 800fd7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d1f3      	bne.n	800fd68 <__gethex+0x2ec>
 800fd80:	e7d9      	b.n	800fd36 <__gethex+0x2ba>
 800fd82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d1d6      	bne.n	800fd36 <__gethex+0x2ba>
 800fd88:	e7ee      	b.n	800fd68 <__gethex+0x2ec>
 800fd8a:	1e6f      	subs	r7, r5, #1
 800fd8c:	f1ba 0f00 	cmp.w	sl, #0
 800fd90:	d132      	bne.n	800fdf8 <__gethex+0x37c>
 800fd92:	b127      	cbz	r7, 800fd9e <__gethex+0x322>
 800fd94:	4639      	mov	r1, r7
 800fd96:	4620      	mov	r0, r4
 800fd98:	f000 fe1b 	bl	80109d2 <__any_on>
 800fd9c:	4682      	mov	sl, r0
 800fd9e:	2101      	movs	r1, #1
 800fda0:	117b      	asrs	r3, r7, #5
 800fda2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fda6:	f007 071f 	and.w	r7, r7, #31
 800fdaa:	fa01 f707 	lsl.w	r7, r1, r7
 800fdae:	421f      	tst	r7, r3
 800fdb0:	f04f 0702 	mov.w	r7, #2
 800fdb4:	4629      	mov	r1, r5
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	bf18      	it	ne
 800fdba:	f04a 0a02 	orrne.w	sl, sl, #2
 800fdbe:	1b76      	subs	r6, r6, r5
 800fdc0:	f7ff fdf3 	bl	800f9aa <rshift>
 800fdc4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fdc8:	f1ba 0f00 	cmp.w	sl, #0
 800fdcc:	d048      	beq.n	800fe60 <__gethex+0x3e4>
 800fdce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	d015      	beq.n	800fe02 <__gethex+0x386>
 800fdd6:	2b03      	cmp	r3, #3
 800fdd8:	d017      	beq.n	800fe0a <__gethex+0x38e>
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d109      	bne.n	800fdf2 <__gethex+0x376>
 800fdde:	f01a 0f02 	tst.w	sl, #2
 800fde2:	d006      	beq.n	800fdf2 <__gethex+0x376>
 800fde4:	f8d9 0000 	ldr.w	r0, [r9]
 800fde8:	ea4a 0a00 	orr.w	sl, sl, r0
 800fdec:	f01a 0f01 	tst.w	sl, #1
 800fdf0:	d10e      	bne.n	800fe10 <__gethex+0x394>
 800fdf2:	f047 0710 	orr.w	r7, r7, #16
 800fdf6:	e033      	b.n	800fe60 <__gethex+0x3e4>
 800fdf8:	f04f 0a01 	mov.w	sl, #1
 800fdfc:	e7cf      	b.n	800fd9e <__gethex+0x322>
 800fdfe:	2701      	movs	r7, #1
 800fe00:	e7e2      	b.n	800fdc8 <__gethex+0x34c>
 800fe02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe04:	f1c3 0301 	rsb	r3, r3, #1
 800fe08:	9315      	str	r3, [sp, #84]	; 0x54
 800fe0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d0f0      	beq.n	800fdf2 <__gethex+0x376>
 800fe10:	f04f 0c00 	mov.w	ip, #0
 800fe14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fe18:	f104 0314 	add.w	r3, r4, #20
 800fe1c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fe20:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fe24:	4618      	mov	r0, r3
 800fe26:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fe2e:	d01c      	beq.n	800fe6a <__gethex+0x3ee>
 800fe30:	3201      	adds	r2, #1
 800fe32:	6002      	str	r2, [r0, #0]
 800fe34:	2f02      	cmp	r7, #2
 800fe36:	f104 0314 	add.w	r3, r4, #20
 800fe3a:	d13d      	bne.n	800feb8 <__gethex+0x43c>
 800fe3c:	f8d8 2000 	ldr.w	r2, [r8]
 800fe40:	3a01      	subs	r2, #1
 800fe42:	42b2      	cmp	r2, r6
 800fe44:	d10a      	bne.n	800fe5c <__gethex+0x3e0>
 800fe46:	2201      	movs	r2, #1
 800fe48:	1171      	asrs	r1, r6, #5
 800fe4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fe4e:	f006 061f 	and.w	r6, r6, #31
 800fe52:	fa02 f606 	lsl.w	r6, r2, r6
 800fe56:	421e      	tst	r6, r3
 800fe58:	bf18      	it	ne
 800fe5a:	4617      	movne	r7, r2
 800fe5c:	f047 0720 	orr.w	r7, r7, #32
 800fe60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe62:	601c      	str	r4, [r3, #0]
 800fe64:	9b05      	ldr	r3, [sp, #20]
 800fe66:	601d      	str	r5, [r3, #0]
 800fe68:	e69a      	b.n	800fba0 <__gethex+0x124>
 800fe6a:	4299      	cmp	r1, r3
 800fe6c:	f843 cc04 	str.w	ip, [r3, #-4]
 800fe70:	d8d8      	bhi.n	800fe24 <__gethex+0x3a8>
 800fe72:	68a3      	ldr	r3, [r4, #8]
 800fe74:	459b      	cmp	fp, r3
 800fe76:	db17      	blt.n	800fea8 <__gethex+0x42c>
 800fe78:	6861      	ldr	r1, [r4, #4]
 800fe7a:	9802      	ldr	r0, [sp, #8]
 800fe7c:	3101      	adds	r1, #1
 800fe7e:	f000 f911 	bl	80100a4 <_Balloc>
 800fe82:	4681      	mov	r9, r0
 800fe84:	b918      	cbnz	r0, 800fe8e <__gethex+0x412>
 800fe86:	4602      	mov	r2, r0
 800fe88:	2184      	movs	r1, #132	; 0x84
 800fe8a:	4b19      	ldr	r3, [pc, #100]	; (800fef0 <__gethex+0x474>)
 800fe8c:	e6ab      	b.n	800fbe6 <__gethex+0x16a>
 800fe8e:	6922      	ldr	r2, [r4, #16]
 800fe90:	f104 010c 	add.w	r1, r4, #12
 800fe94:	3202      	adds	r2, #2
 800fe96:	0092      	lsls	r2, r2, #2
 800fe98:	300c      	adds	r0, #12
 800fe9a:	f7fe fd1b 	bl	800e8d4 <memcpy>
 800fe9e:	4621      	mov	r1, r4
 800fea0:	9802      	ldr	r0, [sp, #8]
 800fea2:	f000 f93f 	bl	8010124 <_Bfree>
 800fea6:	464c      	mov	r4, r9
 800fea8:	6923      	ldr	r3, [r4, #16]
 800feaa:	1c5a      	adds	r2, r3, #1
 800feac:	6122      	str	r2, [r4, #16]
 800feae:	2201      	movs	r2, #1
 800feb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800feb4:	615a      	str	r2, [r3, #20]
 800feb6:	e7bd      	b.n	800fe34 <__gethex+0x3b8>
 800feb8:	6922      	ldr	r2, [r4, #16]
 800feba:	455a      	cmp	r2, fp
 800febc:	dd0b      	ble.n	800fed6 <__gethex+0x45a>
 800febe:	2101      	movs	r1, #1
 800fec0:	4620      	mov	r0, r4
 800fec2:	f7ff fd72 	bl	800f9aa <rshift>
 800fec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800feca:	3501      	adds	r5, #1
 800fecc:	42ab      	cmp	r3, r5
 800fece:	f6ff aed4 	blt.w	800fc7a <__gethex+0x1fe>
 800fed2:	2701      	movs	r7, #1
 800fed4:	e7c2      	b.n	800fe5c <__gethex+0x3e0>
 800fed6:	f016 061f 	ands.w	r6, r6, #31
 800feda:	d0fa      	beq.n	800fed2 <__gethex+0x456>
 800fedc:	4453      	add	r3, sl
 800fede:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fee2:	f000 f9d1 	bl	8010288 <__hi0bits>
 800fee6:	f1c6 0620 	rsb	r6, r6, #32
 800feea:	42b0      	cmp	r0, r6
 800feec:	dbe7      	blt.n	800febe <__gethex+0x442>
 800feee:	e7f0      	b.n	800fed2 <__gethex+0x456>
 800fef0:	08013094 	.word	0x08013094

0800fef4 <L_shift>:
 800fef4:	f1c2 0208 	rsb	r2, r2, #8
 800fef8:	0092      	lsls	r2, r2, #2
 800fefa:	b570      	push	{r4, r5, r6, lr}
 800fefc:	f1c2 0620 	rsb	r6, r2, #32
 800ff00:	6843      	ldr	r3, [r0, #4]
 800ff02:	6804      	ldr	r4, [r0, #0]
 800ff04:	fa03 f506 	lsl.w	r5, r3, r6
 800ff08:	432c      	orrs	r4, r5
 800ff0a:	40d3      	lsrs	r3, r2
 800ff0c:	6004      	str	r4, [r0, #0]
 800ff0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ff12:	4288      	cmp	r0, r1
 800ff14:	d3f4      	bcc.n	800ff00 <L_shift+0xc>
 800ff16:	bd70      	pop	{r4, r5, r6, pc}

0800ff18 <__match>:
 800ff18:	b530      	push	{r4, r5, lr}
 800ff1a:	6803      	ldr	r3, [r0, #0]
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff22:	b914      	cbnz	r4, 800ff2a <__match+0x12>
 800ff24:	6003      	str	r3, [r0, #0]
 800ff26:	2001      	movs	r0, #1
 800ff28:	bd30      	pop	{r4, r5, pc}
 800ff2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ff32:	2d19      	cmp	r5, #25
 800ff34:	bf98      	it	ls
 800ff36:	3220      	addls	r2, #32
 800ff38:	42a2      	cmp	r2, r4
 800ff3a:	d0f0      	beq.n	800ff1e <__match+0x6>
 800ff3c:	2000      	movs	r0, #0
 800ff3e:	e7f3      	b.n	800ff28 <__match+0x10>

0800ff40 <__hexnan>:
 800ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff44:	2500      	movs	r5, #0
 800ff46:	680b      	ldr	r3, [r1, #0]
 800ff48:	4682      	mov	sl, r0
 800ff4a:	115e      	asrs	r6, r3, #5
 800ff4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ff50:	f013 031f 	ands.w	r3, r3, #31
 800ff54:	bf18      	it	ne
 800ff56:	3604      	addne	r6, #4
 800ff58:	1f37      	subs	r7, r6, #4
 800ff5a:	46b9      	mov	r9, r7
 800ff5c:	463c      	mov	r4, r7
 800ff5e:	46ab      	mov	fp, r5
 800ff60:	b087      	sub	sp, #28
 800ff62:	4690      	mov	r8, r2
 800ff64:	6802      	ldr	r2, [r0, #0]
 800ff66:	9301      	str	r3, [sp, #4]
 800ff68:	f846 5c04 	str.w	r5, [r6, #-4]
 800ff6c:	9502      	str	r5, [sp, #8]
 800ff6e:	7851      	ldrb	r1, [r2, #1]
 800ff70:	1c53      	adds	r3, r2, #1
 800ff72:	9303      	str	r3, [sp, #12]
 800ff74:	b341      	cbz	r1, 800ffc8 <__hexnan+0x88>
 800ff76:	4608      	mov	r0, r1
 800ff78:	9205      	str	r2, [sp, #20]
 800ff7a:	9104      	str	r1, [sp, #16]
 800ff7c:	f7ff fd68 	bl	800fa50 <__hexdig_fun>
 800ff80:	2800      	cmp	r0, #0
 800ff82:	d14f      	bne.n	8010024 <__hexnan+0xe4>
 800ff84:	9904      	ldr	r1, [sp, #16]
 800ff86:	9a05      	ldr	r2, [sp, #20]
 800ff88:	2920      	cmp	r1, #32
 800ff8a:	d818      	bhi.n	800ffbe <__hexnan+0x7e>
 800ff8c:	9b02      	ldr	r3, [sp, #8]
 800ff8e:	459b      	cmp	fp, r3
 800ff90:	dd13      	ble.n	800ffba <__hexnan+0x7a>
 800ff92:	454c      	cmp	r4, r9
 800ff94:	d206      	bcs.n	800ffa4 <__hexnan+0x64>
 800ff96:	2d07      	cmp	r5, #7
 800ff98:	dc04      	bgt.n	800ffa4 <__hexnan+0x64>
 800ff9a:	462a      	mov	r2, r5
 800ff9c:	4649      	mov	r1, r9
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f7ff ffa8 	bl	800fef4 <L_shift>
 800ffa4:	4544      	cmp	r4, r8
 800ffa6:	d950      	bls.n	801004a <__hexnan+0x10a>
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	f1a4 0904 	sub.w	r9, r4, #4
 800ffae:	f844 3c04 	str.w	r3, [r4, #-4]
 800ffb2:	461d      	mov	r5, r3
 800ffb4:	464c      	mov	r4, r9
 800ffb6:	f8cd b008 	str.w	fp, [sp, #8]
 800ffba:	9a03      	ldr	r2, [sp, #12]
 800ffbc:	e7d7      	b.n	800ff6e <__hexnan+0x2e>
 800ffbe:	2929      	cmp	r1, #41	; 0x29
 800ffc0:	d156      	bne.n	8010070 <__hexnan+0x130>
 800ffc2:	3202      	adds	r2, #2
 800ffc4:	f8ca 2000 	str.w	r2, [sl]
 800ffc8:	f1bb 0f00 	cmp.w	fp, #0
 800ffcc:	d050      	beq.n	8010070 <__hexnan+0x130>
 800ffce:	454c      	cmp	r4, r9
 800ffd0:	d206      	bcs.n	800ffe0 <__hexnan+0xa0>
 800ffd2:	2d07      	cmp	r5, #7
 800ffd4:	dc04      	bgt.n	800ffe0 <__hexnan+0xa0>
 800ffd6:	462a      	mov	r2, r5
 800ffd8:	4649      	mov	r1, r9
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f7ff ff8a 	bl	800fef4 <L_shift>
 800ffe0:	4544      	cmp	r4, r8
 800ffe2:	d934      	bls.n	801004e <__hexnan+0x10e>
 800ffe4:	4623      	mov	r3, r4
 800ffe6:	f1a8 0204 	sub.w	r2, r8, #4
 800ffea:	f853 1b04 	ldr.w	r1, [r3], #4
 800ffee:	429f      	cmp	r7, r3
 800fff0:	f842 1f04 	str.w	r1, [r2, #4]!
 800fff4:	d2f9      	bcs.n	800ffea <__hexnan+0xaa>
 800fff6:	1b3b      	subs	r3, r7, r4
 800fff8:	f023 0303 	bic.w	r3, r3, #3
 800fffc:	3304      	adds	r3, #4
 800fffe:	3401      	adds	r4, #1
 8010000:	3e03      	subs	r6, #3
 8010002:	42b4      	cmp	r4, r6
 8010004:	bf88      	it	hi
 8010006:	2304      	movhi	r3, #4
 8010008:	2200      	movs	r2, #0
 801000a:	4443      	add	r3, r8
 801000c:	f843 2b04 	str.w	r2, [r3], #4
 8010010:	429f      	cmp	r7, r3
 8010012:	d2fb      	bcs.n	801000c <__hexnan+0xcc>
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	b91b      	cbnz	r3, 8010020 <__hexnan+0xe0>
 8010018:	4547      	cmp	r7, r8
 801001a:	d127      	bne.n	801006c <__hexnan+0x12c>
 801001c:	2301      	movs	r3, #1
 801001e:	603b      	str	r3, [r7, #0]
 8010020:	2005      	movs	r0, #5
 8010022:	e026      	b.n	8010072 <__hexnan+0x132>
 8010024:	3501      	adds	r5, #1
 8010026:	2d08      	cmp	r5, #8
 8010028:	f10b 0b01 	add.w	fp, fp, #1
 801002c:	dd06      	ble.n	801003c <__hexnan+0xfc>
 801002e:	4544      	cmp	r4, r8
 8010030:	d9c3      	bls.n	800ffba <__hexnan+0x7a>
 8010032:	2300      	movs	r3, #0
 8010034:	2501      	movs	r5, #1
 8010036:	f844 3c04 	str.w	r3, [r4, #-4]
 801003a:	3c04      	subs	r4, #4
 801003c:	6822      	ldr	r2, [r4, #0]
 801003e:	f000 000f 	and.w	r0, r0, #15
 8010042:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010046:	6022      	str	r2, [r4, #0]
 8010048:	e7b7      	b.n	800ffba <__hexnan+0x7a>
 801004a:	2508      	movs	r5, #8
 801004c:	e7b5      	b.n	800ffba <__hexnan+0x7a>
 801004e:	9b01      	ldr	r3, [sp, #4]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d0df      	beq.n	8010014 <__hexnan+0xd4>
 8010054:	f04f 32ff 	mov.w	r2, #4294967295
 8010058:	f1c3 0320 	rsb	r3, r3, #32
 801005c:	fa22 f303 	lsr.w	r3, r2, r3
 8010060:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010064:	401a      	ands	r2, r3
 8010066:	f846 2c04 	str.w	r2, [r6, #-4]
 801006a:	e7d3      	b.n	8010014 <__hexnan+0xd4>
 801006c:	3f04      	subs	r7, #4
 801006e:	e7d1      	b.n	8010014 <__hexnan+0xd4>
 8010070:	2004      	movs	r0, #4
 8010072:	b007      	add	sp, #28
 8010074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010078 <__retarget_lock_init_recursive>:
 8010078:	4770      	bx	lr

0801007a <__retarget_lock_acquire_recursive>:
 801007a:	4770      	bx	lr

0801007c <__retarget_lock_release_recursive>:
 801007c:	4770      	bx	lr

0801007e <__ascii_mbtowc>:
 801007e:	b082      	sub	sp, #8
 8010080:	b901      	cbnz	r1, 8010084 <__ascii_mbtowc+0x6>
 8010082:	a901      	add	r1, sp, #4
 8010084:	b142      	cbz	r2, 8010098 <__ascii_mbtowc+0x1a>
 8010086:	b14b      	cbz	r3, 801009c <__ascii_mbtowc+0x1e>
 8010088:	7813      	ldrb	r3, [r2, #0]
 801008a:	600b      	str	r3, [r1, #0]
 801008c:	7812      	ldrb	r2, [r2, #0]
 801008e:	1e10      	subs	r0, r2, #0
 8010090:	bf18      	it	ne
 8010092:	2001      	movne	r0, #1
 8010094:	b002      	add	sp, #8
 8010096:	4770      	bx	lr
 8010098:	4610      	mov	r0, r2
 801009a:	e7fb      	b.n	8010094 <__ascii_mbtowc+0x16>
 801009c:	f06f 0001 	mvn.w	r0, #1
 80100a0:	e7f8      	b.n	8010094 <__ascii_mbtowc+0x16>
	...

080100a4 <_Balloc>:
 80100a4:	b570      	push	{r4, r5, r6, lr}
 80100a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80100a8:	4604      	mov	r4, r0
 80100aa:	460d      	mov	r5, r1
 80100ac:	b976      	cbnz	r6, 80100cc <_Balloc+0x28>
 80100ae:	2010      	movs	r0, #16
 80100b0:	f001 fc6a 	bl	8011988 <malloc>
 80100b4:	4602      	mov	r2, r0
 80100b6:	6260      	str	r0, [r4, #36]	; 0x24
 80100b8:	b920      	cbnz	r0, 80100c4 <_Balloc+0x20>
 80100ba:	2166      	movs	r1, #102	; 0x66
 80100bc:	4b17      	ldr	r3, [pc, #92]	; (801011c <_Balloc+0x78>)
 80100be:	4818      	ldr	r0, [pc, #96]	; (8010120 <_Balloc+0x7c>)
 80100c0:	f001 faec 	bl	801169c <__assert_func>
 80100c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100c8:	6006      	str	r6, [r0, #0]
 80100ca:	60c6      	str	r6, [r0, #12]
 80100cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80100ce:	68f3      	ldr	r3, [r6, #12]
 80100d0:	b183      	cbz	r3, 80100f4 <_Balloc+0x50>
 80100d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80100da:	b9b8      	cbnz	r0, 801010c <_Balloc+0x68>
 80100dc:	2101      	movs	r1, #1
 80100de:	fa01 f605 	lsl.w	r6, r1, r5
 80100e2:	1d72      	adds	r2, r6, #5
 80100e4:	4620      	mov	r0, r4
 80100e6:	0092      	lsls	r2, r2, #2
 80100e8:	f000 fc94 	bl	8010a14 <_calloc_r>
 80100ec:	b160      	cbz	r0, 8010108 <_Balloc+0x64>
 80100ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80100f2:	e00e      	b.n	8010112 <_Balloc+0x6e>
 80100f4:	2221      	movs	r2, #33	; 0x21
 80100f6:	2104      	movs	r1, #4
 80100f8:	4620      	mov	r0, r4
 80100fa:	f000 fc8b 	bl	8010a14 <_calloc_r>
 80100fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010100:	60f0      	str	r0, [r6, #12]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1e4      	bne.n	80100d2 <_Balloc+0x2e>
 8010108:	2000      	movs	r0, #0
 801010a:	bd70      	pop	{r4, r5, r6, pc}
 801010c:	6802      	ldr	r2, [r0, #0]
 801010e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010112:	2300      	movs	r3, #0
 8010114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010118:	e7f7      	b.n	801010a <_Balloc+0x66>
 801011a:	bf00      	nop
 801011c:	08013120 	.word	0x08013120
 8010120:	08013137 	.word	0x08013137

08010124 <_Bfree>:
 8010124:	b570      	push	{r4, r5, r6, lr}
 8010126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010128:	4605      	mov	r5, r0
 801012a:	460c      	mov	r4, r1
 801012c:	b976      	cbnz	r6, 801014c <_Bfree+0x28>
 801012e:	2010      	movs	r0, #16
 8010130:	f001 fc2a 	bl	8011988 <malloc>
 8010134:	4602      	mov	r2, r0
 8010136:	6268      	str	r0, [r5, #36]	; 0x24
 8010138:	b920      	cbnz	r0, 8010144 <_Bfree+0x20>
 801013a:	218a      	movs	r1, #138	; 0x8a
 801013c:	4b08      	ldr	r3, [pc, #32]	; (8010160 <_Bfree+0x3c>)
 801013e:	4809      	ldr	r0, [pc, #36]	; (8010164 <_Bfree+0x40>)
 8010140:	f001 faac 	bl	801169c <__assert_func>
 8010144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010148:	6006      	str	r6, [r0, #0]
 801014a:	60c6      	str	r6, [r0, #12]
 801014c:	b13c      	cbz	r4, 801015e <_Bfree+0x3a>
 801014e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010150:	6862      	ldr	r2, [r4, #4]
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010158:	6021      	str	r1, [r4, #0]
 801015a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801015e:	bd70      	pop	{r4, r5, r6, pc}
 8010160:	08013120 	.word	0x08013120
 8010164:	08013137 	.word	0x08013137

08010168 <__multadd>:
 8010168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801016c:	4607      	mov	r7, r0
 801016e:	460c      	mov	r4, r1
 8010170:	461e      	mov	r6, r3
 8010172:	2000      	movs	r0, #0
 8010174:	690d      	ldr	r5, [r1, #16]
 8010176:	f101 0c14 	add.w	ip, r1, #20
 801017a:	f8dc 3000 	ldr.w	r3, [ip]
 801017e:	3001      	adds	r0, #1
 8010180:	b299      	uxth	r1, r3
 8010182:	fb02 6101 	mla	r1, r2, r1, r6
 8010186:	0c1e      	lsrs	r6, r3, #16
 8010188:	0c0b      	lsrs	r3, r1, #16
 801018a:	fb02 3306 	mla	r3, r2, r6, r3
 801018e:	b289      	uxth	r1, r1
 8010190:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010194:	4285      	cmp	r5, r0
 8010196:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801019a:	f84c 1b04 	str.w	r1, [ip], #4
 801019e:	dcec      	bgt.n	801017a <__multadd+0x12>
 80101a0:	b30e      	cbz	r6, 80101e6 <__multadd+0x7e>
 80101a2:	68a3      	ldr	r3, [r4, #8]
 80101a4:	42ab      	cmp	r3, r5
 80101a6:	dc19      	bgt.n	80101dc <__multadd+0x74>
 80101a8:	6861      	ldr	r1, [r4, #4]
 80101aa:	4638      	mov	r0, r7
 80101ac:	3101      	adds	r1, #1
 80101ae:	f7ff ff79 	bl	80100a4 <_Balloc>
 80101b2:	4680      	mov	r8, r0
 80101b4:	b928      	cbnz	r0, 80101c2 <__multadd+0x5a>
 80101b6:	4602      	mov	r2, r0
 80101b8:	21b5      	movs	r1, #181	; 0xb5
 80101ba:	4b0c      	ldr	r3, [pc, #48]	; (80101ec <__multadd+0x84>)
 80101bc:	480c      	ldr	r0, [pc, #48]	; (80101f0 <__multadd+0x88>)
 80101be:	f001 fa6d 	bl	801169c <__assert_func>
 80101c2:	6922      	ldr	r2, [r4, #16]
 80101c4:	f104 010c 	add.w	r1, r4, #12
 80101c8:	3202      	adds	r2, #2
 80101ca:	0092      	lsls	r2, r2, #2
 80101cc:	300c      	adds	r0, #12
 80101ce:	f7fe fb81 	bl	800e8d4 <memcpy>
 80101d2:	4621      	mov	r1, r4
 80101d4:	4638      	mov	r0, r7
 80101d6:	f7ff ffa5 	bl	8010124 <_Bfree>
 80101da:	4644      	mov	r4, r8
 80101dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80101e0:	3501      	adds	r5, #1
 80101e2:	615e      	str	r6, [r3, #20]
 80101e4:	6125      	str	r5, [r4, #16]
 80101e6:	4620      	mov	r0, r4
 80101e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101ec:	08013094 	.word	0x08013094
 80101f0:	08013137 	.word	0x08013137

080101f4 <__s2b>:
 80101f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101f8:	4615      	mov	r5, r2
 80101fa:	2209      	movs	r2, #9
 80101fc:	461f      	mov	r7, r3
 80101fe:	3308      	adds	r3, #8
 8010200:	460c      	mov	r4, r1
 8010202:	fb93 f3f2 	sdiv	r3, r3, r2
 8010206:	4606      	mov	r6, r0
 8010208:	2201      	movs	r2, #1
 801020a:	2100      	movs	r1, #0
 801020c:	429a      	cmp	r2, r3
 801020e:	db09      	blt.n	8010224 <__s2b+0x30>
 8010210:	4630      	mov	r0, r6
 8010212:	f7ff ff47 	bl	80100a4 <_Balloc>
 8010216:	b940      	cbnz	r0, 801022a <__s2b+0x36>
 8010218:	4602      	mov	r2, r0
 801021a:	21ce      	movs	r1, #206	; 0xce
 801021c:	4b18      	ldr	r3, [pc, #96]	; (8010280 <__s2b+0x8c>)
 801021e:	4819      	ldr	r0, [pc, #100]	; (8010284 <__s2b+0x90>)
 8010220:	f001 fa3c 	bl	801169c <__assert_func>
 8010224:	0052      	lsls	r2, r2, #1
 8010226:	3101      	adds	r1, #1
 8010228:	e7f0      	b.n	801020c <__s2b+0x18>
 801022a:	9b08      	ldr	r3, [sp, #32]
 801022c:	2d09      	cmp	r5, #9
 801022e:	6143      	str	r3, [r0, #20]
 8010230:	f04f 0301 	mov.w	r3, #1
 8010234:	6103      	str	r3, [r0, #16]
 8010236:	dd16      	ble.n	8010266 <__s2b+0x72>
 8010238:	f104 0909 	add.w	r9, r4, #9
 801023c:	46c8      	mov	r8, r9
 801023e:	442c      	add	r4, r5
 8010240:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010244:	4601      	mov	r1, r0
 8010246:	220a      	movs	r2, #10
 8010248:	4630      	mov	r0, r6
 801024a:	3b30      	subs	r3, #48	; 0x30
 801024c:	f7ff ff8c 	bl	8010168 <__multadd>
 8010250:	45a0      	cmp	r8, r4
 8010252:	d1f5      	bne.n	8010240 <__s2b+0x4c>
 8010254:	f1a5 0408 	sub.w	r4, r5, #8
 8010258:	444c      	add	r4, r9
 801025a:	1b2d      	subs	r5, r5, r4
 801025c:	1963      	adds	r3, r4, r5
 801025e:	42bb      	cmp	r3, r7
 8010260:	db04      	blt.n	801026c <__s2b+0x78>
 8010262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010266:	2509      	movs	r5, #9
 8010268:	340a      	adds	r4, #10
 801026a:	e7f6      	b.n	801025a <__s2b+0x66>
 801026c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010270:	4601      	mov	r1, r0
 8010272:	220a      	movs	r2, #10
 8010274:	4630      	mov	r0, r6
 8010276:	3b30      	subs	r3, #48	; 0x30
 8010278:	f7ff ff76 	bl	8010168 <__multadd>
 801027c:	e7ee      	b.n	801025c <__s2b+0x68>
 801027e:	bf00      	nop
 8010280:	08013094 	.word	0x08013094
 8010284:	08013137 	.word	0x08013137

08010288 <__hi0bits>:
 8010288:	0c02      	lsrs	r2, r0, #16
 801028a:	0412      	lsls	r2, r2, #16
 801028c:	4603      	mov	r3, r0
 801028e:	b9ca      	cbnz	r2, 80102c4 <__hi0bits+0x3c>
 8010290:	0403      	lsls	r3, r0, #16
 8010292:	2010      	movs	r0, #16
 8010294:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010298:	bf04      	itt	eq
 801029a:	021b      	lsleq	r3, r3, #8
 801029c:	3008      	addeq	r0, #8
 801029e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80102a2:	bf04      	itt	eq
 80102a4:	011b      	lsleq	r3, r3, #4
 80102a6:	3004      	addeq	r0, #4
 80102a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80102ac:	bf04      	itt	eq
 80102ae:	009b      	lsleq	r3, r3, #2
 80102b0:	3002      	addeq	r0, #2
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	db05      	blt.n	80102c2 <__hi0bits+0x3a>
 80102b6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80102ba:	f100 0001 	add.w	r0, r0, #1
 80102be:	bf08      	it	eq
 80102c0:	2020      	moveq	r0, #32
 80102c2:	4770      	bx	lr
 80102c4:	2000      	movs	r0, #0
 80102c6:	e7e5      	b.n	8010294 <__hi0bits+0xc>

080102c8 <__lo0bits>:
 80102c8:	6803      	ldr	r3, [r0, #0]
 80102ca:	4602      	mov	r2, r0
 80102cc:	f013 0007 	ands.w	r0, r3, #7
 80102d0:	d00b      	beq.n	80102ea <__lo0bits+0x22>
 80102d2:	07d9      	lsls	r1, r3, #31
 80102d4:	d421      	bmi.n	801031a <__lo0bits+0x52>
 80102d6:	0798      	lsls	r0, r3, #30
 80102d8:	bf49      	itett	mi
 80102da:	085b      	lsrmi	r3, r3, #1
 80102dc:	089b      	lsrpl	r3, r3, #2
 80102de:	2001      	movmi	r0, #1
 80102e0:	6013      	strmi	r3, [r2, #0]
 80102e2:	bf5c      	itt	pl
 80102e4:	2002      	movpl	r0, #2
 80102e6:	6013      	strpl	r3, [r2, #0]
 80102e8:	4770      	bx	lr
 80102ea:	b299      	uxth	r1, r3
 80102ec:	b909      	cbnz	r1, 80102f2 <__lo0bits+0x2a>
 80102ee:	2010      	movs	r0, #16
 80102f0:	0c1b      	lsrs	r3, r3, #16
 80102f2:	b2d9      	uxtb	r1, r3
 80102f4:	b909      	cbnz	r1, 80102fa <__lo0bits+0x32>
 80102f6:	3008      	adds	r0, #8
 80102f8:	0a1b      	lsrs	r3, r3, #8
 80102fa:	0719      	lsls	r1, r3, #28
 80102fc:	bf04      	itt	eq
 80102fe:	091b      	lsreq	r3, r3, #4
 8010300:	3004      	addeq	r0, #4
 8010302:	0799      	lsls	r1, r3, #30
 8010304:	bf04      	itt	eq
 8010306:	089b      	lsreq	r3, r3, #2
 8010308:	3002      	addeq	r0, #2
 801030a:	07d9      	lsls	r1, r3, #31
 801030c:	d403      	bmi.n	8010316 <__lo0bits+0x4e>
 801030e:	085b      	lsrs	r3, r3, #1
 8010310:	f100 0001 	add.w	r0, r0, #1
 8010314:	d003      	beq.n	801031e <__lo0bits+0x56>
 8010316:	6013      	str	r3, [r2, #0]
 8010318:	4770      	bx	lr
 801031a:	2000      	movs	r0, #0
 801031c:	4770      	bx	lr
 801031e:	2020      	movs	r0, #32
 8010320:	4770      	bx	lr
	...

08010324 <__i2b>:
 8010324:	b510      	push	{r4, lr}
 8010326:	460c      	mov	r4, r1
 8010328:	2101      	movs	r1, #1
 801032a:	f7ff febb 	bl	80100a4 <_Balloc>
 801032e:	4602      	mov	r2, r0
 8010330:	b928      	cbnz	r0, 801033e <__i2b+0x1a>
 8010332:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010336:	4b04      	ldr	r3, [pc, #16]	; (8010348 <__i2b+0x24>)
 8010338:	4804      	ldr	r0, [pc, #16]	; (801034c <__i2b+0x28>)
 801033a:	f001 f9af 	bl	801169c <__assert_func>
 801033e:	2301      	movs	r3, #1
 8010340:	6144      	str	r4, [r0, #20]
 8010342:	6103      	str	r3, [r0, #16]
 8010344:	bd10      	pop	{r4, pc}
 8010346:	bf00      	nop
 8010348:	08013094 	.word	0x08013094
 801034c:	08013137 	.word	0x08013137

08010350 <__multiply>:
 8010350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010354:	4691      	mov	r9, r2
 8010356:	690a      	ldr	r2, [r1, #16]
 8010358:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801035c:	460c      	mov	r4, r1
 801035e:	429a      	cmp	r2, r3
 8010360:	bfbe      	ittt	lt
 8010362:	460b      	movlt	r3, r1
 8010364:	464c      	movlt	r4, r9
 8010366:	4699      	movlt	r9, r3
 8010368:	6927      	ldr	r7, [r4, #16]
 801036a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801036e:	68a3      	ldr	r3, [r4, #8]
 8010370:	6861      	ldr	r1, [r4, #4]
 8010372:	eb07 060a 	add.w	r6, r7, sl
 8010376:	42b3      	cmp	r3, r6
 8010378:	b085      	sub	sp, #20
 801037a:	bfb8      	it	lt
 801037c:	3101      	addlt	r1, #1
 801037e:	f7ff fe91 	bl	80100a4 <_Balloc>
 8010382:	b930      	cbnz	r0, 8010392 <__multiply+0x42>
 8010384:	4602      	mov	r2, r0
 8010386:	f240 115d 	movw	r1, #349	; 0x15d
 801038a:	4b43      	ldr	r3, [pc, #268]	; (8010498 <__multiply+0x148>)
 801038c:	4843      	ldr	r0, [pc, #268]	; (801049c <__multiply+0x14c>)
 801038e:	f001 f985 	bl	801169c <__assert_func>
 8010392:	f100 0514 	add.w	r5, r0, #20
 8010396:	462b      	mov	r3, r5
 8010398:	2200      	movs	r2, #0
 801039a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801039e:	4543      	cmp	r3, r8
 80103a0:	d321      	bcc.n	80103e6 <__multiply+0x96>
 80103a2:	f104 0314 	add.w	r3, r4, #20
 80103a6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80103aa:	f109 0314 	add.w	r3, r9, #20
 80103ae:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80103b2:	9202      	str	r2, [sp, #8]
 80103b4:	1b3a      	subs	r2, r7, r4
 80103b6:	3a15      	subs	r2, #21
 80103b8:	f022 0203 	bic.w	r2, r2, #3
 80103bc:	3204      	adds	r2, #4
 80103be:	f104 0115 	add.w	r1, r4, #21
 80103c2:	428f      	cmp	r7, r1
 80103c4:	bf38      	it	cc
 80103c6:	2204      	movcc	r2, #4
 80103c8:	9201      	str	r2, [sp, #4]
 80103ca:	9a02      	ldr	r2, [sp, #8]
 80103cc:	9303      	str	r3, [sp, #12]
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d80c      	bhi.n	80103ec <__multiply+0x9c>
 80103d2:	2e00      	cmp	r6, #0
 80103d4:	dd03      	ble.n	80103de <__multiply+0x8e>
 80103d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d059      	beq.n	8010492 <__multiply+0x142>
 80103de:	6106      	str	r6, [r0, #16]
 80103e0:	b005      	add	sp, #20
 80103e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e6:	f843 2b04 	str.w	r2, [r3], #4
 80103ea:	e7d8      	b.n	801039e <__multiply+0x4e>
 80103ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80103f0:	f1ba 0f00 	cmp.w	sl, #0
 80103f4:	d023      	beq.n	801043e <__multiply+0xee>
 80103f6:	46a9      	mov	r9, r5
 80103f8:	f04f 0c00 	mov.w	ip, #0
 80103fc:	f104 0e14 	add.w	lr, r4, #20
 8010400:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010404:	f8d9 1000 	ldr.w	r1, [r9]
 8010408:	fa1f fb82 	uxth.w	fp, r2
 801040c:	b289      	uxth	r1, r1
 801040e:	fb0a 110b 	mla	r1, sl, fp, r1
 8010412:	4461      	add	r1, ip
 8010414:	f8d9 c000 	ldr.w	ip, [r9]
 8010418:	0c12      	lsrs	r2, r2, #16
 801041a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801041e:	fb0a c202 	mla	r2, sl, r2, ip
 8010422:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010426:	b289      	uxth	r1, r1
 8010428:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801042c:	4577      	cmp	r7, lr
 801042e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010432:	f849 1b04 	str.w	r1, [r9], #4
 8010436:	d8e3      	bhi.n	8010400 <__multiply+0xb0>
 8010438:	9a01      	ldr	r2, [sp, #4]
 801043a:	f845 c002 	str.w	ip, [r5, r2]
 801043e:	9a03      	ldr	r2, [sp, #12]
 8010440:	3304      	adds	r3, #4
 8010442:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010446:	f1b9 0f00 	cmp.w	r9, #0
 801044a:	d020      	beq.n	801048e <__multiply+0x13e>
 801044c:	46ae      	mov	lr, r5
 801044e:	f04f 0a00 	mov.w	sl, #0
 8010452:	6829      	ldr	r1, [r5, #0]
 8010454:	f104 0c14 	add.w	ip, r4, #20
 8010458:	f8bc b000 	ldrh.w	fp, [ip]
 801045c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010460:	b289      	uxth	r1, r1
 8010462:	fb09 220b 	mla	r2, r9, fp, r2
 8010466:	4492      	add	sl, r2
 8010468:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801046c:	f84e 1b04 	str.w	r1, [lr], #4
 8010470:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010474:	f8be 1000 	ldrh.w	r1, [lr]
 8010478:	0c12      	lsrs	r2, r2, #16
 801047a:	fb09 1102 	mla	r1, r9, r2, r1
 801047e:	4567      	cmp	r7, ip
 8010480:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010484:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010488:	d8e6      	bhi.n	8010458 <__multiply+0x108>
 801048a:	9a01      	ldr	r2, [sp, #4]
 801048c:	50a9      	str	r1, [r5, r2]
 801048e:	3504      	adds	r5, #4
 8010490:	e79b      	b.n	80103ca <__multiply+0x7a>
 8010492:	3e01      	subs	r6, #1
 8010494:	e79d      	b.n	80103d2 <__multiply+0x82>
 8010496:	bf00      	nop
 8010498:	08013094 	.word	0x08013094
 801049c:	08013137 	.word	0x08013137

080104a0 <__pow5mult>:
 80104a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104a4:	4615      	mov	r5, r2
 80104a6:	f012 0203 	ands.w	r2, r2, #3
 80104aa:	4606      	mov	r6, r0
 80104ac:	460f      	mov	r7, r1
 80104ae:	d007      	beq.n	80104c0 <__pow5mult+0x20>
 80104b0:	4c25      	ldr	r4, [pc, #148]	; (8010548 <__pow5mult+0xa8>)
 80104b2:	3a01      	subs	r2, #1
 80104b4:	2300      	movs	r3, #0
 80104b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80104ba:	f7ff fe55 	bl	8010168 <__multadd>
 80104be:	4607      	mov	r7, r0
 80104c0:	10ad      	asrs	r5, r5, #2
 80104c2:	d03d      	beq.n	8010540 <__pow5mult+0xa0>
 80104c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80104c6:	b97c      	cbnz	r4, 80104e8 <__pow5mult+0x48>
 80104c8:	2010      	movs	r0, #16
 80104ca:	f001 fa5d 	bl	8011988 <malloc>
 80104ce:	4602      	mov	r2, r0
 80104d0:	6270      	str	r0, [r6, #36]	; 0x24
 80104d2:	b928      	cbnz	r0, 80104e0 <__pow5mult+0x40>
 80104d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80104d8:	4b1c      	ldr	r3, [pc, #112]	; (801054c <__pow5mult+0xac>)
 80104da:	481d      	ldr	r0, [pc, #116]	; (8010550 <__pow5mult+0xb0>)
 80104dc:	f001 f8de 	bl	801169c <__assert_func>
 80104e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104e4:	6004      	str	r4, [r0, #0]
 80104e6:	60c4      	str	r4, [r0, #12]
 80104e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80104ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104f0:	b94c      	cbnz	r4, 8010506 <__pow5mult+0x66>
 80104f2:	f240 2171 	movw	r1, #625	; 0x271
 80104f6:	4630      	mov	r0, r6
 80104f8:	f7ff ff14 	bl	8010324 <__i2b>
 80104fc:	2300      	movs	r3, #0
 80104fe:	4604      	mov	r4, r0
 8010500:	f8c8 0008 	str.w	r0, [r8, #8]
 8010504:	6003      	str	r3, [r0, #0]
 8010506:	f04f 0900 	mov.w	r9, #0
 801050a:	07eb      	lsls	r3, r5, #31
 801050c:	d50a      	bpl.n	8010524 <__pow5mult+0x84>
 801050e:	4639      	mov	r1, r7
 8010510:	4622      	mov	r2, r4
 8010512:	4630      	mov	r0, r6
 8010514:	f7ff ff1c 	bl	8010350 <__multiply>
 8010518:	4680      	mov	r8, r0
 801051a:	4639      	mov	r1, r7
 801051c:	4630      	mov	r0, r6
 801051e:	f7ff fe01 	bl	8010124 <_Bfree>
 8010522:	4647      	mov	r7, r8
 8010524:	106d      	asrs	r5, r5, #1
 8010526:	d00b      	beq.n	8010540 <__pow5mult+0xa0>
 8010528:	6820      	ldr	r0, [r4, #0]
 801052a:	b938      	cbnz	r0, 801053c <__pow5mult+0x9c>
 801052c:	4622      	mov	r2, r4
 801052e:	4621      	mov	r1, r4
 8010530:	4630      	mov	r0, r6
 8010532:	f7ff ff0d 	bl	8010350 <__multiply>
 8010536:	6020      	str	r0, [r4, #0]
 8010538:	f8c0 9000 	str.w	r9, [r0]
 801053c:	4604      	mov	r4, r0
 801053e:	e7e4      	b.n	801050a <__pow5mult+0x6a>
 8010540:	4638      	mov	r0, r7
 8010542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010546:	bf00      	nop
 8010548:	08013288 	.word	0x08013288
 801054c:	08013120 	.word	0x08013120
 8010550:	08013137 	.word	0x08013137

08010554 <__lshift>:
 8010554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010558:	460c      	mov	r4, r1
 801055a:	4607      	mov	r7, r0
 801055c:	4691      	mov	r9, r2
 801055e:	6923      	ldr	r3, [r4, #16]
 8010560:	6849      	ldr	r1, [r1, #4]
 8010562:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010566:	68a3      	ldr	r3, [r4, #8]
 8010568:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801056c:	f108 0601 	add.w	r6, r8, #1
 8010570:	42b3      	cmp	r3, r6
 8010572:	db0b      	blt.n	801058c <__lshift+0x38>
 8010574:	4638      	mov	r0, r7
 8010576:	f7ff fd95 	bl	80100a4 <_Balloc>
 801057a:	4605      	mov	r5, r0
 801057c:	b948      	cbnz	r0, 8010592 <__lshift+0x3e>
 801057e:	4602      	mov	r2, r0
 8010580:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010584:	4b29      	ldr	r3, [pc, #164]	; (801062c <__lshift+0xd8>)
 8010586:	482a      	ldr	r0, [pc, #168]	; (8010630 <__lshift+0xdc>)
 8010588:	f001 f888 	bl	801169c <__assert_func>
 801058c:	3101      	adds	r1, #1
 801058e:	005b      	lsls	r3, r3, #1
 8010590:	e7ee      	b.n	8010570 <__lshift+0x1c>
 8010592:	2300      	movs	r3, #0
 8010594:	f100 0114 	add.w	r1, r0, #20
 8010598:	f100 0210 	add.w	r2, r0, #16
 801059c:	4618      	mov	r0, r3
 801059e:	4553      	cmp	r3, sl
 80105a0:	db37      	blt.n	8010612 <__lshift+0xbe>
 80105a2:	6920      	ldr	r0, [r4, #16]
 80105a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80105a8:	f104 0314 	add.w	r3, r4, #20
 80105ac:	f019 091f 	ands.w	r9, r9, #31
 80105b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80105b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80105b8:	d02f      	beq.n	801061a <__lshift+0xc6>
 80105ba:	468a      	mov	sl, r1
 80105bc:	f04f 0c00 	mov.w	ip, #0
 80105c0:	f1c9 0e20 	rsb	lr, r9, #32
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	fa02 f209 	lsl.w	r2, r2, r9
 80105ca:	ea42 020c 	orr.w	r2, r2, ip
 80105ce:	f84a 2b04 	str.w	r2, [sl], #4
 80105d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80105d6:	4298      	cmp	r0, r3
 80105d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80105dc:	d8f2      	bhi.n	80105c4 <__lshift+0x70>
 80105de:	1b03      	subs	r3, r0, r4
 80105e0:	3b15      	subs	r3, #21
 80105e2:	f023 0303 	bic.w	r3, r3, #3
 80105e6:	3304      	adds	r3, #4
 80105e8:	f104 0215 	add.w	r2, r4, #21
 80105ec:	4290      	cmp	r0, r2
 80105ee:	bf38      	it	cc
 80105f0:	2304      	movcc	r3, #4
 80105f2:	f841 c003 	str.w	ip, [r1, r3]
 80105f6:	f1bc 0f00 	cmp.w	ip, #0
 80105fa:	d001      	beq.n	8010600 <__lshift+0xac>
 80105fc:	f108 0602 	add.w	r6, r8, #2
 8010600:	3e01      	subs	r6, #1
 8010602:	4638      	mov	r0, r7
 8010604:	4621      	mov	r1, r4
 8010606:	612e      	str	r6, [r5, #16]
 8010608:	f7ff fd8c 	bl	8010124 <_Bfree>
 801060c:	4628      	mov	r0, r5
 801060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010612:	f842 0f04 	str.w	r0, [r2, #4]!
 8010616:	3301      	adds	r3, #1
 8010618:	e7c1      	b.n	801059e <__lshift+0x4a>
 801061a:	3904      	subs	r1, #4
 801061c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010620:	4298      	cmp	r0, r3
 8010622:	f841 2f04 	str.w	r2, [r1, #4]!
 8010626:	d8f9      	bhi.n	801061c <__lshift+0xc8>
 8010628:	e7ea      	b.n	8010600 <__lshift+0xac>
 801062a:	bf00      	nop
 801062c:	08013094 	.word	0x08013094
 8010630:	08013137 	.word	0x08013137

08010634 <__mcmp>:
 8010634:	4603      	mov	r3, r0
 8010636:	690a      	ldr	r2, [r1, #16]
 8010638:	6900      	ldr	r0, [r0, #16]
 801063a:	b530      	push	{r4, r5, lr}
 801063c:	1a80      	subs	r0, r0, r2
 801063e:	d10d      	bne.n	801065c <__mcmp+0x28>
 8010640:	3314      	adds	r3, #20
 8010642:	3114      	adds	r1, #20
 8010644:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010648:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801064c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010650:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010654:	4295      	cmp	r5, r2
 8010656:	d002      	beq.n	801065e <__mcmp+0x2a>
 8010658:	d304      	bcc.n	8010664 <__mcmp+0x30>
 801065a:	2001      	movs	r0, #1
 801065c:	bd30      	pop	{r4, r5, pc}
 801065e:	42a3      	cmp	r3, r4
 8010660:	d3f4      	bcc.n	801064c <__mcmp+0x18>
 8010662:	e7fb      	b.n	801065c <__mcmp+0x28>
 8010664:	f04f 30ff 	mov.w	r0, #4294967295
 8010668:	e7f8      	b.n	801065c <__mcmp+0x28>
	...

0801066c <__mdiff>:
 801066c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010670:	460d      	mov	r5, r1
 8010672:	4607      	mov	r7, r0
 8010674:	4611      	mov	r1, r2
 8010676:	4628      	mov	r0, r5
 8010678:	4614      	mov	r4, r2
 801067a:	f7ff ffdb 	bl	8010634 <__mcmp>
 801067e:	1e06      	subs	r6, r0, #0
 8010680:	d111      	bne.n	80106a6 <__mdiff+0x3a>
 8010682:	4631      	mov	r1, r6
 8010684:	4638      	mov	r0, r7
 8010686:	f7ff fd0d 	bl	80100a4 <_Balloc>
 801068a:	4602      	mov	r2, r0
 801068c:	b928      	cbnz	r0, 801069a <__mdiff+0x2e>
 801068e:	f240 2132 	movw	r1, #562	; 0x232
 8010692:	4b3a      	ldr	r3, [pc, #232]	; (801077c <__mdiff+0x110>)
 8010694:	483a      	ldr	r0, [pc, #232]	; (8010780 <__mdiff+0x114>)
 8010696:	f001 f801 	bl	801169c <__assert_func>
 801069a:	2301      	movs	r3, #1
 801069c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80106a0:	4610      	mov	r0, r2
 80106a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a6:	bfa4      	itt	ge
 80106a8:	4623      	movge	r3, r4
 80106aa:	462c      	movge	r4, r5
 80106ac:	4638      	mov	r0, r7
 80106ae:	6861      	ldr	r1, [r4, #4]
 80106b0:	bfa6      	itte	ge
 80106b2:	461d      	movge	r5, r3
 80106b4:	2600      	movge	r6, #0
 80106b6:	2601      	movlt	r6, #1
 80106b8:	f7ff fcf4 	bl	80100a4 <_Balloc>
 80106bc:	4602      	mov	r2, r0
 80106be:	b918      	cbnz	r0, 80106c8 <__mdiff+0x5c>
 80106c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80106c4:	4b2d      	ldr	r3, [pc, #180]	; (801077c <__mdiff+0x110>)
 80106c6:	e7e5      	b.n	8010694 <__mdiff+0x28>
 80106c8:	f102 0814 	add.w	r8, r2, #20
 80106cc:	46c2      	mov	sl, r8
 80106ce:	f04f 0c00 	mov.w	ip, #0
 80106d2:	6927      	ldr	r7, [r4, #16]
 80106d4:	60c6      	str	r6, [r0, #12]
 80106d6:	692e      	ldr	r6, [r5, #16]
 80106d8:	f104 0014 	add.w	r0, r4, #20
 80106dc:	f105 0914 	add.w	r9, r5, #20
 80106e0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80106e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80106e8:	3410      	adds	r4, #16
 80106ea:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80106ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80106f2:	fa1f f18b 	uxth.w	r1, fp
 80106f6:	448c      	add	ip, r1
 80106f8:	b299      	uxth	r1, r3
 80106fa:	0c1b      	lsrs	r3, r3, #16
 80106fc:	ebac 0101 	sub.w	r1, ip, r1
 8010700:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010704:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010708:	b289      	uxth	r1, r1
 801070a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801070e:	454e      	cmp	r6, r9
 8010710:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010714:	f84a 3b04 	str.w	r3, [sl], #4
 8010718:	d8e7      	bhi.n	80106ea <__mdiff+0x7e>
 801071a:	1b73      	subs	r3, r6, r5
 801071c:	3b15      	subs	r3, #21
 801071e:	f023 0303 	bic.w	r3, r3, #3
 8010722:	3515      	adds	r5, #21
 8010724:	3304      	adds	r3, #4
 8010726:	42ae      	cmp	r6, r5
 8010728:	bf38      	it	cc
 801072a:	2304      	movcc	r3, #4
 801072c:	4418      	add	r0, r3
 801072e:	4443      	add	r3, r8
 8010730:	461e      	mov	r6, r3
 8010732:	4605      	mov	r5, r0
 8010734:	4575      	cmp	r5, lr
 8010736:	d30e      	bcc.n	8010756 <__mdiff+0xea>
 8010738:	f10e 0103 	add.w	r1, lr, #3
 801073c:	1a09      	subs	r1, r1, r0
 801073e:	f021 0103 	bic.w	r1, r1, #3
 8010742:	3803      	subs	r0, #3
 8010744:	4586      	cmp	lr, r0
 8010746:	bf38      	it	cc
 8010748:	2100      	movcc	r1, #0
 801074a:	4419      	add	r1, r3
 801074c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8010750:	b18b      	cbz	r3, 8010776 <__mdiff+0x10a>
 8010752:	6117      	str	r7, [r2, #16]
 8010754:	e7a4      	b.n	80106a0 <__mdiff+0x34>
 8010756:	f855 8b04 	ldr.w	r8, [r5], #4
 801075a:	fa1f f188 	uxth.w	r1, r8
 801075e:	4461      	add	r1, ip
 8010760:	140c      	asrs	r4, r1, #16
 8010762:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010766:	b289      	uxth	r1, r1
 8010768:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801076c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8010770:	f846 1b04 	str.w	r1, [r6], #4
 8010774:	e7de      	b.n	8010734 <__mdiff+0xc8>
 8010776:	3f01      	subs	r7, #1
 8010778:	e7e8      	b.n	801074c <__mdiff+0xe0>
 801077a:	bf00      	nop
 801077c:	08013094 	.word	0x08013094
 8010780:	08013137 	.word	0x08013137

08010784 <__ulp>:
 8010784:	4b11      	ldr	r3, [pc, #68]	; (80107cc <__ulp+0x48>)
 8010786:	400b      	ands	r3, r1
 8010788:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801078c:	2b00      	cmp	r3, #0
 801078e:	dd02      	ble.n	8010796 <__ulp+0x12>
 8010790:	2000      	movs	r0, #0
 8010792:	4619      	mov	r1, r3
 8010794:	4770      	bx	lr
 8010796:	425b      	negs	r3, r3
 8010798:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801079c:	f04f 0000 	mov.w	r0, #0
 80107a0:	f04f 0100 	mov.w	r1, #0
 80107a4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80107a8:	da04      	bge.n	80107b4 <__ulp+0x30>
 80107aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80107ae:	fa43 f102 	asr.w	r1, r3, r2
 80107b2:	4770      	bx	lr
 80107b4:	f1a2 0314 	sub.w	r3, r2, #20
 80107b8:	2b1e      	cmp	r3, #30
 80107ba:	bfd6      	itet	le
 80107bc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80107c0:	2301      	movgt	r3, #1
 80107c2:	fa22 f303 	lsrle.w	r3, r2, r3
 80107c6:	4618      	mov	r0, r3
 80107c8:	4770      	bx	lr
 80107ca:	bf00      	nop
 80107cc:	7ff00000 	.word	0x7ff00000

080107d0 <__b2d>:
 80107d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107d4:	6907      	ldr	r7, [r0, #16]
 80107d6:	f100 0914 	add.w	r9, r0, #20
 80107da:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80107de:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80107e2:	f1a7 0804 	sub.w	r8, r7, #4
 80107e6:	4630      	mov	r0, r6
 80107e8:	f7ff fd4e 	bl	8010288 <__hi0bits>
 80107ec:	f1c0 0320 	rsb	r3, r0, #32
 80107f0:	280a      	cmp	r0, #10
 80107f2:	600b      	str	r3, [r1, #0]
 80107f4:	491f      	ldr	r1, [pc, #124]	; (8010874 <__b2d+0xa4>)
 80107f6:	dc17      	bgt.n	8010828 <__b2d+0x58>
 80107f8:	45c1      	cmp	r9, r8
 80107fa:	bf28      	it	cs
 80107fc:	2200      	movcs	r2, #0
 80107fe:	f1c0 0c0b 	rsb	ip, r0, #11
 8010802:	fa26 f30c 	lsr.w	r3, r6, ip
 8010806:	bf38      	it	cc
 8010808:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801080c:	ea43 0501 	orr.w	r5, r3, r1
 8010810:	f100 0315 	add.w	r3, r0, #21
 8010814:	fa06 f303 	lsl.w	r3, r6, r3
 8010818:	fa22 f20c 	lsr.w	r2, r2, ip
 801081c:	ea43 0402 	orr.w	r4, r3, r2
 8010820:	4620      	mov	r0, r4
 8010822:	4629      	mov	r1, r5
 8010824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010828:	45c1      	cmp	r9, r8
 801082a:	bf2e      	itee	cs
 801082c:	2200      	movcs	r2, #0
 801082e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010832:	f1a7 0808 	subcc.w	r8, r7, #8
 8010836:	f1b0 030b 	subs.w	r3, r0, #11
 801083a:	d016      	beq.n	801086a <__b2d+0x9a>
 801083c:	f1c3 0720 	rsb	r7, r3, #32
 8010840:	fa22 f107 	lsr.w	r1, r2, r7
 8010844:	45c8      	cmp	r8, r9
 8010846:	fa06 f603 	lsl.w	r6, r6, r3
 801084a:	ea46 0601 	orr.w	r6, r6, r1
 801084e:	bf94      	ite	ls
 8010850:	2100      	movls	r1, #0
 8010852:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8010856:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801085a:	fa02 f003 	lsl.w	r0, r2, r3
 801085e:	40f9      	lsrs	r1, r7
 8010860:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010864:	ea40 0401 	orr.w	r4, r0, r1
 8010868:	e7da      	b.n	8010820 <__b2d+0x50>
 801086a:	4614      	mov	r4, r2
 801086c:	ea46 0501 	orr.w	r5, r6, r1
 8010870:	e7d6      	b.n	8010820 <__b2d+0x50>
 8010872:	bf00      	nop
 8010874:	3ff00000 	.word	0x3ff00000

08010878 <__d2b>:
 8010878:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801087c:	2101      	movs	r1, #1
 801087e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010882:	4690      	mov	r8, r2
 8010884:	461d      	mov	r5, r3
 8010886:	f7ff fc0d 	bl	80100a4 <_Balloc>
 801088a:	4604      	mov	r4, r0
 801088c:	b930      	cbnz	r0, 801089c <__d2b+0x24>
 801088e:	4602      	mov	r2, r0
 8010890:	f240 310a 	movw	r1, #778	; 0x30a
 8010894:	4b24      	ldr	r3, [pc, #144]	; (8010928 <__d2b+0xb0>)
 8010896:	4825      	ldr	r0, [pc, #148]	; (801092c <__d2b+0xb4>)
 8010898:	f000 ff00 	bl	801169c <__assert_func>
 801089c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80108a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80108a4:	bb2d      	cbnz	r5, 80108f2 <__d2b+0x7a>
 80108a6:	9301      	str	r3, [sp, #4]
 80108a8:	f1b8 0300 	subs.w	r3, r8, #0
 80108ac:	d026      	beq.n	80108fc <__d2b+0x84>
 80108ae:	4668      	mov	r0, sp
 80108b0:	9300      	str	r3, [sp, #0]
 80108b2:	f7ff fd09 	bl	80102c8 <__lo0bits>
 80108b6:	9900      	ldr	r1, [sp, #0]
 80108b8:	b1f0      	cbz	r0, 80108f8 <__d2b+0x80>
 80108ba:	9a01      	ldr	r2, [sp, #4]
 80108bc:	f1c0 0320 	rsb	r3, r0, #32
 80108c0:	fa02 f303 	lsl.w	r3, r2, r3
 80108c4:	430b      	orrs	r3, r1
 80108c6:	40c2      	lsrs	r2, r0
 80108c8:	6163      	str	r3, [r4, #20]
 80108ca:	9201      	str	r2, [sp, #4]
 80108cc:	9b01      	ldr	r3, [sp, #4]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	bf14      	ite	ne
 80108d2:	2102      	movne	r1, #2
 80108d4:	2101      	moveq	r1, #1
 80108d6:	61a3      	str	r3, [r4, #24]
 80108d8:	6121      	str	r1, [r4, #16]
 80108da:	b1c5      	cbz	r5, 801090e <__d2b+0x96>
 80108dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80108e0:	4405      	add	r5, r0
 80108e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80108e6:	603d      	str	r5, [r7, #0]
 80108e8:	6030      	str	r0, [r6, #0]
 80108ea:	4620      	mov	r0, r4
 80108ec:	b002      	add	sp, #8
 80108ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80108f6:	e7d6      	b.n	80108a6 <__d2b+0x2e>
 80108f8:	6161      	str	r1, [r4, #20]
 80108fa:	e7e7      	b.n	80108cc <__d2b+0x54>
 80108fc:	a801      	add	r0, sp, #4
 80108fe:	f7ff fce3 	bl	80102c8 <__lo0bits>
 8010902:	2101      	movs	r1, #1
 8010904:	9b01      	ldr	r3, [sp, #4]
 8010906:	6121      	str	r1, [r4, #16]
 8010908:	6163      	str	r3, [r4, #20]
 801090a:	3020      	adds	r0, #32
 801090c:	e7e5      	b.n	80108da <__d2b+0x62>
 801090e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010912:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010916:	6038      	str	r0, [r7, #0]
 8010918:	6918      	ldr	r0, [r3, #16]
 801091a:	f7ff fcb5 	bl	8010288 <__hi0bits>
 801091e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010922:	6031      	str	r1, [r6, #0]
 8010924:	e7e1      	b.n	80108ea <__d2b+0x72>
 8010926:	bf00      	nop
 8010928:	08013094 	.word	0x08013094
 801092c:	08013137 	.word	0x08013137

08010930 <__ratio>:
 8010930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010934:	4688      	mov	r8, r1
 8010936:	4669      	mov	r1, sp
 8010938:	4681      	mov	r9, r0
 801093a:	f7ff ff49 	bl	80107d0 <__b2d>
 801093e:	460f      	mov	r7, r1
 8010940:	4604      	mov	r4, r0
 8010942:	460d      	mov	r5, r1
 8010944:	4640      	mov	r0, r8
 8010946:	a901      	add	r1, sp, #4
 8010948:	f7ff ff42 	bl	80107d0 <__b2d>
 801094c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010950:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010954:	468b      	mov	fp, r1
 8010956:	eba3 0c02 	sub.w	ip, r3, r2
 801095a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801095e:	1a9b      	subs	r3, r3, r2
 8010960:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010964:	2b00      	cmp	r3, #0
 8010966:	bfd5      	itete	le
 8010968:	460a      	movle	r2, r1
 801096a:	462a      	movgt	r2, r5
 801096c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010970:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010974:	bfd8      	it	le
 8010976:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801097a:	465b      	mov	r3, fp
 801097c:	4602      	mov	r2, r0
 801097e:	4639      	mov	r1, r7
 8010980:	4620      	mov	r0, r4
 8010982:	f7ef ff49 	bl	8000818 <__aeabi_ddiv>
 8010986:	b003      	add	sp, #12
 8010988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801098c <__copybits>:
 801098c:	3901      	subs	r1, #1
 801098e:	b570      	push	{r4, r5, r6, lr}
 8010990:	1149      	asrs	r1, r1, #5
 8010992:	6914      	ldr	r4, [r2, #16]
 8010994:	3101      	adds	r1, #1
 8010996:	f102 0314 	add.w	r3, r2, #20
 801099a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801099e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80109a2:	1f05      	subs	r5, r0, #4
 80109a4:	42a3      	cmp	r3, r4
 80109a6:	d30c      	bcc.n	80109c2 <__copybits+0x36>
 80109a8:	1aa3      	subs	r3, r4, r2
 80109aa:	3b11      	subs	r3, #17
 80109ac:	f023 0303 	bic.w	r3, r3, #3
 80109b0:	3211      	adds	r2, #17
 80109b2:	42a2      	cmp	r2, r4
 80109b4:	bf88      	it	hi
 80109b6:	2300      	movhi	r3, #0
 80109b8:	4418      	add	r0, r3
 80109ba:	2300      	movs	r3, #0
 80109bc:	4288      	cmp	r0, r1
 80109be:	d305      	bcc.n	80109cc <__copybits+0x40>
 80109c0:	bd70      	pop	{r4, r5, r6, pc}
 80109c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80109c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80109ca:	e7eb      	b.n	80109a4 <__copybits+0x18>
 80109cc:	f840 3b04 	str.w	r3, [r0], #4
 80109d0:	e7f4      	b.n	80109bc <__copybits+0x30>

080109d2 <__any_on>:
 80109d2:	f100 0214 	add.w	r2, r0, #20
 80109d6:	6900      	ldr	r0, [r0, #16]
 80109d8:	114b      	asrs	r3, r1, #5
 80109da:	4298      	cmp	r0, r3
 80109dc:	b510      	push	{r4, lr}
 80109de:	db11      	blt.n	8010a04 <__any_on+0x32>
 80109e0:	dd0a      	ble.n	80109f8 <__any_on+0x26>
 80109e2:	f011 011f 	ands.w	r1, r1, #31
 80109e6:	d007      	beq.n	80109f8 <__any_on+0x26>
 80109e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80109ec:	fa24 f001 	lsr.w	r0, r4, r1
 80109f0:	fa00 f101 	lsl.w	r1, r0, r1
 80109f4:	428c      	cmp	r4, r1
 80109f6:	d10b      	bne.n	8010a10 <__any_on+0x3e>
 80109f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80109fc:	4293      	cmp	r3, r2
 80109fe:	d803      	bhi.n	8010a08 <__any_on+0x36>
 8010a00:	2000      	movs	r0, #0
 8010a02:	bd10      	pop	{r4, pc}
 8010a04:	4603      	mov	r3, r0
 8010a06:	e7f7      	b.n	80109f8 <__any_on+0x26>
 8010a08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a0c:	2900      	cmp	r1, #0
 8010a0e:	d0f5      	beq.n	80109fc <__any_on+0x2a>
 8010a10:	2001      	movs	r0, #1
 8010a12:	e7f6      	b.n	8010a02 <__any_on+0x30>

08010a14 <_calloc_r>:
 8010a14:	b570      	push	{r4, r5, r6, lr}
 8010a16:	fba1 5402 	umull	r5, r4, r1, r2
 8010a1a:	b934      	cbnz	r4, 8010a2a <_calloc_r+0x16>
 8010a1c:	4629      	mov	r1, r5
 8010a1e:	f000 f82d 	bl	8010a7c <_malloc_r>
 8010a22:	4606      	mov	r6, r0
 8010a24:	b928      	cbnz	r0, 8010a32 <_calloc_r+0x1e>
 8010a26:	4630      	mov	r0, r6
 8010a28:	bd70      	pop	{r4, r5, r6, pc}
 8010a2a:	220c      	movs	r2, #12
 8010a2c:	2600      	movs	r6, #0
 8010a2e:	6002      	str	r2, [r0, #0]
 8010a30:	e7f9      	b.n	8010a26 <_calloc_r+0x12>
 8010a32:	462a      	mov	r2, r5
 8010a34:	4621      	mov	r1, r4
 8010a36:	f7fd ff5b 	bl	800e8f0 <memset>
 8010a3a:	e7f4      	b.n	8010a26 <_calloc_r+0x12>

08010a3c <sbrk_aligned>:
 8010a3c:	b570      	push	{r4, r5, r6, lr}
 8010a3e:	4e0e      	ldr	r6, [pc, #56]	; (8010a78 <sbrk_aligned+0x3c>)
 8010a40:	460c      	mov	r4, r1
 8010a42:	6831      	ldr	r1, [r6, #0]
 8010a44:	4605      	mov	r5, r0
 8010a46:	b911      	cbnz	r1, 8010a4e <sbrk_aligned+0x12>
 8010a48:	f000 fcdc 	bl	8011404 <_sbrk_r>
 8010a4c:	6030      	str	r0, [r6, #0]
 8010a4e:	4621      	mov	r1, r4
 8010a50:	4628      	mov	r0, r5
 8010a52:	f000 fcd7 	bl	8011404 <_sbrk_r>
 8010a56:	1c43      	adds	r3, r0, #1
 8010a58:	d00a      	beq.n	8010a70 <sbrk_aligned+0x34>
 8010a5a:	1cc4      	adds	r4, r0, #3
 8010a5c:	f024 0403 	bic.w	r4, r4, #3
 8010a60:	42a0      	cmp	r0, r4
 8010a62:	d007      	beq.n	8010a74 <sbrk_aligned+0x38>
 8010a64:	1a21      	subs	r1, r4, r0
 8010a66:	4628      	mov	r0, r5
 8010a68:	f000 fccc 	bl	8011404 <_sbrk_r>
 8010a6c:	3001      	adds	r0, #1
 8010a6e:	d101      	bne.n	8010a74 <sbrk_aligned+0x38>
 8010a70:	f04f 34ff 	mov.w	r4, #4294967295
 8010a74:	4620      	mov	r0, r4
 8010a76:	bd70      	pop	{r4, r5, r6, pc}
 8010a78:	20000e04 	.word	0x20000e04

08010a7c <_malloc_r>:
 8010a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a80:	1ccd      	adds	r5, r1, #3
 8010a82:	f025 0503 	bic.w	r5, r5, #3
 8010a86:	3508      	adds	r5, #8
 8010a88:	2d0c      	cmp	r5, #12
 8010a8a:	bf38      	it	cc
 8010a8c:	250c      	movcc	r5, #12
 8010a8e:	2d00      	cmp	r5, #0
 8010a90:	4607      	mov	r7, r0
 8010a92:	db01      	blt.n	8010a98 <_malloc_r+0x1c>
 8010a94:	42a9      	cmp	r1, r5
 8010a96:	d905      	bls.n	8010aa4 <_malloc_r+0x28>
 8010a98:	230c      	movs	r3, #12
 8010a9a:	2600      	movs	r6, #0
 8010a9c:	603b      	str	r3, [r7, #0]
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa4:	4e2e      	ldr	r6, [pc, #184]	; (8010b60 <_malloc_r+0xe4>)
 8010aa6:	f000 ff9f 	bl	80119e8 <__malloc_lock>
 8010aaa:	6833      	ldr	r3, [r6, #0]
 8010aac:	461c      	mov	r4, r3
 8010aae:	bb34      	cbnz	r4, 8010afe <_malloc_r+0x82>
 8010ab0:	4629      	mov	r1, r5
 8010ab2:	4638      	mov	r0, r7
 8010ab4:	f7ff ffc2 	bl	8010a3c <sbrk_aligned>
 8010ab8:	1c43      	adds	r3, r0, #1
 8010aba:	4604      	mov	r4, r0
 8010abc:	d14d      	bne.n	8010b5a <_malloc_r+0xde>
 8010abe:	6834      	ldr	r4, [r6, #0]
 8010ac0:	4626      	mov	r6, r4
 8010ac2:	2e00      	cmp	r6, #0
 8010ac4:	d140      	bne.n	8010b48 <_malloc_r+0xcc>
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	4631      	mov	r1, r6
 8010aca:	4638      	mov	r0, r7
 8010acc:	eb04 0803 	add.w	r8, r4, r3
 8010ad0:	f000 fc98 	bl	8011404 <_sbrk_r>
 8010ad4:	4580      	cmp	r8, r0
 8010ad6:	d13a      	bne.n	8010b4e <_malloc_r+0xd2>
 8010ad8:	6821      	ldr	r1, [r4, #0]
 8010ada:	3503      	adds	r5, #3
 8010adc:	1a6d      	subs	r5, r5, r1
 8010ade:	f025 0503 	bic.w	r5, r5, #3
 8010ae2:	3508      	adds	r5, #8
 8010ae4:	2d0c      	cmp	r5, #12
 8010ae6:	bf38      	it	cc
 8010ae8:	250c      	movcc	r5, #12
 8010aea:	4638      	mov	r0, r7
 8010aec:	4629      	mov	r1, r5
 8010aee:	f7ff ffa5 	bl	8010a3c <sbrk_aligned>
 8010af2:	3001      	adds	r0, #1
 8010af4:	d02b      	beq.n	8010b4e <_malloc_r+0xd2>
 8010af6:	6823      	ldr	r3, [r4, #0]
 8010af8:	442b      	add	r3, r5
 8010afa:	6023      	str	r3, [r4, #0]
 8010afc:	e00e      	b.n	8010b1c <_malloc_r+0xa0>
 8010afe:	6822      	ldr	r2, [r4, #0]
 8010b00:	1b52      	subs	r2, r2, r5
 8010b02:	d41e      	bmi.n	8010b42 <_malloc_r+0xc6>
 8010b04:	2a0b      	cmp	r2, #11
 8010b06:	d916      	bls.n	8010b36 <_malloc_r+0xba>
 8010b08:	1961      	adds	r1, r4, r5
 8010b0a:	42a3      	cmp	r3, r4
 8010b0c:	6025      	str	r5, [r4, #0]
 8010b0e:	bf18      	it	ne
 8010b10:	6059      	strne	r1, [r3, #4]
 8010b12:	6863      	ldr	r3, [r4, #4]
 8010b14:	bf08      	it	eq
 8010b16:	6031      	streq	r1, [r6, #0]
 8010b18:	5162      	str	r2, [r4, r5]
 8010b1a:	604b      	str	r3, [r1, #4]
 8010b1c:	4638      	mov	r0, r7
 8010b1e:	f104 060b 	add.w	r6, r4, #11
 8010b22:	f000 ff67 	bl	80119f4 <__malloc_unlock>
 8010b26:	f026 0607 	bic.w	r6, r6, #7
 8010b2a:	1d23      	adds	r3, r4, #4
 8010b2c:	1af2      	subs	r2, r6, r3
 8010b2e:	d0b6      	beq.n	8010a9e <_malloc_r+0x22>
 8010b30:	1b9b      	subs	r3, r3, r6
 8010b32:	50a3      	str	r3, [r4, r2]
 8010b34:	e7b3      	b.n	8010a9e <_malloc_r+0x22>
 8010b36:	6862      	ldr	r2, [r4, #4]
 8010b38:	42a3      	cmp	r3, r4
 8010b3a:	bf0c      	ite	eq
 8010b3c:	6032      	streq	r2, [r6, #0]
 8010b3e:	605a      	strne	r2, [r3, #4]
 8010b40:	e7ec      	b.n	8010b1c <_malloc_r+0xa0>
 8010b42:	4623      	mov	r3, r4
 8010b44:	6864      	ldr	r4, [r4, #4]
 8010b46:	e7b2      	b.n	8010aae <_malloc_r+0x32>
 8010b48:	4634      	mov	r4, r6
 8010b4a:	6876      	ldr	r6, [r6, #4]
 8010b4c:	e7b9      	b.n	8010ac2 <_malloc_r+0x46>
 8010b4e:	230c      	movs	r3, #12
 8010b50:	4638      	mov	r0, r7
 8010b52:	603b      	str	r3, [r7, #0]
 8010b54:	f000 ff4e 	bl	80119f4 <__malloc_unlock>
 8010b58:	e7a1      	b.n	8010a9e <_malloc_r+0x22>
 8010b5a:	6025      	str	r5, [r4, #0]
 8010b5c:	e7de      	b.n	8010b1c <_malloc_r+0xa0>
 8010b5e:	bf00      	nop
 8010b60:	20000e00 	.word	0x20000e00

08010b64 <__ssputs_r>:
 8010b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b68:	688e      	ldr	r6, [r1, #8]
 8010b6a:	4682      	mov	sl, r0
 8010b6c:	429e      	cmp	r6, r3
 8010b6e:	460c      	mov	r4, r1
 8010b70:	4690      	mov	r8, r2
 8010b72:	461f      	mov	r7, r3
 8010b74:	d838      	bhi.n	8010be8 <__ssputs_r+0x84>
 8010b76:	898a      	ldrh	r2, [r1, #12]
 8010b78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b7c:	d032      	beq.n	8010be4 <__ssputs_r+0x80>
 8010b7e:	6825      	ldr	r5, [r4, #0]
 8010b80:	6909      	ldr	r1, [r1, #16]
 8010b82:	3301      	adds	r3, #1
 8010b84:	eba5 0901 	sub.w	r9, r5, r1
 8010b88:	6965      	ldr	r5, [r4, #20]
 8010b8a:	444b      	add	r3, r9
 8010b8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010b94:	106d      	asrs	r5, r5, #1
 8010b96:	429d      	cmp	r5, r3
 8010b98:	bf38      	it	cc
 8010b9a:	461d      	movcc	r5, r3
 8010b9c:	0553      	lsls	r3, r2, #21
 8010b9e:	d531      	bpl.n	8010c04 <__ssputs_r+0xa0>
 8010ba0:	4629      	mov	r1, r5
 8010ba2:	f7ff ff6b 	bl	8010a7c <_malloc_r>
 8010ba6:	4606      	mov	r6, r0
 8010ba8:	b950      	cbnz	r0, 8010bc0 <__ssputs_r+0x5c>
 8010baa:	230c      	movs	r3, #12
 8010bac:	f04f 30ff 	mov.w	r0, #4294967295
 8010bb0:	f8ca 3000 	str.w	r3, [sl]
 8010bb4:	89a3      	ldrh	r3, [r4, #12]
 8010bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bba:	81a3      	strh	r3, [r4, #12]
 8010bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bc0:	464a      	mov	r2, r9
 8010bc2:	6921      	ldr	r1, [r4, #16]
 8010bc4:	f7fd fe86 	bl	800e8d4 <memcpy>
 8010bc8:	89a3      	ldrh	r3, [r4, #12]
 8010bca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bd2:	81a3      	strh	r3, [r4, #12]
 8010bd4:	6126      	str	r6, [r4, #16]
 8010bd6:	444e      	add	r6, r9
 8010bd8:	6026      	str	r6, [r4, #0]
 8010bda:	463e      	mov	r6, r7
 8010bdc:	6165      	str	r5, [r4, #20]
 8010bde:	eba5 0509 	sub.w	r5, r5, r9
 8010be2:	60a5      	str	r5, [r4, #8]
 8010be4:	42be      	cmp	r6, r7
 8010be6:	d900      	bls.n	8010bea <__ssputs_r+0x86>
 8010be8:	463e      	mov	r6, r7
 8010bea:	4632      	mov	r2, r6
 8010bec:	4641      	mov	r1, r8
 8010bee:	6820      	ldr	r0, [r4, #0]
 8010bf0:	f000 fee0 	bl	80119b4 <memmove>
 8010bf4:	68a3      	ldr	r3, [r4, #8]
 8010bf6:	2000      	movs	r0, #0
 8010bf8:	1b9b      	subs	r3, r3, r6
 8010bfa:	60a3      	str	r3, [r4, #8]
 8010bfc:	6823      	ldr	r3, [r4, #0]
 8010bfe:	4433      	add	r3, r6
 8010c00:	6023      	str	r3, [r4, #0]
 8010c02:	e7db      	b.n	8010bbc <__ssputs_r+0x58>
 8010c04:	462a      	mov	r2, r5
 8010c06:	f000 ff43 	bl	8011a90 <_realloc_r>
 8010c0a:	4606      	mov	r6, r0
 8010c0c:	2800      	cmp	r0, #0
 8010c0e:	d1e1      	bne.n	8010bd4 <__ssputs_r+0x70>
 8010c10:	4650      	mov	r0, sl
 8010c12:	6921      	ldr	r1, [r4, #16]
 8010c14:	f000 fef4 	bl	8011a00 <_free_r>
 8010c18:	e7c7      	b.n	8010baa <__ssputs_r+0x46>
	...

08010c1c <_svfiprintf_r>:
 8010c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c20:	4698      	mov	r8, r3
 8010c22:	898b      	ldrh	r3, [r1, #12]
 8010c24:	4607      	mov	r7, r0
 8010c26:	061b      	lsls	r3, r3, #24
 8010c28:	460d      	mov	r5, r1
 8010c2a:	4614      	mov	r4, r2
 8010c2c:	b09d      	sub	sp, #116	; 0x74
 8010c2e:	d50e      	bpl.n	8010c4e <_svfiprintf_r+0x32>
 8010c30:	690b      	ldr	r3, [r1, #16]
 8010c32:	b963      	cbnz	r3, 8010c4e <_svfiprintf_r+0x32>
 8010c34:	2140      	movs	r1, #64	; 0x40
 8010c36:	f7ff ff21 	bl	8010a7c <_malloc_r>
 8010c3a:	6028      	str	r0, [r5, #0]
 8010c3c:	6128      	str	r0, [r5, #16]
 8010c3e:	b920      	cbnz	r0, 8010c4a <_svfiprintf_r+0x2e>
 8010c40:	230c      	movs	r3, #12
 8010c42:	603b      	str	r3, [r7, #0]
 8010c44:	f04f 30ff 	mov.w	r0, #4294967295
 8010c48:	e0d1      	b.n	8010dee <_svfiprintf_r+0x1d2>
 8010c4a:	2340      	movs	r3, #64	; 0x40
 8010c4c:	616b      	str	r3, [r5, #20]
 8010c4e:	2300      	movs	r3, #0
 8010c50:	9309      	str	r3, [sp, #36]	; 0x24
 8010c52:	2320      	movs	r3, #32
 8010c54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c58:	2330      	movs	r3, #48	; 0x30
 8010c5a:	f04f 0901 	mov.w	r9, #1
 8010c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010e08 <_svfiprintf_r+0x1ec>
 8010c66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c6a:	4623      	mov	r3, r4
 8010c6c:	469a      	mov	sl, r3
 8010c6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c72:	b10a      	cbz	r2, 8010c78 <_svfiprintf_r+0x5c>
 8010c74:	2a25      	cmp	r2, #37	; 0x25
 8010c76:	d1f9      	bne.n	8010c6c <_svfiprintf_r+0x50>
 8010c78:	ebba 0b04 	subs.w	fp, sl, r4
 8010c7c:	d00b      	beq.n	8010c96 <_svfiprintf_r+0x7a>
 8010c7e:	465b      	mov	r3, fp
 8010c80:	4622      	mov	r2, r4
 8010c82:	4629      	mov	r1, r5
 8010c84:	4638      	mov	r0, r7
 8010c86:	f7ff ff6d 	bl	8010b64 <__ssputs_r>
 8010c8a:	3001      	adds	r0, #1
 8010c8c:	f000 80aa 	beq.w	8010de4 <_svfiprintf_r+0x1c8>
 8010c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c92:	445a      	add	r2, fp
 8010c94:	9209      	str	r2, [sp, #36]	; 0x24
 8010c96:	f89a 3000 	ldrb.w	r3, [sl]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	f000 80a2 	beq.w	8010de4 <_svfiprintf_r+0x1c8>
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8010ca6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010caa:	f10a 0a01 	add.w	sl, sl, #1
 8010cae:	9304      	str	r3, [sp, #16]
 8010cb0:	9307      	str	r3, [sp, #28]
 8010cb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cb6:	931a      	str	r3, [sp, #104]	; 0x68
 8010cb8:	4654      	mov	r4, sl
 8010cba:	2205      	movs	r2, #5
 8010cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cc0:	4851      	ldr	r0, [pc, #324]	; (8010e08 <_svfiprintf_r+0x1ec>)
 8010cc2:	f000 fe69 	bl	8011998 <memchr>
 8010cc6:	9a04      	ldr	r2, [sp, #16]
 8010cc8:	b9d8      	cbnz	r0, 8010d02 <_svfiprintf_r+0xe6>
 8010cca:	06d0      	lsls	r0, r2, #27
 8010ccc:	bf44      	itt	mi
 8010cce:	2320      	movmi	r3, #32
 8010cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cd4:	0711      	lsls	r1, r2, #28
 8010cd6:	bf44      	itt	mi
 8010cd8:	232b      	movmi	r3, #43	; 0x2b
 8010cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cde:	f89a 3000 	ldrb.w	r3, [sl]
 8010ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8010ce4:	d015      	beq.n	8010d12 <_svfiprintf_r+0xf6>
 8010ce6:	4654      	mov	r4, sl
 8010ce8:	2000      	movs	r0, #0
 8010cea:	f04f 0c0a 	mov.w	ip, #10
 8010cee:	9a07      	ldr	r2, [sp, #28]
 8010cf0:	4621      	mov	r1, r4
 8010cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cf6:	3b30      	subs	r3, #48	; 0x30
 8010cf8:	2b09      	cmp	r3, #9
 8010cfa:	d94e      	bls.n	8010d9a <_svfiprintf_r+0x17e>
 8010cfc:	b1b0      	cbz	r0, 8010d2c <_svfiprintf_r+0x110>
 8010cfe:	9207      	str	r2, [sp, #28]
 8010d00:	e014      	b.n	8010d2c <_svfiprintf_r+0x110>
 8010d02:	eba0 0308 	sub.w	r3, r0, r8
 8010d06:	fa09 f303 	lsl.w	r3, r9, r3
 8010d0a:	4313      	orrs	r3, r2
 8010d0c:	46a2      	mov	sl, r4
 8010d0e:	9304      	str	r3, [sp, #16]
 8010d10:	e7d2      	b.n	8010cb8 <_svfiprintf_r+0x9c>
 8010d12:	9b03      	ldr	r3, [sp, #12]
 8010d14:	1d19      	adds	r1, r3, #4
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	9103      	str	r1, [sp, #12]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	bfbb      	ittet	lt
 8010d1e:	425b      	neglt	r3, r3
 8010d20:	f042 0202 	orrlt.w	r2, r2, #2
 8010d24:	9307      	strge	r3, [sp, #28]
 8010d26:	9307      	strlt	r3, [sp, #28]
 8010d28:	bfb8      	it	lt
 8010d2a:	9204      	strlt	r2, [sp, #16]
 8010d2c:	7823      	ldrb	r3, [r4, #0]
 8010d2e:	2b2e      	cmp	r3, #46	; 0x2e
 8010d30:	d10c      	bne.n	8010d4c <_svfiprintf_r+0x130>
 8010d32:	7863      	ldrb	r3, [r4, #1]
 8010d34:	2b2a      	cmp	r3, #42	; 0x2a
 8010d36:	d135      	bne.n	8010da4 <_svfiprintf_r+0x188>
 8010d38:	9b03      	ldr	r3, [sp, #12]
 8010d3a:	3402      	adds	r4, #2
 8010d3c:	1d1a      	adds	r2, r3, #4
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	9203      	str	r2, [sp, #12]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	bfb8      	it	lt
 8010d46:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d4a:	9305      	str	r3, [sp, #20]
 8010d4c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010e0c <_svfiprintf_r+0x1f0>
 8010d50:	2203      	movs	r2, #3
 8010d52:	4650      	mov	r0, sl
 8010d54:	7821      	ldrb	r1, [r4, #0]
 8010d56:	f000 fe1f 	bl	8011998 <memchr>
 8010d5a:	b140      	cbz	r0, 8010d6e <_svfiprintf_r+0x152>
 8010d5c:	2340      	movs	r3, #64	; 0x40
 8010d5e:	eba0 000a 	sub.w	r0, r0, sl
 8010d62:	fa03 f000 	lsl.w	r0, r3, r0
 8010d66:	9b04      	ldr	r3, [sp, #16]
 8010d68:	3401      	adds	r4, #1
 8010d6a:	4303      	orrs	r3, r0
 8010d6c:	9304      	str	r3, [sp, #16]
 8010d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d72:	2206      	movs	r2, #6
 8010d74:	4826      	ldr	r0, [pc, #152]	; (8010e10 <_svfiprintf_r+0x1f4>)
 8010d76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d7a:	f000 fe0d 	bl	8011998 <memchr>
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	d038      	beq.n	8010df4 <_svfiprintf_r+0x1d8>
 8010d82:	4b24      	ldr	r3, [pc, #144]	; (8010e14 <_svfiprintf_r+0x1f8>)
 8010d84:	bb1b      	cbnz	r3, 8010dce <_svfiprintf_r+0x1b2>
 8010d86:	9b03      	ldr	r3, [sp, #12]
 8010d88:	3307      	adds	r3, #7
 8010d8a:	f023 0307 	bic.w	r3, r3, #7
 8010d8e:	3308      	adds	r3, #8
 8010d90:	9303      	str	r3, [sp, #12]
 8010d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d94:	4433      	add	r3, r6
 8010d96:	9309      	str	r3, [sp, #36]	; 0x24
 8010d98:	e767      	b.n	8010c6a <_svfiprintf_r+0x4e>
 8010d9a:	460c      	mov	r4, r1
 8010d9c:	2001      	movs	r0, #1
 8010d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010da2:	e7a5      	b.n	8010cf0 <_svfiprintf_r+0xd4>
 8010da4:	2300      	movs	r3, #0
 8010da6:	f04f 0c0a 	mov.w	ip, #10
 8010daa:	4619      	mov	r1, r3
 8010dac:	3401      	adds	r4, #1
 8010dae:	9305      	str	r3, [sp, #20]
 8010db0:	4620      	mov	r0, r4
 8010db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010db6:	3a30      	subs	r2, #48	; 0x30
 8010db8:	2a09      	cmp	r2, #9
 8010dba:	d903      	bls.n	8010dc4 <_svfiprintf_r+0x1a8>
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d0c5      	beq.n	8010d4c <_svfiprintf_r+0x130>
 8010dc0:	9105      	str	r1, [sp, #20]
 8010dc2:	e7c3      	b.n	8010d4c <_svfiprintf_r+0x130>
 8010dc4:	4604      	mov	r4, r0
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dcc:	e7f0      	b.n	8010db0 <_svfiprintf_r+0x194>
 8010dce:	ab03      	add	r3, sp, #12
 8010dd0:	9300      	str	r3, [sp, #0]
 8010dd2:	462a      	mov	r2, r5
 8010dd4:	4638      	mov	r0, r7
 8010dd6:	4b10      	ldr	r3, [pc, #64]	; (8010e18 <_svfiprintf_r+0x1fc>)
 8010dd8:	a904      	add	r1, sp, #16
 8010dda:	f3af 8000 	nop.w
 8010dde:	1c42      	adds	r2, r0, #1
 8010de0:	4606      	mov	r6, r0
 8010de2:	d1d6      	bne.n	8010d92 <_svfiprintf_r+0x176>
 8010de4:	89ab      	ldrh	r3, [r5, #12]
 8010de6:	065b      	lsls	r3, r3, #25
 8010de8:	f53f af2c 	bmi.w	8010c44 <_svfiprintf_r+0x28>
 8010dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dee:	b01d      	add	sp, #116	; 0x74
 8010df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df4:	ab03      	add	r3, sp, #12
 8010df6:	9300      	str	r3, [sp, #0]
 8010df8:	462a      	mov	r2, r5
 8010dfa:	4638      	mov	r0, r7
 8010dfc:	4b06      	ldr	r3, [pc, #24]	; (8010e18 <_svfiprintf_r+0x1fc>)
 8010dfe:	a904      	add	r1, sp, #16
 8010e00:	f000 f9d4 	bl	80111ac <_printf_i>
 8010e04:	e7eb      	b.n	8010dde <_svfiprintf_r+0x1c2>
 8010e06:	bf00      	nop
 8010e08:	08013294 	.word	0x08013294
 8010e0c:	0801329a 	.word	0x0801329a
 8010e10:	0801329e 	.word	0x0801329e
 8010e14:	00000000 	.word	0x00000000
 8010e18:	08010b65 	.word	0x08010b65

08010e1c <__sfputc_r>:
 8010e1c:	6893      	ldr	r3, [r2, #8]
 8010e1e:	b410      	push	{r4}
 8010e20:	3b01      	subs	r3, #1
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	6093      	str	r3, [r2, #8]
 8010e26:	da07      	bge.n	8010e38 <__sfputc_r+0x1c>
 8010e28:	6994      	ldr	r4, [r2, #24]
 8010e2a:	42a3      	cmp	r3, r4
 8010e2c:	db01      	blt.n	8010e32 <__sfputc_r+0x16>
 8010e2e:	290a      	cmp	r1, #10
 8010e30:	d102      	bne.n	8010e38 <__sfputc_r+0x1c>
 8010e32:	bc10      	pop	{r4}
 8010e34:	f000 bb52 	b.w	80114dc <__swbuf_r>
 8010e38:	6813      	ldr	r3, [r2, #0]
 8010e3a:	1c58      	adds	r0, r3, #1
 8010e3c:	6010      	str	r0, [r2, #0]
 8010e3e:	7019      	strb	r1, [r3, #0]
 8010e40:	4608      	mov	r0, r1
 8010e42:	bc10      	pop	{r4}
 8010e44:	4770      	bx	lr

08010e46 <__sfputs_r>:
 8010e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e48:	4606      	mov	r6, r0
 8010e4a:	460f      	mov	r7, r1
 8010e4c:	4614      	mov	r4, r2
 8010e4e:	18d5      	adds	r5, r2, r3
 8010e50:	42ac      	cmp	r4, r5
 8010e52:	d101      	bne.n	8010e58 <__sfputs_r+0x12>
 8010e54:	2000      	movs	r0, #0
 8010e56:	e007      	b.n	8010e68 <__sfputs_r+0x22>
 8010e58:	463a      	mov	r2, r7
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e60:	f7ff ffdc 	bl	8010e1c <__sfputc_r>
 8010e64:	1c43      	adds	r3, r0, #1
 8010e66:	d1f3      	bne.n	8010e50 <__sfputs_r+0xa>
 8010e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e6c <_vfiprintf_r>:
 8010e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e70:	460d      	mov	r5, r1
 8010e72:	4614      	mov	r4, r2
 8010e74:	4698      	mov	r8, r3
 8010e76:	4606      	mov	r6, r0
 8010e78:	b09d      	sub	sp, #116	; 0x74
 8010e7a:	b118      	cbz	r0, 8010e84 <_vfiprintf_r+0x18>
 8010e7c:	6983      	ldr	r3, [r0, #24]
 8010e7e:	b90b      	cbnz	r3, 8010e84 <_vfiprintf_r+0x18>
 8010e80:	f7fe fcf6 	bl	800f870 <__sinit>
 8010e84:	4b89      	ldr	r3, [pc, #548]	; (80110ac <_vfiprintf_r+0x240>)
 8010e86:	429d      	cmp	r5, r3
 8010e88:	d11b      	bne.n	8010ec2 <_vfiprintf_r+0x56>
 8010e8a:	6875      	ldr	r5, [r6, #4]
 8010e8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e8e:	07d9      	lsls	r1, r3, #31
 8010e90:	d405      	bmi.n	8010e9e <_vfiprintf_r+0x32>
 8010e92:	89ab      	ldrh	r3, [r5, #12]
 8010e94:	059a      	lsls	r2, r3, #22
 8010e96:	d402      	bmi.n	8010e9e <_vfiprintf_r+0x32>
 8010e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e9a:	f7ff f8ee 	bl	801007a <__retarget_lock_acquire_recursive>
 8010e9e:	89ab      	ldrh	r3, [r5, #12]
 8010ea0:	071b      	lsls	r3, r3, #28
 8010ea2:	d501      	bpl.n	8010ea8 <_vfiprintf_r+0x3c>
 8010ea4:	692b      	ldr	r3, [r5, #16]
 8010ea6:	b9eb      	cbnz	r3, 8010ee4 <_vfiprintf_r+0x78>
 8010ea8:	4629      	mov	r1, r5
 8010eaa:	4630      	mov	r0, r6
 8010eac:	f000 fb88 	bl	80115c0 <__swsetup_r>
 8010eb0:	b1c0      	cbz	r0, 8010ee4 <_vfiprintf_r+0x78>
 8010eb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010eb4:	07dc      	lsls	r4, r3, #31
 8010eb6:	d50e      	bpl.n	8010ed6 <_vfiprintf_r+0x6a>
 8010eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8010ebc:	b01d      	add	sp, #116	; 0x74
 8010ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ec2:	4b7b      	ldr	r3, [pc, #492]	; (80110b0 <_vfiprintf_r+0x244>)
 8010ec4:	429d      	cmp	r5, r3
 8010ec6:	d101      	bne.n	8010ecc <_vfiprintf_r+0x60>
 8010ec8:	68b5      	ldr	r5, [r6, #8]
 8010eca:	e7df      	b.n	8010e8c <_vfiprintf_r+0x20>
 8010ecc:	4b79      	ldr	r3, [pc, #484]	; (80110b4 <_vfiprintf_r+0x248>)
 8010ece:	429d      	cmp	r5, r3
 8010ed0:	bf08      	it	eq
 8010ed2:	68f5      	ldreq	r5, [r6, #12]
 8010ed4:	e7da      	b.n	8010e8c <_vfiprintf_r+0x20>
 8010ed6:	89ab      	ldrh	r3, [r5, #12]
 8010ed8:	0598      	lsls	r0, r3, #22
 8010eda:	d4ed      	bmi.n	8010eb8 <_vfiprintf_r+0x4c>
 8010edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ede:	f7ff f8cd 	bl	801007c <__retarget_lock_release_recursive>
 8010ee2:	e7e9      	b.n	8010eb8 <_vfiprintf_r+0x4c>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ee8:	2320      	movs	r3, #32
 8010eea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010eee:	2330      	movs	r3, #48	; 0x30
 8010ef0:	f04f 0901 	mov.w	r9, #1
 8010ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ef8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80110b8 <_vfiprintf_r+0x24c>
 8010efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f00:	4623      	mov	r3, r4
 8010f02:	469a      	mov	sl, r3
 8010f04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f08:	b10a      	cbz	r2, 8010f0e <_vfiprintf_r+0xa2>
 8010f0a:	2a25      	cmp	r2, #37	; 0x25
 8010f0c:	d1f9      	bne.n	8010f02 <_vfiprintf_r+0x96>
 8010f0e:	ebba 0b04 	subs.w	fp, sl, r4
 8010f12:	d00b      	beq.n	8010f2c <_vfiprintf_r+0xc0>
 8010f14:	465b      	mov	r3, fp
 8010f16:	4622      	mov	r2, r4
 8010f18:	4629      	mov	r1, r5
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	f7ff ff93 	bl	8010e46 <__sfputs_r>
 8010f20:	3001      	adds	r0, #1
 8010f22:	f000 80aa 	beq.w	801107a <_vfiprintf_r+0x20e>
 8010f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f28:	445a      	add	r2, fp
 8010f2a:	9209      	str	r2, [sp, #36]	; 0x24
 8010f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 80a2 	beq.w	801107a <_vfiprintf_r+0x20e>
 8010f36:	2300      	movs	r3, #0
 8010f38:	f04f 32ff 	mov.w	r2, #4294967295
 8010f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f40:	f10a 0a01 	add.w	sl, sl, #1
 8010f44:	9304      	str	r3, [sp, #16]
 8010f46:	9307      	str	r3, [sp, #28]
 8010f48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f4c:	931a      	str	r3, [sp, #104]	; 0x68
 8010f4e:	4654      	mov	r4, sl
 8010f50:	2205      	movs	r2, #5
 8010f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f56:	4858      	ldr	r0, [pc, #352]	; (80110b8 <_vfiprintf_r+0x24c>)
 8010f58:	f000 fd1e 	bl	8011998 <memchr>
 8010f5c:	9a04      	ldr	r2, [sp, #16]
 8010f5e:	b9d8      	cbnz	r0, 8010f98 <_vfiprintf_r+0x12c>
 8010f60:	06d1      	lsls	r1, r2, #27
 8010f62:	bf44      	itt	mi
 8010f64:	2320      	movmi	r3, #32
 8010f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f6a:	0713      	lsls	r3, r2, #28
 8010f6c:	bf44      	itt	mi
 8010f6e:	232b      	movmi	r3, #43	; 0x2b
 8010f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f74:	f89a 3000 	ldrb.w	r3, [sl]
 8010f78:	2b2a      	cmp	r3, #42	; 0x2a
 8010f7a:	d015      	beq.n	8010fa8 <_vfiprintf_r+0x13c>
 8010f7c:	4654      	mov	r4, sl
 8010f7e:	2000      	movs	r0, #0
 8010f80:	f04f 0c0a 	mov.w	ip, #10
 8010f84:	9a07      	ldr	r2, [sp, #28]
 8010f86:	4621      	mov	r1, r4
 8010f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f8c:	3b30      	subs	r3, #48	; 0x30
 8010f8e:	2b09      	cmp	r3, #9
 8010f90:	d94e      	bls.n	8011030 <_vfiprintf_r+0x1c4>
 8010f92:	b1b0      	cbz	r0, 8010fc2 <_vfiprintf_r+0x156>
 8010f94:	9207      	str	r2, [sp, #28]
 8010f96:	e014      	b.n	8010fc2 <_vfiprintf_r+0x156>
 8010f98:	eba0 0308 	sub.w	r3, r0, r8
 8010f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8010fa0:	4313      	orrs	r3, r2
 8010fa2:	46a2      	mov	sl, r4
 8010fa4:	9304      	str	r3, [sp, #16]
 8010fa6:	e7d2      	b.n	8010f4e <_vfiprintf_r+0xe2>
 8010fa8:	9b03      	ldr	r3, [sp, #12]
 8010faa:	1d19      	adds	r1, r3, #4
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	9103      	str	r1, [sp, #12]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	bfbb      	ittet	lt
 8010fb4:	425b      	neglt	r3, r3
 8010fb6:	f042 0202 	orrlt.w	r2, r2, #2
 8010fba:	9307      	strge	r3, [sp, #28]
 8010fbc:	9307      	strlt	r3, [sp, #28]
 8010fbe:	bfb8      	it	lt
 8010fc0:	9204      	strlt	r2, [sp, #16]
 8010fc2:	7823      	ldrb	r3, [r4, #0]
 8010fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8010fc6:	d10c      	bne.n	8010fe2 <_vfiprintf_r+0x176>
 8010fc8:	7863      	ldrb	r3, [r4, #1]
 8010fca:	2b2a      	cmp	r3, #42	; 0x2a
 8010fcc:	d135      	bne.n	801103a <_vfiprintf_r+0x1ce>
 8010fce:	9b03      	ldr	r3, [sp, #12]
 8010fd0:	3402      	adds	r4, #2
 8010fd2:	1d1a      	adds	r2, r3, #4
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	9203      	str	r2, [sp, #12]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	bfb8      	it	lt
 8010fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8010fe0:	9305      	str	r3, [sp, #20]
 8010fe2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80110bc <_vfiprintf_r+0x250>
 8010fe6:	2203      	movs	r2, #3
 8010fe8:	4650      	mov	r0, sl
 8010fea:	7821      	ldrb	r1, [r4, #0]
 8010fec:	f000 fcd4 	bl	8011998 <memchr>
 8010ff0:	b140      	cbz	r0, 8011004 <_vfiprintf_r+0x198>
 8010ff2:	2340      	movs	r3, #64	; 0x40
 8010ff4:	eba0 000a 	sub.w	r0, r0, sl
 8010ff8:	fa03 f000 	lsl.w	r0, r3, r0
 8010ffc:	9b04      	ldr	r3, [sp, #16]
 8010ffe:	3401      	adds	r4, #1
 8011000:	4303      	orrs	r3, r0
 8011002:	9304      	str	r3, [sp, #16]
 8011004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011008:	2206      	movs	r2, #6
 801100a:	482d      	ldr	r0, [pc, #180]	; (80110c0 <_vfiprintf_r+0x254>)
 801100c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011010:	f000 fcc2 	bl	8011998 <memchr>
 8011014:	2800      	cmp	r0, #0
 8011016:	d03f      	beq.n	8011098 <_vfiprintf_r+0x22c>
 8011018:	4b2a      	ldr	r3, [pc, #168]	; (80110c4 <_vfiprintf_r+0x258>)
 801101a:	bb1b      	cbnz	r3, 8011064 <_vfiprintf_r+0x1f8>
 801101c:	9b03      	ldr	r3, [sp, #12]
 801101e:	3307      	adds	r3, #7
 8011020:	f023 0307 	bic.w	r3, r3, #7
 8011024:	3308      	adds	r3, #8
 8011026:	9303      	str	r3, [sp, #12]
 8011028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801102a:	443b      	add	r3, r7
 801102c:	9309      	str	r3, [sp, #36]	; 0x24
 801102e:	e767      	b.n	8010f00 <_vfiprintf_r+0x94>
 8011030:	460c      	mov	r4, r1
 8011032:	2001      	movs	r0, #1
 8011034:	fb0c 3202 	mla	r2, ip, r2, r3
 8011038:	e7a5      	b.n	8010f86 <_vfiprintf_r+0x11a>
 801103a:	2300      	movs	r3, #0
 801103c:	f04f 0c0a 	mov.w	ip, #10
 8011040:	4619      	mov	r1, r3
 8011042:	3401      	adds	r4, #1
 8011044:	9305      	str	r3, [sp, #20]
 8011046:	4620      	mov	r0, r4
 8011048:	f810 2b01 	ldrb.w	r2, [r0], #1
 801104c:	3a30      	subs	r2, #48	; 0x30
 801104e:	2a09      	cmp	r2, #9
 8011050:	d903      	bls.n	801105a <_vfiprintf_r+0x1ee>
 8011052:	2b00      	cmp	r3, #0
 8011054:	d0c5      	beq.n	8010fe2 <_vfiprintf_r+0x176>
 8011056:	9105      	str	r1, [sp, #20]
 8011058:	e7c3      	b.n	8010fe2 <_vfiprintf_r+0x176>
 801105a:	4604      	mov	r4, r0
 801105c:	2301      	movs	r3, #1
 801105e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011062:	e7f0      	b.n	8011046 <_vfiprintf_r+0x1da>
 8011064:	ab03      	add	r3, sp, #12
 8011066:	9300      	str	r3, [sp, #0]
 8011068:	462a      	mov	r2, r5
 801106a:	4630      	mov	r0, r6
 801106c:	4b16      	ldr	r3, [pc, #88]	; (80110c8 <_vfiprintf_r+0x25c>)
 801106e:	a904      	add	r1, sp, #16
 8011070:	f3af 8000 	nop.w
 8011074:	4607      	mov	r7, r0
 8011076:	1c78      	adds	r0, r7, #1
 8011078:	d1d6      	bne.n	8011028 <_vfiprintf_r+0x1bc>
 801107a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801107c:	07d9      	lsls	r1, r3, #31
 801107e:	d405      	bmi.n	801108c <_vfiprintf_r+0x220>
 8011080:	89ab      	ldrh	r3, [r5, #12]
 8011082:	059a      	lsls	r2, r3, #22
 8011084:	d402      	bmi.n	801108c <_vfiprintf_r+0x220>
 8011086:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011088:	f7fe fff8 	bl	801007c <__retarget_lock_release_recursive>
 801108c:	89ab      	ldrh	r3, [r5, #12]
 801108e:	065b      	lsls	r3, r3, #25
 8011090:	f53f af12 	bmi.w	8010eb8 <_vfiprintf_r+0x4c>
 8011094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011096:	e711      	b.n	8010ebc <_vfiprintf_r+0x50>
 8011098:	ab03      	add	r3, sp, #12
 801109a:	9300      	str	r3, [sp, #0]
 801109c:	462a      	mov	r2, r5
 801109e:	4630      	mov	r0, r6
 80110a0:	4b09      	ldr	r3, [pc, #36]	; (80110c8 <_vfiprintf_r+0x25c>)
 80110a2:	a904      	add	r1, sp, #16
 80110a4:	f000 f882 	bl	80111ac <_printf_i>
 80110a8:	e7e4      	b.n	8011074 <_vfiprintf_r+0x208>
 80110aa:	bf00      	nop
 80110ac:	08013054 	.word	0x08013054
 80110b0:	08013074 	.word	0x08013074
 80110b4:	08013034 	.word	0x08013034
 80110b8:	08013294 	.word	0x08013294
 80110bc:	0801329a 	.word	0x0801329a
 80110c0:	0801329e 	.word	0x0801329e
 80110c4:	00000000 	.word	0x00000000
 80110c8:	08010e47 	.word	0x08010e47

080110cc <_printf_common>:
 80110cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110d0:	4616      	mov	r6, r2
 80110d2:	4699      	mov	r9, r3
 80110d4:	688a      	ldr	r2, [r1, #8]
 80110d6:	690b      	ldr	r3, [r1, #16]
 80110d8:	4607      	mov	r7, r0
 80110da:	4293      	cmp	r3, r2
 80110dc:	bfb8      	it	lt
 80110de:	4613      	movlt	r3, r2
 80110e0:	6033      	str	r3, [r6, #0]
 80110e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80110e6:	460c      	mov	r4, r1
 80110e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80110ec:	b10a      	cbz	r2, 80110f2 <_printf_common+0x26>
 80110ee:	3301      	adds	r3, #1
 80110f0:	6033      	str	r3, [r6, #0]
 80110f2:	6823      	ldr	r3, [r4, #0]
 80110f4:	0699      	lsls	r1, r3, #26
 80110f6:	bf42      	ittt	mi
 80110f8:	6833      	ldrmi	r3, [r6, #0]
 80110fa:	3302      	addmi	r3, #2
 80110fc:	6033      	strmi	r3, [r6, #0]
 80110fe:	6825      	ldr	r5, [r4, #0]
 8011100:	f015 0506 	ands.w	r5, r5, #6
 8011104:	d106      	bne.n	8011114 <_printf_common+0x48>
 8011106:	f104 0a19 	add.w	sl, r4, #25
 801110a:	68e3      	ldr	r3, [r4, #12]
 801110c:	6832      	ldr	r2, [r6, #0]
 801110e:	1a9b      	subs	r3, r3, r2
 8011110:	42ab      	cmp	r3, r5
 8011112:	dc28      	bgt.n	8011166 <_printf_common+0x9a>
 8011114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011118:	1e13      	subs	r3, r2, #0
 801111a:	6822      	ldr	r2, [r4, #0]
 801111c:	bf18      	it	ne
 801111e:	2301      	movne	r3, #1
 8011120:	0692      	lsls	r2, r2, #26
 8011122:	d42d      	bmi.n	8011180 <_printf_common+0xb4>
 8011124:	4649      	mov	r1, r9
 8011126:	4638      	mov	r0, r7
 8011128:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801112c:	47c0      	blx	r8
 801112e:	3001      	adds	r0, #1
 8011130:	d020      	beq.n	8011174 <_printf_common+0xa8>
 8011132:	6823      	ldr	r3, [r4, #0]
 8011134:	68e5      	ldr	r5, [r4, #12]
 8011136:	f003 0306 	and.w	r3, r3, #6
 801113a:	2b04      	cmp	r3, #4
 801113c:	bf18      	it	ne
 801113e:	2500      	movne	r5, #0
 8011140:	6832      	ldr	r2, [r6, #0]
 8011142:	f04f 0600 	mov.w	r6, #0
 8011146:	68a3      	ldr	r3, [r4, #8]
 8011148:	bf08      	it	eq
 801114a:	1aad      	subeq	r5, r5, r2
 801114c:	6922      	ldr	r2, [r4, #16]
 801114e:	bf08      	it	eq
 8011150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011154:	4293      	cmp	r3, r2
 8011156:	bfc4      	itt	gt
 8011158:	1a9b      	subgt	r3, r3, r2
 801115a:	18ed      	addgt	r5, r5, r3
 801115c:	341a      	adds	r4, #26
 801115e:	42b5      	cmp	r5, r6
 8011160:	d11a      	bne.n	8011198 <_printf_common+0xcc>
 8011162:	2000      	movs	r0, #0
 8011164:	e008      	b.n	8011178 <_printf_common+0xac>
 8011166:	2301      	movs	r3, #1
 8011168:	4652      	mov	r2, sl
 801116a:	4649      	mov	r1, r9
 801116c:	4638      	mov	r0, r7
 801116e:	47c0      	blx	r8
 8011170:	3001      	adds	r0, #1
 8011172:	d103      	bne.n	801117c <_printf_common+0xb0>
 8011174:	f04f 30ff 	mov.w	r0, #4294967295
 8011178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801117c:	3501      	adds	r5, #1
 801117e:	e7c4      	b.n	801110a <_printf_common+0x3e>
 8011180:	2030      	movs	r0, #48	; 0x30
 8011182:	18e1      	adds	r1, r4, r3
 8011184:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011188:	1c5a      	adds	r2, r3, #1
 801118a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801118e:	4422      	add	r2, r4
 8011190:	3302      	adds	r3, #2
 8011192:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011196:	e7c5      	b.n	8011124 <_printf_common+0x58>
 8011198:	2301      	movs	r3, #1
 801119a:	4622      	mov	r2, r4
 801119c:	4649      	mov	r1, r9
 801119e:	4638      	mov	r0, r7
 80111a0:	47c0      	blx	r8
 80111a2:	3001      	adds	r0, #1
 80111a4:	d0e6      	beq.n	8011174 <_printf_common+0xa8>
 80111a6:	3601      	adds	r6, #1
 80111a8:	e7d9      	b.n	801115e <_printf_common+0x92>
	...

080111ac <_printf_i>:
 80111ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80111b0:	7e0f      	ldrb	r7, [r1, #24]
 80111b2:	4691      	mov	r9, r2
 80111b4:	2f78      	cmp	r7, #120	; 0x78
 80111b6:	4680      	mov	r8, r0
 80111b8:	460c      	mov	r4, r1
 80111ba:	469a      	mov	sl, r3
 80111bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80111be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80111c2:	d807      	bhi.n	80111d4 <_printf_i+0x28>
 80111c4:	2f62      	cmp	r7, #98	; 0x62
 80111c6:	d80a      	bhi.n	80111de <_printf_i+0x32>
 80111c8:	2f00      	cmp	r7, #0
 80111ca:	f000 80d9 	beq.w	8011380 <_printf_i+0x1d4>
 80111ce:	2f58      	cmp	r7, #88	; 0x58
 80111d0:	f000 80a4 	beq.w	801131c <_printf_i+0x170>
 80111d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80111dc:	e03a      	b.n	8011254 <_printf_i+0xa8>
 80111de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80111e2:	2b15      	cmp	r3, #21
 80111e4:	d8f6      	bhi.n	80111d4 <_printf_i+0x28>
 80111e6:	a101      	add	r1, pc, #4	; (adr r1, 80111ec <_printf_i+0x40>)
 80111e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80111ec:	08011245 	.word	0x08011245
 80111f0:	08011259 	.word	0x08011259
 80111f4:	080111d5 	.word	0x080111d5
 80111f8:	080111d5 	.word	0x080111d5
 80111fc:	080111d5 	.word	0x080111d5
 8011200:	080111d5 	.word	0x080111d5
 8011204:	08011259 	.word	0x08011259
 8011208:	080111d5 	.word	0x080111d5
 801120c:	080111d5 	.word	0x080111d5
 8011210:	080111d5 	.word	0x080111d5
 8011214:	080111d5 	.word	0x080111d5
 8011218:	08011367 	.word	0x08011367
 801121c:	08011289 	.word	0x08011289
 8011220:	08011349 	.word	0x08011349
 8011224:	080111d5 	.word	0x080111d5
 8011228:	080111d5 	.word	0x080111d5
 801122c:	08011389 	.word	0x08011389
 8011230:	080111d5 	.word	0x080111d5
 8011234:	08011289 	.word	0x08011289
 8011238:	080111d5 	.word	0x080111d5
 801123c:	080111d5 	.word	0x080111d5
 8011240:	08011351 	.word	0x08011351
 8011244:	682b      	ldr	r3, [r5, #0]
 8011246:	1d1a      	adds	r2, r3, #4
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	602a      	str	r2, [r5, #0]
 801124c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011254:	2301      	movs	r3, #1
 8011256:	e0a4      	b.n	80113a2 <_printf_i+0x1f6>
 8011258:	6820      	ldr	r0, [r4, #0]
 801125a:	6829      	ldr	r1, [r5, #0]
 801125c:	0606      	lsls	r6, r0, #24
 801125e:	f101 0304 	add.w	r3, r1, #4
 8011262:	d50a      	bpl.n	801127a <_printf_i+0xce>
 8011264:	680e      	ldr	r6, [r1, #0]
 8011266:	602b      	str	r3, [r5, #0]
 8011268:	2e00      	cmp	r6, #0
 801126a:	da03      	bge.n	8011274 <_printf_i+0xc8>
 801126c:	232d      	movs	r3, #45	; 0x2d
 801126e:	4276      	negs	r6, r6
 8011270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011274:	230a      	movs	r3, #10
 8011276:	485e      	ldr	r0, [pc, #376]	; (80113f0 <_printf_i+0x244>)
 8011278:	e019      	b.n	80112ae <_printf_i+0x102>
 801127a:	680e      	ldr	r6, [r1, #0]
 801127c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011280:	602b      	str	r3, [r5, #0]
 8011282:	bf18      	it	ne
 8011284:	b236      	sxthne	r6, r6
 8011286:	e7ef      	b.n	8011268 <_printf_i+0xbc>
 8011288:	682b      	ldr	r3, [r5, #0]
 801128a:	6820      	ldr	r0, [r4, #0]
 801128c:	1d19      	adds	r1, r3, #4
 801128e:	6029      	str	r1, [r5, #0]
 8011290:	0601      	lsls	r1, r0, #24
 8011292:	d501      	bpl.n	8011298 <_printf_i+0xec>
 8011294:	681e      	ldr	r6, [r3, #0]
 8011296:	e002      	b.n	801129e <_printf_i+0xf2>
 8011298:	0646      	lsls	r6, r0, #25
 801129a:	d5fb      	bpl.n	8011294 <_printf_i+0xe8>
 801129c:	881e      	ldrh	r6, [r3, #0]
 801129e:	2f6f      	cmp	r7, #111	; 0x6f
 80112a0:	bf0c      	ite	eq
 80112a2:	2308      	moveq	r3, #8
 80112a4:	230a      	movne	r3, #10
 80112a6:	4852      	ldr	r0, [pc, #328]	; (80113f0 <_printf_i+0x244>)
 80112a8:	2100      	movs	r1, #0
 80112aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80112ae:	6865      	ldr	r5, [r4, #4]
 80112b0:	2d00      	cmp	r5, #0
 80112b2:	bfa8      	it	ge
 80112b4:	6821      	ldrge	r1, [r4, #0]
 80112b6:	60a5      	str	r5, [r4, #8]
 80112b8:	bfa4      	itt	ge
 80112ba:	f021 0104 	bicge.w	r1, r1, #4
 80112be:	6021      	strge	r1, [r4, #0]
 80112c0:	b90e      	cbnz	r6, 80112c6 <_printf_i+0x11a>
 80112c2:	2d00      	cmp	r5, #0
 80112c4:	d04d      	beq.n	8011362 <_printf_i+0x1b6>
 80112c6:	4615      	mov	r5, r2
 80112c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80112cc:	fb03 6711 	mls	r7, r3, r1, r6
 80112d0:	5dc7      	ldrb	r7, [r0, r7]
 80112d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80112d6:	4637      	mov	r7, r6
 80112d8:	42bb      	cmp	r3, r7
 80112da:	460e      	mov	r6, r1
 80112dc:	d9f4      	bls.n	80112c8 <_printf_i+0x11c>
 80112de:	2b08      	cmp	r3, #8
 80112e0:	d10b      	bne.n	80112fa <_printf_i+0x14e>
 80112e2:	6823      	ldr	r3, [r4, #0]
 80112e4:	07de      	lsls	r6, r3, #31
 80112e6:	d508      	bpl.n	80112fa <_printf_i+0x14e>
 80112e8:	6923      	ldr	r3, [r4, #16]
 80112ea:	6861      	ldr	r1, [r4, #4]
 80112ec:	4299      	cmp	r1, r3
 80112ee:	bfde      	ittt	le
 80112f0:	2330      	movle	r3, #48	; 0x30
 80112f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80112f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80112fa:	1b52      	subs	r2, r2, r5
 80112fc:	6122      	str	r2, [r4, #16]
 80112fe:	464b      	mov	r3, r9
 8011300:	4621      	mov	r1, r4
 8011302:	4640      	mov	r0, r8
 8011304:	f8cd a000 	str.w	sl, [sp]
 8011308:	aa03      	add	r2, sp, #12
 801130a:	f7ff fedf 	bl	80110cc <_printf_common>
 801130e:	3001      	adds	r0, #1
 8011310:	d14c      	bne.n	80113ac <_printf_i+0x200>
 8011312:	f04f 30ff 	mov.w	r0, #4294967295
 8011316:	b004      	add	sp, #16
 8011318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801131c:	4834      	ldr	r0, [pc, #208]	; (80113f0 <_printf_i+0x244>)
 801131e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011322:	6829      	ldr	r1, [r5, #0]
 8011324:	6823      	ldr	r3, [r4, #0]
 8011326:	f851 6b04 	ldr.w	r6, [r1], #4
 801132a:	6029      	str	r1, [r5, #0]
 801132c:	061d      	lsls	r5, r3, #24
 801132e:	d514      	bpl.n	801135a <_printf_i+0x1ae>
 8011330:	07df      	lsls	r7, r3, #31
 8011332:	bf44      	itt	mi
 8011334:	f043 0320 	orrmi.w	r3, r3, #32
 8011338:	6023      	strmi	r3, [r4, #0]
 801133a:	b91e      	cbnz	r6, 8011344 <_printf_i+0x198>
 801133c:	6823      	ldr	r3, [r4, #0]
 801133e:	f023 0320 	bic.w	r3, r3, #32
 8011342:	6023      	str	r3, [r4, #0]
 8011344:	2310      	movs	r3, #16
 8011346:	e7af      	b.n	80112a8 <_printf_i+0xfc>
 8011348:	6823      	ldr	r3, [r4, #0]
 801134a:	f043 0320 	orr.w	r3, r3, #32
 801134e:	6023      	str	r3, [r4, #0]
 8011350:	2378      	movs	r3, #120	; 0x78
 8011352:	4828      	ldr	r0, [pc, #160]	; (80113f4 <_printf_i+0x248>)
 8011354:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011358:	e7e3      	b.n	8011322 <_printf_i+0x176>
 801135a:	0659      	lsls	r1, r3, #25
 801135c:	bf48      	it	mi
 801135e:	b2b6      	uxthmi	r6, r6
 8011360:	e7e6      	b.n	8011330 <_printf_i+0x184>
 8011362:	4615      	mov	r5, r2
 8011364:	e7bb      	b.n	80112de <_printf_i+0x132>
 8011366:	682b      	ldr	r3, [r5, #0]
 8011368:	6826      	ldr	r6, [r4, #0]
 801136a:	1d18      	adds	r0, r3, #4
 801136c:	6961      	ldr	r1, [r4, #20]
 801136e:	6028      	str	r0, [r5, #0]
 8011370:	0635      	lsls	r5, r6, #24
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	d501      	bpl.n	801137a <_printf_i+0x1ce>
 8011376:	6019      	str	r1, [r3, #0]
 8011378:	e002      	b.n	8011380 <_printf_i+0x1d4>
 801137a:	0670      	lsls	r0, r6, #25
 801137c:	d5fb      	bpl.n	8011376 <_printf_i+0x1ca>
 801137e:	8019      	strh	r1, [r3, #0]
 8011380:	2300      	movs	r3, #0
 8011382:	4615      	mov	r5, r2
 8011384:	6123      	str	r3, [r4, #16]
 8011386:	e7ba      	b.n	80112fe <_printf_i+0x152>
 8011388:	682b      	ldr	r3, [r5, #0]
 801138a:	2100      	movs	r1, #0
 801138c:	1d1a      	adds	r2, r3, #4
 801138e:	602a      	str	r2, [r5, #0]
 8011390:	681d      	ldr	r5, [r3, #0]
 8011392:	6862      	ldr	r2, [r4, #4]
 8011394:	4628      	mov	r0, r5
 8011396:	f000 faff 	bl	8011998 <memchr>
 801139a:	b108      	cbz	r0, 80113a0 <_printf_i+0x1f4>
 801139c:	1b40      	subs	r0, r0, r5
 801139e:	6060      	str	r0, [r4, #4]
 80113a0:	6863      	ldr	r3, [r4, #4]
 80113a2:	6123      	str	r3, [r4, #16]
 80113a4:	2300      	movs	r3, #0
 80113a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113aa:	e7a8      	b.n	80112fe <_printf_i+0x152>
 80113ac:	462a      	mov	r2, r5
 80113ae:	4649      	mov	r1, r9
 80113b0:	4640      	mov	r0, r8
 80113b2:	6923      	ldr	r3, [r4, #16]
 80113b4:	47d0      	blx	sl
 80113b6:	3001      	adds	r0, #1
 80113b8:	d0ab      	beq.n	8011312 <_printf_i+0x166>
 80113ba:	6823      	ldr	r3, [r4, #0]
 80113bc:	079b      	lsls	r3, r3, #30
 80113be:	d413      	bmi.n	80113e8 <_printf_i+0x23c>
 80113c0:	68e0      	ldr	r0, [r4, #12]
 80113c2:	9b03      	ldr	r3, [sp, #12]
 80113c4:	4298      	cmp	r0, r3
 80113c6:	bfb8      	it	lt
 80113c8:	4618      	movlt	r0, r3
 80113ca:	e7a4      	b.n	8011316 <_printf_i+0x16a>
 80113cc:	2301      	movs	r3, #1
 80113ce:	4632      	mov	r2, r6
 80113d0:	4649      	mov	r1, r9
 80113d2:	4640      	mov	r0, r8
 80113d4:	47d0      	blx	sl
 80113d6:	3001      	adds	r0, #1
 80113d8:	d09b      	beq.n	8011312 <_printf_i+0x166>
 80113da:	3501      	adds	r5, #1
 80113dc:	68e3      	ldr	r3, [r4, #12]
 80113de:	9903      	ldr	r1, [sp, #12]
 80113e0:	1a5b      	subs	r3, r3, r1
 80113e2:	42ab      	cmp	r3, r5
 80113e4:	dcf2      	bgt.n	80113cc <_printf_i+0x220>
 80113e6:	e7eb      	b.n	80113c0 <_printf_i+0x214>
 80113e8:	2500      	movs	r5, #0
 80113ea:	f104 0619 	add.w	r6, r4, #25
 80113ee:	e7f5      	b.n	80113dc <_printf_i+0x230>
 80113f0:	080132a5 	.word	0x080132a5
 80113f4:	080132b6 	.word	0x080132b6

080113f8 <nan>:
 80113f8:	2000      	movs	r0, #0
 80113fa:	4901      	ldr	r1, [pc, #4]	; (8011400 <nan+0x8>)
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	7ff80000 	.word	0x7ff80000

08011404 <_sbrk_r>:
 8011404:	b538      	push	{r3, r4, r5, lr}
 8011406:	2300      	movs	r3, #0
 8011408:	4d05      	ldr	r5, [pc, #20]	; (8011420 <_sbrk_r+0x1c>)
 801140a:	4604      	mov	r4, r0
 801140c:	4608      	mov	r0, r1
 801140e:	602b      	str	r3, [r5, #0]
 8011410:	f7f0 fdd4 	bl	8001fbc <_sbrk>
 8011414:	1c43      	adds	r3, r0, #1
 8011416:	d102      	bne.n	801141e <_sbrk_r+0x1a>
 8011418:	682b      	ldr	r3, [r5, #0]
 801141a:	b103      	cbz	r3, 801141e <_sbrk_r+0x1a>
 801141c:	6023      	str	r3, [r4, #0]
 801141e:	bd38      	pop	{r3, r4, r5, pc}
 8011420:	20000e08 	.word	0x20000e08

08011424 <nanf>:
 8011424:	4800      	ldr	r0, [pc, #0]	; (8011428 <nanf+0x4>)
 8011426:	4770      	bx	lr
 8011428:	7fc00000 	.word	0x7fc00000

0801142c <__sread>:
 801142c:	b510      	push	{r4, lr}
 801142e:	460c      	mov	r4, r1
 8011430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011434:	f000 fb5c 	bl	8011af0 <_read_r>
 8011438:	2800      	cmp	r0, #0
 801143a:	bfab      	itete	ge
 801143c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801143e:	89a3      	ldrhlt	r3, [r4, #12]
 8011440:	181b      	addge	r3, r3, r0
 8011442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011446:	bfac      	ite	ge
 8011448:	6563      	strge	r3, [r4, #84]	; 0x54
 801144a:	81a3      	strhlt	r3, [r4, #12]
 801144c:	bd10      	pop	{r4, pc}

0801144e <__swrite>:
 801144e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011452:	461f      	mov	r7, r3
 8011454:	898b      	ldrh	r3, [r1, #12]
 8011456:	4605      	mov	r5, r0
 8011458:	05db      	lsls	r3, r3, #23
 801145a:	460c      	mov	r4, r1
 801145c:	4616      	mov	r6, r2
 801145e:	d505      	bpl.n	801146c <__swrite+0x1e>
 8011460:	2302      	movs	r3, #2
 8011462:	2200      	movs	r2, #0
 8011464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011468:	f000 fa16 	bl	8011898 <_lseek_r>
 801146c:	89a3      	ldrh	r3, [r4, #12]
 801146e:	4632      	mov	r2, r6
 8011470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011474:	81a3      	strh	r3, [r4, #12]
 8011476:	4628      	mov	r0, r5
 8011478:	463b      	mov	r3, r7
 801147a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801147e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011482:	f000 b88b 	b.w	801159c <_write_r>

08011486 <__sseek>:
 8011486:	b510      	push	{r4, lr}
 8011488:	460c      	mov	r4, r1
 801148a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801148e:	f000 fa03 	bl	8011898 <_lseek_r>
 8011492:	1c43      	adds	r3, r0, #1
 8011494:	89a3      	ldrh	r3, [r4, #12]
 8011496:	bf15      	itete	ne
 8011498:	6560      	strne	r0, [r4, #84]	; 0x54
 801149a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801149e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80114a2:	81a3      	strheq	r3, [r4, #12]
 80114a4:	bf18      	it	ne
 80114a6:	81a3      	strhne	r3, [r4, #12]
 80114a8:	bd10      	pop	{r4, pc}

080114aa <__sclose>:
 80114aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114ae:	f000 b913 	b.w	80116d8 <_close_r>

080114b2 <strncmp>:
 80114b2:	4603      	mov	r3, r0
 80114b4:	b510      	push	{r4, lr}
 80114b6:	b172      	cbz	r2, 80114d6 <strncmp+0x24>
 80114b8:	3901      	subs	r1, #1
 80114ba:	1884      	adds	r4, r0, r2
 80114bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80114c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80114c4:	4290      	cmp	r0, r2
 80114c6:	d101      	bne.n	80114cc <strncmp+0x1a>
 80114c8:	42a3      	cmp	r3, r4
 80114ca:	d101      	bne.n	80114d0 <strncmp+0x1e>
 80114cc:	1a80      	subs	r0, r0, r2
 80114ce:	bd10      	pop	{r4, pc}
 80114d0:	2800      	cmp	r0, #0
 80114d2:	d1f3      	bne.n	80114bc <strncmp+0xa>
 80114d4:	e7fa      	b.n	80114cc <strncmp+0x1a>
 80114d6:	4610      	mov	r0, r2
 80114d8:	e7f9      	b.n	80114ce <strncmp+0x1c>
	...

080114dc <__swbuf_r>:
 80114dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114de:	460e      	mov	r6, r1
 80114e0:	4614      	mov	r4, r2
 80114e2:	4605      	mov	r5, r0
 80114e4:	b118      	cbz	r0, 80114ee <__swbuf_r+0x12>
 80114e6:	6983      	ldr	r3, [r0, #24]
 80114e8:	b90b      	cbnz	r3, 80114ee <__swbuf_r+0x12>
 80114ea:	f7fe f9c1 	bl	800f870 <__sinit>
 80114ee:	4b21      	ldr	r3, [pc, #132]	; (8011574 <__swbuf_r+0x98>)
 80114f0:	429c      	cmp	r4, r3
 80114f2:	d12b      	bne.n	801154c <__swbuf_r+0x70>
 80114f4:	686c      	ldr	r4, [r5, #4]
 80114f6:	69a3      	ldr	r3, [r4, #24]
 80114f8:	60a3      	str	r3, [r4, #8]
 80114fa:	89a3      	ldrh	r3, [r4, #12]
 80114fc:	071a      	lsls	r2, r3, #28
 80114fe:	d52f      	bpl.n	8011560 <__swbuf_r+0x84>
 8011500:	6923      	ldr	r3, [r4, #16]
 8011502:	b36b      	cbz	r3, 8011560 <__swbuf_r+0x84>
 8011504:	6923      	ldr	r3, [r4, #16]
 8011506:	6820      	ldr	r0, [r4, #0]
 8011508:	b2f6      	uxtb	r6, r6
 801150a:	1ac0      	subs	r0, r0, r3
 801150c:	6963      	ldr	r3, [r4, #20]
 801150e:	4637      	mov	r7, r6
 8011510:	4283      	cmp	r3, r0
 8011512:	dc04      	bgt.n	801151e <__swbuf_r+0x42>
 8011514:	4621      	mov	r1, r4
 8011516:	4628      	mov	r0, r5
 8011518:	f000 f970 	bl	80117fc <_fflush_r>
 801151c:	bb30      	cbnz	r0, 801156c <__swbuf_r+0x90>
 801151e:	68a3      	ldr	r3, [r4, #8]
 8011520:	3001      	adds	r0, #1
 8011522:	3b01      	subs	r3, #1
 8011524:	60a3      	str	r3, [r4, #8]
 8011526:	6823      	ldr	r3, [r4, #0]
 8011528:	1c5a      	adds	r2, r3, #1
 801152a:	6022      	str	r2, [r4, #0]
 801152c:	701e      	strb	r6, [r3, #0]
 801152e:	6963      	ldr	r3, [r4, #20]
 8011530:	4283      	cmp	r3, r0
 8011532:	d004      	beq.n	801153e <__swbuf_r+0x62>
 8011534:	89a3      	ldrh	r3, [r4, #12]
 8011536:	07db      	lsls	r3, r3, #31
 8011538:	d506      	bpl.n	8011548 <__swbuf_r+0x6c>
 801153a:	2e0a      	cmp	r6, #10
 801153c:	d104      	bne.n	8011548 <__swbuf_r+0x6c>
 801153e:	4621      	mov	r1, r4
 8011540:	4628      	mov	r0, r5
 8011542:	f000 f95b 	bl	80117fc <_fflush_r>
 8011546:	b988      	cbnz	r0, 801156c <__swbuf_r+0x90>
 8011548:	4638      	mov	r0, r7
 801154a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801154c:	4b0a      	ldr	r3, [pc, #40]	; (8011578 <__swbuf_r+0x9c>)
 801154e:	429c      	cmp	r4, r3
 8011550:	d101      	bne.n	8011556 <__swbuf_r+0x7a>
 8011552:	68ac      	ldr	r4, [r5, #8]
 8011554:	e7cf      	b.n	80114f6 <__swbuf_r+0x1a>
 8011556:	4b09      	ldr	r3, [pc, #36]	; (801157c <__swbuf_r+0xa0>)
 8011558:	429c      	cmp	r4, r3
 801155a:	bf08      	it	eq
 801155c:	68ec      	ldreq	r4, [r5, #12]
 801155e:	e7ca      	b.n	80114f6 <__swbuf_r+0x1a>
 8011560:	4621      	mov	r1, r4
 8011562:	4628      	mov	r0, r5
 8011564:	f000 f82c 	bl	80115c0 <__swsetup_r>
 8011568:	2800      	cmp	r0, #0
 801156a:	d0cb      	beq.n	8011504 <__swbuf_r+0x28>
 801156c:	f04f 37ff 	mov.w	r7, #4294967295
 8011570:	e7ea      	b.n	8011548 <__swbuf_r+0x6c>
 8011572:	bf00      	nop
 8011574:	08013054 	.word	0x08013054
 8011578:	08013074 	.word	0x08013074
 801157c:	08013034 	.word	0x08013034

08011580 <__ascii_wctomb>:
 8011580:	4603      	mov	r3, r0
 8011582:	4608      	mov	r0, r1
 8011584:	b141      	cbz	r1, 8011598 <__ascii_wctomb+0x18>
 8011586:	2aff      	cmp	r2, #255	; 0xff
 8011588:	d904      	bls.n	8011594 <__ascii_wctomb+0x14>
 801158a:	228a      	movs	r2, #138	; 0x8a
 801158c:	f04f 30ff 	mov.w	r0, #4294967295
 8011590:	601a      	str	r2, [r3, #0]
 8011592:	4770      	bx	lr
 8011594:	2001      	movs	r0, #1
 8011596:	700a      	strb	r2, [r1, #0]
 8011598:	4770      	bx	lr
	...

0801159c <_write_r>:
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	4604      	mov	r4, r0
 80115a0:	4608      	mov	r0, r1
 80115a2:	4611      	mov	r1, r2
 80115a4:	2200      	movs	r2, #0
 80115a6:	4d05      	ldr	r5, [pc, #20]	; (80115bc <_write_r+0x20>)
 80115a8:	602a      	str	r2, [r5, #0]
 80115aa:	461a      	mov	r2, r3
 80115ac:	f7f0 fcba 	bl	8001f24 <_write>
 80115b0:	1c43      	adds	r3, r0, #1
 80115b2:	d102      	bne.n	80115ba <_write_r+0x1e>
 80115b4:	682b      	ldr	r3, [r5, #0]
 80115b6:	b103      	cbz	r3, 80115ba <_write_r+0x1e>
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	bd38      	pop	{r3, r4, r5, pc}
 80115bc:	20000e08 	.word	0x20000e08

080115c0 <__swsetup_r>:
 80115c0:	4b32      	ldr	r3, [pc, #200]	; (801168c <__swsetup_r+0xcc>)
 80115c2:	b570      	push	{r4, r5, r6, lr}
 80115c4:	681d      	ldr	r5, [r3, #0]
 80115c6:	4606      	mov	r6, r0
 80115c8:	460c      	mov	r4, r1
 80115ca:	b125      	cbz	r5, 80115d6 <__swsetup_r+0x16>
 80115cc:	69ab      	ldr	r3, [r5, #24]
 80115ce:	b913      	cbnz	r3, 80115d6 <__swsetup_r+0x16>
 80115d0:	4628      	mov	r0, r5
 80115d2:	f7fe f94d 	bl	800f870 <__sinit>
 80115d6:	4b2e      	ldr	r3, [pc, #184]	; (8011690 <__swsetup_r+0xd0>)
 80115d8:	429c      	cmp	r4, r3
 80115da:	d10f      	bne.n	80115fc <__swsetup_r+0x3c>
 80115dc:	686c      	ldr	r4, [r5, #4]
 80115de:	89a3      	ldrh	r3, [r4, #12]
 80115e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115e4:	0719      	lsls	r1, r3, #28
 80115e6:	d42c      	bmi.n	8011642 <__swsetup_r+0x82>
 80115e8:	06dd      	lsls	r5, r3, #27
 80115ea:	d411      	bmi.n	8011610 <__swsetup_r+0x50>
 80115ec:	2309      	movs	r3, #9
 80115ee:	6033      	str	r3, [r6, #0]
 80115f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80115f4:	f04f 30ff 	mov.w	r0, #4294967295
 80115f8:	81a3      	strh	r3, [r4, #12]
 80115fa:	e03e      	b.n	801167a <__swsetup_r+0xba>
 80115fc:	4b25      	ldr	r3, [pc, #148]	; (8011694 <__swsetup_r+0xd4>)
 80115fe:	429c      	cmp	r4, r3
 8011600:	d101      	bne.n	8011606 <__swsetup_r+0x46>
 8011602:	68ac      	ldr	r4, [r5, #8]
 8011604:	e7eb      	b.n	80115de <__swsetup_r+0x1e>
 8011606:	4b24      	ldr	r3, [pc, #144]	; (8011698 <__swsetup_r+0xd8>)
 8011608:	429c      	cmp	r4, r3
 801160a:	bf08      	it	eq
 801160c:	68ec      	ldreq	r4, [r5, #12]
 801160e:	e7e6      	b.n	80115de <__swsetup_r+0x1e>
 8011610:	0758      	lsls	r0, r3, #29
 8011612:	d512      	bpl.n	801163a <__swsetup_r+0x7a>
 8011614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011616:	b141      	cbz	r1, 801162a <__swsetup_r+0x6a>
 8011618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801161c:	4299      	cmp	r1, r3
 801161e:	d002      	beq.n	8011626 <__swsetup_r+0x66>
 8011620:	4630      	mov	r0, r6
 8011622:	f000 f9ed 	bl	8011a00 <_free_r>
 8011626:	2300      	movs	r3, #0
 8011628:	6363      	str	r3, [r4, #52]	; 0x34
 801162a:	89a3      	ldrh	r3, [r4, #12]
 801162c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011630:	81a3      	strh	r3, [r4, #12]
 8011632:	2300      	movs	r3, #0
 8011634:	6063      	str	r3, [r4, #4]
 8011636:	6923      	ldr	r3, [r4, #16]
 8011638:	6023      	str	r3, [r4, #0]
 801163a:	89a3      	ldrh	r3, [r4, #12]
 801163c:	f043 0308 	orr.w	r3, r3, #8
 8011640:	81a3      	strh	r3, [r4, #12]
 8011642:	6923      	ldr	r3, [r4, #16]
 8011644:	b94b      	cbnz	r3, 801165a <__swsetup_r+0x9a>
 8011646:	89a3      	ldrh	r3, [r4, #12]
 8011648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801164c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011650:	d003      	beq.n	801165a <__swsetup_r+0x9a>
 8011652:	4621      	mov	r1, r4
 8011654:	4630      	mov	r0, r6
 8011656:	f000 f957 	bl	8011908 <__smakebuf_r>
 801165a:	89a0      	ldrh	r0, [r4, #12]
 801165c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011660:	f010 0301 	ands.w	r3, r0, #1
 8011664:	d00a      	beq.n	801167c <__swsetup_r+0xbc>
 8011666:	2300      	movs	r3, #0
 8011668:	60a3      	str	r3, [r4, #8]
 801166a:	6963      	ldr	r3, [r4, #20]
 801166c:	425b      	negs	r3, r3
 801166e:	61a3      	str	r3, [r4, #24]
 8011670:	6923      	ldr	r3, [r4, #16]
 8011672:	b943      	cbnz	r3, 8011686 <__swsetup_r+0xc6>
 8011674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011678:	d1ba      	bne.n	80115f0 <__swsetup_r+0x30>
 801167a:	bd70      	pop	{r4, r5, r6, pc}
 801167c:	0781      	lsls	r1, r0, #30
 801167e:	bf58      	it	pl
 8011680:	6963      	ldrpl	r3, [r4, #20]
 8011682:	60a3      	str	r3, [r4, #8]
 8011684:	e7f4      	b.n	8011670 <__swsetup_r+0xb0>
 8011686:	2000      	movs	r0, #0
 8011688:	e7f7      	b.n	801167a <__swsetup_r+0xba>
 801168a:	bf00      	nop
 801168c:	20000050 	.word	0x20000050
 8011690:	08013054 	.word	0x08013054
 8011694:	08013074 	.word	0x08013074
 8011698:	08013034 	.word	0x08013034

0801169c <__assert_func>:
 801169c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801169e:	4614      	mov	r4, r2
 80116a0:	461a      	mov	r2, r3
 80116a2:	4b09      	ldr	r3, [pc, #36]	; (80116c8 <__assert_func+0x2c>)
 80116a4:	4605      	mov	r5, r0
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	68d8      	ldr	r0, [r3, #12]
 80116aa:	b14c      	cbz	r4, 80116c0 <__assert_func+0x24>
 80116ac:	4b07      	ldr	r3, [pc, #28]	; (80116cc <__assert_func+0x30>)
 80116ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80116b2:	9100      	str	r1, [sp, #0]
 80116b4:	462b      	mov	r3, r5
 80116b6:	4906      	ldr	r1, [pc, #24]	; (80116d0 <__assert_func+0x34>)
 80116b8:	f000 f8dc 	bl	8011874 <fiprintf>
 80116bc:	f000 fa2a 	bl	8011b14 <abort>
 80116c0:	4b04      	ldr	r3, [pc, #16]	; (80116d4 <__assert_func+0x38>)
 80116c2:	461c      	mov	r4, r3
 80116c4:	e7f3      	b.n	80116ae <__assert_func+0x12>
 80116c6:	bf00      	nop
 80116c8:	20000050 	.word	0x20000050
 80116cc:	080132c7 	.word	0x080132c7
 80116d0:	080132d4 	.word	0x080132d4
 80116d4:	08013302 	.word	0x08013302

080116d8 <_close_r>:
 80116d8:	b538      	push	{r3, r4, r5, lr}
 80116da:	2300      	movs	r3, #0
 80116dc:	4d05      	ldr	r5, [pc, #20]	; (80116f4 <_close_r+0x1c>)
 80116de:	4604      	mov	r4, r0
 80116e0:	4608      	mov	r0, r1
 80116e2:	602b      	str	r3, [r5, #0]
 80116e4:	f7f0 fc3a 	bl	8001f5c <_close>
 80116e8:	1c43      	adds	r3, r0, #1
 80116ea:	d102      	bne.n	80116f2 <_close_r+0x1a>
 80116ec:	682b      	ldr	r3, [r5, #0]
 80116ee:	b103      	cbz	r3, 80116f2 <_close_r+0x1a>
 80116f0:	6023      	str	r3, [r4, #0]
 80116f2:	bd38      	pop	{r3, r4, r5, pc}
 80116f4:	20000e08 	.word	0x20000e08

080116f8 <__sflush_r>:
 80116f8:	898a      	ldrh	r2, [r1, #12]
 80116fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116fc:	4605      	mov	r5, r0
 80116fe:	0710      	lsls	r0, r2, #28
 8011700:	460c      	mov	r4, r1
 8011702:	d457      	bmi.n	80117b4 <__sflush_r+0xbc>
 8011704:	684b      	ldr	r3, [r1, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	dc04      	bgt.n	8011714 <__sflush_r+0x1c>
 801170a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801170c:	2b00      	cmp	r3, #0
 801170e:	dc01      	bgt.n	8011714 <__sflush_r+0x1c>
 8011710:	2000      	movs	r0, #0
 8011712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011716:	2e00      	cmp	r6, #0
 8011718:	d0fa      	beq.n	8011710 <__sflush_r+0x18>
 801171a:	2300      	movs	r3, #0
 801171c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011720:	682f      	ldr	r7, [r5, #0]
 8011722:	602b      	str	r3, [r5, #0]
 8011724:	d032      	beq.n	801178c <__sflush_r+0x94>
 8011726:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011728:	89a3      	ldrh	r3, [r4, #12]
 801172a:	075a      	lsls	r2, r3, #29
 801172c:	d505      	bpl.n	801173a <__sflush_r+0x42>
 801172e:	6863      	ldr	r3, [r4, #4]
 8011730:	1ac0      	subs	r0, r0, r3
 8011732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011734:	b10b      	cbz	r3, 801173a <__sflush_r+0x42>
 8011736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011738:	1ac0      	subs	r0, r0, r3
 801173a:	2300      	movs	r3, #0
 801173c:	4602      	mov	r2, r0
 801173e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011740:	4628      	mov	r0, r5
 8011742:	6a21      	ldr	r1, [r4, #32]
 8011744:	47b0      	blx	r6
 8011746:	1c43      	adds	r3, r0, #1
 8011748:	89a3      	ldrh	r3, [r4, #12]
 801174a:	d106      	bne.n	801175a <__sflush_r+0x62>
 801174c:	6829      	ldr	r1, [r5, #0]
 801174e:	291d      	cmp	r1, #29
 8011750:	d82c      	bhi.n	80117ac <__sflush_r+0xb4>
 8011752:	4a29      	ldr	r2, [pc, #164]	; (80117f8 <__sflush_r+0x100>)
 8011754:	40ca      	lsrs	r2, r1
 8011756:	07d6      	lsls	r6, r2, #31
 8011758:	d528      	bpl.n	80117ac <__sflush_r+0xb4>
 801175a:	2200      	movs	r2, #0
 801175c:	6062      	str	r2, [r4, #4]
 801175e:	6922      	ldr	r2, [r4, #16]
 8011760:	04d9      	lsls	r1, r3, #19
 8011762:	6022      	str	r2, [r4, #0]
 8011764:	d504      	bpl.n	8011770 <__sflush_r+0x78>
 8011766:	1c42      	adds	r2, r0, #1
 8011768:	d101      	bne.n	801176e <__sflush_r+0x76>
 801176a:	682b      	ldr	r3, [r5, #0]
 801176c:	b903      	cbnz	r3, 8011770 <__sflush_r+0x78>
 801176e:	6560      	str	r0, [r4, #84]	; 0x54
 8011770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011772:	602f      	str	r7, [r5, #0]
 8011774:	2900      	cmp	r1, #0
 8011776:	d0cb      	beq.n	8011710 <__sflush_r+0x18>
 8011778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801177c:	4299      	cmp	r1, r3
 801177e:	d002      	beq.n	8011786 <__sflush_r+0x8e>
 8011780:	4628      	mov	r0, r5
 8011782:	f000 f93d 	bl	8011a00 <_free_r>
 8011786:	2000      	movs	r0, #0
 8011788:	6360      	str	r0, [r4, #52]	; 0x34
 801178a:	e7c2      	b.n	8011712 <__sflush_r+0x1a>
 801178c:	6a21      	ldr	r1, [r4, #32]
 801178e:	2301      	movs	r3, #1
 8011790:	4628      	mov	r0, r5
 8011792:	47b0      	blx	r6
 8011794:	1c41      	adds	r1, r0, #1
 8011796:	d1c7      	bne.n	8011728 <__sflush_r+0x30>
 8011798:	682b      	ldr	r3, [r5, #0]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d0c4      	beq.n	8011728 <__sflush_r+0x30>
 801179e:	2b1d      	cmp	r3, #29
 80117a0:	d001      	beq.n	80117a6 <__sflush_r+0xae>
 80117a2:	2b16      	cmp	r3, #22
 80117a4:	d101      	bne.n	80117aa <__sflush_r+0xb2>
 80117a6:	602f      	str	r7, [r5, #0]
 80117a8:	e7b2      	b.n	8011710 <__sflush_r+0x18>
 80117aa:	89a3      	ldrh	r3, [r4, #12]
 80117ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117b0:	81a3      	strh	r3, [r4, #12]
 80117b2:	e7ae      	b.n	8011712 <__sflush_r+0x1a>
 80117b4:	690f      	ldr	r7, [r1, #16]
 80117b6:	2f00      	cmp	r7, #0
 80117b8:	d0aa      	beq.n	8011710 <__sflush_r+0x18>
 80117ba:	0793      	lsls	r3, r2, #30
 80117bc:	bf18      	it	ne
 80117be:	2300      	movne	r3, #0
 80117c0:	680e      	ldr	r6, [r1, #0]
 80117c2:	bf08      	it	eq
 80117c4:	694b      	ldreq	r3, [r1, #20]
 80117c6:	1bf6      	subs	r6, r6, r7
 80117c8:	600f      	str	r7, [r1, #0]
 80117ca:	608b      	str	r3, [r1, #8]
 80117cc:	2e00      	cmp	r6, #0
 80117ce:	dd9f      	ble.n	8011710 <__sflush_r+0x18>
 80117d0:	4633      	mov	r3, r6
 80117d2:	463a      	mov	r2, r7
 80117d4:	4628      	mov	r0, r5
 80117d6:	6a21      	ldr	r1, [r4, #32]
 80117d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80117dc:	47e0      	blx	ip
 80117de:	2800      	cmp	r0, #0
 80117e0:	dc06      	bgt.n	80117f0 <__sflush_r+0xf8>
 80117e2:	89a3      	ldrh	r3, [r4, #12]
 80117e4:	f04f 30ff 	mov.w	r0, #4294967295
 80117e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117ec:	81a3      	strh	r3, [r4, #12]
 80117ee:	e790      	b.n	8011712 <__sflush_r+0x1a>
 80117f0:	4407      	add	r7, r0
 80117f2:	1a36      	subs	r6, r6, r0
 80117f4:	e7ea      	b.n	80117cc <__sflush_r+0xd4>
 80117f6:	bf00      	nop
 80117f8:	20400001 	.word	0x20400001

080117fc <_fflush_r>:
 80117fc:	b538      	push	{r3, r4, r5, lr}
 80117fe:	690b      	ldr	r3, [r1, #16]
 8011800:	4605      	mov	r5, r0
 8011802:	460c      	mov	r4, r1
 8011804:	b913      	cbnz	r3, 801180c <_fflush_r+0x10>
 8011806:	2500      	movs	r5, #0
 8011808:	4628      	mov	r0, r5
 801180a:	bd38      	pop	{r3, r4, r5, pc}
 801180c:	b118      	cbz	r0, 8011816 <_fflush_r+0x1a>
 801180e:	6983      	ldr	r3, [r0, #24]
 8011810:	b90b      	cbnz	r3, 8011816 <_fflush_r+0x1a>
 8011812:	f7fe f82d 	bl	800f870 <__sinit>
 8011816:	4b14      	ldr	r3, [pc, #80]	; (8011868 <_fflush_r+0x6c>)
 8011818:	429c      	cmp	r4, r3
 801181a:	d11b      	bne.n	8011854 <_fflush_r+0x58>
 801181c:	686c      	ldr	r4, [r5, #4]
 801181e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d0ef      	beq.n	8011806 <_fflush_r+0xa>
 8011826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011828:	07d0      	lsls	r0, r2, #31
 801182a:	d404      	bmi.n	8011836 <_fflush_r+0x3a>
 801182c:	0599      	lsls	r1, r3, #22
 801182e:	d402      	bmi.n	8011836 <_fflush_r+0x3a>
 8011830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011832:	f7fe fc22 	bl	801007a <__retarget_lock_acquire_recursive>
 8011836:	4628      	mov	r0, r5
 8011838:	4621      	mov	r1, r4
 801183a:	f7ff ff5d 	bl	80116f8 <__sflush_r>
 801183e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011840:	4605      	mov	r5, r0
 8011842:	07da      	lsls	r2, r3, #31
 8011844:	d4e0      	bmi.n	8011808 <_fflush_r+0xc>
 8011846:	89a3      	ldrh	r3, [r4, #12]
 8011848:	059b      	lsls	r3, r3, #22
 801184a:	d4dd      	bmi.n	8011808 <_fflush_r+0xc>
 801184c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801184e:	f7fe fc15 	bl	801007c <__retarget_lock_release_recursive>
 8011852:	e7d9      	b.n	8011808 <_fflush_r+0xc>
 8011854:	4b05      	ldr	r3, [pc, #20]	; (801186c <_fflush_r+0x70>)
 8011856:	429c      	cmp	r4, r3
 8011858:	d101      	bne.n	801185e <_fflush_r+0x62>
 801185a:	68ac      	ldr	r4, [r5, #8]
 801185c:	e7df      	b.n	801181e <_fflush_r+0x22>
 801185e:	4b04      	ldr	r3, [pc, #16]	; (8011870 <_fflush_r+0x74>)
 8011860:	429c      	cmp	r4, r3
 8011862:	bf08      	it	eq
 8011864:	68ec      	ldreq	r4, [r5, #12]
 8011866:	e7da      	b.n	801181e <_fflush_r+0x22>
 8011868:	08013054 	.word	0x08013054
 801186c:	08013074 	.word	0x08013074
 8011870:	08013034 	.word	0x08013034

08011874 <fiprintf>:
 8011874:	b40e      	push	{r1, r2, r3}
 8011876:	b503      	push	{r0, r1, lr}
 8011878:	4601      	mov	r1, r0
 801187a:	ab03      	add	r3, sp, #12
 801187c:	4805      	ldr	r0, [pc, #20]	; (8011894 <fiprintf+0x20>)
 801187e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011882:	6800      	ldr	r0, [r0, #0]
 8011884:	9301      	str	r3, [sp, #4]
 8011886:	f7ff faf1 	bl	8010e6c <_vfiprintf_r>
 801188a:	b002      	add	sp, #8
 801188c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011890:	b003      	add	sp, #12
 8011892:	4770      	bx	lr
 8011894:	20000050 	.word	0x20000050

08011898 <_lseek_r>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	4604      	mov	r4, r0
 801189c:	4608      	mov	r0, r1
 801189e:	4611      	mov	r1, r2
 80118a0:	2200      	movs	r2, #0
 80118a2:	4d05      	ldr	r5, [pc, #20]	; (80118b8 <_lseek_r+0x20>)
 80118a4:	602a      	str	r2, [r5, #0]
 80118a6:	461a      	mov	r2, r3
 80118a8:	f7f0 fb7c 	bl	8001fa4 <_lseek>
 80118ac:	1c43      	adds	r3, r0, #1
 80118ae:	d102      	bne.n	80118b6 <_lseek_r+0x1e>
 80118b0:	682b      	ldr	r3, [r5, #0]
 80118b2:	b103      	cbz	r3, 80118b6 <_lseek_r+0x1e>
 80118b4:	6023      	str	r3, [r4, #0]
 80118b6:	bd38      	pop	{r3, r4, r5, pc}
 80118b8:	20000e08 	.word	0x20000e08

080118bc <__swhatbuf_r>:
 80118bc:	b570      	push	{r4, r5, r6, lr}
 80118be:	460e      	mov	r6, r1
 80118c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118c4:	4614      	mov	r4, r2
 80118c6:	2900      	cmp	r1, #0
 80118c8:	461d      	mov	r5, r3
 80118ca:	b096      	sub	sp, #88	; 0x58
 80118cc:	da08      	bge.n	80118e0 <__swhatbuf_r+0x24>
 80118ce:	2200      	movs	r2, #0
 80118d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80118d4:	602a      	str	r2, [r5, #0]
 80118d6:	061a      	lsls	r2, r3, #24
 80118d8:	d410      	bmi.n	80118fc <__swhatbuf_r+0x40>
 80118da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118de:	e00e      	b.n	80118fe <__swhatbuf_r+0x42>
 80118e0:	466a      	mov	r2, sp
 80118e2:	f000 f91f 	bl	8011b24 <_fstat_r>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	dbf1      	blt.n	80118ce <__swhatbuf_r+0x12>
 80118ea:	9a01      	ldr	r2, [sp, #4]
 80118ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80118f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80118f4:	425a      	negs	r2, r3
 80118f6:	415a      	adcs	r2, r3
 80118f8:	602a      	str	r2, [r5, #0]
 80118fa:	e7ee      	b.n	80118da <__swhatbuf_r+0x1e>
 80118fc:	2340      	movs	r3, #64	; 0x40
 80118fe:	2000      	movs	r0, #0
 8011900:	6023      	str	r3, [r4, #0]
 8011902:	b016      	add	sp, #88	; 0x58
 8011904:	bd70      	pop	{r4, r5, r6, pc}
	...

08011908 <__smakebuf_r>:
 8011908:	898b      	ldrh	r3, [r1, #12]
 801190a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801190c:	079d      	lsls	r5, r3, #30
 801190e:	4606      	mov	r6, r0
 8011910:	460c      	mov	r4, r1
 8011912:	d507      	bpl.n	8011924 <__smakebuf_r+0x1c>
 8011914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011918:	6023      	str	r3, [r4, #0]
 801191a:	6123      	str	r3, [r4, #16]
 801191c:	2301      	movs	r3, #1
 801191e:	6163      	str	r3, [r4, #20]
 8011920:	b002      	add	sp, #8
 8011922:	bd70      	pop	{r4, r5, r6, pc}
 8011924:	466a      	mov	r2, sp
 8011926:	ab01      	add	r3, sp, #4
 8011928:	f7ff ffc8 	bl	80118bc <__swhatbuf_r>
 801192c:	9900      	ldr	r1, [sp, #0]
 801192e:	4605      	mov	r5, r0
 8011930:	4630      	mov	r0, r6
 8011932:	f7ff f8a3 	bl	8010a7c <_malloc_r>
 8011936:	b948      	cbnz	r0, 801194c <__smakebuf_r+0x44>
 8011938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801193c:	059a      	lsls	r2, r3, #22
 801193e:	d4ef      	bmi.n	8011920 <__smakebuf_r+0x18>
 8011940:	f023 0303 	bic.w	r3, r3, #3
 8011944:	f043 0302 	orr.w	r3, r3, #2
 8011948:	81a3      	strh	r3, [r4, #12]
 801194a:	e7e3      	b.n	8011914 <__smakebuf_r+0xc>
 801194c:	4b0d      	ldr	r3, [pc, #52]	; (8011984 <__smakebuf_r+0x7c>)
 801194e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011950:	89a3      	ldrh	r3, [r4, #12]
 8011952:	6020      	str	r0, [r4, #0]
 8011954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011958:	81a3      	strh	r3, [r4, #12]
 801195a:	9b00      	ldr	r3, [sp, #0]
 801195c:	6120      	str	r0, [r4, #16]
 801195e:	6163      	str	r3, [r4, #20]
 8011960:	9b01      	ldr	r3, [sp, #4]
 8011962:	b15b      	cbz	r3, 801197c <__smakebuf_r+0x74>
 8011964:	4630      	mov	r0, r6
 8011966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801196a:	f000 f8ed 	bl	8011b48 <_isatty_r>
 801196e:	b128      	cbz	r0, 801197c <__smakebuf_r+0x74>
 8011970:	89a3      	ldrh	r3, [r4, #12]
 8011972:	f023 0303 	bic.w	r3, r3, #3
 8011976:	f043 0301 	orr.w	r3, r3, #1
 801197a:	81a3      	strh	r3, [r4, #12]
 801197c:	89a0      	ldrh	r0, [r4, #12]
 801197e:	4305      	orrs	r5, r0
 8011980:	81a5      	strh	r5, [r4, #12]
 8011982:	e7cd      	b.n	8011920 <__smakebuf_r+0x18>
 8011984:	0800f809 	.word	0x0800f809

08011988 <malloc>:
 8011988:	4b02      	ldr	r3, [pc, #8]	; (8011994 <malloc+0xc>)
 801198a:	4601      	mov	r1, r0
 801198c:	6818      	ldr	r0, [r3, #0]
 801198e:	f7ff b875 	b.w	8010a7c <_malloc_r>
 8011992:	bf00      	nop
 8011994:	20000050 	.word	0x20000050

08011998 <memchr>:
 8011998:	4603      	mov	r3, r0
 801199a:	b510      	push	{r4, lr}
 801199c:	b2c9      	uxtb	r1, r1
 801199e:	4402      	add	r2, r0
 80119a0:	4293      	cmp	r3, r2
 80119a2:	4618      	mov	r0, r3
 80119a4:	d101      	bne.n	80119aa <memchr+0x12>
 80119a6:	2000      	movs	r0, #0
 80119a8:	e003      	b.n	80119b2 <memchr+0x1a>
 80119aa:	7804      	ldrb	r4, [r0, #0]
 80119ac:	3301      	adds	r3, #1
 80119ae:	428c      	cmp	r4, r1
 80119b0:	d1f6      	bne.n	80119a0 <memchr+0x8>
 80119b2:	bd10      	pop	{r4, pc}

080119b4 <memmove>:
 80119b4:	4288      	cmp	r0, r1
 80119b6:	b510      	push	{r4, lr}
 80119b8:	eb01 0402 	add.w	r4, r1, r2
 80119bc:	d902      	bls.n	80119c4 <memmove+0x10>
 80119be:	4284      	cmp	r4, r0
 80119c0:	4623      	mov	r3, r4
 80119c2:	d807      	bhi.n	80119d4 <memmove+0x20>
 80119c4:	1e43      	subs	r3, r0, #1
 80119c6:	42a1      	cmp	r1, r4
 80119c8:	d008      	beq.n	80119dc <memmove+0x28>
 80119ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80119d2:	e7f8      	b.n	80119c6 <memmove+0x12>
 80119d4:	4601      	mov	r1, r0
 80119d6:	4402      	add	r2, r0
 80119d8:	428a      	cmp	r2, r1
 80119da:	d100      	bne.n	80119de <memmove+0x2a>
 80119dc:	bd10      	pop	{r4, pc}
 80119de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119e6:	e7f7      	b.n	80119d8 <memmove+0x24>

080119e8 <__malloc_lock>:
 80119e8:	4801      	ldr	r0, [pc, #4]	; (80119f0 <__malloc_lock+0x8>)
 80119ea:	f7fe bb46 	b.w	801007a <__retarget_lock_acquire_recursive>
 80119ee:	bf00      	nop
 80119f0:	20000dfc 	.word	0x20000dfc

080119f4 <__malloc_unlock>:
 80119f4:	4801      	ldr	r0, [pc, #4]	; (80119fc <__malloc_unlock+0x8>)
 80119f6:	f7fe bb41 	b.w	801007c <__retarget_lock_release_recursive>
 80119fa:	bf00      	nop
 80119fc:	20000dfc 	.word	0x20000dfc

08011a00 <_free_r>:
 8011a00:	b538      	push	{r3, r4, r5, lr}
 8011a02:	4605      	mov	r5, r0
 8011a04:	2900      	cmp	r1, #0
 8011a06:	d040      	beq.n	8011a8a <_free_r+0x8a>
 8011a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a0c:	1f0c      	subs	r4, r1, #4
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	bfb8      	it	lt
 8011a12:	18e4      	addlt	r4, r4, r3
 8011a14:	f7ff ffe8 	bl	80119e8 <__malloc_lock>
 8011a18:	4a1c      	ldr	r2, [pc, #112]	; (8011a8c <_free_r+0x8c>)
 8011a1a:	6813      	ldr	r3, [r2, #0]
 8011a1c:	b933      	cbnz	r3, 8011a2c <_free_r+0x2c>
 8011a1e:	6063      	str	r3, [r4, #4]
 8011a20:	6014      	str	r4, [r2, #0]
 8011a22:	4628      	mov	r0, r5
 8011a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a28:	f7ff bfe4 	b.w	80119f4 <__malloc_unlock>
 8011a2c:	42a3      	cmp	r3, r4
 8011a2e:	d908      	bls.n	8011a42 <_free_r+0x42>
 8011a30:	6820      	ldr	r0, [r4, #0]
 8011a32:	1821      	adds	r1, r4, r0
 8011a34:	428b      	cmp	r3, r1
 8011a36:	bf01      	itttt	eq
 8011a38:	6819      	ldreq	r1, [r3, #0]
 8011a3a:	685b      	ldreq	r3, [r3, #4]
 8011a3c:	1809      	addeq	r1, r1, r0
 8011a3e:	6021      	streq	r1, [r4, #0]
 8011a40:	e7ed      	b.n	8011a1e <_free_r+0x1e>
 8011a42:	461a      	mov	r2, r3
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	b10b      	cbz	r3, 8011a4c <_free_r+0x4c>
 8011a48:	42a3      	cmp	r3, r4
 8011a4a:	d9fa      	bls.n	8011a42 <_free_r+0x42>
 8011a4c:	6811      	ldr	r1, [r2, #0]
 8011a4e:	1850      	adds	r0, r2, r1
 8011a50:	42a0      	cmp	r0, r4
 8011a52:	d10b      	bne.n	8011a6c <_free_r+0x6c>
 8011a54:	6820      	ldr	r0, [r4, #0]
 8011a56:	4401      	add	r1, r0
 8011a58:	1850      	adds	r0, r2, r1
 8011a5a:	4283      	cmp	r3, r0
 8011a5c:	6011      	str	r1, [r2, #0]
 8011a5e:	d1e0      	bne.n	8011a22 <_free_r+0x22>
 8011a60:	6818      	ldr	r0, [r3, #0]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	4401      	add	r1, r0
 8011a66:	6011      	str	r1, [r2, #0]
 8011a68:	6053      	str	r3, [r2, #4]
 8011a6a:	e7da      	b.n	8011a22 <_free_r+0x22>
 8011a6c:	d902      	bls.n	8011a74 <_free_r+0x74>
 8011a6e:	230c      	movs	r3, #12
 8011a70:	602b      	str	r3, [r5, #0]
 8011a72:	e7d6      	b.n	8011a22 <_free_r+0x22>
 8011a74:	6820      	ldr	r0, [r4, #0]
 8011a76:	1821      	adds	r1, r4, r0
 8011a78:	428b      	cmp	r3, r1
 8011a7a:	bf01      	itttt	eq
 8011a7c:	6819      	ldreq	r1, [r3, #0]
 8011a7e:	685b      	ldreq	r3, [r3, #4]
 8011a80:	1809      	addeq	r1, r1, r0
 8011a82:	6021      	streq	r1, [r4, #0]
 8011a84:	6063      	str	r3, [r4, #4]
 8011a86:	6054      	str	r4, [r2, #4]
 8011a88:	e7cb      	b.n	8011a22 <_free_r+0x22>
 8011a8a:	bd38      	pop	{r3, r4, r5, pc}
 8011a8c:	20000e00 	.word	0x20000e00

08011a90 <_realloc_r>:
 8011a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a94:	4680      	mov	r8, r0
 8011a96:	4614      	mov	r4, r2
 8011a98:	460e      	mov	r6, r1
 8011a9a:	b921      	cbnz	r1, 8011aa6 <_realloc_r+0x16>
 8011a9c:	4611      	mov	r1, r2
 8011a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa2:	f7fe bfeb 	b.w	8010a7c <_malloc_r>
 8011aa6:	b92a      	cbnz	r2, 8011ab4 <_realloc_r+0x24>
 8011aa8:	f7ff ffaa 	bl	8011a00 <_free_r>
 8011aac:	4625      	mov	r5, r4
 8011aae:	4628      	mov	r0, r5
 8011ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ab4:	f000 f858 	bl	8011b68 <_malloc_usable_size_r>
 8011ab8:	4284      	cmp	r4, r0
 8011aba:	4607      	mov	r7, r0
 8011abc:	d802      	bhi.n	8011ac4 <_realloc_r+0x34>
 8011abe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011ac2:	d812      	bhi.n	8011aea <_realloc_r+0x5a>
 8011ac4:	4621      	mov	r1, r4
 8011ac6:	4640      	mov	r0, r8
 8011ac8:	f7fe ffd8 	bl	8010a7c <_malloc_r>
 8011acc:	4605      	mov	r5, r0
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d0ed      	beq.n	8011aae <_realloc_r+0x1e>
 8011ad2:	42bc      	cmp	r4, r7
 8011ad4:	4622      	mov	r2, r4
 8011ad6:	4631      	mov	r1, r6
 8011ad8:	bf28      	it	cs
 8011ada:	463a      	movcs	r2, r7
 8011adc:	f7fc fefa 	bl	800e8d4 <memcpy>
 8011ae0:	4631      	mov	r1, r6
 8011ae2:	4640      	mov	r0, r8
 8011ae4:	f7ff ff8c 	bl	8011a00 <_free_r>
 8011ae8:	e7e1      	b.n	8011aae <_realloc_r+0x1e>
 8011aea:	4635      	mov	r5, r6
 8011aec:	e7df      	b.n	8011aae <_realloc_r+0x1e>
	...

08011af0 <_read_r>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	4604      	mov	r4, r0
 8011af4:	4608      	mov	r0, r1
 8011af6:	4611      	mov	r1, r2
 8011af8:	2200      	movs	r2, #0
 8011afa:	4d05      	ldr	r5, [pc, #20]	; (8011b10 <_read_r+0x20>)
 8011afc:	602a      	str	r2, [r5, #0]
 8011afe:	461a      	mov	r2, r3
 8011b00:	f7f0 f9f3 	bl	8001eea <_read>
 8011b04:	1c43      	adds	r3, r0, #1
 8011b06:	d102      	bne.n	8011b0e <_read_r+0x1e>
 8011b08:	682b      	ldr	r3, [r5, #0]
 8011b0a:	b103      	cbz	r3, 8011b0e <_read_r+0x1e>
 8011b0c:	6023      	str	r3, [r4, #0]
 8011b0e:	bd38      	pop	{r3, r4, r5, pc}
 8011b10:	20000e08 	.word	0x20000e08

08011b14 <abort>:
 8011b14:	2006      	movs	r0, #6
 8011b16:	b508      	push	{r3, lr}
 8011b18:	f000 f856 	bl	8011bc8 <raise>
 8011b1c:	2001      	movs	r0, #1
 8011b1e:	f7f0 f9da 	bl	8001ed6 <_exit>
	...

08011b24 <_fstat_r>:
 8011b24:	b538      	push	{r3, r4, r5, lr}
 8011b26:	2300      	movs	r3, #0
 8011b28:	4d06      	ldr	r5, [pc, #24]	; (8011b44 <_fstat_r+0x20>)
 8011b2a:	4604      	mov	r4, r0
 8011b2c:	4608      	mov	r0, r1
 8011b2e:	4611      	mov	r1, r2
 8011b30:	602b      	str	r3, [r5, #0]
 8011b32:	f7f0 fa1e 	bl	8001f72 <_fstat>
 8011b36:	1c43      	adds	r3, r0, #1
 8011b38:	d102      	bne.n	8011b40 <_fstat_r+0x1c>
 8011b3a:	682b      	ldr	r3, [r5, #0]
 8011b3c:	b103      	cbz	r3, 8011b40 <_fstat_r+0x1c>
 8011b3e:	6023      	str	r3, [r4, #0]
 8011b40:	bd38      	pop	{r3, r4, r5, pc}
 8011b42:	bf00      	nop
 8011b44:	20000e08 	.word	0x20000e08

08011b48 <_isatty_r>:
 8011b48:	b538      	push	{r3, r4, r5, lr}
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	4d05      	ldr	r5, [pc, #20]	; (8011b64 <_isatty_r+0x1c>)
 8011b4e:	4604      	mov	r4, r0
 8011b50:	4608      	mov	r0, r1
 8011b52:	602b      	str	r3, [r5, #0]
 8011b54:	f7f0 fa1c 	bl	8001f90 <_isatty>
 8011b58:	1c43      	adds	r3, r0, #1
 8011b5a:	d102      	bne.n	8011b62 <_isatty_r+0x1a>
 8011b5c:	682b      	ldr	r3, [r5, #0]
 8011b5e:	b103      	cbz	r3, 8011b62 <_isatty_r+0x1a>
 8011b60:	6023      	str	r3, [r4, #0]
 8011b62:	bd38      	pop	{r3, r4, r5, pc}
 8011b64:	20000e08 	.word	0x20000e08

08011b68 <_malloc_usable_size_r>:
 8011b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b6c:	1f18      	subs	r0, r3, #4
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	bfbc      	itt	lt
 8011b72:	580b      	ldrlt	r3, [r1, r0]
 8011b74:	18c0      	addlt	r0, r0, r3
 8011b76:	4770      	bx	lr

08011b78 <_raise_r>:
 8011b78:	291f      	cmp	r1, #31
 8011b7a:	b538      	push	{r3, r4, r5, lr}
 8011b7c:	4604      	mov	r4, r0
 8011b7e:	460d      	mov	r5, r1
 8011b80:	d904      	bls.n	8011b8c <_raise_r+0x14>
 8011b82:	2316      	movs	r3, #22
 8011b84:	6003      	str	r3, [r0, #0]
 8011b86:	f04f 30ff 	mov.w	r0, #4294967295
 8011b8a:	bd38      	pop	{r3, r4, r5, pc}
 8011b8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011b8e:	b112      	cbz	r2, 8011b96 <_raise_r+0x1e>
 8011b90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b94:	b94b      	cbnz	r3, 8011baa <_raise_r+0x32>
 8011b96:	4620      	mov	r0, r4
 8011b98:	f000 f830 	bl	8011bfc <_getpid_r>
 8011b9c:	462a      	mov	r2, r5
 8011b9e:	4601      	mov	r1, r0
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ba6:	f000 b817 	b.w	8011bd8 <_kill_r>
 8011baa:	2b01      	cmp	r3, #1
 8011bac:	d00a      	beq.n	8011bc4 <_raise_r+0x4c>
 8011bae:	1c59      	adds	r1, r3, #1
 8011bb0:	d103      	bne.n	8011bba <_raise_r+0x42>
 8011bb2:	2316      	movs	r3, #22
 8011bb4:	6003      	str	r3, [r0, #0]
 8011bb6:	2001      	movs	r0, #1
 8011bb8:	e7e7      	b.n	8011b8a <_raise_r+0x12>
 8011bba:	2400      	movs	r4, #0
 8011bbc:	4628      	mov	r0, r5
 8011bbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011bc2:	4798      	blx	r3
 8011bc4:	2000      	movs	r0, #0
 8011bc6:	e7e0      	b.n	8011b8a <_raise_r+0x12>

08011bc8 <raise>:
 8011bc8:	4b02      	ldr	r3, [pc, #8]	; (8011bd4 <raise+0xc>)
 8011bca:	4601      	mov	r1, r0
 8011bcc:	6818      	ldr	r0, [r3, #0]
 8011bce:	f7ff bfd3 	b.w	8011b78 <_raise_r>
 8011bd2:	bf00      	nop
 8011bd4:	20000050 	.word	0x20000050

08011bd8 <_kill_r>:
 8011bd8:	b538      	push	{r3, r4, r5, lr}
 8011bda:	2300      	movs	r3, #0
 8011bdc:	4d06      	ldr	r5, [pc, #24]	; (8011bf8 <_kill_r+0x20>)
 8011bde:	4604      	mov	r4, r0
 8011be0:	4608      	mov	r0, r1
 8011be2:	4611      	mov	r1, r2
 8011be4:	602b      	str	r3, [r5, #0]
 8011be6:	f7f0 f966 	bl	8001eb6 <_kill>
 8011bea:	1c43      	adds	r3, r0, #1
 8011bec:	d102      	bne.n	8011bf4 <_kill_r+0x1c>
 8011bee:	682b      	ldr	r3, [r5, #0]
 8011bf0:	b103      	cbz	r3, 8011bf4 <_kill_r+0x1c>
 8011bf2:	6023      	str	r3, [r4, #0]
 8011bf4:	bd38      	pop	{r3, r4, r5, pc}
 8011bf6:	bf00      	nop
 8011bf8:	20000e08 	.word	0x20000e08

08011bfc <_getpid_r>:
 8011bfc:	f7f0 b954 	b.w	8001ea8 <_getpid>

08011c00 <_init>:
 8011c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c02:	bf00      	nop
 8011c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c06:	bc08      	pop	{r3}
 8011c08:	469e      	mov	lr, r3
 8011c0a:	4770      	bx	lr

08011c0c <_fini>:
 8011c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c0e:	bf00      	nop
 8011c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c12:	bc08      	pop	{r3}
 8011c14:	469e      	mov	lr, r3
 8011c16:	4770      	bx	lr
